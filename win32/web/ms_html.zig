//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (6755)
//--------------------------------------------------------------------------------
pub const DISPID_STYLESHEETSCOLLECTION_NAMED_MAX = @as(u32, 1999999);
pub const DISPID_AMBIENT_OFFLINEIFNOTCONNECTED = @as(i32, -5501);
pub const DISPID_AMBIENT_SILENT = @as(i32, -5502);
pub const SID_SEditCommandTarget = Guid.initString("3050f4b5-98b5-11cf-bb82-00aa00bdce0b");
pub const CGID_EditStateCommands = Guid.initString("3050f4b6-98b5-11cf-bb82-00aa00bdce0b");
pub const SID_SHTMLEditHost = Guid.initString("3050f6a0-98b5-11cf-bb82-00aa00bdce0b");
pub const SID_SHTMLEditServices = Guid.initString("3050f7f9-98b5-11cf-bb82-00aa00bdce0b");
pub const COOKIEACTION_NONE = @as(u32, 0);
pub const COOKIEACTION_ACCEPT = @as(u32, 1);
pub const COOKIEACTION_REJECT = @as(u32, 2);
pub const COOKIEACTION_DOWNGRADE = @as(u32, 4);
pub const COOKIEACTION_LEASH = @as(u32, 8);
pub const COOKIEACTION_SUPPRESS = @as(u32, 16);
pub const COOKIEACTION_READ = @as(u32, 32);
pub const PRIVACY_URLISTOPLEVEL = @as(u32, 65536);
pub const PRIVACY_URLHASCOMPACTPOLICY = @as(u32, 131072);
pub const PRIVACY_URLHASPOSTDATA = @as(u32, 524288);
pub const PRIVACY_URLHASPOLICYREFLINK = @as(u32, 1048576);
pub const PRIVACY_URLHASPOLICYREFHEADER = @as(u32, 2097152);
pub const PRIVACY_URLHASP3PHEADER = @as(u32, 4194304);
pub const DEBUGCALLBACKNOTIFICATION_TIMEOUT = @as(u32, 1);
pub const DEBUGCALLBACKNOTIFICATION_INTERVAL = @as(u32, 2);
pub const DEBUGCALLBACKNOTIFICATION_IMMEDIATE = @as(u32, 4);
pub const DEBUGCALLBACKNOTIFICATION_ANIMATIONFRAME = @as(u32, 8);
pub const DEBUGCALLBACKNOTIFICATION_DOMEVENT = @as(u32, 16);
pub const DEBUGDOMEVENTPROPAGATIONSTATUS_DEFAULTCANCELED = @as(u32, 1);
pub const DEBUGDOMEVENTPROPAGATIONSTATUS_STOPIMMEDIATEPROPAGATION = @as(u32, 2);
pub const DEBUGDOMEVENTPROPAGATIONSTATUS_STOPPROPAGATION = @as(u32, 4);
pub const DISPID_BEFORENAVIGATE = @as(u32, 100);
pub const DISPID_NAVIGATECOMPLETE = @as(u32, 101);
pub const DISPID_STATUSTEXTCHANGE = @as(u32, 102);
pub const DISPID_QUIT = @as(u32, 103);
pub const DISPID_DOWNLOADCOMPLETE = @as(u32, 104);
pub const DISPID_COMMANDSTATECHANGE = @as(u32, 105);
pub const DISPID_DOWNLOADBEGIN = @as(u32, 106);
pub const DISPID_NEWWINDOW = @as(u32, 107);
pub const DISPID_PROGRESSCHANGE = @as(u32, 108);
pub const DISPID_WINDOWMOVE = @as(u32, 109);
pub const DISPID_WINDOWRESIZE = @as(u32, 110);
pub const DISPID_WINDOWACTIVATE = @as(u32, 111);
pub const DISPID_PROPERTYCHANGE = @as(u32, 112);
pub const DISPID_TITLECHANGE = @as(u32, 113);
pub const DISPID_TITLEICONCHANGE = @as(u32, 114);
pub const DISPID_FRAMEBEFORENAVIGATE = @as(u32, 200);
pub const DISPID_FRAMENAVIGATECOMPLETE = @as(u32, 201);
pub const DISPID_FRAMENEWWINDOW = @as(u32, 204);
pub const DISPID_BEFORENAVIGATE2 = @as(u32, 250);
pub const DISPID_NEWWINDOW2 = @as(u32, 251);
pub const DISPID_NAVIGATECOMPLETE2 = @as(u32, 252);
pub const DISPID_ONQUIT = @as(u32, 253);
pub const DISPID_ONVISIBLE = @as(u32, 254);
pub const DISPID_ONTOOLBAR = @as(u32, 255);
pub const DISPID_ONMENUBAR = @as(u32, 256);
pub const DISPID_ONSTATUSBAR = @as(u32, 257);
pub const DISPID_ONFULLSCREEN = @as(u32, 258);
pub const DISPID_DOCUMENTCOMPLETE = @as(u32, 259);
pub const DISPID_ONTHEATERMODE = @as(u32, 260);
pub const DISPID_ONADDRESSBAR = @as(u32, 261);
pub const DISPID_WINDOWSETRESIZABLE = @as(u32, 262);
pub const DISPID_WINDOWCLOSING = @as(u32, 263);
pub const DISPID_WINDOWSETLEFT = @as(u32, 264);
pub const DISPID_WINDOWSETTOP = @as(u32, 265);
pub const DISPID_WINDOWSETWIDTH = @as(u32, 266);
pub const DISPID_WINDOWSETHEIGHT = @as(u32, 267);
pub const DISPID_CLIENTTOHOSTWINDOW = @as(u32, 268);
pub const DISPID_SETSECURELOCKICON = @as(u32, 269);
pub const DISPID_FILEDOWNLOAD = @as(u32, 270);
pub const DISPID_NAVIGATEERROR = @as(u32, 271);
pub const DISPID_PRIVACYIMPACTEDSTATECHANGE = @as(u32, 272);
pub const DISPID_NEWWINDOW3 = @as(u32, 273);
pub const DISPID_VIEWUPDATE = @as(u32, 281);
pub const DISPID_SETPHISHINGFILTERSTATUS = @as(u32, 282);
pub const DISPID_WINDOWSTATECHANGED = @as(u32, 283);
pub const DISPID_NEWPROCESS = @as(u32, 284);
pub const DISPID_THIRDPARTYURLBLOCKED = @as(u32, 285);
pub const DISPID_REDIRECTXDOMAINBLOCKED = @as(u32, 286);
pub const DISPID_WEBWORKERSTARTED = @as(u32, 288);
pub const DISPID_WEBWORKERFINISHED = @as(u32, 289);
pub const DISPID_BEFORESCRIPTEXECUTE = @as(u32, 290);
pub const DISPID_PRINTTEMPLATEINSTANTIATION = @as(u32, 225);
pub const DISPID_PRINTTEMPLATETEARDOWN = @as(u32, 226);
pub const DISPID_UPDATEPAGESTATUS = @as(u32, 227);
pub const DISPID_WINDOWREGISTERED = @as(u32, 200);
pub const DISPID_WINDOWREVOKED = @as(u32, 201);
pub const DISPID_RESETFIRSTBOOTMODE = @as(u32, 1);
pub const DISPID_RESETSAFEMODE = @as(u32, 2);
pub const DISPID_REFRESHOFFLINEDESKTOP = @as(u32, 3);
pub const DISPID_ADDFAVORITE = @as(u32, 4);
pub const DISPID_ADDCHANNEL = @as(u32, 5);
pub const DISPID_ADDDESKTOPCOMPONENT = @as(u32, 6);
pub const DISPID_ISSUBSCRIBED = @as(u32, 7);
pub const DISPID_NAVIGATEANDFIND = @as(u32, 8);
pub const DISPID_IMPORTEXPORTFAVORITES = @as(u32, 9);
pub const DISPID_AUTOCOMPLETESAVEFORM = @as(u32, 10);
pub const DISPID_AUTOSCAN = @as(u32, 11);
pub const DISPID_AUTOCOMPLETEATTACH = @as(u32, 12);
pub const DISPID_SHOWBROWSERUI = @as(u32, 13);
pub const DISPID_ADDSEARCHPROVIDER = @as(u32, 14);
pub const DISPID_RUNONCESHOWN = @as(u32, 15);
pub const DISPID_SKIPRUNONCE = @as(u32, 16);
pub const DISPID_CUSTOMIZESETTINGS = @as(u32, 17);
pub const DISPID_SQMENABLED = @as(u32, 18);
pub const DISPID_PHISHINGENABLED = @as(u32, 19);
pub const DISPID_BRANDIMAGEURI = @as(u32, 20);
pub const DISPID_SKIPTABSWELCOME = @as(u32, 21);
pub const DISPID_DIAGNOSECONNECTION = @as(u32, 22);
pub const DISPID_CUSTOMIZECLEARTYPE = @as(u32, 23);
pub const DISPID_ISSEARCHPROVIDERINSTALLED = @as(u32, 24);
pub const DISPID_ISSEARCHMIGRATED = @as(u32, 25);
pub const DISPID_DEFAULTSEARCHPROVIDER = @as(u32, 26);
pub const DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE = @as(u32, 27);
pub const DISPID_RUNONCEHASSHOWN = @as(u32, 28);
pub const DISPID_SEARCHGUIDEURL = @as(u32, 29);
pub const DISPID_ADDSERVICE = @as(u32, 30);
pub const DISPID_ISSERVICEINSTALLED = @as(u32, 31);
pub const DISPID_ADDTOFAVORITESBAR = @as(u32, 32);
pub const DISPID_BUILDNEWTABPAGE = @as(u32, 33);
pub const DISPID_SETRECENTLYCLOSEDVISIBLE = @as(u32, 34);
pub const DISPID_SETACTIVITIESVISIBLE = @as(u32, 35);
pub const DISPID_CONTENTDISCOVERYRESET = @as(u32, 36);
pub const DISPID_INPRIVATEFILTERINGENABLED = @as(u32, 37);
pub const DISPID_SUGGESTEDSITESENABLED = @as(u32, 38);
pub const DISPID_ENABLESUGGESTEDSITES = @as(u32, 39);
pub const DISPID_NAVIGATETOSUGGESTEDSITES = @as(u32, 40);
pub const DISPID_SHOWTABSHELP = @as(u32, 41);
pub const DISPID_SHOWINPRIVATEHELP = @as(u32, 42);
pub const DISPID_ISSITEMODE = @as(u32, 43);
pub const DISPID_SETSITEMODEICONOVERLAY = @as(u32, 44);
pub const DISPID_CLEARSITEMODEICONOVERLAY = @as(u32, 45);
pub const DISPID_UPDATETHUMBNAILBUTTON = @as(u32, 46);
pub const DISPID_SETTHUMBNAILBUTTONS = @as(u32, 47);
pub const DISPID_ADDTHUMBNAILBUTTONS = @as(u32, 48);
pub const DISPID_ADDSITEMODE = @as(u32, 49);
pub const DISPID_SETSITEMODEPROPERTIES = @as(u32, 50);
pub const DISPID_SITEMODECREATEJUMPLIST = @as(u32, 51);
pub const DISPID_SITEMODEADDJUMPLISTITEM = @as(u32, 52);
pub const DISPID_SITEMODECLEARJUMPLIST = @as(u32, 53);
pub const DISPID_SITEMODEADDBUTTONSTYLE = @as(u32, 54);
pub const DISPID_SITEMODESHOWBUTTONSTYLE = @as(u32, 55);
pub const DISPID_SITEMODESHOWJUMPLIST = @as(u32, 56);
pub const DISPID_ADDTRACKINGPROTECTIONLIST = @as(u32, 57);
pub const DISPID_SITEMODEACTIVATE = @as(u32, 58);
pub const DISPID_ISSITEMODEFIRSTRUN = @as(u32, 59);
pub const DISPID_TRACKINGPROTECTIONENABLED = @as(u32, 60);
pub const DISPID_ACTIVEXFILTERINGENABLED = @as(u32, 61);
pub const DISPID_PROVISIONNETWORKS = @as(u32, 62);
pub const DISPID_REPORTSAFEURL = @as(u32, 63);
pub const DISPID_SITEMODEREFRESHBADGE = @as(u32, 64);
pub const DISPID_SITEMODECLEARBADGE = @as(u32, 65);
pub const DISPID_DIAGNOSECONNECTIONUILESS = @as(u32, 66);
pub const DISPID_LAUNCHNETWORKCLIENTHELP = @as(u32, 67);
pub const DISPID_CHANGEDEFAULTBROWSER = @as(u32, 68);
pub const DISPID_STOPPERIODICUPDATE = @as(u32, 69);
pub const DISPID_STARTPERIODICUPDATE = @as(u32, 70);
pub const DISPID_CLEARNOTIFICATION = @as(u32, 71);
pub const DISPID_ENABLENOTIFICATIONQUEUE = @as(u32, 72);
pub const DISPID_PINNEDSITESTATE = @as(u32, 73);
pub const DISPID_LAUNCHINTERNETOPTIONS = @as(u32, 74);
pub const DISPID_STARTPERIODICUPDATEBATCH = @as(u32, 75);
pub const DISPID_ENABLENOTIFICATIONQUEUESQUARE = @as(u32, 76);
pub const DISPID_ENABLENOTIFICATIONQUEUEWIDE = @as(u32, 77);
pub const DISPID_ENABLENOTIFICATIONQUEUELARGE = @as(u32, 78);
pub const DISPID_SCHEDULEDTILENOTIFICATION = @as(u32, 79);
pub const DISPID_REMOVESCHEDULEDTILENOTIFICATION = @as(u32, 80);
pub const DISPID_STARTBADGEUPDATE = @as(u32, 81);
pub const DISPID_STOPBADGEUPDATE = @as(u32, 82);
pub const DISPID_ISMETAREFERRERAVAILABLE = @as(u32, 83);
pub const DISPID_SETEXPERIMENTALFLAG = @as(u32, 84);
pub const DISPID_GETEXPERIMENTALFLAG = @as(u32, 85);
pub const DISPID_SETEXPERIMENTALVALUE = @as(u32, 86);
pub const DISPID_GETEXPERIMENTALVALUE = @as(u32, 87);
pub const DISPID_HASNEEDIEAUTOLAUNCHFLAG = @as(u32, 88);
pub const DISPID_GETNEEDIEAUTOLAUNCHFLAG = @as(u32, 89);
pub const DISPID_SETNEEDIEAUTOLAUNCHFLAG = @as(u32, 90);
pub const DISPID_LAUNCHIE = @as(u32, 91);
pub const DISPID_RESETEXPERIMENTALFLAGS = @as(u32, 92);
pub const DISPID_GETCVLISTDATA = @as(u32, 93);
pub const DISPID_GETCVLISTLOCALDATA = @as(u32, 94);
pub const DISPID_GETEMIELISTDATA = @as(u32, 95);
pub const DISPID_GETEMIELISTLOCALDATA = @as(u32, 96);
pub const DISPID_OPENFAVORITESPANE = @as(u32, 97);
pub const DISPID_OPENFAVORITESSETTINGS = @as(u32, 98);
pub const DISPID_LAUNCHINHVSI = @as(u32, 99);
pub const DISPID_GETNEEDHVSIAUTOLAUNCHFLAG = @as(u32, 100);
pub const DISPID_SETNEEDHVSIAUTOLAUNCHFLAG = @as(u32, 101);
pub const DISPID_HASNEEDHVSIAUTOLAUNCHFLAG = @as(u32, 102);
pub const DISPID_GETOSSKU = @as(u32, 103);
pub const DISPID_SETMSDEFAULTS = @as(u32, 104);
pub const DISPID_SHELLUIHELPERLAST = @as(u32, 105);
pub const DISPID_ADVANCEERROR = @as(u32, 10);
pub const DISPID_RETREATERROR = @as(u32, 11);
pub const DISPID_CANADVANCEERROR = @as(u32, 12);
pub const DISPID_CANRETREATERROR = @as(u32, 13);
pub const DISPID_GETERRORLINE = @as(u32, 14);
pub const DISPID_GETERRORCHAR = @as(u32, 15);
pub const DISPID_GETERRORCODE = @as(u32, 16);
pub const DISPID_GETERRORMSG = @as(u32, 17);
pub const DISPID_GETERRORURL = @as(u32, 18);
pub const DISPID_GETDETAILSSTATE = @as(u32, 19);
pub const DISPID_SETDETAILSSTATE = @as(u32, 20);
pub const DISPID_GETPERERRSTATE = @as(u32, 21);
pub const DISPID_SETPERERRSTATE = @as(u32, 22);
pub const DISPID_GETALWAYSSHOWLOCKSTATE = @as(u32, 23);
pub const DISPID_FAVSELECTIONCHANGE = @as(u32, 1);
pub const DISPID_SELECTIONCHANGE = @as(u32, 2);
pub const DISPID_DOUBLECLICK = @as(u32, 3);
pub const DISPID_INITIALIZED = @as(u32, 4);
pub const DISPID_MOVESELECTIONUP = @as(u32, 1);
pub const DISPID_MOVESELECTIONDOWN = @as(u32, 2);
pub const DISPID_RESETSORT = @as(u32, 3);
pub const DISPID_NEWFOLDER = @as(u32, 4);
pub const DISPID_SYNCHRONIZE = @as(u32, 5);
pub const DISPID_IMPORT = @as(u32, 6);
pub const DISPID_EXPORT = @as(u32, 7);
pub const DISPID_INVOKECONTEXTMENU = @as(u32, 8);
pub const DISPID_MOVESELECTIONTO = @as(u32, 9);
pub const DISPID_SUBSCRIPTIONSENABLED = @as(u32, 10);
pub const DISPID_CREATESUBSCRIPTION = @as(u32, 11);
pub const DISPID_DELETESUBSCRIPTION = @as(u32, 12);
pub const DISPID_SETROOT = @as(u32, 13);
pub const DISPID_ENUMOPTIONS = @as(u32, 14);
pub const DISPID_SELECTEDITEM = @as(u32, 15);
pub const DISPID_ROOT = @as(u32, 16);
pub const DISPID_DEPTH = @as(u32, 17);
pub const DISPID_MODE = @as(u32, 18);
pub const DISPID_FLAGS = @as(u32, 19);
pub const DISPID_TVFLAGS = @as(u32, 20);
pub const DISPID_NSCOLUMNS = @as(u32, 21);
pub const DISPID_COUNTVIEWTYPES = @as(u32, 22);
pub const DISPID_SETVIEWTYPE = @as(u32, 23);
pub const DISPID_SELECTEDITEMS = @as(u32, 24);
pub const DISPID_EXPAND = @as(u32, 25);
pub const DISPID_UNSELECTALL = @as(u32, 26);
pub const TF_NAVIGATE = @as(u32, 2142153644);
pub const TARGET_NOTIFY_OBJECT_NAME = "863a99a0-21bc-11d0-82b4-00a0c90c29c5";
pub const IEPROCESS_MODULE_NAME = "IERtUtil.dll";
pub const IEGetProcessModule_PROC_NAME = "IEGetProcessModule";
pub const IEGetTabWindowExports_PROC_NAME = "IEGetTabWindowExports";
pub const TSZMICROSOFTPATH = "Software\\Microsoft";
pub const SZ_IE_MAIN = "Main";
pub const REGSTR_VAL_SMOOTHSCROLL = "SmoothScroll";
pub const REGSTR_VAL_SMOOTHSCROLL_DEF = @as(u32, 1);
pub const REGSTR_VAL_SHOWTOOLBAR = "Show_ToolBar";
pub const REGSTR_VAL_SHOWADDRESSBAR = "Show_URLToolBar";
pub const REGSTR_VAL_STARTPAGE = "Start Page";
pub const REGSTRA_VAL_STARTPAGE = "Start Page";
pub const REGSTR_VAL_SEARCHPAGE = "Search Page";
pub const REGSTR_VAL_LOCALPAGE = "Local Page";
pub const REGSTR_VAL_USESTYLESHEETS = "Use Stylesheets";
pub const REGSTR_VAL_USESTYLESHEETS_DEF = "yes";
pub const REGSTR_VAL_USEICM = "UseICM";
pub const REGSTR_VAL_USEICM_DEF = @as(u32, 0);
pub const REGSTR_VAL_SHOWFOCUS = "Tabstop - MouseDown";
pub const REGSTR_VAL_SHOWFOCUS_DEF = "no";
pub const REGSTR_VAL_LOADIMAGES = "Display Inline Images";
pub const REGSTR_VAL_PLAYSOUNDS = "Play_Background_Sounds";
pub const REGSTR_VAL_PLAYVIDEOS = "Display Inline Videos";
pub const REGSTR_VAL_ANCHORUNDERLINE = "Anchor Underline";
pub const REGSTR_VAL_USEDLGCOLORS = "Use_DlgBox_Colors";
pub const REGSTR_VAL_CHECKASSOC = "Check_Associations";
pub const REGSTR_VAL_SHOWFULLURLS = "Show_FullURL";
pub const REGSTR_VAL_AUTOSEARCH = "Do404Search";
pub const REGSTR_VAL_AUTONAVIGATE = "SearchForExtensions";
pub const REGSTR_VAL_HTTP_ERRORS = "Friendly http errors";
pub const REGSTR_VAL_USEIBAR = "UseBar";
pub const SZ_IE_SETTINGS = "Settings";
pub const REGSTR_VAL_IE_CUSTOMCOLORS = "Custom Colors";
pub const REGSTR_VAL_ANCHORCOLOR = "Anchor Color";
pub const REGSTR_VAL_ANCHORCOLORVISITED = "Anchor Color Visited";
pub const REGSTR_VAL_BACKGROUNDCOLOR = "Background Color";
pub const REGSTR_VAL_TEXTCOLOR = "Text Color";
pub const REGSTR_VAL_ANCHORCOLORHOVER = "Anchor Color Hover";
pub const REGSTR_VAL_USEHOVERCOLOR = "Use Anchor Hover Color";
pub const SZ_IE_SECURITY = "Security";
pub const REGSTR_VAL_SAFETYWARNINGLEVEL = "Safety Warning Level";
pub const SZ_IE_DEFAULT_HTML_EDITOR = "Default HTML Editor";
pub const REGSTR_VAL_USEAUTOAPPEND = "Append Completion";
pub const REGSTR_VAL_USEAUTOSUGGEST = "AutoSuggest";
pub const REGSTR_VAL_USEAUTOCOMPLETE = "Use AutoComplete";
pub const SZ_IE_IBAR = "Bar";
pub const SZ_IE_IBAR_BANDS = "Bands";
pub const REGSTR_VAL_USERAGENT = "User Agent";
pub const REGSTR_VAL_INTERNETENTRY = "InternetProfile";
pub const REGSTR_VAL_INTERNETPROFILE = "InternetProfile";
pub const REGSTR_VAL_INTERNETENTRYBKUP = "BackupInternetProfile";
pub const REGSTR_VAL_CODEDOWNLOAD = "Code Download";
pub const REGSTR_VAL_CODEDOWNLOAD_DEF = "yes";
pub const REGSTR_PATH_INETCPL_RESTRICTIONS = "Software\\Policies\\Microsoft\\Internet Explorer\\Control Panel";
pub const REGSTR_VAL_INETCPL_GENERALTAB = "GeneralTab";
pub const REGSTR_VAL_INETCPL_SECURITYTAB = "SecurityTab";
pub const REGSTR_VAL_INETCPL_CONTENTTAB = "ContentTab";
pub const REGSTR_VAL_INETCPL_CONNECTIONSTAB = "ConnectionsTab";
pub const REGSTR_VAL_INETCPL_PROGRAMSTAB = "ProgramsTab";
pub const REGSTR_VAL_INETCPL_ADVANCEDTAB = "AdvancedTab";
pub const REGSTR_VAL_INETCPL_PRIVACYTAB = "PrivacyTab";
pub const REGSTR_VAL_INETCPL_IEAK = "IEAKContext";
pub const REGSTR_VAL_DIRECTORY = "Directory";
pub const REGSTR_VAL_NEWDIRECTORY = "NewDirectory";
pub const REGSTR_VAL_CACHEPREFIX = "CachePrefix";
pub const SZ_IE_SEARCHSTRINGS = "UrlTemplate";
pub const MAX_SEARCH_FORMAT_STRING = @as(u32, 255);
pub const SZ_IE_THRESHOLDS = "ErrorThresholds";
pub const REGSTR_VAL_ACCESSMEDIUM = "AccessMedium";
pub const REGSTR_VAL_ACCESSTYPE = "AccessType";
pub const REGSTR_VAL_AUTODIALDLLNAME = "AutodialDllName";
pub const REGSTR_VAL_AUTODIALFCNNAME = "AutodialFcnName";
pub const REGSTR_VAL_AUTODIAL_MONITORCLASSNAME = "MS_AutodialMonitor";
pub const REGSTR_VAL_AUTODIAL_TRYONLYONCE = "TryAutodialOnce";
pub const REGSTR_PATH_REMOTEACCESS = "RemoteAccess";
pub const REGSTR_PATH_REMOTEACESS = "RemoteAccess";
pub const REGSTR_VAL_RNAINSTALLED = "Installed";
pub const REGSTR_VAL_ENABLEAUTODIAL = "EnableAutodial";
pub const REGSTR_VAL_ENABLEUNATTENDED = "EnableUnattended";
pub const REGSTR_VAL_NONETAUTODIAL = "NoNetAutodial";
pub const REGSTR_VAL_REDIALATTEMPTS = "RedialAttempts";
pub const REGSTR_VAL_REDIALINTERVAL = "RedialWait";
pub const REGSTR_VAL_ENABLEAUTODIALDISCONNECT = "EnableAutodisconnect";
pub const REGSTR_VAL_ENABLEAUTODISCONNECT = "EnableAutodisconnect";
pub const REGSTR_VAL_ENABLEEXITDISCONNECT = "EnableExitDisconnect";
pub const REGSTR_VAL_ENABLESECURITYCHECK = "EnableSecurityCheck";
pub const REGSTR_VAL_COVEREXCLUDE = "CoverExclude";
pub const REGSTR_VAL_DISCONNECTIDLETIME = "DisconnectIdleTime";
pub const REGSTR_VAL_MOSDISCONNECT = "DisconnectTimeout";
pub const REGSTR_VAL_PROXYENABLE = "ProxyEnable";
pub const REGSTR_VAL_PROXYSERVER = "ProxyServer";
pub const REGSTR_VAL_PROXYOVERRIDE = "ProxyOverride";
pub const REGSTR_VAL_BYPASSAUTOCONFIG = "BypassAutoconfig";
pub const SZTRUSTWARNLEVEL = "Trust Warning Level";
pub const REGSTR_VAL_TRUSTWARNINGLEVEL_HIGH = "High";
pub const REGSTR_VAL_TRUSTWARNINGLEVEL_MED = "Medium";
pub const REGSTR_VAL_TRUSTWARNINGLEVEL_LOW = "No Security";
pub const REGSTR_VAL_SECURITYWARNONSEND = "WarnOnPost";
pub const REGSTR_VAL_SECURITYWARNONSEND_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYWARNONSENDALWAYS = "WarnAlwaysOnPost";
pub const REGSTR_VAL_SECURITYWARNONSENDALWAYS_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYWARNONVIEW = "WarnOnView";
pub const REGSTR_VAL_SECURITYWARNONVIEW_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYALLOWCOOKIES = "AllowCookies";
pub const REGSTR_VAL_SECURITYALLOWCOOKIES_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYWARNONZONECROSSING = "WarnOnZoneCrossing";
pub const REGSTR_VAL_SECURITYWARNONZONECROSSING_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYWARNONBADCERTVIEWING = "WarnOnBadCertRecving";
pub const REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYWARNONBADCERTSENDING = "WarnOnBadCertSending";
pub const REGSTR_VAL_SECURITYWARNONBADCERTSENDING_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES = "DisableCachingOfSSLPages";
pub const REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_DEF = @as(u32, 0);
pub const REGSTR_VAL_SECURITYACTIVEX = "Security_RunActiveXControls";
pub const REGSTR_VAL_SECURITYACTIVEX_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYACTICEXSCRIPTS = "Security_RunScripts";
pub const REGSTR_VAL_SECURITYACTICEXSCRIPTS_DEF = @as(u32, 1);
pub const REGSTR_VAL_SECURITYJAVA = "Security_RunJavaApplets";
pub const REGSTR_VAL_SECURITYJAVA_DEF = @as(u32, 1);
pub const SZJAVAVMPATH = "\\Java VM";
pub const REGSTR_VAL_JAVAJIT = "EnableJIT";
pub const REGSTR_VAL_JAVAJIT_DEF = @as(u32, 0);
pub const REGSTR_VAL_JAVALOGGING = "EnableLogging";
pub const REGSTR_VAL_JAVALOGGING_DEF = @as(u32, 0);
pub const SZTOOLBAR = "\\Toolbar";
pub const REGSTR_VAL_DAYSTOKEEP = "DaysToKeep";
pub const SZNOTEXT = "NoText";
pub const SZVISIBLE = "VisibleBands";
pub const REGSTR_VAL_VISIBLEBANDS = "VisibleBands";
pub const REGSTR_VAL_VISIBLEBANDS_DEF = @as(u32, 7);
pub const TOOLSBAND = @as(u32, 1);
pub const ADDRESSBAND = @as(u32, 2);
pub const LINKSBAND = @as(u32, 4);
pub const SZBACKBITMAP = "BackBitmap";
pub const REGSTR_VAL_BACKBITMAP = "BackBitmap";
pub const REGSTR_SHIFTQUICKSUFFIX = "ShiftQuickCompleteSuffix";
pub const TSZSCHANNELPATH = "SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL";
pub const REGSTR_VAL_SCHANNELENABLEPROTOCOL = "Enabled";
pub const REGSTR_VAL_SCHANNELENABLEPROTOCOL_DEF = @as(u32, 1);
pub const TSZINTERNETCLIENTSPATH = "Software\\Microsoft\\Internet Explorer\\Unix";
pub const REGSTR_PATH_DEFAULT = "default";
pub const REGSTR_PATH_CURRENT = "current";
pub const IE_USE_OE_PRESENT_HKEY = @as(i32, -2147483646);
pub const IE_USE_OE_PRESENT_KEY = "Software\\Microsoft\\Windows\\CurrentVersion\\app.paths\\msimn.exe";
pub const IE_USE_OE_MAIL_HKEY = @as(i32, -2147483647);
pub const IE_USE_OE_MAIL_KEY = "Software\\Microsoft\\Internet Explorer\\Mail";
pub const IE_USE_OE_MAIL_VALUE = "Use Outlook Express";
pub const IE_USE_OE_NEWS_HKEY = @as(i32, -2147483647);
pub const IE_USE_OE_NEWS_KEY = "Software\\Microsoft\\Internet Explorer\\News";
pub const IE_USE_OE_NEWS_VALUE = "Use Outlook Express";
pub const TSZPROTOCOLSPATH = "Protocols\\";
pub const TSZMAILTOPROTOCOL = "mailto";
pub const TSZNEWSPROTOCOL = "news";
pub const TSZCALLTOPROTOCOL = "callto";
pub const TSZLDAPPROTOCOL = "ldap";
pub const TSZCALENDARPROTOCOL = "unk";
pub const TSZVSOURCEPROTOCOL = "view source";
pub const REGSTR_VAL_DEFAULT_CODEPAGE = "Default_CodePage";
pub const REGSTR_VAL_DEFAULT_SCRIPT = "Default_Script";
pub const REGSTR_VAL_ACCEPT_LANGUAGE = "AcceptLanguage";
pub const REGSTR_VAL_FONT_SCRIPTS = "Scripts";
pub const REGSTR_VAL_FONT_SCRIPT = "Script";
pub const REGSTR_VAL_FONT_SCRIPT_NAME = "Script";
pub const REGSTR_VAL_DEF_ENCODING = "Default_Encoding";
pub const REGSTR_VAL_DEF_INETENCODING = "Default_InternetEncoding";
pub const REGSTR_VAL_FIXED_FONT = "IEFixedFontName";
pub const REGSTR_VAL_SCRIPT_FIXED_FONT = "IEFixedFontName";
pub const REGSTR_VAL_PROP_FONT = "IEPropFontName";
pub const REGSTR_VAL_SCRIPT_PROP_FONT = "IEPropFontName";
pub const REGSTR_VAL_FONT_SIZE = "IEFontSize";
pub const REGSTR_VAL_FONT_SIZE_DEF = @as(u32, 2);
pub const REGSTR_VAL_AUTODETECT = "AutoDetect";
pub const REGSTR_PATH_MIME_DATABASE = "MIME\\Database";
pub const REGSTR_VAL_CODEPAGE = "CodePage";
pub const REGSTR_VAL_INETENCODING = "InternetEncoding";
pub const REGSTR_VAL_FAMILY = "Family";
pub const REGSTR_VAL_LEVEL = "Level";
pub const REGSTR_VAL_ALIASTO = "AliasForCharset";
pub const REGSTR_VAL_ENCODENAME = "EncodingName";
pub const REGSTR_VAL_DESCRIPTION = "Description";
pub const REGSTR_VAL_WEBCHARSET = "WebCharset";
pub const REGSTR_VAL_BODYCHARSET = "BodyCharset";
pub const REGSTR_VAL_HEADERCHARSET = "HeaderCharset";
pub const REGSTR_VAL_FIXEDWIDTHFONT = "FixedWidthFont";
pub const REGSTR_VAL_PROPORTIONALFONT = "ProportionalFont";
pub const REGSTR_VAL_PRIVCONVERTER = "PrivConverter";
pub const IDM_UNKNOWN = @as(u32, 0);
pub const IDM_ALIGNBOTTOM = @as(u32, 1);
pub const IDM_ALIGNHORIZONTALCENTERS = @as(u32, 2);
pub const IDM_ALIGNLEFT = @as(u32, 3);
pub const IDM_ALIGNRIGHT = @as(u32, 4);
pub const IDM_ALIGNTOGRID = @as(u32, 5);
pub const IDM_ALIGNTOP = @as(u32, 6);
pub const IDM_ALIGNVERTICALCENTERS = @as(u32, 7);
pub const IDM_ARRANGEBOTTOM = @as(u32, 8);
pub const IDM_ARRANGERIGHT = @as(u32, 9);
pub const IDM_BRINGFORWARD = @as(u32, 10);
pub const IDM_BRINGTOFRONT = @as(u32, 11);
pub const IDM_CENTERHORIZONTALLY = @as(u32, 12);
pub const IDM_CENTERVERTICALLY = @as(u32, 13);
pub const IDM_CODE = @as(u32, 14);
pub const IDM_DELETE = @as(u32, 17);
pub const IDM_FONTNAME = @as(u32, 18);
pub const IDM_FONTSIZE = @as(u32, 19);
pub const IDM_GROUP = @as(u32, 20);
pub const IDM_HORIZSPACECONCATENATE = @as(u32, 21);
pub const IDM_HORIZSPACEDECREASE = @as(u32, 22);
pub const IDM_HORIZSPACEINCREASE = @as(u32, 23);
pub const IDM_HORIZSPACEMAKEEQUAL = @as(u32, 24);
pub const IDM_INSERTOBJECT = @as(u32, 25);
pub const IDM_MULTILEVELREDO = @as(u32, 30);
pub const IDM_SENDBACKWARD = @as(u32, 32);
pub const IDM_SENDTOBACK = @as(u32, 33);
pub const IDM_SHOWTABLE = @as(u32, 34);
pub const IDM_SIZETOCONTROL = @as(u32, 35);
pub const IDM_SIZETOCONTROLHEIGHT = @as(u32, 36);
pub const IDM_SIZETOCONTROLWIDTH = @as(u32, 37);
pub const IDM_SIZETOFIT = @as(u32, 38);
pub const IDM_SIZETOGRID = @as(u32, 39);
pub const IDM_SNAPTOGRID = @as(u32, 40);
pub const IDM_TABORDER = @as(u32, 41);
pub const IDM_TOOLBOX = @as(u32, 42);
pub const IDM_MULTILEVELUNDO = @as(u32, 44);
pub const IDM_UNGROUP = @as(u32, 45);
pub const IDM_VERTSPACECONCATENATE = @as(u32, 46);
pub const IDM_VERTSPACEDECREASE = @as(u32, 47);
pub const IDM_VERTSPACEINCREASE = @as(u32, 48);
pub const IDM_VERTSPACEMAKEEQUAL = @as(u32, 49);
pub const IDM_JUSTIFYFULL = @as(u32, 50);
pub const IDM_BACKCOLOR = @as(u32, 51);
pub const IDM_BOLD = @as(u32, 52);
pub const IDM_BORDERCOLOR = @as(u32, 53);
pub const IDM_FLAT = @as(u32, 54);
pub const IDM_FORECOLOR = @as(u32, 55);
pub const IDM_ITALIC = @as(u32, 56);
pub const IDM_JUSTIFYCENTER = @as(u32, 57);
pub const IDM_JUSTIFYGENERAL = @as(u32, 58);
pub const IDM_JUSTIFYLEFT = @as(u32, 59);
pub const IDM_JUSTIFYRIGHT = @as(u32, 60);
pub const IDM_RAISED = @as(u32, 61);
pub const IDM_SUNKEN = @as(u32, 62);
pub const IDM_UNDERLINE = @as(u32, 63);
pub const IDM_CHISELED = @as(u32, 64);
pub const IDM_ETCHED = @as(u32, 65);
pub const IDM_SHADOWED = @as(u32, 66);
pub const IDM_FIND = @as(u32, 67);
pub const IDM_SHOWGRID = @as(u32, 69);
pub const IDM_OBJECTVERBLIST0 = @as(u32, 72);
pub const IDM_OBJECTVERBLIST1 = @as(u32, 73);
pub const IDM_OBJECTVERBLIST2 = @as(u32, 74);
pub const IDM_OBJECTVERBLIST3 = @as(u32, 75);
pub const IDM_OBJECTVERBLIST4 = @as(u32, 76);
pub const IDM_OBJECTVERBLIST5 = @as(u32, 77);
pub const IDM_OBJECTVERBLIST6 = @as(u32, 78);
pub const IDM_OBJECTVERBLIST7 = @as(u32, 79);
pub const IDM_OBJECTVERBLIST8 = @as(u32, 80);
pub const IDM_OBJECTVERBLIST9 = @as(u32, 81);
pub const IDM_OBJECTVERBLISTLAST = @as(u32, 81);
pub const IDM_CONVERTOBJECT = @as(u32, 82);
pub const IDM_CUSTOMCONTROL = @as(u32, 83);
pub const IDM_CUSTOMIZEITEM = @as(u32, 84);
pub const IDM_RENAME = @as(u32, 85);
pub const IDM_IMPORT = @as(u32, 86);
pub const IDM_NEWPAGE = @as(u32, 87);
pub const IDM_MOVE = @as(u32, 88);
pub const IDM_CANCEL = @as(u32, 89);
pub const IDM_FONT = @as(u32, 90);
pub const IDM_STRIKETHROUGH = @as(u32, 91);
pub const IDM_DELETEWORD = @as(u32, 92);
pub const IDM_EXECPRINT = @as(u32, 93);
pub const IDM_JUSTIFYNONE = @as(u32, 94);
pub const IDM_TRISTATEBOLD = @as(u32, 95);
pub const IDM_TRISTATEITALIC = @as(u32, 96);
pub const IDM_TRISTATEUNDERLINE = @as(u32, 97);
pub const IDM_FORWARDDELETE = @as(u32, 98);
pub const IDM_FOLLOW_ANCHOR = @as(u32, 2008);
pub const IDM_INSINPUTIMAGE = @as(u32, 2114);
pub const IDM_INSINPUTBUTTON = @as(u32, 2115);
pub const IDM_INSINPUTRESET = @as(u32, 2116);
pub const IDM_INSINPUTSUBMIT = @as(u32, 2117);
pub const IDM_INSINPUTUPLOAD = @as(u32, 2118);
pub const IDM_INSFIELDSET = @as(u32, 2119);
pub const IDM_PASTEINSERT = @as(u32, 2120);
pub const IDM_REPLACE = @as(u32, 2121);
pub const IDM_EDITSOURCE = @as(u32, 2122);
pub const IDM_BOOKMARK = @as(u32, 2123);
pub const IDM_HYPERLINK = @as(u32, 2124);
pub const IDM_UNLINK = @as(u32, 2125);
pub const IDM_BROWSEMODE = @as(u32, 2126);
pub const IDM_EDITMODE = @as(u32, 2127);
pub const IDM_UNBOOKMARK = @as(u32, 2128);
pub const IDM_TOOLBARS = @as(u32, 2130);
pub const IDM_STATUSBAR = @as(u32, 2131);
pub const IDM_FORMATMARK = @as(u32, 2132);
pub const IDM_TEXTONLY = @as(u32, 2133);
pub const IDM_OPTIONS = @as(u32, 2135);
pub const IDM_FOLLOWLINKC = @as(u32, 2136);
pub const IDM_FOLLOWLINKN = @as(u32, 2137);
pub const IDM_VIEWSOURCE = @as(u32, 2139);
pub const IDM_ZOOMPOPUP = @as(u32, 2140);
pub const IDM_BASELINEFONT1 = @as(u32, 2141);
pub const IDM_BASELINEFONT2 = @as(u32, 2142);
pub const IDM_BASELINEFONT3 = @as(u32, 2143);
pub const IDM_BASELINEFONT4 = @as(u32, 2144);
pub const IDM_BASELINEFONT5 = @as(u32, 2145);
pub const IDM_HORIZONTALLINE = @as(u32, 2150);
pub const IDM_LINEBREAKNORMAL = @as(u32, 2151);
pub const IDM_LINEBREAKLEFT = @as(u32, 2152);
pub const IDM_LINEBREAKRIGHT = @as(u32, 2153);
pub const IDM_LINEBREAKBOTH = @as(u32, 2154);
pub const IDM_NONBREAK = @as(u32, 2155);
pub const IDM_SPECIALCHAR = @as(u32, 2156);
pub const IDM_HTMLSOURCE = @as(u32, 2157);
pub const IDM_IFRAME = @as(u32, 2158);
pub const IDM_HTMLCONTAIN = @as(u32, 2159);
pub const IDM_TEXTBOX = @as(u32, 2161);
pub const IDM_TEXTAREA = @as(u32, 2162);
pub const IDM_CHECKBOX = @as(u32, 2163);
pub const IDM_RADIOBUTTON = @as(u32, 2164);
pub const IDM_DROPDOWNBOX = @as(u32, 2165);
pub const IDM_LISTBOX = @as(u32, 2166);
pub const IDM_BUTTON = @as(u32, 2167);
pub const IDM_IMAGE = @as(u32, 2168);
pub const IDM_OBJECT = @as(u32, 2169);
pub const IDM_1D = @as(u32, 2170);
pub const IDM_IMAGEMAP = @as(u32, 2171);
pub const IDM_FILE = @as(u32, 2172);
pub const IDM_COMMENT = @as(u32, 2173);
pub const IDM_SCRIPT = @as(u32, 2174);
pub const IDM_JAVAAPPLET = @as(u32, 2175);
pub const IDM_PLUGIN = @as(u32, 2176);
pub const IDM_PAGEBREAK = @as(u32, 2177);
pub const IDM_HTMLAREA = @as(u32, 2178);
pub const IDM_PARAGRAPH = @as(u32, 2180);
pub const IDM_FORM = @as(u32, 2181);
pub const IDM_MARQUEE = @as(u32, 2182);
pub const IDM_LIST = @as(u32, 2183);
pub const IDM_ORDERLIST = @as(u32, 2184);
pub const IDM_UNORDERLIST = @as(u32, 2185);
pub const IDM_INDENT = @as(u32, 2186);
pub const IDM_OUTDENT = @as(u32, 2187);
pub const IDM_PREFORMATTED = @as(u32, 2188);
pub const IDM_ADDRESS = @as(u32, 2189);
pub const IDM_BLINK = @as(u32, 2190);
pub const IDM_DIV = @as(u32, 2191);
pub const IDM_TABLEINSERT = @as(u32, 2200);
pub const IDM_RCINSERT = @as(u32, 2201);
pub const IDM_CELLINSERT = @as(u32, 2202);
pub const IDM_CAPTIONINSERT = @as(u32, 2203);
pub const IDM_CELLMERGE = @as(u32, 2204);
pub const IDM_CELLSPLIT = @as(u32, 2205);
pub const IDM_CELLSELECT = @as(u32, 2206);
pub const IDM_ROWSELECT = @as(u32, 2207);
pub const IDM_COLUMNSELECT = @as(u32, 2208);
pub const IDM_TABLESELECT = @as(u32, 2209);
pub const IDM_TABLEPROPERTIES = @as(u32, 2210);
pub const IDM_CELLPROPERTIES = @as(u32, 2211);
pub const IDM_ROWINSERT = @as(u32, 2212);
pub const IDM_COLUMNINSERT = @as(u32, 2213);
pub const IDM_HELP_CONTENT = @as(u32, 2220);
pub const IDM_HELP_ABOUT = @as(u32, 2221);
pub const IDM_HELP_README = @as(u32, 2222);
pub const IDM_REMOVEFORMAT = @as(u32, 2230);
pub const IDM_PAGEINFO = @as(u32, 2231);
pub const IDM_TELETYPE = @as(u32, 2232);
pub const IDM_GETBLOCKFMTS = @as(u32, 2233);
pub const IDM_BLOCKFMT = @as(u32, 2234);
pub const IDM_SHOWHIDE_CODE = @as(u32, 2235);
pub const IDM_TABLE = @as(u32, 2236);
pub const IDM_COPYFORMAT = @as(u32, 2237);
pub const IDM_PASTEFORMAT = @as(u32, 2238);
pub const IDM_GOTO = @as(u32, 2239);
pub const IDM_CHANGEFONT = @as(u32, 2240);
pub const IDM_CHANGEFONTSIZE = @as(u32, 2241);
pub const IDM_CHANGECASE = @as(u32, 2246);
pub const IDM_SHOWSPECIALCHAR = @as(u32, 2249);
pub const IDM_SUBSCRIPT = @as(u32, 2247);
pub const IDM_SUPERSCRIPT = @as(u32, 2248);
pub const IDM_CENTERALIGNPARA = @as(u32, 2250);
pub const IDM_LEFTALIGNPARA = @as(u32, 2251);
pub const IDM_RIGHTALIGNPARA = @as(u32, 2252);
pub const IDM_REMOVEPARAFORMAT = @as(u32, 2253);
pub const IDM_APPLYNORMAL = @as(u32, 2254);
pub const IDM_APPLYHEADING1 = @as(u32, 2255);
pub const IDM_APPLYHEADING2 = @as(u32, 2256);
pub const IDM_APPLYHEADING3 = @as(u32, 2257);
pub const IDM_DOCPROPERTIES = @as(u32, 2260);
pub const IDM_ADDFAVORITES = @as(u32, 2261);
pub const IDM_COPYSHORTCUT = @as(u32, 2262);
pub const IDM_SAVEBACKGROUND = @as(u32, 2263);
pub const IDM_SETWALLPAPER = @as(u32, 2264);
pub const IDM_COPYBACKGROUND = @as(u32, 2265);
pub const IDM_CREATESHORTCUT = @as(u32, 2266);
pub const IDM_PAGE = @as(u32, 2267);
pub const IDM_SAVETARGET = @as(u32, 2268);
pub const IDM_SHOWPICTURE = @as(u32, 2269);
pub const IDM_SAVEPICTURE = @as(u32, 2270);
pub const IDM_DYNSRCPLAY = @as(u32, 2271);
pub const IDM_DYNSRCSTOP = @as(u32, 2272);
pub const IDM_PRINTTARGET = @as(u32, 2273);
pub const IDM_IMGARTPLAY = @as(u32, 2274);
pub const IDM_IMGARTSTOP = @as(u32, 2275);
pub const IDM_IMGARTREWIND = @as(u32, 2276);
pub const IDM_PRINTQUERYJOBSPENDING = @as(u32, 2277);
pub const IDM_SETDESKTOPITEM = @as(u32, 2278);
pub const IDM_CONTEXTMENU = @as(u32, 2280);
pub const IDM_GOBACKWARD = @as(u32, 2282);
pub const IDM_GOFORWARD = @as(u32, 2283);
pub const IDM_PRESTOP = @as(u32, 2284);
pub const IDM_GOTOCLIPBOARDADDRESS = @as(u32, 2285);
pub const IDM_GOTOCLIPBOARDTEXT = @as(u32, 2286);
pub const IDM_MP_MYPICS = @as(u32, 2287);
pub const IDM_MP_EMAILPICTURE = @as(u32, 2288);
pub const IDM_MP_PRINTPICTURE = @as(u32, 2289);
pub const IDM_CREATELINK = @as(u32, 2290);
pub const IDM_COPYCONTENT = @as(u32, 2291);
pub const IDM_LANGUAGE = @as(u32, 2292);
pub const IDM_GETPRINTTEMPLATE = @as(u32, 2295);
pub const IDM_SETPRINTTEMPLATE = @as(u32, 2296);
pub const IDM_TEMPLATE_PAGESETUP = @as(u32, 2298);
pub const IDM_REFRESH = @as(u32, 2300);
pub const IDM_STOPDOWNLOAD = @as(u32, 2301);
pub const IDM_ENABLE_INTERACTION = @as(u32, 2302);
pub const IDM_LAUNCHDEBUGGER = @as(u32, 2310);
pub const IDM_BREAKATNEXT = @as(u32, 2311);
pub const IDM_INSINPUTHIDDEN = @as(u32, 2312);
pub const IDM_INSINPUTPASSWORD = @as(u32, 2313);
pub const IDM_OVERWRITE = @as(u32, 2314);
pub const IDM_PARSECOMPLETE = @as(u32, 2315);
pub const IDM_HTMLEDITMODE = @as(u32, 2316);
pub const IDM_REGISTRYREFRESH = @as(u32, 2317);
pub const IDM_COMPOSESETTINGS = @as(u32, 2318);
pub const IDM_SHOWALLTAGS = @as(u32, 2327);
pub const IDM_SHOWALIGNEDSITETAGS = @as(u32, 2321);
pub const IDM_SHOWSCRIPTTAGS = @as(u32, 2322);
pub const IDM_SHOWSTYLETAGS = @as(u32, 2323);
pub const IDM_SHOWCOMMENTTAGS = @as(u32, 2324);
pub const IDM_SHOWAREATAGS = @as(u32, 2325);
pub const IDM_SHOWUNKNOWNTAGS = @as(u32, 2326);
pub const IDM_SHOWMISCTAGS = @as(u32, 2320);
pub const IDM_SHOWZEROBORDERATDESIGNTIME = @as(u32, 2328);
pub const IDM_AUTODETECT = @as(u32, 2329);
pub const IDM_SCRIPTDEBUGGER = @as(u32, 2330);
pub const IDM_GETBYTESDOWNLOADED = @as(u32, 2331);
pub const IDM_NOACTIVATENORMALOLECONTROLS = @as(u32, 2332);
pub const IDM_NOACTIVATEDESIGNTIMECONTROLS = @as(u32, 2333);
pub const IDM_NOACTIVATEJAVAAPPLETS = @as(u32, 2334);
pub const IDM_NOFIXUPURLSONPASTE = @as(u32, 2335);
pub const IDM_EMPTYGLYPHTABLE = @as(u32, 2336);
pub const IDM_ADDTOGLYPHTABLE = @as(u32, 2337);
pub const IDM_REMOVEFROMGLYPHTABLE = @as(u32, 2338);
pub const IDM_REPLACEGLYPHCONTENTS = @as(u32, 2339);
pub const IDM_SHOWWBRTAGS = @as(u32, 2340);
pub const IDM_PERSISTSTREAMSYNC = @as(u32, 2341);
pub const IDM_SETDIRTY = @as(u32, 2342);
pub const IDM_RUNURLSCRIPT = @as(u32, 2343);
pub const IDM_ZOOMRATIO = @as(u32, 2344);
pub const IDM_GETZOOMNUMERATOR = @as(u32, 2345);
pub const IDM_GETZOOMDENOMINATOR = @as(u32, 2346);
pub const IDM_DIRLTR = @as(u32, 2350);
pub const IDM_DIRRTL = @as(u32, 2351);
pub const IDM_BLOCKDIRLTR = @as(u32, 2352);
pub const IDM_BLOCKDIRRTL = @as(u32, 2353);
pub const IDM_INLINEDIRLTR = @as(u32, 2354);
pub const IDM_INLINEDIRRTL = @as(u32, 2355);
pub const IDM_ISTRUSTEDDLG = @as(u32, 2356);
pub const IDM_INSERTSPAN = @as(u32, 2357);
pub const IDM_LOCALIZEEDITOR = @as(u32, 2358);
pub const IDM_SAVEPRETRANSFORMSOURCE = @as(u32, 2370);
pub const IDM_VIEWPRETRANSFORMSOURCE = @as(u32, 2371);
pub const IDM_SCROLL_HERE = @as(u32, 2380);
pub const IDM_SCROLL_TOP = @as(u32, 2381);
pub const IDM_SCROLL_BOTTOM = @as(u32, 2382);
pub const IDM_SCROLL_PAGEUP = @as(u32, 2383);
pub const IDM_SCROLL_PAGEDOWN = @as(u32, 2384);
pub const IDM_SCROLL_UP = @as(u32, 2385);
pub const IDM_SCROLL_DOWN = @as(u32, 2386);
pub const IDM_SCROLL_LEFTEDGE = @as(u32, 2387);
pub const IDM_SCROLL_RIGHTEDGE = @as(u32, 2388);
pub const IDM_SCROLL_PAGELEFT = @as(u32, 2389);
pub const IDM_SCROLL_PAGERIGHT = @as(u32, 2390);
pub const IDM_SCROLL_LEFT = @as(u32, 2391);
pub const IDM_SCROLL_RIGHT = @as(u32, 2392);
pub const IDM_MULTIPLESELECTION = @as(u32, 2393);
pub const IDM_2D_POSITION = @as(u32, 2394);
pub const IDM_2D_ELEMENT = @as(u32, 2395);
pub const IDM_1D_ELEMENT = @as(u32, 2396);
pub const IDM_ABSOLUTE_POSITION = @as(u32, 2397);
pub const IDM_LIVERESIZE = @as(u32, 2398);
pub const IDM_ATOMICSELECTION = @as(u32, 2399);
pub const IDM_AUTOURLDETECT_MODE = @as(u32, 2400);
pub const IDM_IE50_PASTE = @as(u32, 2401);
pub const IDM_IE50_PASTE_MODE = @as(u32, 2402);
pub const IDM_GETIPRINT = @as(u32, 2403);
pub const IDM_DISABLE_EDITFOCUS_UI = @as(u32, 2404);
pub const IDM_RESPECTVISIBILITY_INDESIGN = @as(u32, 2405);
pub const IDM_CSSEDITING_LEVEL = @as(u32, 2406);
pub const IDM_UI_OUTDENT = @as(u32, 2407);
pub const IDM_UPDATEPAGESTATUS = @as(u32, 2408);
pub const IDM_IME_ENABLE_RECONVERSION = @as(u32, 2409);
pub const IDM_KEEPSELECTION = @as(u32, 2410);
pub const IDM_UNLOADDOCUMENT = @as(u32, 2411);
pub const IDM_OVERRIDE_CURSOR = @as(u32, 2420);
pub const IDM_PEERHITTESTSAMEINEDIT = @as(u32, 2423);
pub const IDM_TRUSTAPPCACHE = @as(u32, 2425);
pub const IDM_BACKGROUNDIMAGECACHE = @as(u32, 2430);
pub const IDM_GETUSERACTIONTIME = @as(u32, 2431);
pub const IDM_BEGINUSERACTION = @as(u32, 2432);
pub const IDM_ENDUSERACTION = @as(u32, 2433);
pub const IDM_SETCUSTOMCURSOR = @as(u32, 2434);
pub const IDM_FOLLOWLINKT = @as(u32, 2435);
pub const IDM_CARETBROWSINGMODE = @as(u32, 2436);
pub const IDM_STYLEMENU_SETNOSTYLE = @as(u32, 2437);
pub const IDM_STYLEMENU_GETNOSTYLE = @as(u32, 2438);
pub const IDM_STYLEMENU_GETPREFSTYLE = @as(u32, 2439);
pub const IDM_STYLEMENU_CHANGESELECTEDSTYLE = @as(u32, 2440);
pub const IDM_MEDIA_PLAYPAUSE = @as(u32, 2441);
pub const IDM_MEDIA_MUTEUNMUTE = @as(u32, 2442);
pub const IDM_MEDIA_PLAY = @as(u32, 2443);
pub const IDM_MEDIA_PAUSE = @as(u32, 2444);
pub const IDM_MEDIA_STOP = @as(u32, 2445);
pub const IDM_MEDIA_FULLSCREEN_TOGGLE = @as(u32, 2446);
pub const IDM_MEDIA_FULLSCREEN_EXIT = @as(u32, 2447);
pub const IDM_MEDIA_VOLUME_UP = @as(u32, 2448);
pub const IDM_MEDIA_VOLUME_DOWN = @as(u32, 2449);
pub const IDM_MEDIA_SEEK_TO_START = @as(u32, 2450);
pub const IDM_MEDIA_SEEK_TO_END = @as(u32, 2451);
pub const IDM_MEDIA_SEEK_FWD_SMALL = @as(u32, 2452);
pub const IDM_MEDIA_SEEK_BACK_SMALL = @as(u32, 2453);
pub const IDM_MEDIA_SEEK_FWD_LARGE = @as(u32, 2454);
pub const IDM_MEDIA_SEEK_BACK_LARGE = @as(u32, 2455);
pub const IDM_MEDIA_RATE_FASTER = @as(u32, 2456);
pub const IDM_MEDIA_RATE_SLOWER = @as(u32, 2457);
pub const IDM_MEDIA_SHOWCONTROLS_TOGGLE = @as(u32, 2458);
pub const IDM_MEDIA_ZOOMMODE_TOGGLE = @as(u32, 2459);
pub const IDM_MEDIA_FRAMESTEP_FWD = @as(u32, 2460);
pub const IDM_MEDIA_FRAMESTEP_BACK = @as(u32, 2461);
pub const IDM_MEDIA_MUTE = @as(u32, 2462);
pub const IDM_MEDIA_UNMUTE = @as(u32, 2463);
pub const IDM_MEDIA_SHOW_AUDIO_ACCESS = @as(u32, 2464);
pub const IDM_MEDIA_SHOW_SUBTITLE_ACCESS = @as(u32, 2465);
pub const IDM_MEDIA_PLAYRATE0 = @as(u32, 2480);
pub const IDM_MEDIA_PLAYRATE1 = @as(u32, 2481);
pub const IDM_MEDIA_PLAYRATE2 = @as(u32, 2482);
pub const IDM_MEDIA_PLAYRATE3 = @as(u32, 2483);
pub const IDM_MEDIA_PLAYRATE4 = @as(u32, 2484);
pub const IDM_MEDIA_PLAYRATE5 = @as(u32, 2485);
pub const IDM_MEDIA_PLAYRATE6 = @as(u32, 2486);
pub const IDM_MEDIA_PLAYRATE7 = @as(u32, 2487);
pub const IDM_MEDIA_PLAYRATE8 = @as(u32, 2488);
pub const IDM_MEDIA_PLAYRATE9 = @as(u32, 2489);
pub const IDM_PASTECONTENTONLY = @as(u32, 2500);
pub const IDM_PASTETEXTONLY = @as(u32, 2501);
pub const IDM_INSERTHTML = @as(u32, 2502);
pub const IDM_DEFAULTBLOCK = @as(u32, 6046);
pub const IDM_MIMECSET__FIRST__ = @as(u32, 3609);
pub const IDM_MIMECSET__LAST__ = @as(u32, 3699);
pub const IDM_MENUEXT_FIRST__ = @as(u32, 3700);
pub const IDM_MENUEXT_LAST__ = @as(u32, 3732);
pub const IDM_MENUEXT_COUNT = @as(u32, 3733);
pub const IDM_ADDCONSOLEMESSAGERECEIVER = @as(u32, 3800);
pub const IDM_REMOVECONSOLEMESSAGERECEIVER = @as(u32, 3801);
pub const IDM_STARTDIAGNOSTICSMODE = @as(u32, 3802);
pub const IDM_GETSCRIPTENGINE = @as(u32, 3803);
pub const IDM_ADDDEBUGCALLBACKRECEIVER = @as(u32, 3804);
pub const IDM_REMOVEDEBUGCALLBACKRECEIVER = @as(u32, 3805);
pub const IDM_DEFAULTPARAGRAPHSEPARATOR = @as(u32, 3900);
pub const IDM_BEGINUNDOUNIT = @as(u32, 3901);
pub const IDM_ENDUNDOUNIT = @as(u32, 3902);
pub const IDM_CLEARUNDO = @as(u32, 3903);
pub const IDM_INSPECTELEMENT = @as(u32, 3904);
pub const IDM_SHAREPICTURE = @as(u32, 3905);
pub const IDM_ENABLE_OBJECT_RESIZING = @as(u32, 3906);
pub const IDM_INSERTTEXT = @as(u32, 3907);
pub const IDM_LAUNCHURICALLBACK = @as(u32, 3908);
pub const IDM_FOLLOWLINKN_INPRIVATE = @as(u32, 3909);
pub const IDM_FOLLOWLINKT_INPRIVATE = @as(u32, 3910);
pub const IDM_FOLLOWLINKEDGE = @as(u32, 3911);
pub const IDM_OPEN = @as(u32, 2000);
pub const IDM_NEW = @as(u32, 2001);
pub const IDM_SAVE = @as(u32, 70);
pub const IDM_SAVEAS = @as(u32, 71);
pub const IDM_SAVECOPYAS = @as(u32, 2002);
pub const IDM_PRINTPREVIEW = @as(u32, 2003);
pub const IDM_SHOWPRINT = @as(u32, 2010);
pub const IDM_SHOWPAGESETUP = @as(u32, 2011);
pub const IDM_PRINT = @as(u32, 27);
pub const IDM_PAGESETUP = @as(u32, 2004);
pub const IDM_SPELL = @as(u32, 2005);
pub const IDM_PASTESPECIAL = @as(u32, 2006);
pub const IDM_CLEARSELECTION = @as(u32, 2007);
pub const IDM_PROPERTIES = @as(u32, 28);
pub const IDM_REDO = @as(u32, 29);
pub const IDM_UNDO = @as(u32, 43);
pub const IDM_SELECTALL = @as(u32, 31);
pub const IDM_ZOOMPERCENT = @as(u32, 50);
pub const IDM_GETZOOM = @as(u32, 68);
pub const IDM_STOP = @as(u32, 2138);
pub const IDM_COPY = @as(u32, 15);
pub const IDM_CUT = @as(u32, 16);
pub const IDM_PASTE = @as(u32, 26);
pub const IDM_SAVEPDF = @as(u32, 99);
pub const IDM_TOGGLEREADINGBAR = @as(u32, 15209);
pub const IDM_ADDPDFHIGHLIGHT = @as(u32, 15210);
pub const IDM_DELETEPDFHIGHLIGHT = @as(u32, 15211);
pub const IDM_ADDPDFNOTE = @as(u32, 15212);
pub const IDM_OPENPDFNOTE = @as(u32, 15213);
pub const IDM_EDITPDFHIGHLIGHT = @as(u32, 15214);
pub const IDM_PINKHIGHLIGHT = @as(u32, 15215);
pub const IDM_BLUEHIGHLIGHT = @as(u32, 15216);
pub const IDM_GREENHIGHLIGHT = @as(u32, 15217);
pub const IDM_YELLOWHIGHLIGHT = @as(u32, 15218);
pub const IDM_NONEHIGHLIGHT = @as(u32, 15219);
pub const IDM_PDFREADALOUD = @as(u32, 15220);
pub const IDM_SHAREPDF = @as(u32, 15221);
pub const IDM_PDFDEFINE = @as(u32, 15222);
pub const CMD_ZOOM_PAGEWIDTH = @as(i32, -1);
pub const CMD_ZOOM_ONEPAGE = @as(i32, -2);
pub const CMD_ZOOM_TWOPAGES = @as(i32, -3);
pub const CMD_ZOOM_SELECTION = @as(i32, -4);
pub const CMD_ZOOM_FIT = @as(i32, -5);
pub const IDM_CONTEXT = @as(u32, 1);
pub const IDM_HWND = @as(u32, 2);
pub const IDM_NEW_TOPLEVELWINDOW = @as(u32, 7050);
pub const IDM_PRESERVEUNDOALWAYS = @as(u32, 6049);
pub const IDM_PERSISTDEFAULTVALUES = @as(u32, 7100);
pub const IDM_PROTECTMETATAGS = @as(u32, 7101);
pub const IDM_GETFRAMEZONE = @as(u32, 6037);
pub const IDM_REFRESH_THIS = @as(u32, 6042);
pub const IDM_MENUEXT_PLACEHOLDER = @as(u32, 6047);
pub const IDM_FIRE_PRINTTEMPLATEUP = @as(u32, 15000);
pub const IDM_FIRE_PRINTTEMPLATEDOWN = @as(u32, 15001);
pub const IDM_SETPRINTHANDLES = @as(u32, 15002);
pub const IDM_CLEARAUTHENTICATIONCACHE = @as(u32, 15003);
pub const IDM_GETUSERINITFLAGS = @as(u32, 15004);
pub const IDM_GETDOCDLGFLAGS = @as(u32, 15005);
pub const IDM_OLEWINDOWSTATECHANGED = @as(u32, 15006);
pub const IDM_ACTIVEXINSTALLSCOPE = @as(u32, 15007);
pub const IDM_SETSESSIONDOCUMENTMODE = @as(u32, 15008);
pub const IDM_GETSESSIONDOCUMENTMODE = @as(u32, 15009);
pub const IDM_SETPROFILINGONSTART = @as(u32, 15010);
pub const IDM_GETPROFILINGONSTART = @as(u32, 15011);
pub const IDM_SETSCRIPTCONSOLE = @as(u32, 15012);
pub const IDM_SETNAVIGATEEVENTSINK = @as(u32, 15013);
pub const IDM_SETDEVTOOLBARCONSOLE = @as(u32, 15016);
pub const IDM_POPSTATEEVENT = @as(u32, 15017);
pub const IDM_SETPARTIALLAYOUTSTATUS = @as(u32, 15021);
pub const IDM_GETPARTIALLAYOUTSTATUS = @as(u32, 15022);
pub const IDM_ADDPARTIALTESTSTEPCOUNT = @as(u32, 15023);
pub const IDM_SETL9QUIRKSEMULATIONENABLED = @as(u32, 15024);
pub const IDM_GETL9QUIRKSEMULATIONENABLED = @as(u32, 15025);
pub const IDM_SETPOINTERLOCKCONSENT = @as(u32, 15026);
pub const IDM_GETDEFAULTZOOMLEVEL = @as(u32, 15027);
pub const IDM_GETELEMENTBOUNDINGBOX = @as(u32, 15028);
pub const IDM_SETGEOLOCATIONCONSENT = @as(u32, 15029);
pub const IDM_ACTIVEXFILTERINGENABLED = @as(u32, 15030);
pub const IDM_SHARE = @as(u32, 15031);
pub const IDM_SHAREAPPCACHEEVENT = @as(u32, 15033);
pub const IDM_GETPRINTMANAGERDOCSOURCE = @as(u32, 15038);
pub const IDM_SETEXTRAHEADERS = @as(u32, 15039);
pub const IDM_SETACCESSIBILITYNAME = @as(u32, 15040);
pub const IDM_UPDATESETTINGSFROMREGISTRY = @as(u32, 15041);
pub const IDM_PERFORMEDITACTIVATION = @as(u32, 15042);
pub const IDM_SETDEFAULTBACKGROUNDCOLOR = @as(u32, 15043);
pub const IDM_GETDEFAULTBACKGROUNDCOLOR = @as(u32, 15044);
pub const IDM_NOTIFYZOOMANDSCROLLANIMATIONEND = @as(u32, 15045);
pub const IDM_NOTIFYCONTEXTMENUDISMISSED = @as(u32, 15046);
pub const IDM_GETPRINTMANAGERDOCSOURCEASYNC = @as(u32, 15047);
pub const IDM_SETPAGEACTIONALLOWEDFLAGS = @as(u32, 15100);
pub const IDM_INVOKEFLIPAHEADTARGET = @as(u32, 15200);
pub const IDM_ENABLEFLIPAHEADTARGET = @as(u32, 15201);
pub const IDM_DEBUGGERDYNAMICATTACH = @as(u32, 15202);
pub const IDM_DEBUGGERDYNAMICDETACH = @as(u32, 15203);
pub const IDM_DEBUGGERDYNAMICATTACHSOURCERUNDOWN = @as(u32, 15204);
pub const IDM_GETDEBUGGERSTATE = @as(u32, 15205);
pub const IDM_SELECTIONSEARCH = @as(u32, 15206);
pub const IDM_SHOWSHAREUI = @as(u32, 15207);
pub const IDM_RUNFLASH = @as(u32, 15208);
pub const DISPID_INTERNAL_CELEMENTCLASSCACHE = @as(u32, 2147483648);
pub const DISPID_HTMLOBJECT = @as(u32, 66036);
pub const DISPID_ELEMENT = @as(u32, 66536);
pub const DISPID_SITE = @as(u32, 67536);
pub const DISPID_OBJECT = @as(u32, 68536);
pub const DISPID_STYLE = @as(u32, 69536);
pub const DISPID_BASE_STYLE = @as(u32, 70036);
pub const DISPID_ATTRS = @as(u32, 70536);
pub const DISPID_EVENTS = @as(u32, 71536);
pub const DISPID_XOBJ_EXPANDO = @as(u32, 72536);
pub const DISPID_XOBJ_ORDINAL = @as(u32, 73536);
pub const DISPID_ACTIVEX_EXPANDO_BASE = @as(u32, 72536);
pub const DISPID_ACTIVEX_EXPANDO_MAX = @as(u32, 73535);
pub const DISPID_OBJECT_ORDINAL_BASE = @as(u32, 73536);
pub const DISPID_OBJECT_ORDINAL_MAX = @as(u32, 74535);
pub const DISPID_COLLECTION_MIN = @as(u32, 1000000);
pub const DISPID_COLLECTION_MAX = @as(u32, 2999999);
pub const DISPID_STYLESHEETSCOLLECTION_NAMED_BASE = @as(u32, 1000000);
pub const DISPID_STYLESHEETSCOLLECTION_ORDINAL_BASE = @as(u32, 2000000);
pub const DISPID_STYLESHEETSCOLLECTION_ORDINAL_MAX = @as(u32, 2999999);
pub const DISPID_EXPANDO_BASE = @as(u32, 3000000);
pub const DISPID_EXPANDO_MAX = @as(u32, 3999999);
pub const DISPID_EVENTHOOK_SENSITIVE_BASE = @as(u32, 4000000);
pub const DISPID_EVENTHOOK_SENSITIVE_MAX = @as(u32, 4499999);
pub const DISPID_EVENTHOOK_INSENSITIVE_BASE = @as(u32, 4500000);
pub const DISPID_EVENTHOOK_INSENSITIVE_MAX = @as(u32, 4999999);
pub const DISPID_PEER_HOLDER_BASE = @as(u32, 5000000);
pub const DISPID_CANVASPIXELARRAY_BASE = @as(u32, 5000000);
pub const DISPID_CANVASPIXELARRAY_MAX = @as(u32, 2000000000);
pub const DISPID_CommonCtrl_FONTNAME = @as(u32, 1);
pub const DISPID_CommonCtrl_FONTSIZE = @as(u32, 2);
pub const DISPID_CommonCtrl_FONTBOLD = @as(u32, 3);
pub const DISPID_CommonCtrl_FONTITAL = @as(u32, 4);
pub const DISPID_CommonCtrl_FONTUNDER = @as(u32, 5);
pub const DISPID_CommonCtrl_FONTSTRIKE = @as(u32, 6);
pub const DISPID_CommonCtrl_FONTWEIGHT = @as(u32, 7);
pub const DISPID_CommonCtrl_FONTCHARSET = @as(u32, 8);
pub const DISPID_CommonCtrl_FONTSUPERSCRIPT = @as(u32, 9);
pub const DISPID_CommonCtrl_FONTSUBSCRIPT = @as(u32, 10);
pub const DISPID_MSDATASRCINTERFACE = @as(i32, -3900);
pub const DISPID_ADVISEDATASRCCHANGEEVENT = @as(i32, -3901);
pub const DISPID_HTMLDLG = @as(u32, 25000);
pub const DISPID_HTMLDLGMODEL = @as(u32, 26000);
pub const DISPID_HTMLPOPUP = @as(u32, 27000);
pub const DISPID_HTMLAPP = @as(u32, 5000);
pub const STDPROPID_XOBJ_NAME = @as(u32, 65536);
pub const STDPROPID_XOBJ_INDEX = @as(u32, 65537);
pub const STDPROPID_IE3XOBJ_OBJECTALIGN = @as(u32, 65537);
pub const STDPROPID_XOBJ_BASEHREF = @as(u32, 65538);
pub const STDPROPID_XOBJ_LEFT = @as(u32, 65539);
pub const STDPROPID_XOBJ_TOP = @as(u32, 65540);
pub const STDPROPID_XOBJ_WIDTH = @as(u32, 65541);
pub const STDPROPID_XOBJ_HEIGHT = @as(u32, 65542);
pub const STDPROPID_XOBJ_VISIBLE = @as(u32, 65543);
pub const STDPROPID_XOBJ_PARENT = @as(u32, 65544);
pub const STDPROPID_XOBJ_DRAGMODE = @as(u32, 65545);
pub const STDPROPID_XOBJ_DRAGICON = @as(u32, 65546);
pub const STDPROPID_XOBJ_TAG = @as(u32, 65547);
pub const STDPROPID_XOBJ_TABSTOP = @as(u32, 65550);
pub const STDPROPID_XOBJ_TABINDEX = @as(u32, 65551);
pub const STDPROPID_XOBJ_HELPCONTEXTID = @as(u32, 65586);
pub const STDPROPID_XOBJ_DEFAULT = @as(u32, 65591);
pub const STDPROPID_XOBJ_CANCEL = @as(u32, 65592);
pub const STDPROPID_XOBJ_LEFTNORUN = @as(u32, 65593);
pub const STDPROPID_XOBJ_TOPNORUN = @as(u32, 65594);
pub const STDPROPID_XOBJ_ALIGNPERSIST = @as(u32, 65596);
pub const STDPROPID_XOBJ_LINKTIMEOUT = @as(u32, 65597);
pub const STDPROPID_XOBJ_LINKTOPIC = @as(u32, 65598);
pub const STDPROPID_XOBJ_LINKITEM = @as(u32, 65599);
pub const STDPROPID_XOBJ_LINKMODE = @as(u32, 65600);
pub const STDPROPID_XOBJ_DATACHANGED = @as(u32, 65601);
pub const STDPROPID_XOBJ_DATAFIELD = @as(u32, 65602);
pub const STDPROPID_XOBJ_DATASOURCE = @as(u32, 65603);
pub const STDPROPID_XOBJ_WHATSTHISHELPID = @as(u32, 65604);
pub const STDPROPID_XOBJ_CONTROLTIPTEXT = @as(u32, 65605);
pub const STDPROPID_XOBJ_STATUSBARTEXT = @as(u32, 65606);
pub const STDPROPID_XOBJ_APPLICATION = @as(u32, 65607);
pub const STDPROPID_XOBJ_BLOCKALIGN = @as(u32, 65608);
pub const STDPROPID_XOBJ_CONTROLALIGN = @as(u32, 65609);
pub const STDPROPID_XOBJ_STYLE = @as(u32, 65610);
pub const STDPROPID_XOBJ_COUNT = @as(u32, 65611);
pub const STDPROPID_XOBJ_DISABLED = @as(u32, 65612);
pub const STDPROPID_XOBJ_RIGHT = @as(u32, 65613);
pub const STDPROPID_XOBJ_BOTTOM = @as(u32, 65614);
pub const STDPROPID_XOBJ_GETSVGDOCUMENT = @as(u32, 65615);
pub const STDDISPID_XOBJ_ONFOCUS = @as(u32, 65537);
pub const STDDISPID_XOBJ_BEFOREUPDATE = @as(u32, 65540);
pub const STDDISPID_XOBJ_AFTERUPDATE = @as(u32, 65541);
pub const STDDISPID_XOBJ_ONROWEXIT = @as(u32, 65542);
pub const STDDISPID_XOBJ_ONROWENTER = @as(u32, 65543);
pub const STDDISPID_XOBJ_ONMOUSEOVER = @as(u32, 65544);
pub const STDDISPID_XOBJ_ONMOUSEOUT = @as(u32, 65545);
pub const STDDISPID_XOBJ_ONHELP = @as(u32, 65546);
pub const STDDISPID_XOBJ_ONDRAGSTART = @as(u32, 65547);
pub const STDDISPID_XOBJ_ONSELECTSTART = @as(u32, 65548);
pub const STDDISPID_XOBJ_ERRORUPDATE = @as(u32, 65549);
pub const STDDISPID_XOBJ_ONDATASETCHANGED = @as(u32, 65550);
pub const STDDISPID_XOBJ_ONDATAAVAILABLE = @as(u32, 65551);
pub const STDDISPID_XOBJ_ONDATASETCOMPLETE = @as(u32, 65552);
pub const STDDISPID_XOBJ_ONFILTER = @as(u32, 65553);
pub const STDDISPID_XOBJ_ONLOSECAPTURE = @as(u32, 65554);
pub const STDDISPID_XOBJ_ONPROPERTYCHANGE = @as(u32, 65555);
pub const STDDISPID_XOBJ_ONDRAG = @as(u32, 65556);
pub const STDDISPID_XOBJ_ONDRAGEND = @as(u32, 65557);
pub const STDDISPID_XOBJ_ONDRAGENTER = @as(u32, 65558);
pub const STDDISPID_XOBJ_ONDRAGOVER = @as(u32, 65559);
pub const STDDISPID_XOBJ_ONDRAGLEAVE = @as(u32, 65560);
pub const STDDISPID_XOBJ_ONDROP = @as(u32, 65561);
pub const STDDISPID_XOBJ_ONCUT = @as(u32, 65562);
pub const STDDISPID_XOBJ_ONCOPY = @as(u32, 65563);
pub const STDDISPID_XOBJ_ONPASTE = @as(u32, 65564);
pub const STDDISPID_XOBJ_ONBEFORECUT = @as(u32, 65565);
pub const STDDISPID_XOBJ_ONBEFORECOPY = @as(u32, 65566);
pub const STDDISPID_XOBJ_ONBEFOREPASTE = @as(u32, 65567);
pub const STDDISPID_XOBJ_ONROWSDELETE = @as(u32, 65568);
pub const STDDISPID_XOBJ_ONROWSINSERTED = @as(u32, 65569);
pub const STDDISPID_XOBJ_ONCELLCHANGE = @as(u32, 65570);
pub const DISPID_NORMAL_FIRST = @as(u32, 1000);
pub const DISPID_IE8_NORMAL_FIRST = @as(u32, 1150);
pub const DISPID_ANCHOR = @as(u32, 1000);
pub const DISPID_BLOCK = @as(u32, 1000);
pub const DISPID_BODY = @as(u32, 2000);
pub const DISPID_BR = @as(u32, 1000);
pub const DISPID_BGSOUND = @as(u32, 1000);
pub const DISPID_DD = @as(u32, 1000);
pub const DISPID_DIR = @as(u32, 1000);
pub const DISPID_DIV = @as(u32, 1000);
pub const DISPID_DL = @as(u32, 1000);
pub const DISPID_DT = @as(u32, 1000);
pub const DISPID_EFONT = @as(u32, 1000);
pub const DISPID_FORM = @as(u32, 1000);
pub const DISPID_HEADER = @as(u32, 1000);
pub const DISPID_HEDELEMS = @as(u32, 1000);
pub const DISPID_HR = @as(u32, 1000);
pub const DISPID_LABEL = @as(u32, 1000);
pub const DISPID_LI = @as(u32, 1000);
pub const DISPID_IMGBASE = @as(u32, 1000);
pub const DISPID_IMG = @as(u32, 2000);
pub const DISPID_INPUTIMAGE = @as(u32, 2000);
pub const DISPID_INPUT = @as(u32, 2000);
pub const DISPID_INPUTTEXTBASE = @as(u32, 3000);
pub const DISPID_INPUTTEXT = @as(u32, 4000);
pub const DISPID_MENU = @as(u32, 1000);
pub const DISPID_OL = @as(u32, 1000);
pub const DISPID_PARA = @as(u32, 1000);
pub const DISPID_SELECT = @as(u32, 1000);
pub const DISPID_SELECTOBJ = @as(u32, 1000);
pub const DISPID_TABLE = @as(u32, 1000);
pub const DISPID_TEXTSITE = @as(u32, 1000);
pub const DISPID_TEXTAREA = @as(u32, 5000);
pub const DISPID_MARQUEE = @as(u32, 6000);
pub const DISPID_RICHTEXT = @as(u32, 7000);
pub const DISPID_BUTTON = @as(u32, 8000);
pub const DISPID_UL = @as(u32, 1000);
pub const DISPID_PHRASE = @as(u32, 1000);
pub const DISPID_UNKNOWNPDL = @as(u32, 1000);
pub const DISPID_COMMENTPDL = @as(u32, 1000);
pub const DISPID_TABLECELL = @as(u32, 2000);
pub const DISPID_RANGE = @as(u32, 1000);
pub const DISPID_SELECTION = @as(u32, 1000);
pub const DISPID_OPTION = @as(u32, 1000);
pub const DISPID_1D = @as(u32, 2000);
pub const DISPID_MAP = @as(u32, 1000);
pub const DISPID_AREA = @as(u32, 1000);
pub const DISPID_PARAM = @as(u32, 1000);
pub const DISPID_TABLESECTION = @as(u32, 1000);
pub const DISPID_TABLEROW = @as(u32, 1000);
pub const DISPID_TABLECOL = @as(u32, 1000);
pub const DISPID_SCRIPT = @as(u32, 1000);
pub const DISPID_STYLESHEET = @as(u32, 1000);
pub const DISPID_STYLERULE = @as(u32, 1000);
pub const DISPID_BASE_STYLERULE = @as(u32, 1100);
pub const DISPID_STYLEPAGE = @as(u32, 1000);
pub const DISPID_STYLESHEETS_COL = @as(u32, 1000);
pub const DISPID_STYLERULES_COL = @as(u32, 1000);
pub const DISPID_STYLEPAGES_COL = @as(u32, 1000);
pub const DISPID_MEDIALIST = @as(u32, 1000);
pub const DISPID_MIMETYPES_COL = @as(u32, 1000);
pub const DISPID_PLUGINS_COL = @as(u32, 1000);
pub const DISPID_2D = @as(u32, 1000);
pub const DISPID_OMWINDOW = @as(u32, 1000);
pub const DISPID_EVENTOBJ = @as(u32, 1000);
pub const DISPID_PERSISTDATA = @as(u32, 1000);
pub const DISPID_OLESITE = @as(u32, 1000);
pub const DISPID_FRAMESET = @as(u32, 1000);
pub const DISPID_LINK = @as(u32, 1000);
pub const DISPID_STYLEELEMENT = @as(u32, 1000);
pub const DISPID_FILTERS = @as(u32, 1000);
pub const DISPID_OMRECT = @as(u32, 1000);
pub const DISPID_DOMATTRIBUTE = @as(u32, 1000);
pub const DISPID_DOMTEXTNODE = @as(u32, 1000);
pub const DISPID_GENERIC = @as(u32, 1000);
pub const DISPID_URN_COLL = @as(u32, 1000);
pub const DISPID_NAMESPACE_COLLECTION = @as(u32, 1000);
pub const DISPID_NAMESPACE = @as(u32, 1000);
pub const DISPID_TAGNAMES_COLLECTION = @as(u32, 1000);
pub const DISPID_XMLHTTPREQUEST = @as(u32, 1000);
pub const DISPID_XMLSERIALIZER = @as(u32, 1000);
pub const DISPID_DOMPARSER = @as(u32, 1000);
pub const DISPID_DOCUMENTCOMPATIBLEINFO_COLLECTION = @as(u32, 1000);
pub const DISPID_DOCUMENTCOMPATIBLEINFO = @as(u32, 1000);
pub const DISPID_XDOMAINREQUEST = @as(u32, 1000);
pub const DISPID_DOMSTORAGEITEM = @as(u32, 1000);
pub const DISPID_DOMSTORAGE = @as(u32, 1000);
pub const DISPID_DOMSTORAGELIST = @as(u32, 1000);
pub const DISPID_RULESAPPLIED = @as(u32, 1000);
pub const DISPID_RULESAPPLIED_COLLECTION = @as(u32, 1000);
pub const DISPID_STYLESHEETRULESAPPLIED_COLLECTION = @as(u32, 1000);
pub const DISPID_PROCESSINGINSTRUCTION = @as(u32, 1000);
pub const DISPID_MSPOINTERPOINT = @as(u32, 1000);
pub const DISPID_WEBSOCKET = @as(u32, 1000);
pub const DISPID_APPLICATIONCACHE = @as(u32, 1000);
pub const DISPID_DOMEVENT = @as(u32, 1000);
pub const DISPID_DOMUIEVENT = @as(u32, 1025);
pub const DISPID_DOMMOUSEEVENT = @as(u32, 1050);
pub const DISPID_DOMMOUSEWHEELEVENT = @as(u32, 1075);
pub const DISPID_DOMWHEELEVENT = @as(u32, 1100);
pub const DISPID_DOMTEXTEVENT = @as(u32, 1125);
pub const DISPID_DOMKEYBOARDEVENT = @as(u32, 1150);
pub const DISPID_DOMCOMPOSITIONEVENT = @as(u32, 1175);
pub const DISPID_DOMCUSTOMEVENT = @as(u32, 1200);
pub const DISPID_DOMMUTATIONEVENT = @as(u32, 1225);
pub const DISPID_DOMFOCUSEVENT = @as(u32, 1250);
pub const DISPID_SVGZOOMEVENT = @as(u32, 1275);
pub const DISPID_DOMSITEMODEEVENT = @as(u32, 1300);
pub const DISPID_DOMMESSAGEEVENT = @as(u32, 1325);
pub const DISPID_DOMSTORAGEEVENT = @as(u32, 1350);
pub const DISPID_DOMBEFOREUNLOADEVENT = @as(u32, 1375);
pub const DISPID_DOMDRAGEVENT = @as(u32, 1400);
pub const DISPID_DOMMSPOINTEREVENT = @as(u32, 1425);
pub const DISPID_DOMMSGESTUREEVENT = @as(u32, 1450);
pub const DISPID_DOMMSTRANSITIONEVENT = @as(u32, 1475);
pub const DISPID_DOMMSANIMATIONEVENT = @as(u32, 1500);
pub const DISPID_DOMMSMANIPULATIONEVENT = @as(u32, 1525);
pub const DISPID_DOMPROGRESSEVENT = @as(u32, 1550);
pub const DISPID_DOMCLOSEEVENT = @as(u32, 1525);
pub const DISPID_HTMLDOCUMENT = @as(u32, 1000);
pub const DISPID_OMDOCUMENT = @as(u32, 1000);
pub const DISPID_DATATRANSFER = @as(u32, 1000);
pub const DISPID_XMLDECL = @as(u32, 1000);
pub const DISPID_DOCFRAG = @as(u32, 1000);
pub const DISPID_ILINEINFO = @as(u32, 1000);
pub const DISPID_IHTMLCOMPUTEDSTYLE = @as(u32, 1000);
pub const DISPID_DOMRANGE = @as(u32, 1000);
pub const DISPID_HTMLSELECTION = @as(u32, 1000);
pub const DISPID_DOMTRAVERSAL = @as(u32, 1000);
pub const DISPID_DOMEXCEPTION = @as(u32, 1000);
pub const DISPID_SVGEXCEPTION = @as(u32, 1000);
pub const DISPID_RANGEEXCEPTION = @as(u32, 1000);
pub const DISPID_EVENTEXCEPTION = @as(u32, 1000);
pub const DISPID_DOCUMENTTYPE = @as(u32, 1000);
pub const DISPID_MEDIA = @as(u32, 1000);
pub const DISPID_MEDIAERROR = @as(u32, 1000);
pub const DISPID_TIMERANGES = @as(u32, 1000);
pub const DISPID_SOURCE = @as(u32, 1000);
pub const DISPID_TRACK = @as(u32, 1000);
pub const DISPID_AUDIO = @as(u32, 1050);
pub const DISPID_VIDEO = @as(u32, 1050);
pub const DISPID_STYLEMEDIA = @as(u32, 1000);
pub const DISPID_PROGRESS = @as(u32, 1000);
pub const DISPID_PLAYTO = @as(u32, 1000);
pub const DISPID_PLAYTODEVICE = @as(u32, 1000);
pub const DISPID_WINDOW = @as(u32, 1);
pub const DISPID_SCREEN = @as(u32, 1000);
pub const DISPID_FRAMESCOLLECTION = @as(u32, 1000);
pub const DISPID_HISTORY = @as(u32, 1);
pub const DISPID_LOCATION = @as(u32, 1);
pub const DISPID_NAVIGATOR = @as(u32, 1);
pub const DISPID_CLIENTCAPS = @as(u32, 1);
pub const DISPID_TEMPLATE_PRINTER = @as(u32, 1);
pub const DISPID_PRINTMANAGER_TEMPLATE_PRINTER = @as(u32, 501);
pub const DISPID_COLLECTION = @as(u32, 1500);
pub const DISPID_OPTIONS_COL = @as(u32, 1500);
pub const DISPID_CHECKBOX = @as(u32, 1000);
pub const DISPID_RADIO = @as(u32, 2000);
pub const DISPID_FRAMESITE = @as(u32, 68536);
pub const DISPID_FRAME = @as(u32, 69536);
pub const DISPID_IFRAME = @as(u32, 69536);
pub const WEBOC_DISPIDBASE = @as(u32, 70536);
pub const WEBOC_DISPIDMAX = @as(u32, 70636);
pub const DISPID_PROTECTEDELEMENT = @as(u32, 1000);
pub const DISPID_DEFAULTS = @as(u32, 1000);
pub const DISPID_MARKUP = @as(u32, 1000);
pub const DISPID_DOMIMPLEMENTATION = @as(u32, 1000);
pub const DISPID_MEDIAQUERY = @as(u32, 1000);
pub const DISPID_HTML5ATTRIBUTESELECTORCI = @as(u32, 1000);
pub const DISPID_SVGMIXINS = @as(u32, 1000);
pub const DISPID_SVGELEMENT = @as(u32, 1030);
pub const DISPID_SVGELEMENT_BASE = @as(u32, 1050);
pub const DISPID_SVGAELEMENT = @as(u32, 1050);
pub const DISPID_SVGALTGLYPHDEFELEMENT = @as(u32, 1050);
pub const DISPID_SVGALTGLYPHELEMENT = @as(u32, 1050);
pub const DISPID_SVGALTGLYPHITEMELEMENT = @as(u32, 1050);
pub const DISPID_SVGANGLE = @as(u32, 1000);
pub const DISPID_SVGANIMATECOLORELEMENT = @as(u32, 1050);
pub const DISPID_SVGANIMATEDANGLE = @as(u32, 1000);
pub const DISPID_SVGANIMATEDBOOLEAN = @as(u32, 1000);
pub const DISPID_SVGANIMATEDENUMERATION = @as(u32, 1000);
pub const DISPID_SVGANIMATEDINTEGER = @as(u32, 1000);
pub const DISPID_SVGANIMATEDLENGTH = @as(u32, 1000);
pub const DISPID_SVGANIMATEDLENGTHLIST = @as(u32, 1000);
pub const DISPID_SVGANIMATEDNUMBER = @as(u32, 1000);
pub const DISPID_SVGANIMATEDNUMBERLIST = @as(u32, 1000);
pub const DISPID_SVGANIMATEDPOINTS = @as(u32, 1000);
pub const DISPID_SVGANIMATEDRECT = @as(u32, 1000);
pub const DISPID_SVGANIMATEDSTRING = @as(u32, 1000);
pub const DISPID_SVGANIMATEELEMENT = @as(u32, 1050);
pub const DISPID_SVGANIMATEMOTIONELEMENT = @as(u32, 1050);
pub const DISPID_SVGANIMATETRANSFORMELEMENT = @as(u32, 1050);
pub const DISPID_SVGCIRCLEELEMENT = @as(u32, 1050);
pub const DISPID_SVGCLIPPATHELEMENT = @as(u32, 1050);
pub const DISPID_SVGCOLOR_PROFILEELEMENT = @as(u32, 1050);
pub const DISPID_SVGCURSORELEMENT = @as(u32, 1050);
pub const DISPID_SVGDEFINITION_SRCELEMENT = @as(u32, 1050);
pub const DISPID_SVGDEFSELEMENT = @as(u32, 1050);
pub const DISPID_SVGDESCELEMENT = @as(u32, 1050);
pub const DISPID_SVGELEMENTINSTANCE = @as(u32, 1000);
pub const DISPID_SVGELEMENTINSTANCELIST = @as(u32, 1000);
pub const DISPID_SVGELLIPSEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEBLENDELEMENT = @as(u32, 1050);
pub const DISPID_SVGFECOLORMATRIXELEMENT = @as(u32, 1050);
pub const DISPID_SVGFECOMPONENTTRANSFERELEMENT = @as(u32, 1050);
pub const DISPID_SVGCOMPONENTTRANSFERFUNCTIONELEMENT = @as(u32, 1050);
pub const DISPID_SVGFECOMPOSITEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFECONVOLVEMATRIXELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEDIFFUSELIGHTINGELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEDISPLACEMENTMAPELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEDISTANTLIGHTELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEFLOODELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEFUNCAELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEFUNCBELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEFUNCGELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEFUNCRELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEGAUSSIANBLURELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEIMAGEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEMERGEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEMERGENODEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEMORPHOLOGYELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEOFFSETELEMENT = @as(u32, 1050);
pub const DISPID_SVGFEPOINTLIGHTELEMENT = @as(u32, 1050);
pub const DISPID_SVGFESPECULARLIGHTINGELEMENT = @as(u32, 1050);
pub const DISPID_SVGFESPOTLIGHTELEMENT = @as(u32, 1050);
pub const DISPID_SVGFETILEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFETURBULENCEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFILTERELEMENT = @as(u32, 1050);
pub const DISPID_SVGFONT_FACE_FORMATELEMENT = @as(u32, 1050);
pub const DISPID_SVGFONT_FACE_NAMEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFONT_FACE_SRCELEMENT = @as(u32, 1050);
pub const DISPID_SVGFONT_FACE_URIELEMENT = @as(u32, 1050);
pub const DISPID_SVGFONT_FACEELEMENT = @as(u32, 1050);
pub const DISPID_SVGFONTELEMENT = @as(u32, 1050);
pub const DISPID_SVGFOREIGNOBJECTELEMENT = @as(u32, 1050);
pub const DISPID_SVGGELEMENT = @as(u32, 1050);
pub const DISPID_SVGGLYPHELEMENT = @as(u32, 1050);
pub const DISPID_SVGGLYPHREFELEMENT = @as(u32, 1050);
pub const DISPID_SVGGRADIENTELEMENT = @as(u32, 1050);
pub const DISPID_SVGHKERNELEMENT = @as(u32, 1050);
pub const DISPID_SVGIMAGEELEMENT = @as(u32, 1050);
pub const DISPID_SVGLENGTH = @as(u32, 1000);
pub const DISPID_SVGLENGTHLIST = @as(u32, 1000);
pub const DISPID_SVGPRESERVEASPECTRATIO = @as(u32, 1000);
pub const DISPID_SVGANIMATEDPRESERVEASPECTRATIO = @as(u32, 1000);
pub const DISPID_SVGPOINT = @as(u32, 1000);
pub const DISPID_SVGPOINTLIST = @as(u32, 1000);
pub const DISPID_SVGLINEARGRADIENTELEMENT = @as(u32, 1070);
pub const DISPID_SVGLINEELEMENT = @as(u32, 1050);
pub const DISPID_SVGMARKERELEMENT = @as(u32, 1050);
pub const DISPID_SVGMASKELEMENT = @as(u32, 1050);
pub const DISPID_SVGMETADATAELEMENT = @as(u32, 1050);
pub const DISPID_SVGMISSING_GLYPHELEMENT = @as(u32, 1050);
pub const DISPID_SVGMPATHELEMENT = @as(u32, 1050);
pub const DISPID_SVGNUMBER = @as(u32, 1000);
pub const DISPID_SVGNUMBERLIST = @as(u32, 1000);
pub const DISPID_SVGPATHELEMENT = @as(u32, 1050);
pub const DISPID_SVGPATTERNELEMENT = @as(u32, 1050);
pub const DISPID_SVGPOLYGONELEMENT = @as(u32, 1050);
pub const DISPID_SVGPOLYLINEELEMENT = @as(u32, 1050);
pub const DISPID_SVGRADIALGRADIENTELEMENT = @as(u32, 1070);
pub const DISPID_SVGRECT = @as(u32, 1000);
pub const DISPID_SVGRECTELEMENT = @as(u32, 1050);
pub const DISPID_SVGSCRIPTELEMENT = @as(u32, 1050);
pub const DISPID_SVGSETELEMENT = @as(u32, 1050);
pub const DISPID_SVGSTOPELEMENT = @as(u32, 1050);
pub const DISPID_SVGSTRINGLIST = @as(u32, 1000);
pub const DISPID_SVGSTYLEELEMENT = @as(u32, 1050);
pub const DISPID_SVGSVGELEMENT = @as(u32, 1050);
pub const DISPID_SVGSWITCHELEMENT = @as(u32, 1050);
pub const DISPID_SVGSYMBOLELEMENT = @as(u32, 1050);
pub const DISPID_SVGTITLEELEMENT = @as(u32, 1050);
pub const DISPID_SVGTREFELEMENT = @as(u32, 1050);
pub const DISPID_SVGTEXTCONTENTELEMENT = @as(u32, 1050);
pub const DISPID_SVGTEXTCONTENTELEMENT_BASE = @as(u32, 1070);
pub const DISPID_SVGTEXTPOSITIONINGELEMENT = @as(u32, 1070);
pub const DISPID_SVGTEXTPOSITIONINGELEMENT_BASE = @as(u32, 1090);
pub const DISPID_SVGTEXTELEMENT = @as(u32, 1090);
pub const DISPID_SVGTSPANELEMENT = @as(u32, 1090);
pub const DISPID_SVGTEXTPATHELEMENT = @as(u32, 1070);
pub const DISPID_SVGUSEELEMENT = @as(u32, 1050);
pub const DISPID_SVGVIEWELEMENT = @as(u32, 1050);
pub const DISPID_SVGVKERNELEMENT = @as(u32, 1050);
pub const DISPID_SVGMATRIX = @as(u32, 1000);
pub const DISPID_SVGTRANSFORM = @as(u32, 1000);
pub const DISPID_SVGTRANSFORMLIST = @as(u32, 1000);
pub const DISPID_SVGANIMATEDTRANSFORMLIST = @as(u32, 1000);
pub const DISPID_SVGPATHSEG = @as(u32, 1000);
pub const DISPID_SVGPATHSEG_BASE = @as(u32, 1020);
pub const DISPID_SVGPATHSEGLIST = @as(u32, 1000);
pub const DISPID_SVGPATHSEGARCABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGARCREL = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCLOSEPATH = @as(u32, 1020);
pub const DISPID_SVGPATHSEGMOVETOABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGMOVETOREL = @as(u32, 1020);
pub const DISPID_SVGPATHSEGLINETOABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGLINETOREL = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCURVETOCUBICABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCURVETOCUBICREL = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCURVETOCUBICSMOOTHABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCURVETOCUBICSMOOTHREL = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCURVETOQUADRATICABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCURVETOQUADRATICREL = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHREL = @as(u32, 1020);
pub const DISPID_SVGPATHSEGLINETOHORIZONTALABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGLINETOHORIZONTALREL = @as(u32, 1020);
pub const DISPID_SVGPATHSEGLINETOVERTICALABS = @as(u32, 1020);
pub const DISPID_SVGPATHSEGLINETOVERTICALREL = @as(u32, 1020);
pub const DISPID_CANVASELEMENT = @as(u32, 1000);
pub const DISPID_CANVASRENDERCONTEXT2D = @as(u32, 1000);
pub const DISPID_CANVASGRADIENT = @as(u32, 1000);
pub const DISPID_CANVASTEXTMETRICS = @as(u32, 1000);
pub const DISPID_CANVASIMAGEDATA = @as(u32, 1000);
pub const DISPID_CANVASPIXELARRAY = @as(u32, 1000);
pub const DISPID_PERFORMANCE = @as(u32, 1000);
pub const DISPID_PERFORMANCENAVIGATION = @as(u32, 1000);
pub const DISPID_PERFORMANCETIMING = @as(u32, 1000);
pub const DISPID_MSHTMLWEBVIEWELEMENT = @as(u32, 1000);
pub const DISPID_WEBGEOLOCATION = @as(u32, 1000);
pub const DISPID_WEBGEOPOSITION = @as(u32, 1000);
pub const DISPID_WEBGEOCOORDINATES = @as(u32, 1000);
pub const DISPID_WEBGEOPOSITION_ERROR = @as(u32, 1000);
pub const DISPID_DATALIST = @as(u32, 1000);
pub const DISPID_IE8_ANCHOR = @as(u32, 1150);
pub const DISPID_IE8_AREA = @as(u32, 1150);
pub const DISPID_IE8_BASE = @as(u32, 1150);
pub const DISPID_IE8_BODY = @as(u32, 1150);
pub const DISPID_IE8_FORM = @as(u32, 1150);
pub const DISPID_IE8_HEAD = @as(u32, 1150);
pub const DISPID_IE8_IMG = @as(u32, 1150);
pub const DISPID_IE8_INPUT = @as(u32, 1150);
pub const DISPID_IE8_LINK = @as(u32, 1150);
pub const DISPID_IE8_MOD = @as(u32, 1150);
pub const DISPID_IE8_SCRIPT = @as(u32, 1150);
pub const DISPID_IE8_ATTR = @as(u32, 1150);
pub const DISPID_IE8_NAMEDNODEMAP = @as(u32, 1150);
pub const DISPID_IE8_COLLECTION = @as(u32, 1150);
pub const DISPID_IE8_PARAM = @as(u32, 1150);
pub const DISPID_IE8_EMBED = @as(u32, 1150);
pub const DISPID_IE8_BLOCK = @as(u32, 1150);
pub const DISPID_IE8_META = @as(u32, 1150);
pub const DISPID_IE8_STYLE = @as(u32, 1150);
pub const DISPID_IE8_SELECT = @as(u32, 1150);
pub const DISPID_IE8_ELEMENTBASE = @as(u32, 66736);
pub const DISPID_IE8_ELEMENTMAX = @as(u32, 66776);
pub const DISPID_IE8_ELEMENT = @as(u32, 66736);
pub const DISPID_IE8_FRAMESITEBASE = @as(u32, 69656);
pub const DISPID_IE8_FRAME = @as(u32, 69656);
pub const DISPID_IE8_IFRAME = @as(u32, 69656);
pub const DISPID_IE8_OBJECTBASE = @as(u32, 68566);
pub const DISPID_IE8_OBJECT = @as(u32, 68566);
pub const DISPID_IE9_ELEMENTBASE = @as(u32, 66786);
pub const DISPID_IE9_ELEMENTMAX = @as(u32, 66821);
pub const DISPID_IE9_ELEMENT = @as(u32, 66786);
pub const DISPID_IE10_ELEMENTBASE = @as(u32, 66822);
pub const DISPID_IE10_ELEMENT = @as(u32, 66822);
pub const DISP10_IE10_XMSARIAFLOWFROM = @as(u32, 66835);
pub const DISPID_WINDOWOBJECT = @as(i32, -5500);
pub const DISPID_PERFORMANCEOBJECT = @as(i32, -5505);
pub const DISPID_LOCATIONOBJECT = @as(i32, -5506);
pub const DISPID_HISTORYOBJECT = @as(i32, -5507);
pub const DISPID_NAVIGATOROBJECT = @as(i32, -5508);
pub const DISPID_SECURITYCTX = @as(i32, -5511);
pub const DISPID_AMBIENT_DLCONTROL = @as(i32, -5512);
pub const DISPID_AMBIENT_USERAGENT = @as(i32, -5513);
pub const DISPID_SECURITYDOMAIN = @as(i32, -5514);
pub const DISPID_DEBUG_ISSECUREPROXY = @as(i32, -5515);
pub const DISPID_DEBUG_TRUSTEDPROXY = @as(i32, -5516);
pub const DISPID_DEBUG_INTERNALWINDOW = @as(i32, -5517);
pub const DISPID_DEBUG_ENABLESECUREPROXYASSERTS = @as(i32, -5518);
pub const DLCTL_DLIMAGES = @as(u32, 16);
pub const DLCTL_VIDEOS = @as(u32, 32);
pub const DLCTL_BGSOUNDS = @as(u32, 64);
pub const DLCTL_NO_SCRIPTS = @as(u32, 128);
pub const DLCTL_NO_JAVA = @as(u32, 256);
pub const DLCTL_NO_RUNACTIVEXCTLS = @as(u32, 512);
pub const DLCTL_NO_DLACTIVEXCTLS = @as(u32, 1024);
pub const DLCTL_DOWNLOADONLY = @as(u32, 2048);
pub const DLCTL_NO_FRAMEDOWNLOAD = @as(u32, 4096);
pub const DLCTL_RESYNCHRONIZE = @as(u32, 8192);
pub const DLCTL_PRAGMA_NO_CACHE = @as(u32, 16384);
pub const DLCTL_NO_BEHAVIORS = @as(u32, 32768);
pub const DLCTL_NO_METACHARSET = @as(u32, 65536);
pub const DLCTL_URL_ENCODING_DISABLE_UTF8 = @as(u32, 131072);
pub const DLCTL_URL_ENCODING_ENABLE_UTF8 = @as(u32, 262144);
pub const DLCTL_NOFRAMES = @as(u32, 524288);
pub const DLCTL_FORCEOFFLINE = @as(u32, 268435456);
pub const DLCTL_NO_CLIENTPULL = @as(u32, 536870912);
pub const DLCTL_SILENT = @as(u32, 1073741824);
pub const DLCTL_OFFLINEIFNOTCONNECTED = @as(u32, 2147483648);
pub const DLCTL_OFFLINE = @as(u32, 2147483648);
pub const DISPID_ONABORT = @as(u32, 1000);
pub const DISPID_ONCHANGE = @as(u32, 1001);
pub const DISPID_ONERROR = @as(u32, 1002);
pub const DISPID_ONLOAD = @as(u32, 1003);
pub const DISPID_ONSELECT = @as(u32, 1006);
pub const DISPID_ONSUBMIT = @as(u32, 1007);
pub const DISPID_ONUNLOAD = @as(u32, 1008);
pub const DISPID_ONBOUNCE = @as(u32, 1009);
pub const DISPID_ONFINISH = @as(u32, 1010);
pub const DISPID_ONSTART = @as(u32, 1011);
pub const DISPID_ONLAYOUT = @as(u32, 1013);
pub const DISPID_ONSCROLL = @as(u32, 1014);
pub const DISPID_ONRESET = @as(u32, 1015);
pub const DISPID_ONRESIZE = @as(u32, 1016);
pub const DISPID_ONBEFOREUNLOAD = @as(u32, 1017);
pub const DISPID_ONCHANGEFOCUS = @as(u32, 1018);
pub const DISPID_ONCHANGEBLUR = @as(u32, 1019);
pub const DISPID_ONPERSIST = @as(u32, 1020);
pub const DISPID_ONPERSISTSAVE = @as(u32, 1021);
pub const DISPID_ONPERSISTLOAD = @as(u32, 1022);
pub const DISPID_ONCONTEXTMENU = @as(u32, 1023);
pub const DISPID_ONBEFOREPRINT = @as(u32, 1024);
pub const DISPID_ONAFTERPRINT = @as(u32, 1025);
pub const DISPID_ONSTOP = @as(u32, 1026);
pub const DISPID_ONBEFOREEDITFOCUS = @as(u32, 1027);
pub const DISPID_ONMOUSEHOVER = @as(u32, 1028);
pub const DISPID_ONCONTENTREADY = @as(u32, 1029);
pub const DISPID_ONLAYOUTCOMPLETE = @as(u32, 1030);
pub const DISPID_ONPAGE = @as(u32, 1031);
pub const DISPID_ONLINKEDOVERFLOW = @as(u32, 1032);
pub const DISPID_ONMOUSEWHEEL = @as(u32, 1033);
pub const DISPID_ONBEFOREDEACTIVATE = @as(u32, 1034);
pub const DISPID_ONMOVE = @as(u32, 1035);
pub const DISPID_ONCONTROLSELECT = @as(u32, 1036);
pub const DISPID_ONSELECTIONCHANGE = @as(u32, 1037);
pub const DISPID_ONMOVESTART = @as(u32, 1038);
pub const DISPID_ONMOVEEND = @as(u32, 1039);
pub const DISPID_ONRESIZESTART = @as(u32, 1040);
pub const DISPID_ONRESIZEEND = @as(u32, 1041);
pub const DISPID_ONMOUSEENTER = @as(u32, 1042);
pub const DISPID_ONMOUSELEAVE = @as(u32, 1043);
pub const DISPID_ONACTIVATE = @as(u32, 1044);
pub const DISPID_ONDEACTIVATE = @as(u32, 1045);
pub const DISPID_ONMULTILAYOUTCLEANUP = @as(u32, 1046);
pub const DISPID_ONBEFOREACTIVATE = @as(u32, 1047);
pub const DISPID_ONFOCUSIN = @as(u32, 1048);
pub const DISPID_ONFOCUSOUT = @as(u32, 1049);
pub const DISPID_ONVALUECHANGE = @as(u32, 1050);
pub const DISPID_ONSELECTADD = @as(u32, 1051);
pub const DISPID_ONSELECTREMOVE = @as(u32, 1052);
pub const DISPID_ONSELECTWITHIN = @as(u32, 1053);
pub const DISPID_ONSYSTEMSCROLLINGSTART = @as(u32, 1054);
pub const DISPID_ONSYSTEMSCROLLINGEND = @as(u32, 1055);
pub const DISPID_ONOBJECTCONTENTSCROLLED = @as(u32, 1056);
pub const DISPID_ONSTORAGE = @as(u32, 1057);
pub const DISPID_ONSTORAGECOMMIT = @as(u32, 1058);
pub const DISPID_ONSHOW = @as(u32, 1059);
pub const DISPID_ONHIDE = @as(u32, 1060);
pub const DISPID_ONALERT = @as(u32, 1061);
pub const DISPID_ONPOPUPMENUSTART = @as(u32, 1062);
pub const DISPID_ONPOPUPMENUEND = @as(u32, 1063);
pub const DISPID_ONONLINE = @as(u32, 1064);
pub const DISPID_ONOFFLINE = @as(u32, 1065);
pub const DISPID_ONHASHCHANGE = @as(u32, 1066);
pub const DISPID_ONMESSAGE = @as(u32, 1067);
pub const DISPID_ONDOMMUTATION = @as(u32, 1068);
pub const DISPID_SVGLOAD = @as(u32, 1069);
pub const DISPID_SVGUNLOAD = @as(u32, 1070);
pub const DISPID_SVGABORT = @as(u32, 1071);
pub const DISPID_SVGERROR = @as(u32, 1072);
pub const DISPID_SVGRESIZE = @as(u32, 1073);
pub const DISPID_SVGSCROLL = @as(u32, 1074);
pub const DISPID_SVGZOOM = @as(u32, 1075);
pub const DISPID_MSPOINTERDOWN = @as(u32, 1076);
pub const DISPID_MSPOINTERMOVE = @as(u32, 1077);
pub const DISPID_MSPOINTERUP = @as(u32, 1078);
pub const DISPID_MSPOINTEROVER = @as(u32, 1079);
pub const DISPID_MSPOINTEROUT = @as(u32, 1080);
pub const DISPID_MSPOINTERCANCEL = @as(u32, 1081);
pub const DISPID_MSPOINTERHOVER = @as(u32, 1082);
pub const DISPID_MSGESTURESTART = @as(u32, 1083);
pub const DISPID_MSGESTURECHANGE = @as(u32, 1084);
pub const DISPID_MSGESTUREEND = @as(u32, 1085);
pub const DISPID_MSGESTUREHOLD = @as(u32, 1086);
pub const DISPID_MSGESTURETAP = @as(u32, 1087);
pub const DISPID_MSGESTUREDOUBLETAP = @as(u32, 1088);
pub const DISPID_MSINERTIASTART = @as(u32, 1089);
pub const DISPID_MSLOSTPOINTERCAPTURE = @as(u32, 1090);
pub const DISPID_MSGOTPOINTERCAPTURE = @as(u32, 1091);
pub const DISPID_MSTRANSITIONSTART = @as(u32, 1092);
pub const DISPID_MSTRANSITIONEND = @as(u32, 1093);
pub const DISPID_MSANIMATIONSTART = @as(u32, 1094);
pub const DISPID_MSANIMATIONEND = @as(u32, 1095);
pub const DISPID_MSANIMATIONITERATION = @as(u32, 1096);
pub const DISPID_MSGESTUREINIT = @as(u32, 1097);
pub const DISPID_MSMANIPULATIONSTATECHANGED = @as(u32, 1098);
pub const DISPID_ONOPEN = @as(u32, 1099);
pub const DISPID_ONCLOSE = @as(u32, 1100);
pub const DISPID_MSPOINTERENTER = @as(u32, 1101);
pub const DISPID_MSPOINTERLEAVE = @as(u32, 1102);
pub const DISPID_MSORIENTATIONCHANGE = @as(u32, 1103);
pub const DISPID_ONDEVICEORIENTATION = @as(u32, 1104);
pub const DISPID_ONDEVICEMOTION = @as(u32, 1105);
pub const DISPID_ONPAGESHOW = @as(u32, 1106);
pub const DISPID_ONPAGEHIDE = @as(u32, 1107);
pub const DISPID_ONCOMPASSNEEDSCALIBRATION = @as(u32, 1108);
pub const DISPID_A_FIRST = @as(u32, 70536);
pub const DISPID_A_MIN = @as(u32, 70536);
pub const DISPID_A_MAX = @as(u32, 71535);
pub const DISPID_A_BACKGROUNDIMAGE = @as(u32, 70537);
pub const DISPID_A_COLOR = @as(u32, 70538);
pub const DISPID_A_TEXTTRANSFORM = @as(u32, 70540);
pub const DISPID_A_NOWRAP = @as(u32, 70541);
pub const DISPID_A_LINEHEIGHT = @as(u32, 70542);
pub const DISPID_A_TEXTINDENT = @as(u32, 70543);
pub const DISPID_A_LETTERSPACING = @as(u32, 70544);
pub const DISPID_A_LANG = @as(u32, 70545);
pub const DISPID_A_OVERFLOW = @as(u32, 70546);
pub const DISPID_A_PADDING = @as(u32, 70547);
pub const DISPID_A_PADDINGTOP = @as(u32, 70548);
pub const DISPID_A_PADDINGRIGHT = @as(u32, 70549);
pub const DISPID_A_PADDINGBOTTOM = @as(u32, 70550);
pub const DISPID_A_PADDINGLEFT = @as(u32, 70551);
pub const DISPID_A_CLEAR = @as(u32, 70552);
pub const DISPID_A_LISTTYPE = @as(u32, 70553);
pub const DISPID_A_FONTFACE = @as(u32, 70554);
pub const DISPID_A_FONTSIZE = @as(u32, 70555);
pub const DISPID_A_TEXTDECORATIONLINETHROUGH = @as(u32, 70556);
pub const DISPID_A_TEXTDECORATIONUNDERLINE = @as(u32, 70557);
pub const DISPID_A_TEXTDECORATIONBLINK = @as(u32, 70558);
pub const DISPID_A_TEXTDECORATIONNONE = @as(u32, 70559);
pub const DISPID_A_FONTSTYLE = @as(u32, 70560);
pub const DISPID_A_FONTVARIANT = @as(u32, 70561);
pub const DISPID_A_BASEFONT = @as(u32, 70562);
pub const DISPID_A_FONTWEIGHT = @as(u32, 70563);
pub const DISPID_A_TABLEBORDERCOLOR = @as(u32, 70564);
pub const DISPID_A_TABLEBORDERCOLORLIGHT = @as(u32, 70565);
pub const DISPID_A_TABLEBORDERCOLORDARK = @as(u32, 70566);
pub const DISPID_A_TABLEVALIGN = @as(u32, 70567);
pub const DISPID_A_BACKGROUND = @as(u32, 70568);
pub const DISPID_A_BACKGROUNDPOSX = @as(u32, 70569);
pub const DISPID_A_BACKGROUNDPOSY = @as(u32, 70570);
pub const DISPID_A_TEXTDECORATION = @as(u32, 70571);
pub const DISPID_A_MARGIN = @as(u32, 70572);
pub const DISPID_A_MARGINTOP = @as(u32, 70573);
pub const DISPID_A_MARGINRIGHT = @as(u32, 70574);
pub const DISPID_A_MARGINBOTTOM = @as(u32, 70575);
pub const DISPID_A_MARGINLEFT = @as(u32, 70576);
pub const DISPID_A_FONT = @as(u32, 70577);
pub const DISPID_A_FONTSIZEKEYWORD = @as(u32, 70578);
pub const DISPID_A_FONTSIZECOMBINE = @as(u32, 70579);
pub const DISPID_A_BACKGROUNDREPEAT = @as(u32, 70580);
pub const DISPID_A_BACKGROUNDATTACHMENT = @as(u32, 70581);
pub const DISPID_A_BACKGROUNDPOSITION = @as(u32, 70582);
pub const DISPID_A_WORDSPACING = @as(u32, 70583);
pub const DISPID_A_VERTICALALIGN = @as(u32, 70584);
pub const DISPID_A_BORDER = @as(u32, 70585);
pub const DISPID_A_BORDERTOP = @as(u32, 70586);
pub const DISPID_A_BORDERRIGHT = @as(u32, 70587);
pub const DISPID_A_BORDERBOTTOM = @as(u32, 70588);
pub const DISPID_A_BORDERLEFT = @as(u32, 70589);
pub const DISPID_A_BORDERCOLOR = @as(u32, 70590);
pub const DISPID_A_BORDERTOPCOLOR = @as(u32, 70591);
pub const DISPID_A_BORDERRIGHTCOLOR = @as(u32, 70592);
pub const DISPID_A_BORDERBOTTOMCOLOR = @as(u32, 70593);
pub const DISPID_A_BORDERLEFTCOLOR = @as(u32, 70594);
pub const DISPID_A_BORDERWIDTH = @as(u32, 70595);
pub const DISPID_A_BORDERTOPWIDTH = @as(u32, 70596);
pub const DISPID_A_BORDERRIGHTWIDTH = @as(u32, 70597);
pub const DISPID_A_BORDERBOTTOMWIDTH = @as(u32, 70598);
pub const DISPID_A_BORDERLEFTWIDTH = @as(u32, 70599);
pub const DISPID_A_BORDERSTYLE = @as(u32, 70600);
pub const DISPID_A_BORDERTOPSTYLE = @as(u32, 70601);
pub const DISPID_A_BORDERRIGHTSTYLE = @as(u32, 70602);
pub const DISPID_A_BORDERBOTTOMSTYLE = @as(u32, 70603);
pub const DISPID_A_BORDERLEFTSTYLE = @as(u32, 70604);
pub const DISPID_A_TEXTDECORATIONOVERLINE = @as(u32, 70605);
pub const DISPID_A_FLOAT = @as(u32, 70606);
pub const DISPID_A_DISPLAY = @as(u32, 70607);
pub const DISPID_A_LISTSTYLETYPE = @as(u32, 70608);
pub const DISPID_A_LISTSTYLEPOSITION = @as(u32, 70609);
pub const DISPID_A_LISTSTYLEIMAGE = @as(u32, 70610);
pub const DISPID_A_LISTSTYLE = @as(u32, 70611);
pub const DISPID_A_WHITESPACE = @as(u32, 70612);
pub const DISPID_A_PAGEBREAKBEFORE = @as(u32, 70613);
pub const DISPID_A_PAGEBREAKAFTER = @as(u32, 70614);
pub const DISPID_A_SCROLL = @as(u32, 70615);
pub const DISPID_A_VISIBILITY = @as(u32, 70616);
pub const DISPID_A_HIDDEN = @as(u32, 70617);
pub const DISPID_A_FILTER = @as(u32, 70618);
pub const DISPID_DEFAULTVALUE = @as(u32, 70619);
pub const DISPID_A_BORDERCOLLAPSE = @as(u32, 70620);
pub const DISPID_A_POSITION = @as(u32, 70626);
pub const DISPID_A_ZINDEX = @as(u32, 70627);
pub const DISPID_A_CLIP = @as(u32, 70628);
pub const DISPID_A_CLIPRECTTOP = @as(u32, 70629);
pub const DISPID_A_CLIPRECTRIGHT = @as(u32, 70630);
pub const DISPID_A_CLIPRECTBOTTOM = @as(u32, 70631);
pub const DISPID_A_CLIPRECTLEFT = @as(u32, 70632);
pub const DISPID_A_FONTFACESRC = @as(u32, 70633);
pub const DISPID_A_TABLELAYOUT = @as(u32, 70634);
pub const DISPID_A_STYLETEXT = @as(u32, 70635);
pub const DISPID_A_LANGUAGE = @as(u32, 70636);
pub const DISPID_A_VALUE = @as(u32, 70637);
pub const DISPID_A_CURSOR = @as(u32, 70638);
pub const DISPID_A_EVENTSINK = @as(u32, 70639);
pub const DISPID_A_PROPNOTIFYSINK = @as(u32, 70640);
pub const DISPID_A_ROWSETNOTIFYSINK = @as(u32, 70641);
pub const DISPID_INTERNAL_INLINESTYLEAA = @as(u32, 70642);
pub const DISPID_INTERNAL_CSTYLEPTRCACHE = @as(u32, 70643);
pub const DISPID_INTERNAL_CRUNTIMESTYLEPTRCACHE = @as(u32, 70644);
pub const DISPID_INTERNAL_INVOKECONTEXT = @as(u32, 70645);
pub const DISPID_A_BGURLIMGCTXCACHEINDEX = @as(u32, 70646);
pub const DISPID_A_LIURLIMGCTXCACHEINDEX = @as(u32, 70647);
pub const DISPID_A_ROWSETASYNCHNOTIFYSINK = @as(u32, 70648);
pub const DISPID_INTERNAL_FILTERPTRCACHE = @as(u32, 70649);
pub const DISPID_A_ROWPOSITIONCHANGESINK = @as(u32, 70650);
pub const DISPID_A_BEHAVIOR = @as(u32, 70651);
pub const DISPID_A_READYSTATE = @as(u32, 70652);
pub const DISPID_A_DIR = @as(u32, 70653);
pub const DISPID_A_UNICODEBIDI = @as(u32, 70654);
pub const DISPID_A_DIRECTION = @as(u32, 70655);
pub const DISPID_A_IMEMODE = @as(u32, 70656);
pub const DISPID_A_RUBYALIGN = @as(u32, 70657);
pub const DISPID_A_RUBYPOSITION = @as(u32, 70658);
pub const DISPID_A_RUBYOVERHANG = @as(u32, 70659);
pub const DISPID_INTERNAL_ONBEHAVIOR_CONTENTREADY = @as(u32, 70660);
pub const DISPID_INTERNAL_ONBEHAVIOR_DOCUMENTREADY = @as(u32, 70661);
pub const DISPID_INTERNAL_CDOMCHILDRENPTRCACHE = @as(u32, 70662);
pub const DISPID_A_LAYOUTGRIDCHAR = @as(u32, 70663);
pub const DISPID_A_LAYOUTGRIDLINE = @as(u32, 70664);
pub const DISPID_A_LAYOUTGRIDMODE = @as(u32, 70665);
pub const DISPID_A_LAYOUTGRIDTYPE = @as(u32, 70666);
pub const DISPID_A_LAYOUTGRID = @as(u32, 70667);
pub const DISPID_A_TEXTAUTOSPACE = @as(u32, 70668);
pub const DISPID_A_LINEBREAK = @as(u32, 70669);
pub const DISPID_A_WORDBREAK = @as(u32, 70670);
pub const DISPID_A_TEXTJUSTIFY = @as(u32, 70671);
pub const DISPID_A_TEXTJUSTIFYTRIM = @as(u32, 70672);
pub const DISPID_A_TEXTKASHIDA = @as(u32, 70673);
pub const DISPID_A_OVERFLOWX = @as(u32, 70675);
pub const DISPID_A_OVERFLOWY = @as(u32, 70676);
pub const DISPID_A_HTCDISPATCHITEM_VALUE = @as(u32, 70677);
pub const DISPID_A_DOCFRAGMENT = @as(u32, 70678);
pub const DISPID_A_HTCDD_ELEMENT = @as(u32, 70679);
pub const DISPID_A_HTCDD_CREATEEVENTOBJECT = @as(u32, 70680);
pub const DISPID_A_URNATOM = @as(u32, 70681);
pub const DISPID_A_UNIQUEPEERNUMBER = @as(u32, 70682);
pub const DISPID_A_ACCELERATOR = @as(u32, 70683);
pub const DISPID_INTERNAL_ONBEHAVIOR_APPLYSTYLE = @as(u32, 70684);
pub const DISPID_INTERNAL_RUNTIMESTYLEAA = @as(u32, 70685);
pub const DISPID_A_HTCDISPATCHITEM_VALUE_SCRIPTSONLY = @as(u32, 70686);
pub const DISPID_A_EXTENDEDTAGDESC = @as(u32, 70687);
pub const DISPID_A_ROTATE = @as(u32, 70688);
pub const DISPID_A_ZOOM = @as(u32, 70689);
pub const DISPID_A_HTCDD_PROTECTEDELEMENT = @as(u32, 70690);
pub const DISPID_A_LAYOUTFLOW = @as(u32, 70691);
pub const DISPID_INTERNAL_FILTERNATIVEINFOPTRCACHE = @as(u32, 70692);
pub const DISPID_A_HTCDD_ISMARKUPSHARED = @as(u32, 70693);
pub const DISPID_A_WORDWRAP = @as(u32, 70694);
pub const DISPID_A_TEXTUNDERLINEPOSITION = @as(u32, 70695);
pub const DISPID_A_HASLAYOUT = @as(u32, 70696);
pub const DISPID_A_MEDIA = @as(u32, 70697);
pub const DISPID_A_EDITABLE = @as(u32, 70698);
pub const DISPID_A_HIDEFOCUS = @as(u32, 70699);
pub const DISPID_INTERNAL_LAYOUTRECTREGISTRYPTRCACHE = @as(u32, 70700);
pub const DISPID_A_HTCDD_DEFAULTS = @as(u32, 70701);
pub const DISPID_A_TEXTLINETHROUGHSTYLE = @as(u32, 70702);
pub const DISPID_A_TEXTUNDERLINESTYLE = @as(u32, 70703);
pub const DISPID_A_TEXTEFFECT = @as(u32, 70704);
pub const DISPID_A_TEXTBACKGROUNDCOLOR = @as(u32, 70705);
pub const DISPID_A_RENDERINGPRIORITY = @as(u32, 70706);
pub const DISPID_INTERNAL_DWNPOSTPTRCACHE = @as(u32, 70707);
pub const DISPID_INTERNAL_CODEPAGESETTINGSPTRCACHE = @as(u32, 70708);
pub const DISPID_INTERNAL_DWNDOCPTRCACHE = @as(u32, 70709);
pub const DISPID_INTERNAL_DATABINDTASKPTRCACHE = @as(u32, 70710);
pub const DISPID_INTERNAL_URLLOCATIONCACHE = @as(u32, 70711);
pub const DISPID_INTERNAL_ARYELEMENTRELEASENOTIFYPTRCACHE = @as(u32, 70712);
pub const DISPID_INTERNAL_PEERFACTORYURLMAPPTRCACHE = @as(u32, 70713);
pub const DISPID_INTERNAL_STMDIRTYPTRCACHE = @as(u32, 70714);
pub const DISPID_INTERNAL_COMPUTEFORMATSTATECACHE = @as(u32, 70715);
pub const DISPID_A_SCROLLBARBASECOLOR = @as(u32, 70716);
pub const DISPID_A_SCROLLBARFACECOLOR = @as(u32, 70717);
pub const DISPID_A_SCROLLBAR3DLIGHTCOLOR = @as(u32, 70718);
pub const DISPID_A_SCROLLBARSHADOWCOLOR = @as(u32, 70719);
pub const DISPID_A_SCROLLBARHIGHLIGHTCOLOR = @as(u32, 70720);
pub const DISPID_A_SCROLLBARDARKSHADOWCOLOR = @as(u32, 70721);
pub const DISPID_A_SCROLLBARARROWCOLOR = @as(u32, 70722);
pub const DISPID_INTERNAL_ONBEHAVIOR_CONTENTSAVE = @as(u32, 70723);
pub const DISPID_A_DEFAULTTEXTSELECTION = @as(u32, 70724);
pub const DISPID_A_TEXTDECORATIONCOLOR = @as(u32, 70725);
pub const DISPID_A_TEXTCOLOR = @as(u32, 70726);
pub const DISPID_A_STYLETEXTDECORATION = @as(u32, 70727);
pub const DISPID_A_WRITINGMODE = @as(u32, 70728);
pub const DISPID_INTERNAL_MEDIA_REFERENCE = @as(u32, 70729);
pub const DISPID_INTERNAL_GENERICCOMPLUSREF = @as(u32, 70730);
pub const DISPID_INTERNAL_FOCUSITEMS = @as(u32, 70731);
pub const DISPID_A_SCROLLBARTRACKCOLOR = @as(u32, 70732);
pub const DISPID_INTERNAL_DWNHEADERCACHE = @as(u32, 70733);
pub const DISPID_A_FROZEN = @as(u32, 70734);
pub const DISPID_A_VIEWINHERITSTYLE = @as(u32, 70735);
pub const DISPID_INTERNAL_FRAMESCOLLECTION = @as(u32, 70736);
pub const DISPID_A_BGURLIMGCTXCACHEINDEX_FLINE = @as(u32, 70737);
pub const DISPID_A_BGURLIMGCTXCACHEINDEX_FLETTER = @as(u32, 70738);
pub const DISPID_A_TEXTALIGNLAST = @as(u32, 70739);
pub const DISPID_A_TEXTKASHIDASPACE = @as(u32, 70740);
pub const DISPID_INTERNAL_FONTHISTORYINDEX = @as(u32, 70741);
pub const DISPID_A_ALLOWTRANSPARENCY = @as(u32, 70742);
pub const DISPID_INTERNAL_URLSEARCHCACHE = @as(u32, 70743);
pub const DISPID_A_ISBLOCK = @as(u32, 70744);
pub const DISPID_A_TEXTOVERFLOW = @as(u32, 70745);
pub const DISPID_INTERNAL_CATTRIBUTECOLLPTRCACHE = @as(u32, 70746);
pub const DISPID_A_MINHEIGHT = @as(u32, 70747);
pub const DISPID_INTERNAL_INVOKECONTEXTDOCUMENT = @as(u32, 70748);
pub const DISPID_A_INTERPOLATION = @as(u32, 70749);
pub const DISPID_A_MAXHEIGHT = @as(u32, 70750);
pub const DISPID_A_MINWIDTH = @as(u32, 70751);
pub const DISPID_A_MAXWIDTH = @as(u32, 70752);
pub const DISPID_INTERNAL_ARYOBJECTRELEASECLEANUPPTRCACHE = @as(u32, 70753);
pub const DISPID_A_CONTENT = @as(u32, 70754);
pub const DISPID_A_CAPTIONSIDE = @as(u32, 70755);
pub const DISPID_A_COUNTERINCREMENT = @as(u32, 70756);
pub const DISPID_A_COUNTERRESET = @as(u32, 70757);
pub const DISPID_A_OUTLINE = @as(u32, 70758);
pub const DISPID_A_OUTLINEWIDTH = @as(u32, 70759);
pub const DISPID_A_OUTLINESTYLE = @as(u32, 70760);
pub const DISPID_A_OUTLINECOLOR = @as(u32, 70761);
pub const DISPID_A_BOXSIZING = @as(u32, 70762);
pub const DISPID_A_BORDERSPACING = @as(u32, 70763);
pub const DISPID_A_ORPHANS = @as(u32, 70764);
pub const DISPID_A_WIDOWS = @as(u32, 70765);
pub const DISPID_A_PAGEBREAKINSIDE = @as(u32, 70766);
pub const DISPID_A_MS_BEHAVIOR = @as(u32, 70767);
pub const DISPID_A_MS_SCROLLBARBASECOLOR = @as(u32, 70768);
pub const DISPID_A_MS_SCROLLBARFACECOLOR = @as(u32, 70769);
pub const DISPID_A_MS_SCROLLBAR3DLIGHTCOLOR = @as(u32, 70770);
pub const DISPID_A_MS_SCROLLBARSHADOWCOLOR = @as(u32, 70771);
pub const DISPID_A_MS_SCROLLBARHIGHLIGHTCOLOR = @as(u32, 70772);
pub const DISPID_A_MS_SCROLLBARDARKSHADOWCOLOR = @as(u32, 70773);
pub const DISPID_A_MS_SCROLLBARARROWCOLOR = @as(u32, 70774);
pub const DISPID_A_MS_SCROLLBARTRACKCOLOR = @as(u32, 70775);
pub const DISPID_A_MS_TEXTALIGNLAST = @as(u32, 70776);
pub const DISPID_A_MS_TEXTOVERFLOW = @as(u32, 70777);
pub const DISPID_A_MS_TEXTUNDERLINEPOSITION = @as(u32, 70778);
pub const DISPID_A_MS_WRITINGMODE = @as(u32, 70779);
pub const DISPID_A_MS_IMEMODE = @as(u32, 70780);
pub const DISPID_A_MS_BACKGROUNDPOSX = @as(u32, 70781);
pub const DISPID_A_MS_BACKGROUNDPOSY = @as(u32, 70782);
pub const DISPID_A_MS_ACCELERATOR = @as(u32, 70783);
pub const DISPID_A_MS_LAYOUTFLOW = @as(u32, 70784);
pub const DISPID_A_MS_ZOOM = @as(u32, 70785);
pub const DISPID_A_EMPTYCELLS = @as(u32, 70786);
pub const DISPID_A_MS_BLOCKPROGRESSION = @as(u32, 70787);
pub const DISPID_A_QUOTES = @as(u32, 70788);
pub const DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCBEFORE = @as(u32, 70789);
pub const DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCAFTER = @as(u32, 70790);
pub const DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLBEFORE = @as(u32, 70791);
pub const DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLAFTER = @as(u32, 70792);
pub const DISPID_AAHEADER = @as(u32, 70793);
pub const DISPID_INTERNAL_GETTERSETTERCOLLECTION = @as(u32, 70794);
pub const DISPID_A_MS_LAYOUTGRIDCHAR = @as(u32, 70795);
pub const DISPID_A_MS_LAYOUTGRIDLINE = @as(u32, 70796);
pub const DISPID_A_MS_LAYOUTGRIDMODE = @as(u32, 70797);
pub const DISPID_A_MS_LAYOUTGRIDTYPE = @as(u32, 70798);
pub const DISPID_A_MS_LAYOUTGRID = @as(u32, 70799);
pub const DISPID_A_MS_LINEBREAK = @as(u32, 70800);
pub const DISPID_A_MS_FILTER = @as(u32, 70801);
pub const DISPID_A_MS_OVERFLOWX = @as(u32, 70802);
pub const DISPID_A_MS_OVERFLOWY = @as(u32, 70803);
pub const DISPID_A_MS_TEXTAUTOSPACE = @as(u32, 70804);
pub const DISPID_A_MS_TEXTJUSTIFY = @as(u32, 70805);
pub const DISPID_A_MS_TEXTKASHIDASPACE = @as(u32, 70806);
pub const DISPID_A_MS_WORDBREAK = @as(u32, 70807);
pub const DISPID_A_MS_WORDWRAP = @as(u32, 70808);
pub const DISPID_INTERNAL_URIBEFOREREDIRECT = @as(u32, 70809);
pub const DISPID_A_ALIGNMENTBASELINE = @as(u32, 70814);
pub const DISPID_A_BASELINESHIFT = @as(u32, 70815);
pub const DISPID_A_DOMINANTBASELINE = @as(u32, 70816);
pub const DISPID_A_FONTSIZEADJUST = @as(u32, 70817);
pub const DISPID_A_FONTSTRETCH = @as(u32, 70818);
pub const DISPID_A_OPACITY = @as(u32, 70819);
pub const DISPID_A_CLIPPATH = @as(u32, 70820);
pub const DISPID_A_CLIPRULE = @as(u32, 70821);
pub const DISPID_A_FILL = @as(u32, 70822);
pub const DISPID_A_FILLOPACITY = @as(u32, 70823);
pub const DISPID_A_FILLRULE = @as(u32, 70824);
pub const DISPID_A_KERNING = @as(u32, 70825);
pub const DISPID_A_MARKER = @as(u32, 70826);
pub const DISPID_A_MARKEREND = @as(u32, 70827);
pub const DISPID_A_MARKERMID = @as(u32, 70828);
pub const DISPID_A_MARKERSTART = @as(u32, 70829);
pub const DISPID_A_MASK = @as(u32, 70830);
pub const DISPID_A_POINTEREVENTS = @as(u32, 70831);
pub const DISPID_A_STOPCOLOR = @as(u32, 70832);
pub const DISPID_A_STOPOPACITY = @as(u32, 70833);
pub const DISPID_A_STROKE = @as(u32, 70834);
pub const DISPID_A_STROKEDASHARRAY = @as(u32, 70835);
pub const DISPID_A_STROKEDASHOFFSET = @as(u32, 70836);
pub const DISPID_A_STROKELINECAP = @as(u32, 70837);
pub const DISPID_A_STROKELINEJOIN = @as(u32, 70838);
pub const DISPID_A_STROKEMITERLIMIT = @as(u32, 70839);
pub const DISPID_A_STROKEOPACITY = @as(u32, 70840);
pub const DISPID_A_STROKEWIDTH = @as(u32, 70841);
pub const DISPID_A_TEXTANCHOR = @as(u32, 70842);
pub const DISPID_A_GLYPHORIENTATIONHORIZONTAL = @as(u32, 70843);
pub const DISPID_A_GLYPHORIENTATIONVERTICAL = @as(u32, 70844);
pub const DISPID_A_CSSFLOAT = @as(u32, 70845);
pub const DISPID_A_BORDERRADIUS = @as(u32, 70846);
pub const DISPID_A_BORDERTOPLEFTRADIUS = @as(u32, 70847);
pub const DISPID_A_BORDERTOPRIGHTRADIUS = @as(u32, 70848);
pub const DISPID_A_BORDERBOTTOMRIGHTRADIUS = @as(u32, 70849);
pub const DISPID_A_BORDERBOTTOMLEFTRADIUS = @as(u32, 70850);
pub const DISPID_A_MS_TRANSFORM = @as(u32, 70851);
pub const DISPID_A_IE9_BACKGROUNDCLIP = @as(u32, 70852);
pub const DISPID_A_IE9_BACKGROUNDORIGIN = @as(u32, 70853);
pub const DISPID_A_IE9_BACKGROUNDSIZE = @as(u32, 70854);
pub const DISPID_A_IE9_BOXSHADOW = @as(u32, 70855);
pub const DISPID_A_MS_TRANSFORMORIGIN = @as(u32, 70861);
pub const DISPID_A_MS_TRANSFORMORIGINX = @as(u32, 70862);
pub const DISPID_A_MS_TRANSFORMORIGINY = @as(u32, 70863);
pub const DISPID_A_MS_TEXTSIZEADJUST = @as(u32, 70864);
pub const DISPID_A_MS_TRANSITIONPROPERTY = @as(u32, 70866);
pub const DISPID_A_MS_TRANSITIONDURATION = @as(u32, 70867);
pub const DISPID_A_MS_TRANSITIONTIMINGFUNCTION = @as(u32, 70868);
pub const DISPID_A_MS_TRANSITIONDELAY = @as(u32, 70869);
pub const DISPID_A_MS_TRANSITION = @as(u32, 70870);
pub const DISPID_A_COLUMNS = @as(u32, 70871);
pub const DISPID_A_COLUMNCOUNT = @as(u32, 70872);
pub const DISPID_A_COLUMNWIDTH = @as(u32, 70873);
pub const DISPID_A_COLUMNGAP = @as(u32, 70874);
pub const DISPID_A_COLUMNFILL = @as(u32, 70875);
pub const DISPID_A_COLUMNSPAN = @as(u32, 70876);
pub const DISPID_A_COLUMNRULE = @as(u32, 70877);
pub const DISPID_A_COLUMNRULESTYLE = @as(u32, 70878);
pub const DISPID_A_COLUMNRULEWIDTH = @as(u32, 70879);
pub const DISPID_A_COLUMNRULECOLOR = @as(u32, 70880);
pub const DISPID_A_BREAKBEFORE = @as(u32, 70881);
pub const DISPID_A_BREAKAFTER = @as(u32, 70882);
pub const DISPID_A_BREAKINSIDE = @as(u32, 70883);
pub const DISPID_A_MS_TRANSFORMORIGINZ = @as(u32, 70884);
pub const DISPID_A_MS_PERSPECTIVE = @as(u32, 70885);
pub const DISPID_A_MS_PERSPECTIVEORIGIN = @as(u32, 70886);
pub const DISPID_A_MS_PERSPECTIVEORIGINX = @as(u32, 70887);
pub const DISPID_A_MS_PERSPECTIVEORIGINY = @as(u32, 70888);
pub const DISPID_A_MS_TRANSFORMSTYLE = @as(u32, 70889);
pub const DISPID_A_MS_BACKFACEVISIBILITY = @as(u32, 70890);
pub const DISPID_A_MS_SCROLLCHAINING = @as(u32, 70891);
pub const DISPID_A_MS_CONTENTZOOMING = @as(u32, 70892);
pub const DISPID_A_MS_CONTENTZOOMSNAPTYPE = @as(u32, 70893);
pub const DISPID_A_MS_SCROLLRAILS = @as(u32, 70894);
pub const DISPID_A_MS_CONTENTZOOMCHAINING = @as(u32, 70895);
pub const DISPID_A_MS_SCROLLSNAPTYPE = @as(u32, 70896);
pub const DISPID_A_MS_CONTENTZOOMLIMIT = @as(u32, 70897);
pub const DISPID_A_MS_CONTENTZOOMSNAP = @as(u32, 70898);
pub const DISPID_A_MS_CONTENTZOOMSNAPPOINTS = @as(u32, 70899);
pub const DISPID_A_MS_CONTENTZOOMFACTOR = @as(u32, 70900);
pub const DISPID_A_MS_CONTENTZOOMLIMITMIN = @as(u32, 70901);
pub const DISPID_A_MS_CONTENTZOOMLIMITMAX = @as(u32, 70902);
pub const DISPID_A_MS_SCROLLSNAPX = @as(u32, 70903);
pub const DISPID_A_MS_SCROLLSNAPY = @as(u32, 70904);
pub const DISPID_A_MS_SCROLLSNAPPOINTSX = @as(u32, 70905);
pub const DISPID_A_MS_SCROLLSNAPPOINTSY = @as(u32, 70906);
pub const DISPID_A_SPELLCHECK = @as(u32, 70907);
pub const DISPID_A_MS_GRIDCOLUMN = @as(u32, 70908);
pub const DISPID_A_MS_GRIDCOLUMNALIGN = @as(u32, 70909);
pub const DISPID_A_MS_GRIDCOLUMNS = @as(u32, 70910);
pub const DISPID_A_MS_GRIDCOLUMNSPAN = @as(u32, 70911);
pub const DISPID_A_MS_GRIDROW = @as(u32, 70913);
pub const DISPID_A_MS_GRIDROWALIGN = @as(u32, 70914);
pub const DISPID_A_MS_GRIDROWS = @as(u32, 70915);
pub const DISPID_A_MS_GRIDROWSPAN = @as(u32, 70916);
pub const DISPID_A_MS_ANIMATIONNAME = @as(u32, 70917);
pub const DISPID_A_MS_ANIMATIONDURATION = @as(u32, 70918);
pub const DISPID_A_MS_ANIMATIONTIMINGFUNCTION = @as(u32, 70919);
pub const DISPID_A_MS_ANIMATIONDELAY = @as(u32, 70920);
pub const DISPID_A_MS_ANIMATIONDIRECTION = @as(u32, 70921);
pub const DISPID_A_MS_ANIMATIONPLAYSTATE = @as(u32, 70922);
pub const DISPID_A_MS_ANIMATIONITERATIONCOUNT = @as(u32, 70923);
pub const DISPID_A_MS_ANIMATION = @as(u32, 70924);
pub const DISPID_A_MS_ANIMATIONFILLMODE = @as(u32, 70925);
pub const DISPID_A_FLOODCOLOR = @as(u32, 70926);
pub const DISPID_A_FLOODOPACITY = @as(u32, 70927);
pub const DISPID_A_COLORINTERPOLATIONFILTERS = @as(u32, 70928);
pub const DISPID_A_LIGHTINGCOLOR = @as(u32, 70929);
pub const DISPID_A_MS_SCROLLLIMITXMIN = @as(u32, 70930);
pub const DISPID_A_MS_SCROLLLIMITYMIN = @as(u32, 70931);
pub const DISPID_A_MS_SCROLLLIMITXMAX = @as(u32, 70932);
pub const DISPID_A_MS_SCROLLLIMITYMAX = @as(u32, 70933);
pub const DISPID_A_MS_SCROLLLIMIT = @as(u32, 70934);
pub const DISPID_A_MS_OVERFLOWSTYLE = @as(u32, 70935);
pub const DISPID_A_TEXTSHADOW = @as(u32, 70936);
pub const DISPID_A_MS_WRAPTHROUGH = @as(u32, 70937);
pub const DISPID_A_MS_FLOWFROM = @as(u32, 70938);
pub const DISPID_A_MS_FLOWINTO = @as(u32, 70939);
pub const DISPID_A_MS_HYPHENS = @as(u32, 70940);
pub const DISPID_A_MS_HYPHENATE_LIMIT_ZONE = @as(u32, 70941);
pub const DISPID_A_MS_HYPHENATE_LIMIT_CHARS = @as(u32, 70942);
pub const DISPID_A_MS_HYPHENATE_LIMIT_LINES = @as(u32, 70943);
pub const DISPID_A_DRAGGABLE = @as(u32, 70944);
pub const DISPID_A_MS_HIGHCONTRASTADJUST = @as(u32, 70945);
pub const DISPID_A_ENABLEBACKGROUND = @as(u32, 70946);
pub const DISPID_A_MS_WRAPMARGIN = @as(u32, 70947);
pub const DISPID_A_MS_WRAPFLOW = @as(u32, 70949);
pub const DISPID_A_MS_FONTFEATURESETTINGS = @as(u32, 70950);
pub const DISPID_A_MS_USERSELECT = @as(u32, 70951);
pub const DISPID_A_MS_TOUCHACTION = @as(u32, 70952);
pub const DISPID_A_CLASSLIST = @as(u32, 70953);
pub const DISPID_A_MS_SCROLLTRANSLATION = @as(u32, 70954);
pub const DISPID_A_MS_FLEX = @as(u32, 70955);
pub const DISPID_A_MS_FLEXPOSITIVE = @as(u32, 70956);
pub const DISPID_A_MS_FLEXNEGATIVE = @as(u32, 70957);
pub const DISPID_A_MS_FLEXPREFERREDSIZE = @as(u32, 70958);
pub const DISPID_A_MS_FLEXFLOW = @as(u32, 70959);
pub const DISPID_A_MS_FLEXDIRECTION = @as(u32, 70960);
pub const DISPID_A_MS_FLEXWRAP = @as(u32, 70961);
pub const DISPID_A_MS_FLEXALIGN = @as(u32, 70962);
pub const DISPID_A_MS_FLEXITEMALIGN = @as(u32, 70963);
pub const DISPID_A_MS_FLEXPACK = @as(u32, 70964);
pub const DISPID_A_MS_FLEXLINEPACK = @as(u32, 70965);
pub const DISPID_A_MS_FLEXORDER = @as(u32, 70966);
pub const DISPID_A_TRANSFORM = @as(u32, 70967);
pub const DISPID_A_TRANSFORMORIGIN = @as(u32, 70968);
pub const DISPID_A_TRANSITIONPROPERTY = @as(u32, 70969);
pub const DISPID_A_TRANSITIONDURATION = @as(u32, 70970);
pub const DISPID_A_TRANSITIONTIMINGFUNCTION = @as(u32, 70971);
pub const DISPID_A_TRANSITIONDELAY = @as(u32, 70972);
pub const DISPID_A_TRANSITION = @as(u32, 70973);
pub const DISPID_A_PERSPECTIVE = @as(u32, 70974);
pub const DISPID_A_PERSPECTIVEORIGIN = @as(u32, 70975);
pub const DISPID_A_TRANSFORMSTYLE = @as(u32, 70976);
pub const DISPID_A_BACKFACEVISIBILITY = @as(u32, 70977);
pub const DISPID_A_ANIMATIONNAME = @as(u32, 70978);
pub const DISPID_A_ANIMATIONDURATION = @as(u32, 70979);
pub const DISPID_A_ANIMATIONTIMINGFUNCTION = @as(u32, 70980);
pub const DISPID_A_ANIMATIONDELAY = @as(u32, 70981);
pub const DISPID_A_ANIMATIONDIRECTION = @as(u32, 70982);
pub const DISPID_A_ANIMATIONPLAYSTATE = @as(u32, 70983);
pub const DISPID_A_ANIMATIONITERATIONCOUNT = @as(u32, 70984);
pub const DISPID_A_ANIMATION = @as(u32, 70985);
pub const DISPID_A_ANIMATIONFILLMODE = @as(u32, 70986);
pub const DISPID_A_FONTFEATURESETTINGS = @as(u32, 70987);
pub const DISPID_A_TRANSFORMORIGINX = @as(u32, 70988);
pub const DISPID_A_TRANSFORMORIGINY = @as(u32, 70989);
pub const DISPID_A_TRANSFORMORIGINZ = @as(u32, 70990);
pub const DISPID_A_PERSPECTIVEORIGINX = @as(u32, 70992);
pub const DISPID_A_PERSPECTIVEORIGINY = @as(u32, 70993);
pub const DISPID_A_MS_TOUCHSELECT = @as(u32, 70994);
pub const DISPID_INTERNAL_ERRORPAGEREFRESHURL = @as(u32, 70995);
pub const DISPID_INTERNAL_ERRORPAGEREASON = @as(u32, 70996);
pub const DISPID_INTERNAL_ERRORPAGEDWNPOST = @as(u32, 70997);
pub const DISPID_A_FLEXDIRECTION = @as(u32, 70998);
pub const DISPID_A_FLEXWRAP = @as(u32, 70999);
pub const DISPID_A_FLEXFLOW = @as(u32, 71000);
pub const DISPID_A_ORDER = @as(u32, 71001);
pub const DISPID_A_FLEX = @as(u32, 71002);
pub const DISPID_A_FLEXGROW = @as(u32, 71003);
pub const DISPID_A_FLEXSHRINK = @as(u32, 71004);
pub const DISPID_A_FLEXBASIS = @as(u32, 71005);
pub const DISPID_A_JUSTIFYCONTENT = @as(u32, 71006);
pub const DISPID_A_ALIGNITEMS = @as(u32, 71007);
pub const DISPID_A_ALIGNSELF = @as(u32, 71008);
pub const DISPID_A_ALIGNCONTENT = @as(u32, 71009);
pub const DISPID_A_BORDERIMAGE = @as(u32, 71010);
pub const DISPID_A_BORDERIMAGESOURCE = @as(u32, 71011);
pub const DISPID_A_BORDERIMAGESLICE = @as(u32, 71012);
pub const DISPID_A_BORDERIMAGEWIDTH = @as(u32, 71013);
pub const DISPID_A_BORDERIMAGEOUTSET = @as(u32, 71014);
pub const DISPID_A_BORDERIMAGEREPEAT = @as(u32, 71015);
pub const DISPID_A_DATASET = @as(u32, 71016);
pub const DISPID_A_MS_IMEALIGN = @as(u32, 71017);
pub const DISPID_A_MS_TEXTCOMBINEHORIZONTAL = @as(u32, 71018);
pub const DISPID_A_TOUCHACTION = @as(u32, 71019);
pub const DISPID_A_WEBKIT_APPEARANCE = @as(u32, 71020);
pub const DISPID_A_WEBKIT_BOXALIGN = @as(u32, 71021);
pub const DISPID_A_WEBKIT_BOXORDINALGROUP = @as(u32, 71022);
pub const DISPID_A_WEBKIT_BOXPACK = @as(u32, 71023);
pub const DISPID_A_WEBKIT_BOXFLEX = @as(u32, 71024);
pub const DISPID_A_WEBKIT_BOXORIENT = @as(u32, 71025);
pub const DISPID_A_WEBKIT_BOXDIRECTION = @as(u32, 71026);
pub const DISPID_A_WEBKIT_ANIMATIONFILLMODE = @as(u32, 71027);
pub const DISPID_A_WEBKIT_TRANSFORM = @as(u32, 71028);
pub const DISPID_A_WEBKIT_BACKGROUNDSIZE = @as(u32, 71029);
pub const DISPID_A_WEBKIT_BACKFACEVISIBILITY = @as(u32, 71030);
pub const DISPID_A_WEBKIT_BOXSIZING = @as(u32, 71031);
pub const DISPID_A_WEBKIT_USERSELECT = @as(u32, 71032);
pub const DISPID_A_WEBKIT_ANIMATION = @as(u32, 71033);
pub const DISPID_A_WEBKIT_TRANSITION = @as(u32, 71034);
pub const DISPID_A_WEBKIT_ANIMATIONNAME = @as(u32, 71035);
pub const DISPID_A_WEBKIT_ANIMATIONDURATION = @as(u32, 71036);
pub const DISPID_A_WEBKIT_ANIMATIONTIMINGFUNCTION = @as(u32, 71037);
pub const DISPID_A_WEBKIT_ANIMATIONDELAY = @as(u32, 71038);
pub const DISPID_A_WEBKIT_ANIMATIONITERATIONCOUNT = @as(u32, 71039);
pub const DISPID_A_WEBKIT_ANIMATIONDIRECTION = @as(u32, 71040);
pub const DISPID_A_WEBKIT_ANIMATIONPLAYSTATE = @as(u32, 71041);
pub const DISPID_A_WEBKIT_TRANSITIONPROPERTY = @as(u32, 71042);
pub const DISPID_A_WEBKIT_TRANSITIONDURATION = @as(u32, 71043);
pub const DISPID_A_WEBKIT_TRANSITIONTIMINGFUNCTION = @as(u32, 71044);
pub const DISPID_A_WEBKIT_TRANSITIONDELAY = @as(u32, 71045);
pub const DISPID_A_WEBKIT_BACKGROUNDATTACHMENT = @as(u32, 71046);
pub const DISPID_A_WEBKIT_BACKGROUNDCOLOR = @as(u32, 71047);
pub const DISPID_A_WEBKIT_BACKGROUNDCLIP = @as(u32, 71048);
pub const DISPID_A_WEBKIT_BACKGROUNDIMAGE = @as(u32, 71049);
pub const DISPID_A_WEBKIT_BACKGROUNDREPEAT = @as(u32, 71050);
pub const DISPID_A_WEBKIT_BACKGROUNDORIGIN = @as(u32, 71051);
pub const DISPID_A_WEBKIT_BACKGROUNDPOSITION = @as(u32, 71052);
pub const DISPID_A_WEBKIT_BACKGROUNDPOSITIONX = @as(u32, 71053);
pub const DISPID_A_WEBKIT_BACKGROUNDPOSITIONY = @as(u32, 71054);
pub const DISPID_A_WEBKIT_BACKGROUND = @as(u32, 71055);
pub const DISPID_A_WEBKIT_TRANSFORMORIGIN = @as(u32, 71056);
pub const DISPID_A_WEBKIT_TRANSFORMORIGINX = @as(u32, 71057);
pub const DISPID_A_WEBKIT_TRANSFORMORIGINY = @as(u32, 71058);
pub const DISPID_A_WEBKIT_TRANSFORMORIGINZ = @as(u32, 71059);
pub const DISPID_A_WEBKIT_TEXTSIZEADJUST = @as(u32, 71060);
pub const DISPID_A_WEBKIT_BORDERIMAGE = @as(u32, 71061);
pub const DISPID_A_WEBKIT_BORDERIMAGESOURCE = @as(u32, 71062);
pub const DISPID_A_WEBKIT_BORDERIMAGESLICE = @as(u32, 71063);
pub const DISPID_A_WEBKIT_BORDERIMAGEWIDTH = @as(u32, 71064);
pub const DISPID_A_WEBKIT_BORDERIMAGEOUTSET = @as(u32, 71065);
pub const DISPID_A_WEBKIT_BORDERIMAGEREPEAT = @as(u32, 71066);
pub const DISPID_INTERNAL_FIRST = @as(u32, 71136);
pub const DISPID_INTERNAL_BACKGROUNDDEFINITION = @as(u32, 71137);
pub const DISPID_A_MEDIAORIENTATION = @as(u32, 71138);
pub const DISPID_A_MEDIAMAXWIDTH = @as(u32, 71139);
pub const DISPID_A_MEDIAMINWIDTH = @as(u32, 71140);
pub const DISPID_A_MEDIAWIDTH = @as(u32, 71141);
pub const DISPID_A_MEDIAMAXHEIGHT = @as(u32, 71142);
pub const DISPID_A_MEDIAMINHEIGHT = @as(u32, 71143);
pub const DISPID_A_MEDIAHEIGHT = @as(u32, 71144);
pub const DISPID_A_MEDIAMAXDEVICEWIDTH = @as(u32, 71145);
pub const DISPID_A_MEDIAMINDEVICEWIDTH = @as(u32, 71146);
pub const DISPID_A_MEDIADEVICEWIDTH = @as(u32, 71147);
pub const DISPID_A_MEDIAMAXDEVICEHEIGHT = @as(u32, 71148);
pub const DISPID_A_MEDIAMINDEVICEHEIGHT = @as(u32, 71149);
pub const DISPID_A_MEDIADEVICEHEIGHT = @as(u32, 71150);
pub const DISPID_A_MEDIAMAXASPECTRATIO = @as(u32, 71151);
pub const DISPID_A_MEDIAMINASPECTRATIO = @as(u32, 71152);
pub const DISPID_A_MEDIAASPECTRATIO = @as(u32, 71153);
pub const DISPID_A_MEDIAMAXDEVICEASPECTRATIO = @as(u32, 71154);
pub const DISPID_A_MEDIAMINDEVICEASPECTRATIO = @as(u32, 71155);
pub const DISPID_A_MEDIADEVICEASPECTRATIO = @as(u32, 71156);
pub const DISPID_A_MEDIAMAXCOLOR = @as(u32, 71157);
pub const DISPID_A_MEDIAMINCOLOR = @as(u32, 71158);
pub const DISPID_A_MEDIACOLOR = @as(u32, 71159);
pub const DISPID_A_MEDIAMAXCOLORINDEX = @as(u32, 71160);
pub const DISPID_A_MEDIAMINCOLORINDEX = @as(u32, 71161);
pub const DISPID_A_MEDIACOLORINDEX = @as(u32, 71162);
pub const DISPID_A_MEDIAMAXMONOCHROME = @as(u32, 71163);
pub const DISPID_A_MEDIAMINMONOCHROME = @as(u32, 71164);
pub const DISPID_A_MEDIAMONOCHROME = @as(u32, 71165);
pub const DISPID_A_MEDIAMAXRESOLUTION = @as(u32, 71166);
pub const DISPID_A_MEDIAMINRESOLUTION = @as(u32, 71167);
pub const DISPID_A_MEDIARESOLUTION = @as(u32, 71168);
pub const DISPID_INTERNAL_CATTRIBUTEPTRCACHE = @as(u32, 71169);
pub const DISPID_INTERNAL_FONTFACEUNICODERANGE = @as(u32, 71170);
pub const DISPID_INTERNAL_TOUCHTARGETHANDLER = @as(u32, 71171);
pub const DISPID_INTERNAL_PAGEFLOWCOLLECTION = @as(u32, 71172);
pub const DISPID_INTERNAL_NAMEDFLOWCOLLECTION = @as(u32, 71173);
pub const DISPID_A_MEDIAMSHIGHCONTRAST = @as(u32, 71174);
pub const DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_WORDS = @as(u32, 71175);
pub const DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_BEFORE = @as(u32, 71176);
pub const DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_AFTER = @as(u32, 71177);
pub const DISPID_A_MEDIAMSVIEWSTATE = @as(u32, 71178);
pub const DISPID_INTERNAL_ARIAATOMIC = @as(u32, 71179);
pub const DISPID_INTERNAL_ARIAAUTOCOMPLETE = @as(u32, 71180);
pub const DISPID_INTERNAL_ARIADROPEFFECT = @as(u32, 71181);
pub const DISPID_INTERNAL_ARIAGRABBED = @as(u32, 71182);
pub const DISPID_INTERNAL_ARIALABEL = @as(u32, 71183);
pub const DISPID_INTERNAL_ARIAMULTILINE = @as(u32, 71184);
pub const DISPID_INTERNAL_ARIAORIENTATION = @as(u32, 71185);
pub const DISPID_INTERNAL_ARIASORT = @as(u32, 71186);
pub const DISPID_INTERNAL_ARIAVALUETEXT = @as(u32, 71187);
pub const DISPID_A_MEDIAGRID = @as(u32, 71188);
pub const DISPID_A_MEDIASCAN = @as(u32, 71189);
pub const DISPID_A_ACCEVENTRECORDID_START = @as(u32, 71190);
pub const DISPID_A_ACCEVENTRECORDID_END = @as(u32, 71209);
pub const DISPID_INTERNAL_REQUIRED = @as(u32, 71210);
pub const DISPID_INTERNAL_CSS_PARSEDARY = @as(u32, 71211);
pub const DISPID_INTERNAL_SOURCELOCATION = @as(u32, 71212);
pub const DISPID_INTERNAL_CSS_TRACEDSTYLES = @as(u32, 71213);
pub const DISPID_A_BDURLIMGCTXCACHEINDEX = @as(u32, 71214);
pub const DISPID_A_MEDIAWEBKITDEVICEPIXELRATIO = @as(u32, 71215);
pub const DISPID_A_MEDIAWEBKITMAXDEVICEPIXELRATIO = @as(u32, 71216);
pub const DISPID_A_MEDIAWEBKITMINDEVICEPIXELRATIO = @as(u32, 71217);
pub const DISPID_SVGSTYLABLE_CLASSNAME_PROP = @as(u32, 1001);
pub const DISPID_SVGLOCATABLE_NEARESTVIEWPORTELEMENT = @as(u32, 1002);
pub const DISPID_SVGLOCATABLE_FARTHESTVIEWPORTELEMENT = @as(u32, 1003);
pub const DISPID_SVGLOCATABLE_GETBBOX = @as(u32, 1004);
pub const DISPID_SVGLOCATABLE_GETCTM = @as(u32, 1005);
pub const DISPID_SVGLOCATABLE_GETSCREENCTM = @as(u32, 1006);
pub const DISPID_SVGLOCATABLE_GETTRANSFORMTOELEMENT = @as(u32, 1007);
pub const DISPID_SVGTRANSFORMABLE_TRANSFORM_ATTR = @as(u32, 1008);
pub const DISPID_SVGTRANSFORMABLE_TRANSFORM_PROP = @as(u32, 1009);
pub const DISPID_SVGTESTS_REQUIREDFEATURES_ATTR = @as(u32, 1010);
pub const DISPID_SVGTESTS_REQUIREDFEATURES_PROP = @as(u32, 1011);
pub const DISPID_SVGTESTS_REQUIREDEXTENSIONS_ATTR = @as(u32, 1012);
pub const DISPID_SVGTESTS_REQUIREDEXTENSIONS_PROP = @as(u32, 1013);
pub const DISPID_SVGTESTS_SYSTEMLANGUAGE_ATTR = @as(u32, 1014);
pub const DISPID_SVGTESTS_SYSTEMLANGUAGE_PROP = @as(u32, 1015);
pub const DISPID_SVGTESTS_HASEXTENSION = @as(u32, 1016);
pub const DISPID_SVGLANGSPACE_XMLLANG = @as(u32, 1017);
pub const DISPID_SVGLANGSPACE_XMLSPACE = @as(u32, 1018);
pub const DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_ATTR = @as(u32, 1019);
pub const DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_PROP = @as(u32, 1020);
pub const DISPID_SVGFITTOVIEWBOX_VIEWBOX_ATTR = @as(u32, 1021);
pub const DISPID_SVGFITTOVIEWBOX_VIEWBOX_PROP = @as(u32, 1022);
pub const DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_ATTR = @as(u32, 1023);
pub const DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_PROP = @as(u32, 1024);
pub const DISPID_SVGZOOMANDPAN_ZOOMANDPAN = @as(u32, 1025);
pub const DISPID_SVGURIREFERENCE_HREF = @as(u32, 1026);
pub const DISPID_EVPROP_ONMOUSEOVER = @as(u32, 71536);
pub const DISPID_EVMETH_ONMOUSEOVER = @as(u32, 65544);
pub const DISPID_EVPROP_ONMOUSEOUT = @as(u32, 71537);
pub const DISPID_EVMETH_ONMOUSEOUT = @as(u32, 65545);
pub const DISPID_EVPROP_ONMOUSEDOWN = @as(u32, 71538);
pub const DISPID_EVMETH_ONMOUSEDOWN = @as(i32, -605);
pub const DISPID_EVPROP_ONMOUSEUP = @as(u32, 71539);
pub const DISPID_EVMETH_ONMOUSEUP = @as(i32, -607);
pub const DISPID_EVPROP_ONMOUSEMOVE = @as(u32, 71540);
pub const DISPID_EVMETH_ONMOUSEMOVE = @as(i32, -606);
pub const DISPID_EVPROP_ONKEYDOWN = @as(u32, 71541);
pub const DISPID_EVMETH_ONKEYDOWN = @as(i32, -602);
pub const DISPID_EVPROP_ONKEYUP = @as(u32, 71542);
pub const DISPID_EVMETH_ONKEYUP = @as(i32, -604);
pub const DISPID_EVPROP_ONKEYPRESS = @as(u32, 71543);
pub const DISPID_EVMETH_ONKEYPRESS = @as(i32, -603);
pub const DISPID_EVPROP_ONCLICK = @as(u32, 71544);
pub const DISPID_EVMETH_ONCLICK = @as(i32, -600);
pub const DISPID_EVPROP_ONDBLCLICK = @as(u32, 71545);
pub const DISPID_EVMETH_ONDBLCLICK = @as(i32, -601);
pub const DISPID_EVPROP_ONSELECT = @as(u32, 71546);
pub const DISPID_EVMETH_ONSELECT = @as(u32, 1006);
pub const DISPID_EVPROP_ONSUBMIT = @as(u32, 71547);
pub const DISPID_EVMETH_ONSUBMIT = @as(u32, 1007);
pub const DISPID_EVPROP_ONRESET = @as(u32, 71548);
pub const DISPID_EVMETH_ONRESET = @as(u32, 1015);
pub const DISPID_EVPROP_ONHELP = @as(u32, 71549);
pub const DISPID_EVMETH_ONHELP = @as(u32, 65546);
pub const DISPID_EVPROP_ONFOCUS = @as(u32, 71550);
pub const DISPID_EVMETH_ONFOCUS = @as(u32, 65537);
pub const DISPID_EVPROP_ONBLUR = @as(u32, 71551);
pub const DISPID_EVPROP_ONROWEXIT = @as(u32, 71554);
pub const DISPID_EVMETH_ONROWEXIT = @as(u32, 65542);
pub const DISPID_EVPROP_ONROWENTER = @as(u32, 71555);
pub const DISPID_EVMETH_ONROWENTER = @as(u32, 65543);
pub const DISPID_EVPROP_ONBOUNCE = @as(u32, 71556);
pub const DISPID_EVMETH_ONBOUNCE = @as(u32, 1009);
pub const DISPID_EVPROP_ONBEFOREUPDATE = @as(u32, 71557);
pub const DISPID_EVMETH_ONBEFOREUPDATE = @as(u32, 65540);
pub const DISPID_EVPROP_ONAFTERUPDATE = @as(u32, 71558);
pub const DISPID_EVMETH_ONAFTERUPDATE = @as(u32, 65541);
pub const DISPID_EVPROP_ONBEFOREDRAGOVER = @as(u32, 71559);
pub const DISPID_EVPROP_ONBEFOREDROPORPASTE = @as(u32, 71560);
pub const DISPID_EVPROP_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_EVMETH_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_EVPROP_ONFINISH = @as(u32, 71562);
pub const DISPID_EVMETH_ONFINISH = @as(u32, 1010);
pub const DISPID_EVPROP_ONSTART = @as(u32, 71563);
pub const DISPID_EVMETH_ONSTART = @as(u32, 1011);
pub const DISPID_EVPROP_ONABORT = @as(u32, 71564);
pub const DISPID_EVMETH_ONABORT = @as(u32, 1000);
pub const DISPID_EVPROP_ONERROR = @as(u32, 71565);
pub const DISPID_EVMETH_ONERROR = @as(u32, 1002);
pub const DISPID_EVPROP_ONCHANGE = @as(u32, 71566);
pub const DISPID_EVMETH_ONCHANGE = @as(u32, 1001);
pub const DISPID_EVPROP_ONSCROLL = @as(u32, 71567);
pub const DISPID_EVMETH_ONSCROLL = @as(u32, 1014);
pub const DISPID_EVPROP_ONLOAD = @as(u32, 71568);
pub const DISPID_EVMETH_ONLOAD = @as(u32, 1003);
pub const DISPID_EVPROP_ONUNLOAD = @as(u32, 71569);
pub const DISPID_EVMETH_ONUNLOAD = @as(u32, 1008);
pub const DISPID_EVPROP_ONLAYOUT = @as(u32, 71570);
pub const DISPID_EVMETH_ONLAYOUT = @as(u32, 1013);
pub const DISPID_EVPROP_ONDRAGSTART = @as(u32, 71571);
pub const DISPID_EVMETH_ONDRAGSTART = @as(u32, 65547);
pub const DISPID_EVPROP_ONRESIZE = @as(u32, 71572);
pub const DISPID_EVMETH_ONRESIZE = @as(u32, 1016);
pub const DISPID_EVPROP_ONSELECTSTART = @as(u32, 71573);
pub const DISPID_EVMETH_ONSELECTSTART = @as(u32, 65548);
pub const DISPID_EVPROP_ONERRORUPDATE = @as(u32, 71574);
pub const DISPID_EVMETH_ONERRORUPDATE = @as(u32, 65549);
pub const DISPID_EVPROP_ONBEFOREUNLOAD = @as(u32, 71575);
pub const DISPID_EVMETH_ONBEFOREUNLOAD = @as(u32, 1017);
pub const DISPID_EVPROP_ONDATASETCHANGED = @as(u32, 71576);
pub const DISPID_EVMETH_ONDATASETCHANGED = @as(u32, 65550);
pub const DISPID_EVPROP_ONDATAAVAILABLE = @as(u32, 71577);
pub const DISPID_EVMETH_ONDATAAVAILABLE = @as(u32, 65551);
pub const DISPID_EVPROP_ONDATASETCOMPLETE = @as(u32, 71578);
pub const DISPID_EVMETH_ONDATASETCOMPLETE = @as(u32, 65552);
pub const DISPID_EVPROP_ONFILTER = @as(u32, 71579);
pub const DISPID_EVMETH_ONFILTER = @as(u32, 65553);
pub const DISPID_EVPROP_ONCHANGEFOCUS = @as(u32, 71580);
pub const DISPID_EVMETH_ONCHANGEFOCUS = @as(u32, 1018);
pub const DISPID_EVPROP_ONCHANGEBLUR = @as(u32, 71581);
pub const DISPID_EVMETH_ONCHANGEBLUR = @as(u32, 1019);
pub const DISPID_EVPROP_ONLOSECAPTURE = @as(u32, 71582);
pub const DISPID_EVMETH_ONLOSECAPTURE = @as(u32, 65554);
pub const DISPID_EVPROP_ONPROPERTYCHANGE = @as(u32, 71583);
pub const DISPID_EVMETH_ONPROPERTYCHANGE = @as(u32, 65555);
pub const DISPID_EVPROP_ONPERSISTSAVE = @as(u32, 71584);
pub const DISPID_EVMETH_ONPERSISTSAVE = @as(u32, 1021);
pub const DISPID_EVPROP_ONDRAG = @as(u32, 71585);
pub const DISPID_EVMETH_ONDRAG = @as(u32, 65556);
pub const DISPID_EVPROP_ONDRAGEND = @as(u32, 71586);
pub const DISPID_EVMETH_ONDRAGEND = @as(u32, 65557);
pub const DISPID_EVPROP_ONDRAGENTER = @as(u32, 71587);
pub const DISPID_EVMETH_ONDRAGENTER = @as(u32, 65558);
pub const DISPID_EVPROP_ONDRAGOVER = @as(u32, 71588);
pub const DISPID_EVMETH_ONDRAGOVER = @as(u32, 65559);
pub const DISPID_EVPROP_ONDRAGLEAVE = @as(u32, 71589);
pub const DISPID_EVMETH_ONDRAGLEAVE = @as(u32, 65560);
pub const DISPID_EVPROP_ONDROP = @as(u32, 71590);
pub const DISPID_EVMETH_ONDROP = @as(u32, 65561);
pub const DISPID_EVPROP_ONCUT = @as(u32, 71591);
pub const DISPID_EVMETH_ONCUT = @as(u32, 65562);
pub const DISPID_EVPROP_ONCOPY = @as(u32, 71592);
pub const DISPID_EVMETH_ONCOPY = @as(u32, 65563);
pub const DISPID_EVPROP_ONPASTE = @as(u32, 71593);
pub const DISPID_EVMETH_ONPASTE = @as(u32, 65564);
pub const DISPID_EVPROP_ONBEFORECUT = @as(u32, 71594);
pub const DISPID_EVMETH_ONBEFORECUT = @as(u32, 65565);
pub const DISPID_EVPROP_ONBEFORECOPY = @as(u32, 71595);
pub const DISPID_EVMETH_ONBEFORECOPY = @as(u32, 65566);
pub const DISPID_EVPROP_ONBEFOREPASTE = @as(u32, 71596);
pub const DISPID_EVMETH_ONBEFOREPASTE = @as(u32, 65567);
pub const DISPID_EVPROP_ONPERSISTLOAD = @as(u32, 71597);
pub const DISPID_EVMETH_ONPERSISTLOAD = @as(u32, 1022);
pub const DISPID_EVPROP_ONROWSDELETE = @as(u32, 71598);
pub const DISPID_EVMETH_ONROWSDELETE = @as(u32, 65568);
pub const DISPID_EVPROP_ONROWSINSERTED = @as(u32, 71599);
pub const DISPID_EVMETH_ONROWSINSERTED = @as(u32, 65569);
pub const DISPID_EVPROP_ONCELLCHANGE = @as(u32, 71600);
pub const DISPID_EVMETH_ONCELLCHANGE = @as(u32, 65570);
pub const DISPID_EVPROP_ONCONTEXTMENU = @as(u32, 71601);
pub const DISPID_EVMETH_ONCONTEXTMENU = @as(u32, 1023);
pub const DISPID_EVPROP_ONBEFOREPRINT = @as(u32, 71602);
pub const DISPID_EVMETH_ONBEFOREPRINT = @as(u32, 1024);
pub const DISPID_EVPROP_ONAFTERPRINT = @as(u32, 71603);
pub const DISPID_EVMETH_ONAFTERPRINT = @as(u32, 1025);
pub const DISPID_EVPROP_ONSTOP = @as(u32, 71604);
pub const DISPID_EVMETH_ONSTOP = @as(u32, 1026);
pub const DISPID_EVPROP_ONBEFOREEDITFOCUS = @as(u32, 71605);
pub const DISPID_EVMETH_ONBEFOREEDITFOCUS = @as(u32, 1027);
pub const DISPID_EVPROP_ONATTACHEVENT = @as(u32, 71606);
pub const DISPID_EVPROP_ONMOUSEHOVER = @as(u32, 71607);
pub const DISPID_EVMETH_ONMOUSEHOVER = @as(u32, 1028);
pub const DISPID_EVPROP_ONCONTENTREADY = @as(u32, 71608);
pub const DISPID_EVMETH_ONCONTENTREADY = @as(u32, 1029);
pub const DISPID_EVPROP_ONLAYOUTCOMPLETE = @as(u32, 71609);
pub const DISPID_EVMETH_ONLAYOUTCOMPLETE = @as(u32, 1030);
pub const DISPID_EVPROP_ONPAGE = @as(u32, 71610);
pub const DISPID_EVMETH_ONPAGE = @as(u32, 1031);
pub const DISPID_EVPROP_ONLINKEDOVERFLOW = @as(u32, 71611);
pub const DISPID_EVMETH_ONLINKEDOVERFLOW = @as(u32, 1032);
pub const DISPID_EVPROP_ONMOUSEWHEEL = @as(u32, 71612);
pub const DISPID_EVMETH_ONMOUSEWHEEL = @as(u32, 1033);
pub const DISPID_EVPROP_ONBEFOREDEACTIVATE = @as(u32, 71613);
pub const DISPID_EVMETH_ONBEFOREDEACTIVATE = @as(u32, 1034);
pub const DISPID_EVPROP_ONMOVE = @as(u32, 71614);
pub const DISPID_EVMETH_ONMOVE = @as(u32, 1035);
pub const DISPID_EVPROP_ONCONTROLSELECT = @as(u32, 71615);
pub const DISPID_EVMETH_ONCONTROLSELECT = @as(u32, 1036);
pub const DISPID_EVPROP_ONSELECTIONCHANGE = @as(u32, 71616);
pub const DISPID_EVMETH_ONSELECTIONCHANGE = @as(u32, 1037);
pub const DISPID_EVPROP_ONMOVESTART = @as(u32, 71617);
pub const DISPID_EVMETH_ONMOVESTART = @as(u32, 1038);
pub const DISPID_EVPROP_ONMOVEEND = @as(u32, 71618);
pub const DISPID_EVMETH_ONMOVEEND = @as(u32, 1039);
pub const DISPID_EVPROP_ONRESIZESTART = @as(u32, 71619);
pub const DISPID_EVMETH_ONRESIZESTART = @as(u32, 1040);
pub const DISPID_EVPROP_ONRESIZEEND = @as(u32, 71620);
pub const DISPID_EVMETH_ONRESIZEEND = @as(u32, 1041);
pub const DISPID_EVPROP_ONMOUSEENTER = @as(u32, 71621);
pub const DISPID_EVMETH_ONMOUSEENTER = @as(u32, 1042);
pub const DISPID_EVPROP_ONMOUSELEAVE = @as(u32, 71622);
pub const DISPID_EVMETH_ONMOUSELEAVE = @as(u32, 1043);
pub const DISPID_EVPROP_ONACTIVATE = @as(u32, 71623);
pub const DISPID_EVMETH_ONACTIVATE = @as(u32, 1044);
pub const DISPID_EVPROP_ONDEACTIVATE = @as(u32, 71624);
pub const DISPID_EVMETH_ONDEACTIVATE = @as(u32, 1045);
pub const DISPID_EVPROP_ONMULTILAYOUTCLEANUP = @as(u32, 71625);
pub const DISPID_EVMETH_ONMULTILAYOUTCLEANUP = @as(u32, 1046);
pub const DISPID_EVPROP_ONBEFOREACTIVATE = @as(u32, 71626);
pub const DISPID_EVMETH_ONBEFOREACTIVATE = @as(u32, 1047);
pub const DISPID_EVPROP_ONFOCUSIN = @as(u32, 71627);
pub const DISPID_EVMETH_ONFOCUSIN = @as(u32, 1048);
pub const DISPID_EVPROP_ONFOCUSOUT = @as(u32, 71628);
pub const DISPID_EVMETH_ONFOCUSOUT = @as(u32, 1049);
pub const DISPID_EVPROP_ONVALUECHANGE = @as(u32, 71629);
pub const DISPID_EVMETH_ONVALUECHANGE = @as(u32, 1050);
pub const DISPID_EVPROP_ONSELECTADD = @as(u32, 71630);
pub const DISPID_EVMETH_ONSELECTADD = @as(u32, 1051);
pub const DISPID_EVPROP_ONSELECTREMOVE = @as(u32, 71631);
pub const DISPID_EVMETH_ONSELECTREMOVE = @as(u32, 1052);
pub const DISPID_EVPROP_ONSELECTWITHIN = @as(u32, 71632);
pub const DISPID_EVMETH_ONSELECTWITHIN = @as(u32, 1053);
pub const DISPID_EVPROP_ONSYSTEMSCROLLINGSTART = @as(u32, 71633);
pub const DISPID_EVMETH_ONSYSTEMSCROLLINGSTART = @as(u32, 1054);
pub const DISPID_EVPROP_ONSYSTEMSCROLLINGEND = @as(u32, 71634);
pub const DISPID_EVMETH_ONSYSTEMSCROLLINGEND = @as(u32, 1055);
pub const DISPID_EVPROP_ONOBJECTCONTENTSCROLLED = @as(u32, 71635);
pub const DISPID_EVMETH_ONOBJECTCONTENTSCROLLED = @as(u32, 1056);
pub const DISPID_EVPROP_ONSTORAGE = @as(u32, 71636);
pub const DISPID_EVMETH_ONSTORAGE = @as(u32, 1057);
pub const DISPID_EVPROP_ONSTORAGECOMMIT = @as(u32, 71637);
pub const DISPID_EVMETH_ONSTORAGECOMMIT = @as(u32, 1058);
pub const DISPID_EVPROP_ONSHOW = @as(u32, 71638);
pub const DISPID_EVMETH_ONSHOW = @as(u32, 1059);
pub const DISPID_EVPROP_ONHIDE = @as(u32, 71639);
pub const DISPID_EVMETH_ONHIDE = @as(u32, 1060);
pub const DISPID_EVPROP_ONALERT = @as(u32, 71640);
pub const DISPID_EVMETH_ONALERT = @as(u32, 1061);
pub const DISPID_EVPROP_ONPOPUPMENUSTART = @as(u32, 71641);
pub const DISPID_EVMETH_ONPOPUPMENUSTART = @as(u32, 1062);
pub const DISPID_EVPROP_ONPOPUPMENUEND = @as(u32, 71642);
pub const DISPID_EVMETH_ONPOPUPMENUEND = @as(u32, 1063);
pub const DISPID_EVPROP_ONONLINE = @as(u32, 71643);
pub const DISPID_EVMETH_ONONLINE = @as(u32, 1064);
pub const DISPID_EVPROP_ONOFFLINE = @as(u32, 71644);
pub const DISPID_EVMETH_ONOFFLINE = @as(u32, 1065);
pub const DISPID_EVPROP_ONHASHCHANGE = @as(u32, 71645);
pub const DISPID_EVMETH_ONHASHCHANGE = @as(u32, 1066);
pub const DISPID_EVPROP_ONMESSAGE = @as(u32, 71646);
pub const DISPID_EVMETH_ONMESSAGE = @as(u32, 1067);
pub const DISPID_EVPROP_ONDOMMUTATION = @as(u32, 71647);
pub const DISPID_EVMETH_ONDOMMUTATION = @as(u32, 1068);
pub const DISPID_EVPROP_SINKLIMIT = @as(u32, 71647);
pub const DISPID_EVPROP_TIMEOUT = @as(u32, 71648);
pub const DISPID_EVPROP_WHEEL = @as(u32, 71649);
pub const DISPID_EVPROP_SVGLOAD = @as(u32, 71650);
pub const DISPID_EVPROP_SVGUNLOAD = @as(u32, 71651);
pub const DISPID_EVPROP_SVGABORT = @as(u32, 71652);
pub const DISPID_EVPROP_SVGERROR = @as(u32, 71653);
pub const DISPID_EVPROP_SVGRESIZE = @as(u32, 71654);
pub const DISPID_EVPROP_SVGSCROLL = @as(u32, 71655);
pub const DISPID_EVPROP_SVGZOOM = @as(u32, 71656);
pub const DISPID_EVPROP_ONMSTHUMBNAILCLICK = @as(u32, 71657);
pub const DISPID_EVPROP_COMPOSITIONSTART = @as(u32, 71658);
pub const DISPID_EVPROP_COMPOSITIONUPDATE = @as(u32, 71659);
pub const DISPID_EVPROP_COMPOSITIONEND = @as(u32, 71660);
pub const DISPID_EVPROP_DOMATTRMODIFIED = @as(u32, 71661);
pub const DISPID_EVPROP_DOMCONTENTLOADED = @as(u32, 71662);
pub const DISPID_EVPROP_INPUT = @as(u32, 71663);
pub const DISPID_EVPROP_DOMCHARDATAMODIFIED = @as(u32, 71664);
pub const DISPID_EVPROP_TEXTINPUT = @as(u32, 71665);
pub const DISPID_EVPROP_ONMSSITEMODEJUMPLISTITEMREMOVED = @as(u32, 71666);
pub const DISPID_EVPROP_DOMNODEINSERTED = @as(u32, 71667);
pub const DISPID_EVPROP_DOMNODEREMOVED = @as(u32, 71668);
pub const DISPID_EVPROP_DOMSUBTREEMODIFIED = @as(u32, 71669);
pub const DISPID_EVPROP_CANPLAY = @as(u32, 71670);
pub const DISPID_EVPROP_CANPLAYTHROUGH = @as(u32, 71671);
pub const DISPID_EVPROP_DURATIONCHANGE = @as(u32, 71672);
pub const DISPID_EVPROP_EMPTIED = @as(u32, 71673);
pub const DISPID_EVPROP_ENDED = @as(u32, 71674);
pub const DISPID_EVPROP_LOADEDDATA = @as(u32, 71675);
pub const DISPID_EVPROP_LOADEDMETADATA = @as(u32, 71676);
pub const DISPID_EVPROP_LOADSTART = @as(u32, 71677);
pub const DISPID_EVPROP_PAUSE = @as(u32, 71678);
pub const DISPID_EVPROP_PLAY = @as(u32, 71679);
pub const DISPID_EVPROP_PLAYING = @as(u32, 71680);
pub const DISPID_EVPROP_PROGRESS = @as(u32, 71681);
pub const DISPID_EVPROP_RATECHANGE = @as(u32, 71682);
pub const DISPID_EVPROP_SEEKED = @as(u32, 71683);
pub const DISPID_EVPROP_SEEKING = @as(u32, 71684);
pub const DISPID_EVPROP_STALLED = @as(u32, 71685);
pub const DISPID_EVPROP_SUSPEND = @as(u32, 71686);
pub const DISPID_EVPROP_TIMEUPDATE = @as(u32, 71687);
pub const DISPID_EVPROP_VOLUMECHANGE = @as(u32, 71688);
pub const DISPID_EVPROP_WAITING = @as(u32, 71689);
pub const DISPID_EVPROP_ONMSPOINTERDOWN = @as(u32, 71690);
pub const DISPID_EVPROP_ONMSPOINTERMOVE = @as(u32, 71691);
pub const DISPID_EVPROP_ONMSPOINTERUP = @as(u32, 71692);
pub const DISPID_EVPROP_ONMSPOINTEROVER = @as(u32, 71693);
pub const DISPID_EVPROP_ONMSPOINTEROUT = @as(u32, 71694);
pub const DISPID_EVPROP_ONMSPOINTERCANCEL = @as(u32, 71695);
pub const DISPID_EVPROP_ONMSPOINTERHOVER = @as(u32, 71696);
pub const DISPID_EVPROP_MSCONNECT = @as(u32, 71697);
pub const DISPID_EVPROP_MSDISCONNECT = @as(u32, 71698);
pub const DISPID_EVPROP_ONMSGESTURESTART = @as(u32, 71699);
pub const DISPID_EVPROP_ONMSGESTURECHANGE = @as(u32, 71700);
pub const DISPID_EVPROP_ONMSGESTUREEND = @as(u32, 71701);
pub const DISPID_EVPROP_ONMSGESTUREHOLD = @as(u32, 71702);
pub const DISPID_EVPROP_ONMSGESTURETAP = @as(u32, 71703);
pub const DISPID_EVPROP_ONMSGESTUREDOUBLETAP = @as(u32, 71704);
pub const DISPID_EVPROP_ONMSINERTIASTART = @as(u32, 71705);
pub const DISPID_EVPROP_ONMSLOSTPOINTERCAPTURE = @as(u32, 71706);
pub const DISPID_EVPROP_ONMSGOTPOINTERCAPTURE = @as(u32, 71707);
pub const DISPID_EVPROP_ONMSCONTENTZOOM = @as(u32, 71708);
pub const DISPID_EVPROP_ONTRANSITIONSTART = @as(u32, 71709);
pub const DISPID_EVPROP_ONTRANSITIONEND = @as(u32, 71710);
pub const DISPID_EVPROP_ONANIMATIONSTART = @as(u32, 71711);
pub const DISPID_EVPROP_ONANIMATIONEND = @as(u32, 71712);
pub const DISPID_EVPROP_ONANIMATIONITERATION = @as(u32, 71713);
pub const DISPID_EVPROP_ONMSMANIPULATIONSTATECHANGED = @as(u32, 71714);
pub const DISPID_EVPROP_ONOPEN = @as(u32, 71715);
pub const DISPID_EVPROP_ONCLOSE = @as(u32, 71716);
pub const DISPID_EVPROP_CHECKING = @as(u32, 71717);
pub const DISPID_EVPROP_NOUPDATE = @as(u32, 71718);
pub const DISPID_EVPROP_DOWNLOADING = @as(u32, 71719);
pub const DISPID_EVPROP_UPDATEREADY = @as(u32, 71720);
pub const DISPID_EVPROP_CACHED = @as(u32, 71721);
pub const DISPID_EVPROP_OBSOLETE = @as(u32, 71722);
pub const DISPID_EVPROP_LOADEND = @as(u32, 71723);
pub const DISPID_EVPROP_INVALID = @as(u32, 71724);
pub const DISPID_EVPROP_ONSUCCESS = @as(u32, 71725);
pub const DISPID_EVPROP_ONBLOCKED = @as(u32, 71726);
pub const DISPID_EVPROP_ONCOMPLETE = @as(u32, 71727);
pub const DISPID_EVPROP_ONPOPSTATE = @as(u32, 71728);
pub const DISPID_EVPROP_ONCUECHANGE = @as(u32, 71729);
pub const DISPID_EVPROP_ONENTER = @as(u32, 71730);
pub const DISPID_EVPROP_ONEXIT = @as(u32, 71731);
pub const DISPID_EVPROP_VISIBILITYCHANGE = @as(u32, 71732);
pub const DISPID_EVPROP_ONMSREGIONUPDATE = @as(u32, 71733);
pub const DISPID_EVPROP_ONUPGRADENEEDED = @as(u32, 71734);
pub const DISPID_EVPROP_ONMSVIDEOFORMATCHANGED = @as(u32, 71735);
pub const DISPID_EVPROP_ADDTRACK = @as(u32, 71736);
pub const DISPID_EVPROP_ONMSVIDEOFRAMESTEPCOMPLETED = @as(u32, 71737);
pub const DISPID_EVPROP_ONMSHOLDVISUAL = @as(u32, 71738);
pub const DISPID_EVPROP_ONMSVIDEOOPTIMALLAYOUTCHANGED = @as(u32, 71739);
pub const DISPID_EVPROP_ONMSFULLSCREENCHANGE = @as(u32, 71740);
pub const DISPID_EVPROP_ONMSFULLSCREENERROR = @as(u32, 71741);
pub const DISPID_EVPROP_MSELEMENTRESIZE = @as(u32, 71742);
pub const DISPID_EVPROP_ONSOURCEOPEN = @as(u32, 71743);
pub const DISPID_EVPROP_ONSOURCECLOSE = @as(u32, 71744);
pub const DISPID_EVPROP_ONSOURCEENDED = @as(u32, 71745);
pub const DISPID_EVPROP_ONADDSOURCEBUFFER = @as(u32, 71746);
pub const DISPID_EVPROP_ONREMOVESOURCEBUFFER = @as(u32, 71747);
pub const DISPID_EVPROP_ONMSNEEDKEY = @as(u32, 71748);
pub const DISPID_EVPROP_ONMSKEYMESSAGE = @as(u32, 71749);
pub const DISPID_EVPROP_ONMSKEYERROR = @as(u32, 71750);
pub const DISPID_EVPROP_ONMSKEYADDED = @as(u32, 71751);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONDOMCONTENTLOADED = @as(u32, 71752);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTENTLOADING = @as(u32, 71753);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONSTARTING = @as(u32, 71754);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONCOMPLETED = @as(u32, 71755);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMEDOMCONTENTLOADED = @as(u32, 71756);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMECONTENTLOADING = @as(u32, 71757);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONSTARTING = @as(u32, 71758);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONCOMPLETED = @as(u32, 71759);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONSCRIPTNOTIFY = @as(u32, 71760);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONUNVIEWABLECONTENT = @as(u32, 71761);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONUNSAFECONTENTWARNINGDISPLAYING = @as(u32, 71762);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONLONGRUNNINGSCRIPTDETECTED = @as(u32, 71763);
pub const DISPID_EVPROP_WEBGLCONTEXTLOST = @as(u32, 71764);
pub const DISPID_EVPROP_WEBGLCONTEXTRESTORED = @as(u32, 71765);
pub const DISPID_EVPROP_ONUPDATESTART = @as(u32, 71766);
pub const DISPID_EVPROP_ONUPDATE = @as(u32, 71767);
pub const DISPID_EVPROP_ONUPDATEEND = @as(u32, 71768);
pub const DISPID_EVPROP_ONMSPOINTERENTER = @as(u32, 71769);
pub const DISPID_EVPROP_ONMSPOINTERLEAVE = @as(u32, 71770);
pub const DISPID_EVPROP_ONMSSITEPINNED = @as(u32, 71771);
pub const DISPID_EVPROP_MSORIENTATIONCHANGE = @as(u32, 71772);
pub const DISPID_EVPROP_ONDEVICEORIENTATION = @as(u32, 71773);
pub const DISPID_EVPROP_ONDEVICEMOTION = @as(u32, 71774);
pub const DISPID_EVPROP_ONPAGESHOW = @as(u32, 71775);
pub const DISPID_EVPROP_ONPAGEHIDE = @as(u32, 71776);
pub const DISPID_EVPROP_ONMSCANDIDATEWINDOWSHOW = @as(u32, 71777);
pub const DISPID_EVPROP_ONMSCANDIDATEWINDOWUPDATE = @as(u32, 71778);
pub const DISPID_EVPROP_ONMSCANDIDATEWINDOWHIDE = @as(u32, 71779);
pub const DISPID_EVPROP_HTML5ONREADYSTATECHANGE = @as(u32, 71780);
pub const DISPID_EVPROP_REMOVETRACK = @as(u32, 71781);
pub const DISPID_EVPROP_ONCOMPASSNEEDSCALIBRATION = @as(u32, 71782);
pub const DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTAINSFULLSCREENELEMENTCHANGED = @as(u32, 71783);
pub const DISPID_EVPROP_ONTOUCHSTART = @as(u32, 71784);
pub const DISPID_EVPROP_ONTOUCHEND = @as(u32, 71785);
pub const DISPID_EVPROP_ONTOUCHMOVE = @as(u32, 71786);
pub const DISPID_EVPROP_ONTOUCHCANCEL = @as(u32, 71787);
pub const DISPID_EVPROP_ONWEBKITTRANSITIONEND = @as(u32, 71788);
pub const DISPID_EVPROP_ONWEBKITANIMATIONSTART = @as(u32, 71789);
pub const DISPID_EVPROP_ONWEBKITANIMATIONEND = @as(u32, 71790);
pub const DISPID_EVPROP_ONWEBKITANIMATIONITERATION = @as(u32, 71791);
pub const DISPID_EVPROP_WEBGLCONTEXTCREATIONERROR = @as(u32, 71792);
pub const DISPID_EVPROP_ONDOMFOCUSIN = @as(u32, 71793);
pub const DISPID_EVPROP_ONDOMFOCUSOUT = @as(u32, 71794);
pub const DISPID_EVPROP_ORIENTATIONCHANGE = @as(u32, 71795);
pub const DISPID_EVPROPS_COUNT = @as(u32, 260);
pub const DISPID_IHTMLFILTERSCOLLECTION_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLFILTERSCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLFILTERSCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLDOMCONSTRUCTOR_CONSTRUCTOR = @as(u32, 66045);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LENGTH = @as(u32, 70037);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PARENTRULE = @as(u32, 70038);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYVALUE = @as(u32, 70039);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYPRIORITY = @as(u32, 70040);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_REMOVEPROPERTY = @as(u32, 70041);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SETPROPERTY = @as(u32, 70042);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FONTFAMILY = @as(u32, 70554);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTYLE = @as(u32, 70560);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FONTVARIANT = @as(u32, 70561);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FONTWEIGHT = @as(u32, 70563);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZE = @as(u32, 70555);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FONT = @as(u32, 70577);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_COLOR = @as(u32, 70538);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUND = @as(u32, 70568);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCOLOR = @as(i32, -501);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDIMAGE = @as(u32, 70537);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDREPEAT = @as(u32, 70580);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDATTACHMENT = @as(u32, 70581);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITION = @as(u32, 70582);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONX = @as(u32, 70569);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONY = @as(u32, 70570);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_WORDSPACING = @as(u32, 70583);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LETTERSPACING = @as(u32, 70544);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTDECORATION = @as(u32, 70571);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_VERTICALALIGN = @as(u32, 70584);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTTRANSFORM = @as(u32, 70540);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGN = @as(u32, 65608);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTINDENT = @as(u32, 70543);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LINEHEIGHT = @as(u32, 70542);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARGINTOP = @as(u32, 70573);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARGINRIGHT = @as(u32, 70574);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARGINBOTTOM = @as(u32, 70575);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARGINLEFT = @as(u32, 70576);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARGIN = @as(u32, 70572);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGTOP = @as(u32, 70548);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGRIGHT = @as(u32, 70549);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGBOTTOM = @as(u32, 70550);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGLEFT = @as(u32, 70551);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PADDING = @as(u32, 70547);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDER = @as(u32, 70585);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOP = @as(u32, 70586);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHT = @as(u32, 70587);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOM = @as(u32, 70588);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFT = @as(u32, 70589);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLOR = @as(u32, 70590);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPCOLOR = @as(u32, 70591);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTCOLOR = @as(u32, 70592);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMCOLOR = @as(u32, 70593);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTCOLOR = @as(u32, 70594);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERWIDTH = @as(u32, 70595);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPWIDTH = @as(u32, 70596);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTWIDTH = @as(u32, 70597);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMWIDTH = @as(u32, 70598);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTWIDTH = @as(u32, 70599);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSTYLE = @as(u32, 70600);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPSTYLE = @as(u32, 70601);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTSTYLE = @as(u32, 70602);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMSTYLE = @as(u32, 70603);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTSTYLE = @as(u32, 70604);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STYLEFLOAT = @as(u32, 70606);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CLEAR = @as(u32, 70552);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_DISPLAY = @as(u32, 70607);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_VISIBILITY = @as(u32, 70616);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLETYPE = @as(u32, 70608);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEPOSITION = @as(u32, 70609);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEIMAGE = @as(u32, 70610);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLE = @as(u32, 70611);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_WHITESPACE = @as(u32, 70612);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TOP = @as(u32, 65540);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LEFT = @as(u32, 65539);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_ZINDEX = @as(u32, 70627);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOW = @as(u32, 70546);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKBEFORE = @as(u32, 70613);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKAFTER = @as(u32, 70614);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CSSTEXT = @as(u32, 70635);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CURSOR = @as(u32, 70638);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CLIP = @as(u32, 70628);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FILTER = @as(u32, 70618);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TABLELAYOUT = @as(u32, 70634);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLLAPSE = @as(u32, 70620);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_DIRECTION = @as(u32, 70655);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BEHAVIOR = @as(u32, 70651);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_POSITION = @as(u32, 70626);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_UNICODEBIDI = @as(u32, 70654);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BOTTOM = @as(u32, 65614);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_RIGHT = @as(u32, 65613);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_IMEMODE = @as(u32, 70656);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_RUBYALIGN = @as(u32, 70657);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_RUBYPOSITION = @as(u32, 70658);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_RUBYOVERHANG = @as(u32, 70659);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDCHAR = @as(u32, 70663);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDLINE = @as(u32, 70664);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDMODE = @as(u32, 70665);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDTYPE = @as(u32, 70666);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRID = @as(u32, 70667);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTAUTOSPACE = @as(u32, 70668);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_WORDBREAK = @as(u32, 70670);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LINEBREAK = @as(u32, 70669);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFY = @as(u32, 70671);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFYTRIM = @as(u32, 70672);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDA = @as(u32, 70673);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWX = @as(u32, 70675);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWY = @as(u32, 70676);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_ACCELERATOR = @as(u32, 70683);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTFLOW = @as(u32, 70691);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_ZOOM = @as(u32, 70689);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_WORDWRAP = @as(u32, 70694);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTUNDERLINEPOSITION = @as(u32, 70695);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARBASECOLOR = @as(u32, 70716);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARFACECOLOR = @as(u32, 70717);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBAR3DLIGHTCOLOR = @as(u32, 70718);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARSHADOWCOLOR = @as(u32, 70719);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARHIGHLIGHTCOLOR = @as(u32, 70720);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARDARKSHADOWCOLOR = @as(u32, 70721);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARARROWCOLOR = @as(u32, 70722);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARTRACKCOLOR = @as(u32, 70732);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_WRITINGMODE = @as(u32, 70728);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGNLAST = @as(u32, 70739);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDASPACE = @as(u32, 70740);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTOVERFLOW = @as(u32, 70745);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MINHEIGHT = @as(u32, 70747);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MSINTERPOLATIONMODE = @as(u32, 70749);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MAXHEIGHT = @as(u32, 70750);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MINWIDTH = @as(u32, 70751);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MAXWIDTH = @as(u32, 70752);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CONTENT = @as(u32, 70754);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CAPTIONSIDE = @as(u32, 70755);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERINCREMENT = @as(u32, 70756);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERRESET = @as(u32, 70757);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINE = @as(u32, 70758);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINEWIDTH = @as(u32, 70759);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINESTYLE = @as(u32, 70760);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINECOLOR = @as(u32, 70761);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BOXSIZING = @as(u32, 70762);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSPACING = @as(u32, 70763);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_ORPHANS = @as(u32, 70764);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_WIDOWS = @as(u32, 70765);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKINSIDE = @as(u32, 70766);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_EMPTYCELLS = @as(u32, 70786);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MSBLOCKPROGRESSION = @as(u32, 70787);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_QUOTES = @as(u32, 70788);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_ALIGNMENTBASELINE = @as(u32, 70814);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BASELINESHIFT = @as(u32, 70815);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_DOMINANTBASELINE = @as(u32, 70816);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZEADJUST = @as(u32, 70817);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTRETCH = @as(u32, 70818);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_OPACITY = @as(u32, 70819);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CLIPPATH = @as(u32, 70820);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRULE = @as(u32, 70821);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FILL = @as(u32, 70822);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FILLOPACITY = @as(u32, 70823);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_FILLRULE = @as(u32, 70824);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_KERNING = @as(u32, 70825);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARKER = @as(u32, 70826);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARKEREND = @as(u32, 70827);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARKERMID = @as(u32, 70828);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MARKERSTART = @as(u32, 70829);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MASK = @as(u32, 70830);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_POINTEREVENTS = @as(u32, 70831);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STOPCOLOR = @as(u32, 70832);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STOPOPACITY = @as(u32, 70833);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STROKE = @as(u32, 70834);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHARRAY = @as(u32, 70835);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHOFFSET = @as(u32, 70836);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINECAP = @as(u32, 70837);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINEJOIN = @as(u32, 70838);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STROKEMITERLIMIT = @as(u32, 70839);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STROKEOPACITY = @as(u32, 70840);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_STROKEWIDTH = @as(u32, 70841);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_TEXTANCHOR = @as(u32, 70842);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONHORIZONTAL = @as(u32, 70843);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONVERTICAL = @as(u32, 70844);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRADIUS = @as(u32, 70846);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPLEFTRADIUS = @as(u32, 70847);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPRIGHTRADIUS = @as(u32, 70848);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMRIGHTRADIUS = @as(u32, 70849);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMLEFTRADIUS = @as(u32, 70850);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CLIPTOP = @as(u32, 70629);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRIGHT = @as(u32, 70630);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CLIPBOTTOM = @as(u32, 70631);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CLIPLEFT = @as(u32, 70632);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_CSSFLOAT = @as(u32, 70845);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCLIP = @as(u32, 70852);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDORIGIN = @as(u32, 70853);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDSIZE = @as(u32, 70854);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_BOXSHADOW = @as(u32, 70855);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORM = @as(u32, 70851);
pub const DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORMORIGIN = @as(u32, 70861);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLCHAINING = @as(u32, 70891);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMING = @as(u32, 70892);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPTYPE = @as(u32, 70893);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLRAILS = @as(u32, 70894);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMCHAINING = @as(u32, 70895);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPTYPE = @as(u32, 70896);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMIT = @as(u32, 70897);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAP = @as(u32, 70898);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPPOINTS = @as(u32, 70899);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMIN = @as(u32, 70901);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMAX = @as(u32, 70902);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPX = @as(u32, 70903);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPY = @as(u32, 70904);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSX = @as(u32, 70905);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSY = @as(u32, 70906);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMN = @as(u32, 70908);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNALIGN = @as(u32, 70909);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNS = @as(u32, 70910);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNSPAN = @as(u32, 70911);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROW = @as(u32, 70913);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWALIGN = @as(u32, 70914);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWS = @as(u32, 70915);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWSPAN = @as(u32, 70916);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPTHROUGH = @as(u32, 70937);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPMARGIN = @as(u32, 70947);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPFLOW = @as(u32, 70949);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONNAME = @as(u32, 70917);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDURATION = @as(u32, 70918);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONTIMINGFUNCTION = @as(u32, 70919);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDELAY = @as(u32, 70920);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDIRECTION = @as(u32, 70921);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONPLAYSTATE = @as(u32, 70922);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONITERATIONCOUNT = @as(u32, 70923);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATION = @as(u32, 70924);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONFILLMODE = @as(u32, 70925);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLORINTERPOLATIONFILTERS = @as(u32, 70928);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNCOUNT = @as(u32, 70872);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNWIDTH = @as(u32, 70873);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNGAP = @as(u32, 70874);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNFILL = @as(u32, 70875);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNSPAN = @as(u32, 70876);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNS = @as(u32, 70871);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULE = @as(u32, 70877);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULECOLOR = @as(u32, 70880);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULESTYLE = @as(u32, 70878);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULEWIDTH = @as(u32, 70879);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKBEFORE = @as(u32, 70881);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKAFTER = @as(u32, 70882);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKINSIDE = @as(u32, 70883);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODCOLOR = @as(u32, 70926);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODOPACITY = @as(u32, 70927);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_LIGHTINGCOLOR = @as(u32, 70929);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMIN = @as(u32, 70930);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMIN = @as(u32, 70931);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMAX = @as(u32, 70932);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMAX = @as(u32, 70933);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMIT = @as(u32, 70934);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TEXTSHADOW = @as(u32, 70936);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWFROM = @as(u32, 70938);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWINTO = @as(u32, 70939);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENS = @as(u32, 70940);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITZONE = @as(u32, 70941);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITCHARS = @as(u32, 70942);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITLINES = @as(u32, 70943);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSHIGHCONTRASTADJUST = @as(u32, 70945);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ENABLEBACKGROUND = @as(u32, 70946);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFONTFEATURESETTINGS = @as(u32, 70950);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSUSERSELECT = @as(u32, 70951);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSOVERFLOWSTYLE = @as(u32, 70935);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSFORMSTYLE = @as(u32, 70889);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSBACKFACEVISIBILITY = @as(u32, 70890);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVE = @as(u32, 70885);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVEORIGIN = @as(u32, 70886);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONPROPERTY = @as(u32, 70866);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDURATION = @as(u32, 70867);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONTIMINGFUNCTION = @as(u32, 70868);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDELAY = @as(u32, 70869);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITION = @as(u32, 70870);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHACTION = @as(u32, 70952);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLTRANSLATION = @as(u32, 70954);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEX = @as(u32, 70955);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPOSITIVE = @as(u32, 70956);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXNEGATIVE = @as(u32, 70957);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPREFERREDSIZE = @as(u32, 70958);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXFLOW = @as(u32, 70959);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXDIRECTION = @as(u32, 70960);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXWRAP = @as(u32, 70961);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXALIGN = @as(u32, 70962);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXITEMALIGN = @as(u32, 70963);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPACK = @as(u32, 70964);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXLINEPACK = @as(u32, 70965);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXORDER = @as(u32, 70966);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHSELECT = @as(u32, 70994);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORM = @as(u32, 70967);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMORIGIN = @as(u32, 70968);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMSTYLE = @as(u32, 70976);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_BACKFACEVISIBILITY = @as(u32, 70977);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVE = @as(u32, 70974);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVEORIGIN = @as(u32, 70975);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONPROPERTY = @as(u32, 70969);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDURATION = @as(u32, 70970);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONTIMINGFUNCTION = @as(u32, 70971);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDELAY = @as(u32, 70972);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITION = @as(u32, 70973);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_FONTFEATURESETTINGS = @as(u32, 70987);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONNAME = @as(u32, 70978);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDURATION = @as(u32, 70979);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONTIMINGFUNCTION = @as(u32, 70980);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDELAY = @as(u32, 70981);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDIRECTION = @as(u32, 70982);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONPLAYSTATE = @as(u32, 70983);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONITERATIONCOUNT = @as(u32, 70984);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATION = @as(u32, 70985);
pub const DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONFILLMODE = @as(u32, 70986);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_FLEX = @as(u32, 71002);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXDIRECTION = @as(u32, 70998);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXWRAP = @as(u32, 70999);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXFLOW = @as(u32, 71000);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXGROW = @as(u32, 71003);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXSHRINK = @as(u32, 71004);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXBASIS = @as(u32, 71005);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_JUSTIFYCONTENT = @as(u32, 71006);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNITEMS = @as(u32, 71007);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNSELF = @as(u32, 71008);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNCONTENT = @as(u32, 71009);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGE = @as(u32, 71010);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESOURCE = @as(u32, 71011);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESLICE = @as(u32, 71012);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEWIDTH = @as(u32, 71013);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEOUTSET = @as(u32, 71014);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEREPEAT = @as(u32, 71015);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_MSIMEALIGN = @as(u32, 71017);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_MSTEXTCOMBINEHORIZONTAL = @as(u32, 71018);
pub const DISPID_IHTMLCSSSTYLEDECLARATION3_TOUCHACTION = @as(u32, 71019);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITAPPEARANCE = @as(u32, 71020);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITUSERSELECT = @as(u32, 71032);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXALIGN = @as(u32, 71021);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORDINALGROUP = @as(u32, 71022);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXPACK = @as(u32, 71023);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXFLEX = @as(u32, 71024);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORIENT = @as(u32, 71025);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXDIRECTION = @as(u32, 71026);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORM = @as(u32, 71028);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDSIZE = @as(u32, 71029);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKFACEVISIBILITY = @as(u32, 71030);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATION = @as(u32, 71033);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITION = @as(u32, 71034);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONNAME = @as(u32, 71035);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDURATION = @as(u32, 71036);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONTIMINGFUNCTION = @as(u32, 71037);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDELAY = @as(u32, 71038);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONITERATIONCOUNT = @as(u32, 71039);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDIRECTION = @as(u32, 71040);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONPLAYSTATE = @as(u32, 71041);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONPROPERTY = @as(u32, 71042);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDURATION = @as(u32, 71043);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONTIMINGFUNCTION = @as(u32, 71044);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDELAY = @as(u32, 71045);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDATTACHMENT = @as(u32, 71046);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCOLOR = @as(u32, 71047);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCLIP = @as(u32, 71048);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDIMAGE = @as(u32, 71049);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDREPEAT = @as(u32, 71050);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDORIGIN = @as(u32, 71051);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITION = @as(u32, 71052);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONX = @as(u32, 71053);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONY = @as(u32, 71054);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUND = @as(u32, 71055);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORMORIGIN = @as(u32, 71056);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_MSTEXTSIZEADJUST = @as(u32, 70864);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTEXTSIZEADJUST = @as(u32, 71060);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGE = @as(u32, 71061);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESOURCE = @as(u32, 71062);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESLICE = @as(u32, 71063);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEWIDTH = @as(u32, 71064);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEOUTSET = @as(u32, 71065);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEREPEAT = @as(u32, 71066);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXSIZING = @as(u32, 71031);
pub const DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONFILLMODE = @as(u32, 71027);
pub const DISPID_IHTMLSTYLEENABLED_MSGETPROPERTYENABLED = @as(u32, 70043);
pub const DISPID_IHTMLSTYLEENABLED_MSPUTPROPERTYENABLED = @as(u32, 70044);
pub const DISPID_IHTMLSTYLE_FONTFAMILY = @as(u32, 70554);
pub const DISPID_IHTMLSTYLE_FONTSTYLE = @as(u32, 70560);
pub const DISPID_IHTMLSTYLE_FONTVARIANT = @as(u32, 70561);
pub const DISPID_IHTMLSTYLE_FONTWEIGHT = @as(u32, 70563);
pub const DISPID_IHTMLSTYLE_FONTSIZE = @as(u32, 70555);
pub const DISPID_IHTMLSTYLE_FONT = @as(u32, 70577);
pub const DISPID_IHTMLSTYLE_COLOR = @as(u32, 70538);
pub const DISPID_IHTMLSTYLE_BACKGROUND = @as(u32, 70568);
pub const DISPID_IHTMLSTYLE_BACKGROUNDCOLOR = @as(i32, -501);
pub const DISPID_IHTMLSTYLE_BACKGROUNDIMAGE = @as(u32, 70537);
pub const DISPID_IHTMLSTYLE_BACKGROUNDREPEAT = @as(u32, 70580);
pub const DISPID_IHTMLSTYLE_BACKGROUNDATTACHMENT = @as(u32, 70581);
pub const DISPID_IHTMLSTYLE_BACKGROUNDPOSITION = @as(u32, 70582);
pub const DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONX = @as(u32, 70569);
pub const DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONY = @as(u32, 70570);
pub const DISPID_IHTMLSTYLE_WORDSPACING = @as(u32, 70583);
pub const DISPID_IHTMLSTYLE_LETTERSPACING = @as(u32, 70544);
pub const DISPID_IHTMLSTYLE_TEXTDECORATION = @as(u32, 70571);
pub const DISPID_IHTMLSTYLE_TEXTDECORATIONNONE = @as(u32, 70559);
pub const DISPID_IHTMLSTYLE_TEXTDECORATIONUNDERLINE = @as(u32, 70557);
pub const DISPID_IHTMLSTYLE_TEXTDECORATIONOVERLINE = @as(u32, 70605);
pub const DISPID_IHTMLSTYLE_TEXTDECORATIONLINETHROUGH = @as(u32, 70556);
pub const DISPID_IHTMLSTYLE_TEXTDECORATIONBLINK = @as(u32, 70558);
pub const DISPID_IHTMLSTYLE_VERTICALALIGN = @as(u32, 70584);
pub const DISPID_IHTMLSTYLE_TEXTTRANSFORM = @as(u32, 70540);
pub const DISPID_IHTMLSTYLE_TEXTALIGN = @as(u32, 65608);
pub const DISPID_IHTMLSTYLE_TEXTINDENT = @as(u32, 70543);
pub const DISPID_IHTMLSTYLE_LINEHEIGHT = @as(u32, 70542);
pub const DISPID_IHTMLSTYLE_MARGINTOP = @as(u32, 70573);
pub const DISPID_IHTMLSTYLE_MARGINRIGHT = @as(u32, 70574);
pub const DISPID_IHTMLSTYLE_MARGINBOTTOM = @as(u32, 70575);
pub const DISPID_IHTMLSTYLE_MARGINLEFT = @as(u32, 70576);
pub const DISPID_IHTMLSTYLE_MARGIN = @as(u32, 70572);
pub const DISPID_IHTMLSTYLE_PADDINGTOP = @as(u32, 70548);
pub const DISPID_IHTMLSTYLE_PADDINGRIGHT = @as(u32, 70549);
pub const DISPID_IHTMLSTYLE_PADDINGBOTTOM = @as(u32, 70550);
pub const DISPID_IHTMLSTYLE_PADDINGLEFT = @as(u32, 70551);
pub const DISPID_IHTMLSTYLE_PADDING = @as(u32, 70547);
pub const DISPID_IHTMLSTYLE_BORDER = @as(u32, 70585);
pub const DISPID_IHTMLSTYLE_BORDERTOP = @as(u32, 70586);
pub const DISPID_IHTMLSTYLE_BORDERRIGHT = @as(u32, 70587);
pub const DISPID_IHTMLSTYLE_BORDERBOTTOM = @as(u32, 70588);
pub const DISPID_IHTMLSTYLE_BORDERLEFT = @as(u32, 70589);
pub const DISPID_IHTMLSTYLE_BORDERCOLOR = @as(u32, 70590);
pub const DISPID_IHTMLSTYLE_BORDERTOPCOLOR = @as(u32, 70591);
pub const DISPID_IHTMLSTYLE_BORDERRIGHTCOLOR = @as(u32, 70592);
pub const DISPID_IHTMLSTYLE_BORDERBOTTOMCOLOR = @as(u32, 70593);
pub const DISPID_IHTMLSTYLE_BORDERLEFTCOLOR = @as(u32, 70594);
pub const DISPID_IHTMLSTYLE_BORDERWIDTH = @as(u32, 70595);
pub const DISPID_IHTMLSTYLE_BORDERTOPWIDTH = @as(u32, 70596);
pub const DISPID_IHTMLSTYLE_BORDERRIGHTWIDTH = @as(u32, 70597);
pub const DISPID_IHTMLSTYLE_BORDERBOTTOMWIDTH = @as(u32, 70598);
pub const DISPID_IHTMLSTYLE_BORDERLEFTWIDTH = @as(u32, 70599);
pub const DISPID_IHTMLSTYLE_BORDERSTYLE = @as(u32, 70600);
pub const DISPID_IHTMLSTYLE_BORDERTOPSTYLE = @as(u32, 70601);
pub const DISPID_IHTMLSTYLE_BORDERRIGHTSTYLE = @as(u32, 70602);
pub const DISPID_IHTMLSTYLE_BORDERBOTTOMSTYLE = @as(u32, 70603);
pub const DISPID_IHTMLSTYLE_BORDERLEFTSTYLE = @as(u32, 70604);
pub const DISPID_IHTMLSTYLE_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLSTYLE_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLSTYLE_STYLEFLOAT = @as(u32, 70606);
pub const DISPID_IHTMLSTYLE_CLEAR = @as(u32, 70552);
pub const DISPID_IHTMLSTYLE_DISPLAY = @as(u32, 70607);
pub const DISPID_IHTMLSTYLE_VISIBILITY = @as(u32, 70616);
pub const DISPID_IHTMLSTYLE_LISTSTYLETYPE = @as(u32, 70608);
pub const DISPID_IHTMLSTYLE_LISTSTYLEPOSITION = @as(u32, 70609);
pub const DISPID_IHTMLSTYLE_LISTSTYLEIMAGE = @as(u32, 70610);
pub const DISPID_IHTMLSTYLE_LISTSTYLE = @as(u32, 70611);
pub const DISPID_IHTMLSTYLE_WHITESPACE = @as(u32, 70612);
pub const DISPID_IHTMLSTYLE_TOP = @as(u32, 65540);
pub const DISPID_IHTMLSTYLE_LEFT = @as(u32, 65539);
pub const DISPID_IHTMLSTYLE_POSITION = @as(u32, 70626);
pub const DISPID_IHTMLSTYLE_ZINDEX = @as(u32, 70627);
pub const DISPID_IHTMLSTYLE_OVERFLOW = @as(u32, 70546);
pub const DISPID_IHTMLSTYLE_PAGEBREAKBEFORE = @as(u32, 70613);
pub const DISPID_IHTMLSTYLE_PAGEBREAKAFTER = @as(u32, 70614);
pub const DISPID_IHTMLSTYLE_CSSTEXT = @as(u32, 70635);
pub const DISPID_IHTMLSTYLE_PIXELTOP = @as(u32, 69536);
pub const DISPID_IHTMLSTYLE_PIXELLEFT = @as(u32, 69537);
pub const DISPID_IHTMLSTYLE_PIXELWIDTH = @as(u32, 69538);
pub const DISPID_IHTMLSTYLE_PIXELHEIGHT = @as(u32, 69539);
pub const DISPID_IHTMLSTYLE_POSTOP = @as(u32, 69540);
pub const DISPID_IHTMLSTYLE_POSLEFT = @as(u32, 69541);
pub const DISPID_IHTMLSTYLE_POSWIDTH = @as(u32, 69542);
pub const DISPID_IHTMLSTYLE_POSHEIGHT = @as(u32, 69543);
pub const DISPID_IHTMLSTYLE_CURSOR = @as(u32, 70638);
pub const DISPID_IHTMLSTYLE_CLIP = @as(u32, 70628);
pub const DISPID_IHTMLSTYLE_FILTER = @as(u32, 70618);
pub const DISPID_IHTMLSTYLE_SETATTRIBUTE = @as(u32, 66037);
pub const DISPID_IHTMLSTYLE_GETATTRIBUTE = @as(u32, 66038);
pub const DISPID_IHTMLSTYLE_REMOVEATTRIBUTE = @as(u32, 66039);
pub const DISPID_IHTMLSTYLE_TOSTRING = @as(u32, 69544);
pub const DISPID_IHTMLSTYLE2_TABLELAYOUT = @as(u32, 70634);
pub const DISPID_IHTMLSTYLE2_BORDERCOLLAPSE = @as(u32, 70620);
pub const DISPID_IHTMLSTYLE2_DIRECTION = @as(u32, 70655);
pub const DISPID_IHTMLSTYLE2_BEHAVIOR = @as(u32, 70651);
pub const DISPID_IHTMLSTYLE2_SETEXPRESSION = @as(u32, 66040);
pub const DISPID_IHTMLSTYLE2_GETEXPRESSION = @as(u32, 66041);
pub const DISPID_IHTMLSTYLE2_REMOVEEXPRESSION = @as(u32, 66042);
pub const DISPID_IHTMLSTYLE2_POSITION = @as(u32, 70626);
pub const DISPID_IHTMLSTYLE2_UNICODEBIDI = @as(u32, 70654);
pub const DISPID_IHTMLSTYLE2_BOTTOM = @as(u32, 65614);
pub const DISPID_IHTMLSTYLE2_RIGHT = @as(u32, 65613);
pub const DISPID_IHTMLSTYLE2_PIXELBOTTOM = @as(u32, 69545);
pub const DISPID_IHTMLSTYLE2_PIXELRIGHT = @as(u32, 69546);
pub const DISPID_IHTMLSTYLE2_POSBOTTOM = @as(u32, 69547);
pub const DISPID_IHTMLSTYLE2_POSRIGHT = @as(u32, 69548);
pub const DISPID_IHTMLSTYLE2_IMEMODE = @as(u32, 70656);
pub const DISPID_IHTMLSTYLE2_RUBYALIGN = @as(u32, 70657);
pub const DISPID_IHTMLSTYLE2_RUBYPOSITION = @as(u32, 70658);
pub const DISPID_IHTMLSTYLE2_RUBYOVERHANG = @as(u32, 70659);
pub const DISPID_IHTMLSTYLE2_LAYOUTGRIDCHAR = @as(u32, 70663);
pub const DISPID_IHTMLSTYLE2_LAYOUTGRIDLINE = @as(u32, 70664);
pub const DISPID_IHTMLSTYLE2_LAYOUTGRIDMODE = @as(u32, 70665);
pub const DISPID_IHTMLSTYLE2_LAYOUTGRIDTYPE = @as(u32, 70666);
pub const DISPID_IHTMLSTYLE2_LAYOUTGRID = @as(u32, 70667);
pub const DISPID_IHTMLSTYLE2_WORDBREAK = @as(u32, 70670);
pub const DISPID_IHTMLSTYLE2_LINEBREAK = @as(u32, 70669);
pub const DISPID_IHTMLSTYLE2_TEXTJUSTIFY = @as(u32, 70671);
pub const DISPID_IHTMLSTYLE2_TEXTJUSTIFYTRIM = @as(u32, 70672);
pub const DISPID_IHTMLSTYLE2_TEXTKASHIDA = @as(u32, 70673);
pub const DISPID_IHTMLSTYLE2_TEXTAUTOSPACE = @as(u32, 70668);
pub const DISPID_IHTMLSTYLE2_OVERFLOWX = @as(u32, 70675);
pub const DISPID_IHTMLSTYLE2_OVERFLOWY = @as(u32, 70676);
pub const DISPID_IHTMLSTYLE2_ACCELERATOR = @as(u32, 70683);
pub const DISPID_IHTMLSTYLE3_LAYOUTFLOW = @as(u32, 70691);
pub const DISPID_IHTMLSTYLE3_ZOOM = @as(u32, 70689);
pub const DISPID_IHTMLSTYLE3_WORDWRAP = @as(u32, 70694);
pub const DISPID_IHTMLSTYLE3_TEXTUNDERLINEPOSITION = @as(u32, 70695);
pub const DISPID_IHTMLSTYLE3_SCROLLBARBASECOLOR = @as(u32, 70716);
pub const DISPID_IHTMLSTYLE3_SCROLLBARFACECOLOR = @as(u32, 70717);
pub const DISPID_IHTMLSTYLE3_SCROLLBAR3DLIGHTCOLOR = @as(u32, 70718);
pub const DISPID_IHTMLSTYLE3_SCROLLBARSHADOWCOLOR = @as(u32, 70719);
pub const DISPID_IHTMLSTYLE3_SCROLLBARHIGHLIGHTCOLOR = @as(u32, 70720);
pub const DISPID_IHTMLSTYLE3_SCROLLBARDARKSHADOWCOLOR = @as(u32, 70721);
pub const DISPID_IHTMLSTYLE3_SCROLLBARARROWCOLOR = @as(u32, 70722);
pub const DISPID_IHTMLSTYLE3_SCROLLBARTRACKCOLOR = @as(u32, 70732);
pub const DISPID_IHTMLSTYLE3_WRITINGMODE = @as(u32, 70728);
pub const DISPID_IHTMLSTYLE3_TEXTALIGNLAST = @as(u32, 70739);
pub const DISPID_IHTMLSTYLE3_TEXTKASHIDASPACE = @as(u32, 70740);
pub const DISPID_IHTMLSTYLE4_TEXTOVERFLOW = @as(u32, 70745);
pub const DISPID_IHTMLSTYLE4_MINHEIGHT = @as(u32, 70747);
pub const DISPID_IHTMLSTYLE5_MSINTERPOLATIONMODE = @as(u32, 70749);
pub const DISPID_IHTMLSTYLE5_MAXHEIGHT = @as(u32, 70750);
pub const DISPID_IHTMLSTYLE5_MINWIDTH = @as(u32, 70751);
pub const DISPID_IHTMLSTYLE5_MAXWIDTH = @as(u32, 70752);
pub const DISPID_IHTMLSTYLE6_CONTENT = @as(u32, 70754);
pub const DISPID_IHTMLSTYLE6_CAPTIONSIDE = @as(u32, 70755);
pub const DISPID_IHTMLSTYLE6_COUNTERINCREMENT = @as(u32, 70756);
pub const DISPID_IHTMLSTYLE6_COUNTERRESET = @as(u32, 70757);
pub const DISPID_IHTMLSTYLE6_OUTLINE = @as(u32, 70758);
pub const DISPID_IHTMLSTYLE6_OUTLINEWIDTH = @as(u32, 70759);
pub const DISPID_IHTMLSTYLE6_OUTLINESTYLE = @as(u32, 70760);
pub const DISPID_IHTMLSTYLE6_OUTLINECOLOR = @as(u32, 70761);
pub const DISPID_IHTMLSTYLE6_BOXSIZING = @as(u32, 70762);
pub const DISPID_IHTMLSTYLE6_BORDERSPACING = @as(u32, 70763);
pub const DISPID_IHTMLSTYLE6_ORPHANS = @as(u32, 70764);
pub const DISPID_IHTMLSTYLE6_WIDOWS = @as(u32, 70765);
pub const DISPID_IHTMLSTYLE6_PAGEBREAKINSIDE = @as(u32, 70766);
pub const DISPID_IHTMLSTYLE6_EMPTYCELLS = @as(u32, 70786);
pub const DISPID_IHTMLSTYLE6_MSBLOCKPROGRESSION = @as(u32, 70787);
pub const DISPID_IHTMLSTYLE6_QUOTES = @as(u32, 70788);
pub const DISPID_IHTMLRULESTYLE_FONTFAMILY = @as(u32, 70554);
pub const DISPID_IHTMLRULESTYLE_FONTSTYLE = @as(u32, 70560);
pub const DISPID_IHTMLRULESTYLE_FONTVARIANT = @as(u32, 70561);
pub const DISPID_IHTMLRULESTYLE_FONTWEIGHT = @as(u32, 70563);
pub const DISPID_IHTMLRULESTYLE_FONTSIZE = @as(u32, 70555);
pub const DISPID_IHTMLRULESTYLE_FONT = @as(u32, 70577);
pub const DISPID_IHTMLRULESTYLE_COLOR = @as(u32, 70538);
pub const DISPID_IHTMLRULESTYLE_BACKGROUND = @as(u32, 70568);
pub const DISPID_IHTMLRULESTYLE_BACKGROUNDCOLOR = @as(i32, -501);
pub const DISPID_IHTMLRULESTYLE_BACKGROUNDIMAGE = @as(u32, 70537);
pub const DISPID_IHTMLRULESTYLE_BACKGROUNDREPEAT = @as(u32, 70580);
pub const DISPID_IHTMLRULESTYLE_BACKGROUNDATTACHMENT = @as(u32, 70581);
pub const DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITION = @as(u32, 70582);
pub const DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONX = @as(u32, 70569);
pub const DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONY = @as(u32, 70570);
pub const DISPID_IHTMLRULESTYLE_WORDSPACING = @as(u32, 70583);
pub const DISPID_IHTMLRULESTYLE_LETTERSPACING = @as(u32, 70544);
pub const DISPID_IHTMLRULESTYLE_TEXTDECORATION = @as(u32, 70571);
pub const DISPID_IHTMLRULESTYLE_TEXTDECORATIONNONE = @as(u32, 70559);
pub const DISPID_IHTMLRULESTYLE_TEXTDECORATIONUNDERLINE = @as(u32, 70557);
pub const DISPID_IHTMLRULESTYLE_TEXTDECORATIONOVERLINE = @as(u32, 70605);
pub const DISPID_IHTMLRULESTYLE_TEXTDECORATIONLINETHROUGH = @as(u32, 70556);
pub const DISPID_IHTMLRULESTYLE_TEXTDECORATIONBLINK = @as(u32, 70558);
pub const DISPID_IHTMLRULESTYLE_VERTICALALIGN = @as(u32, 70584);
pub const DISPID_IHTMLRULESTYLE_TEXTTRANSFORM = @as(u32, 70540);
pub const DISPID_IHTMLRULESTYLE_TEXTALIGN = @as(u32, 65608);
pub const DISPID_IHTMLRULESTYLE_TEXTINDENT = @as(u32, 70543);
pub const DISPID_IHTMLRULESTYLE_LINEHEIGHT = @as(u32, 70542);
pub const DISPID_IHTMLRULESTYLE_MARGINTOP = @as(u32, 70573);
pub const DISPID_IHTMLRULESTYLE_MARGINRIGHT = @as(u32, 70574);
pub const DISPID_IHTMLRULESTYLE_MARGINBOTTOM = @as(u32, 70575);
pub const DISPID_IHTMLRULESTYLE_MARGINLEFT = @as(u32, 70576);
pub const DISPID_IHTMLRULESTYLE_MARGIN = @as(u32, 70572);
pub const DISPID_IHTMLRULESTYLE_PADDINGTOP = @as(u32, 70548);
pub const DISPID_IHTMLRULESTYLE_PADDINGRIGHT = @as(u32, 70549);
pub const DISPID_IHTMLRULESTYLE_PADDINGBOTTOM = @as(u32, 70550);
pub const DISPID_IHTMLRULESTYLE_PADDINGLEFT = @as(u32, 70551);
pub const DISPID_IHTMLRULESTYLE_PADDING = @as(u32, 70547);
pub const DISPID_IHTMLRULESTYLE_BORDER = @as(u32, 70585);
pub const DISPID_IHTMLRULESTYLE_BORDERTOP = @as(u32, 70586);
pub const DISPID_IHTMLRULESTYLE_BORDERRIGHT = @as(u32, 70587);
pub const DISPID_IHTMLRULESTYLE_BORDERBOTTOM = @as(u32, 70588);
pub const DISPID_IHTMLRULESTYLE_BORDERLEFT = @as(u32, 70589);
pub const DISPID_IHTMLRULESTYLE_BORDERCOLOR = @as(u32, 70590);
pub const DISPID_IHTMLRULESTYLE_BORDERTOPCOLOR = @as(u32, 70591);
pub const DISPID_IHTMLRULESTYLE_BORDERRIGHTCOLOR = @as(u32, 70592);
pub const DISPID_IHTMLRULESTYLE_BORDERBOTTOMCOLOR = @as(u32, 70593);
pub const DISPID_IHTMLRULESTYLE_BORDERLEFTCOLOR = @as(u32, 70594);
pub const DISPID_IHTMLRULESTYLE_BORDERWIDTH = @as(u32, 70595);
pub const DISPID_IHTMLRULESTYLE_BORDERTOPWIDTH = @as(u32, 70596);
pub const DISPID_IHTMLRULESTYLE_BORDERRIGHTWIDTH = @as(u32, 70597);
pub const DISPID_IHTMLRULESTYLE_BORDERBOTTOMWIDTH = @as(u32, 70598);
pub const DISPID_IHTMLRULESTYLE_BORDERLEFTWIDTH = @as(u32, 70599);
pub const DISPID_IHTMLRULESTYLE_BORDERSTYLE = @as(u32, 70600);
pub const DISPID_IHTMLRULESTYLE_BORDERTOPSTYLE = @as(u32, 70601);
pub const DISPID_IHTMLRULESTYLE_BORDERRIGHTSTYLE = @as(u32, 70602);
pub const DISPID_IHTMLRULESTYLE_BORDERBOTTOMSTYLE = @as(u32, 70603);
pub const DISPID_IHTMLRULESTYLE_BORDERLEFTSTYLE = @as(u32, 70604);
pub const DISPID_IHTMLRULESTYLE_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLRULESTYLE_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLRULESTYLE_STYLEFLOAT = @as(u32, 70606);
pub const DISPID_IHTMLRULESTYLE_CLEAR = @as(u32, 70552);
pub const DISPID_IHTMLRULESTYLE_DISPLAY = @as(u32, 70607);
pub const DISPID_IHTMLRULESTYLE_VISIBILITY = @as(u32, 70616);
pub const DISPID_IHTMLRULESTYLE_LISTSTYLETYPE = @as(u32, 70608);
pub const DISPID_IHTMLRULESTYLE_LISTSTYLEPOSITION = @as(u32, 70609);
pub const DISPID_IHTMLRULESTYLE_LISTSTYLEIMAGE = @as(u32, 70610);
pub const DISPID_IHTMLRULESTYLE_LISTSTYLE = @as(u32, 70611);
pub const DISPID_IHTMLRULESTYLE_WHITESPACE = @as(u32, 70612);
pub const DISPID_IHTMLRULESTYLE_TOP = @as(u32, 65540);
pub const DISPID_IHTMLRULESTYLE_LEFT = @as(u32, 65539);
pub const DISPID_IHTMLRULESTYLE_POSITION = @as(u32, 70626);
pub const DISPID_IHTMLRULESTYLE_ZINDEX = @as(u32, 70627);
pub const DISPID_IHTMLRULESTYLE_OVERFLOW = @as(u32, 70546);
pub const DISPID_IHTMLRULESTYLE_PAGEBREAKBEFORE = @as(u32, 70613);
pub const DISPID_IHTMLRULESTYLE_PAGEBREAKAFTER = @as(u32, 70614);
pub const DISPID_IHTMLRULESTYLE_CSSTEXT = @as(u32, 70635);
pub const DISPID_IHTMLRULESTYLE_CURSOR = @as(u32, 70638);
pub const DISPID_IHTMLRULESTYLE_CLIP = @as(u32, 70628);
pub const DISPID_IHTMLRULESTYLE_FILTER = @as(u32, 70618);
pub const DISPID_IHTMLRULESTYLE_SETATTRIBUTE = @as(u32, 66037);
pub const DISPID_IHTMLRULESTYLE_GETATTRIBUTE = @as(u32, 66038);
pub const DISPID_IHTMLRULESTYLE_REMOVEATTRIBUTE = @as(u32, 66039);
pub const DISPID_IHTMLRULESTYLE2_TABLELAYOUT = @as(u32, 70634);
pub const DISPID_IHTMLRULESTYLE2_BORDERCOLLAPSE = @as(u32, 70620);
pub const DISPID_IHTMLRULESTYLE2_DIRECTION = @as(u32, 70655);
pub const DISPID_IHTMLRULESTYLE2_BEHAVIOR = @as(u32, 70651);
pub const DISPID_IHTMLRULESTYLE2_POSITION = @as(u32, 70626);
pub const DISPID_IHTMLRULESTYLE2_UNICODEBIDI = @as(u32, 70654);
pub const DISPID_IHTMLRULESTYLE2_BOTTOM = @as(u32, 65614);
pub const DISPID_IHTMLRULESTYLE2_RIGHT = @as(u32, 65613);
pub const DISPID_IHTMLRULESTYLE2_PIXELBOTTOM = @as(u32, 69545);
pub const DISPID_IHTMLRULESTYLE2_PIXELRIGHT = @as(u32, 69546);
pub const DISPID_IHTMLRULESTYLE2_POSBOTTOM = @as(u32, 69547);
pub const DISPID_IHTMLRULESTYLE2_POSRIGHT = @as(u32, 69548);
pub const DISPID_IHTMLRULESTYLE2_IMEMODE = @as(u32, 70656);
pub const DISPID_IHTMLRULESTYLE2_RUBYALIGN = @as(u32, 70657);
pub const DISPID_IHTMLRULESTYLE2_RUBYPOSITION = @as(u32, 70658);
pub const DISPID_IHTMLRULESTYLE2_RUBYOVERHANG = @as(u32, 70659);
pub const DISPID_IHTMLRULESTYLE2_LAYOUTGRIDCHAR = @as(u32, 70663);
pub const DISPID_IHTMLRULESTYLE2_LAYOUTGRIDLINE = @as(u32, 70664);
pub const DISPID_IHTMLRULESTYLE2_LAYOUTGRIDMODE = @as(u32, 70665);
pub const DISPID_IHTMLRULESTYLE2_LAYOUTGRIDTYPE = @as(u32, 70666);
pub const DISPID_IHTMLRULESTYLE2_LAYOUTGRID = @as(u32, 70667);
pub const DISPID_IHTMLRULESTYLE2_TEXTAUTOSPACE = @as(u32, 70668);
pub const DISPID_IHTMLRULESTYLE2_WORDBREAK = @as(u32, 70670);
pub const DISPID_IHTMLRULESTYLE2_LINEBREAK = @as(u32, 70669);
pub const DISPID_IHTMLRULESTYLE2_TEXTJUSTIFY = @as(u32, 70671);
pub const DISPID_IHTMLRULESTYLE2_TEXTJUSTIFYTRIM = @as(u32, 70672);
pub const DISPID_IHTMLRULESTYLE2_TEXTKASHIDA = @as(u32, 70673);
pub const DISPID_IHTMLRULESTYLE2_OVERFLOWX = @as(u32, 70675);
pub const DISPID_IHTMLRULESTYLE2_OVERFLOWY = @as(u32, 70676);
pub const DISPID_IHTMLRULESTYLE2_ACCELERATOR = @as(u32, 70683);
pub const DISPID_IHTMLRULESTYLE3_LAYOUTFLOW = @as(u32, 70691);
pub const DISPID_IHTMLRULESTYLE3_ZOOM = @as(u32, 70689);
pub const DISPID_IHTMLRULESTYLE3_WORDWRAP = @as(u32, 70694);
pub const DISPID_IHTMLRULESTYLE3_TEXTUNDERLINEPOSITION = @as(u32, 70695);
pub const DISPID_IHTMLRULESTYLE3_SCROLLBARBASECOLOR = @as(u32, 70716);
pub const DISPID_IHTMLRULESTYLE3_SCROLLBARFACECOLOR = @as(u32, 70717);
pub const DISPID_IHTMLRULESTYLE3_SCROLLBAR3DLIGHTCOLOR = @as(u32, 70718);
pub const DISPID_IHTMLRULESTYLE3_SCROLLBARSHADOWCOLOR = @as(u32, 70719);
pub const DISPID_IHTMLRULESTYLE3_SCROLLBARHIGHLIGHTCOLOR = @as(u32, 70720);
pub const DISPID_IHTMLRULESTYLE3_SCROLLBARDARKSHADOWCOLOR = @as(u32, 70721);
pub const DISPID_IHTMLRULESTYLE3_SCROLLBARARROWCOLOR = @as(u32, 70722);
pub const DISPID_IHTMLRULESTYLE3_SCROLLBARTRACKCOLOR = @as(u32, 70732);
pub const DISPID_IHTMLRULESTYLE3_WRITINGMODE = @as(u32, 70728);
pub const DISPID_IHTMLRULESTYLE3_TEXTALIGNLAST = @as(u32, 70739);
pub const DISPID_IHTMLRULESTYLE3_TEXTKASHIDASPACE = @as(u32, 70740);
pub const DISPID_IHTMLRULESTYLE4_TEXTOVERFLOW = @as(u32, 70745);
pub const DISPID_IHTMLRULESTYLE4_MINHEIGHT = @as(u32, 70747);
pub const DISPID_IHTMLRULESTYLE5_MSINTERPOLATIONMODE = @as(u32, 70749);
pub const DISPID_IHTMLRULESTYLE5_MAXHEIGHT = @as(u32, 70750);
pub const DISPID_IHTMLRULESTYLE5_MINWIDTH = @as(u32, 70751);
pub const DISPID_IHTMLRULESTYLE5_MAXWIDTH = @as(u32, 70752);
pub const DISPID_IHTMLRULESTYLE6_CONTENT = @as(u32, 70754);
pub const DISPID_IHTMLRULESTYLE6_CAPTIONSIDE = @as(u32, 70755);
pub const DISPID_IHTMLRULESTYLE6_COUNTERINCREMENT = @as(u32, 70756);
pub const DISPID_IHTMLRULESTYLE6_COUNTERRESET = @as(u32, 70757);
pub const DISPID_IHTMLRULESTYLE6_OUTLINE = @as(u32, 70758);
pub const DISPID_IHTMLRULESTYLE6_OUTLINEWIDTH = @as(u32, 70759);
pub const DISPID_IHTMLRULESTYLE6_OUTLINESTYLE = @as(u32, 70760);
pub const DISPID_IHTMLRULESTYLE6_OUTLINECOLOR = @as(u32, 70761);
pub const DISPID_IHTMLRULESTYLE6_BOXSIZING = @as(u32, 70762);
pub const DISPID_IHTMLRULESTYLE6_BORDERSPACING = @as(u32, 70763);
pub const DISPID_IHTMLRULESTYLE6_ORPHANS = @as(u32, 70764);
pub const DISPID_IHTMLRULESTYLE6_WIDOWS = @as(u32, 70765);
pub const DISPID_IHTMLRULESTYLE6_PAGEBREAKINSIDE = @as(u32, 70766);
pub const DISPID_IHTMLRULESTYLE6_EMPTYCELLS = @as(u32, 70786);
pub const DISPID_IHTMLRULESTYLE6_MSBLOCKPROGRESSION = @as(u32, 70787);
pub const DISPID_IHTMLRULESTYLE6_QUOTES = @as(u32, 70788);
pub const DISPID_IHTMLCSSRULE_TYPE = @as(u32, 1101);
pub const DISPID_IHTMLCSSRULE_CSSTEXT = @as(u32, 1102);
pub const DISPID_IHTMLCSSRULE_PARENTRULE = @as(u32, 1103);
pub const DISPID_IHTMLCSSRULE_PARENTSTYLESHEET = @as(u32, 1104);
pub const DISPID_IHTMLCSSIMPORTRULE_HREF = @as(u32, 1001);
pub const DISPID_IHTMLCSSIMPORTRULE_MEDIA = @as(u32, 1002);
pub const DISPID_IHTMLCSSIMPORTRULE_STYLESHEET = @as(u32, 1003);
pub const DISPID_IHTMLCSSMEDIARULE_MEDIA = @as(u32, 1001);
pub const DISPID_IHTMLCSSMEDIARULE_CSSRULES = @as(u32, 1002);
pub const DISPID_IHTMLCSSMEDIARULE_INSERTRULE = @as(u32, 1003);
pub const DISPID_IHTMLCSSMEDIARULE_DELETERULE = @as(u32, 1004);
pub const DISPID_IHTMLCSSMEDIALIST_MEDIATEXT = @as(u32, 1001);
pub const DISPID_IHTMLCSSMEDIALIST_LENGTH = @as(u32, 1002);
pub const DISPID_IHTMLCSSMEDIALIST_ITEM = @as(u32, 1003);
pub const DISPID_IHTMLCSSMEDIALIST_APPENDMEDIUM = @as(u32, 1004);
pub const DISPID_IHTMLCSSMEDIALIST_DELETEMEDIUM = @as(u32, 1005);
pub const DISPID_IHTMLCSSNAMESPACERULE_NAMESPACEURI = @as(u32, 1001);
pub const DISPID_IHTMLCSSNAMESPACERULE_PREFIX = @as(u32, 1002);
pub const DISPID_IHTMLMSCSSKEYFRAMERULE_KEYTEXT = @as(u32, 1001);
pub const DISPID_IHTMLMSCSSKEYFRAMERULE_STYLE = @as(u32, 1002);
pub const DISPID_IHTMLMSCSSKEYFRAMESRULE_NAME = @as(u32, 1001);
pub const DISPID_IHTMLMSCSSKEYFRAMESRULE_CSSRULES = @as(u32, 1002);
pub const DISPID_IHTMLMSCSSKEYFRAMESRULE_APPENDRULE = @as(u32, 1003);
pub const DISPID_IHTMLMSCSSKEYFRAMESRULE_DELETERULE = @as(u32, 1004);
pub const DISPID_IHTMLMSCSSKEYFRAMESRULE_FINDRULE = @as(u32, 1005);
pub const DISPID_IHTMLRENDERSTYLE_TEXTLINETHROUGHSTYLE = @as(u32, 70702);
pub const DISPID_IHTMLRENDERSTYLE_TEXTUNDERLINESTYLE = @as(u32, 70703);
pub const DISPID_IHTMLRENDERSTYLE_TEXTEFFECT = @as(u32, 70704);
pub const DISPID_IHTMLRENDERSTYLE_TEXTCOLOR = @as(u32, 70726);
pub const DISPID_IHTMLRENDERSTYLE_TEXTBACKGROUNDCOLOR = @as(u32, 70705);
pub const DISPID_IHTMLRENDERSTYLE_TEXTDECORATIONCOLOR = @as(u32, 70725);
pub const DISPID_IHTMLRENDERSTYLE_RENDERINGPRIORITY = @as(u32, 70706);
pub const DISPID_IHTMLRENDERSTYLE_DEFAULTTEXTSELECTION = @as(u32, 70724);
pub const DISPID_IHTMLRENDERSTYLE_TEXTDECORATION = @as(u32, 70727);
pub const DISPID_IHTMLCURRENTSTYLE_POSITION = @as(u32, 70626);
pub const DISPID_IHTMLCURRENTSTYLE_STYLEFLOAT = @as(u32, 70606);
pub const DISPID_IHTMLCURRENTSTYLE_COLOR = @as(u32, 70538);
pub const DISPID_IHTMLCURRENTSTYLE_BACKGROUNDCOLOR = @as(i32, -501);
pub const DISPID_IHTMLCURRENTSTYLE_FONTFAMILY = @as(u32, 70554);
pub const DISPID_IHTMLCURRENTSTYLE_FONTSTYLE = @as(u32, 70560);
pub const DISPID_IHTMLCURRENTSTYLE_FONTVARIANT = @as(u32, 70561);
pub const DISPID_IHTMLCURRENTSTYLE_FONTWEIGHT = @as(u32, 70563);
pub const DISPID_IHTMLCURRENTSTYLE_FONTSIZE = @as(u32, 70555);
pub const DISPID_IHTMLCURRENTSTYLE_BACKGROUNDIMAGE = @as(u32, 70537);
pub const DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONX = @as(u32, 70569);
pub const DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONY = @as(u32, 70570);
pub const DISPID_IHTMLCURRENTSTYLE_BACKGROUNDREPEAT = @as(u32, 70580);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERLEFTCOLOR = @as(u32, 70594);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERTOPCOLOR = @as(u32, 70591);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTCOLOR = @as(u32, 70592);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMCOLOR = @as(u32, 70593);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERTOPSTYLE = @as(u32, 70601);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTSTYLE = @as(u32, 70602);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMSTYLE = @as(u32, 70603);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERLEFTSTYLE = @as(u32, 70604);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERTOPWIDTH = @as(u32, 70596);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTWIDTH = @as(u32, 70597);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMWIDTH = @as(u32, 70598);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERLEFTWIDTH = @as(u32, 70599);
pub const DISPID_IHTMLCURRENTSTYLE_LEFT = @as(u32, 65539);
pub const DISPID_IHTMLCURRENTSTYLE_TOP = @as(u32, 65540);
pub const DISPID_IHTMLCURRENTSTYLE_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLCURRENTSTYLE_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLCURRENTSTYLE_PADDINGLEFT = @as(u32, 70551);
pub const DISPID_IHTMLCURRENTSTYLE_PADDINGTOP = @as(u32, 70548);
pub const DISPID_IHTMLCURRENTSTYLE_PADDINGRIGHT = @as(u32, 70549);
pub const DISPID_IHTMLCURRENTSTYLE_PADDINGBOTTOM = @as(u32, 70550);
pub const DISPID_IHTMLCURRENTSTYLE_TEXTALIGN = @as(u32, 65608);
pub const DISPID_IHTMLCURRENTSTYLE_TEXTDECORATION = @as(u32, 70571);
pub const DISPID_IHTMLCURRENTSTYLE_DISPLAY = @as(u32, 70607);
pub const DISPID_IHTMLCURRENTSTYLE_VISIBILITY = @as(u32, 70616);
pub const DISPID_IHTMLCURRENTSTYLE_ZINDEX = @as(u32, 70627);
pub const DISPID_IHTMLCURRENTSTYLE_LETTERSPACING = @as(u32, 70544);
pub const DISPID_IHTMLCURRENTSTYLE_LINEHEIGHT = @as(u32, 70542);
pub const DISPID_IHTMLCURRENTSTYLE_TEXTINDENT = @as(u32, 70543);
pub const DISPID_IHTMLCURRENTSTYLE_VERTICALALIGN = @as(u32, 70584);
pub const DISPID_IHTMLCURRENTSTYLE_BACKGROUNDATTACHMENT = @as(u32, 70581);
pub const DISPID_IHTMLCURRENTSTYLE_MARGINTOP = @as(u32, 70573);
pub const DISPID_IHTMLCURRENTSTYLE_MARGINRIGHT = @as(u32, 70574);
pub const DISPID_IHTMLCURRENTSTYLE_MARGINBOTTOM = @as(u32, 70575);
pub const DISPID_IHTMLCURRENTSTYLE_MARGINLEFT = @as(u32, 70576);
pub const DISPID_IHTMLCURRENTSTYLE_CLEAR = @as(u32, 70552);
pub const DISPID_IHTMLCURRENTSTYLE_LISTSTYLETYPE = @as(u32, 70608);
pub const DISPID_IHTMLCURRENTSTYLE_LISTSTYLEPOSITION = @as(u32, 70609);
pub const DISPID_IHTMLCURRENTSTYLE_LISTSTYLEIMAGE = @as(u32, 70610);
pub const DISPID_IHTMLCURRENTSTYLE_CLIPTOP = @as(u32, 70629);
pub const DISPID_IHTMLCURRENTSTYLE_CLIPRIGHT = @as(u32, 70630);
pub const DISPID_IHTMLCURRENTSTYLE_CLIPBOTTOM = @as(u32, 70631);
pub const DISPID_IHTMLCURRENTSTYLE_CLIPLEFT = @as(u32, 70632);
pub const DISPID_IHTMLCURRENTSTYLE_OVERFLOW = @as(u32, 70546);
pub const DISPID_IHTMLCURRENTSTYLE_PAGEBREAKBEFORE = @as(u32, 70613);
pub const DISPID_IHTMLCURRENTSTYLE_PAGEBREAKAFTER = @as(u32, 70614);
pub const DISPID_IHTMLCURRENTSTYLE_CURSOR = @as(u32, 70638);
pub const DISPID_IHTMLCURRENTSTYLE_TABLELAYOUT = @as(u32, 70634);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERCOLLAPSE = @as(u32, 70620);
pub const DISPID_IHTMLCURRENTSTYLE_DIRECTION = @as(u32, 70655);
pub const DISPID_IHTMLCURRENTSTYLE_BEHAVIOR = @as(u32, 70651);
pub const DISPID_IHTMLCURRENTSTYLE_GETATTRIBUTE = @as(u32, 66038);
pub const DISPID_IHTMLCURRENTSTYLE_UNICODEBIDI = @as(u32, 70654);
pub const DISPID_IHTMLCURRENTSTYLE_RIGHT = @as(u32, 65613);
pub const DISPID_IHTMLCURRENTSTYLE_BOTTOM = @as(u32, 65614);
pub const DISPID_IHTMLCURRENTSTYLE_IMEMODE = @as(u32, 70656);
pub const DISPID_IHTMLCURRENTSTYLE_RUBYALIGN = @as(u32, 70657);
pub const DISPID_IHTMLCURRENTSTYLE_RUBYPOSITION = @as(u32, 70658);
pub const DISPID_IHTMLCURRENTSTYLE_RUBYOVERHANG = @as(u32, 70659);
pub const DISPID_IHTMLCURRENTSTYLE_TEXTAUTOSPACE = @as(u32, 70668);
pub const DISPID_IHTMLCURRENTSTYLE_LINEBREAK = @as(u32, 70669);
pub const DISPID_IHTMLCURRENTSTYLE_WORDBREAK = @as(u32, 70670);
pub const DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFY = @as(u32, 70671);
pub const DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFYTRIM = @as(u32, 70672);
pub const DISPID_IHTMLCURRENTSTYLE_TEXTKASHIDA = @as(u32, 70673);
pub const DISPID_IHTMLCURRENTSTYLE_BLOCKDIRECTION = @as(u32, 70653);
pub const DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDCHAR = @as(u32, 70663);
pub const DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDLINE = @as(u32, 70664);
pub const DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDMODE = @as(u32, 70665);
pub const DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDTYPE = @as(u32, 70666);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERSTYLE = @as(u32, 70600);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERCOLOR = @as(u32, 70590);
pub const DISPID_IHTMLCURRENTSTYLE_BORDERWIDTH = @as(u32, 70595);
pub const DISPID_IHTMLCURRENTSTYLE_PADDING = @as(u32, 70547);
pub const DISPID_IHTMLCURRENTSTYLE_MARGIN = @as(u32, 70572);
pub const DISPID_IHTMLCURRENTSTYLE_ACCELERATOR = @as(u32, 70683);
pub const DISPID_IHTMLCURRENTSTYLE_OVERFLOWX = @as(u32, 70675);
pub const DISPID_IHTMLCURRENTSTYLE_OVERFLOWY = @as(u32, 70676);
pub const DISPID_IHTMLCURRENTSTYLE_TEXTTRANSFORM = @as(u32, 70540);
pub const DISPID_IHTMLCURRENTSTYLE2_LAYOUTFLOW = @as(u32, 70691);
pub const DISPID_IHTMLCURRENTSTYLE2_WORDWRAP = @as(u32, 70694);
pub const DISPID_IHTMLCURRENTSTYLE2_TEXTUNDERLINEPOSITION = @as(u32, 70695);
pub const DISPID_IHTMLCURRENTSTYLE2_HASLAYOUT = @as(u32, 70696);
pub const DISPID_IHTMLCURRENTSTYLE2_SCROLLBARBASECOLOR = @as(u32, 70716);
pub const DISPID_IHTMLCURRENTSTYLE2_SCROLLBARFACECOLOR = @as(u32, 70717);
pub const DISPID_IHTMLCURRENTSTYLE2_SCROLLBAR3DLIGHTCOLOR = @as(u32, 70718);
pub const DISPID_IHTMLCURRENTSTYLE2_SCROLLBARSHADOWCOLOR = @as(u32, 70719);
pub const DISPID_IHTMLCURRENTSTYLE2_SCROLLBARHIGHLIGHTCOLOR = @as(u32, 70720);
pub const DISPID_IHTMLCURRENTSTYLE2_SCROLLBARDARKSHADOWCOLOR = @as(u32, 70721);
pub const DISPID_IHTMLCURRENTSTYLE2_SCROLLBARARROWCOLOR = @as(u32, 70722);
pub const DISPID_IHTMLCURRENTSTYLE2_SCROLLBARTRACKCOLOR = @as(u32, 70732);
pub const DISPID_IHTMLCURRENTSTYLE2_WRITINGMODE = @as(u32, 70728);
pub const DISPID_IHTMLCURRENTSTYLE2_ZOOM = @as(u32, 70689);
pub const DISPID_IHTMLCURRENTSTYLE2_FILTER = @as(u32, 70618);
pub const DISPID_IHTMLCURRENTSTYLE2_TEXTALIGNLAST = @as(u32, 70739);
pub const DISPID_IHTMLCURRENTSTYLE2_TEXTKASHIDASPACE = @as(u32, 70740);
pub const DISPID_IHTMLCURRENTSTYLE2_ISBLOCK = @as(u32, 70744);
pub const DISPID_IHTMLCURRENTSTYLE3_TEXTOVERFLOW = @as(u32, 70745);
pub const DISPID_IHTMLCURRENTSTYLE3_MINHEIGHT = @as(u32, 70747);
pub const DISPID_IHTMLCURRENTSTYLE3_WORDSPACING = @as(u32, 70583);
pub const DISPID_IHTMLCURRENTSTYLE3_WHITESPACE = @as(u32, 70612);
pub const DISPID_IHTMLCURRENTSTYLE4_MSINTERPOLATIONMODE = @as(u32, 70749);
pub const DISPID_IHTMLCURRENTSTYLE4_MAXHEIGHT = @as(u32, 70750);
pub const DISPID_IHTMLCURRENTSTYLE4_MINWIDTH = @as(u32, 70751);
pub const DISPID_IHTMLCURRENTSTYLE4_MAXWIDTH = @as(u32, 70752);
pub const DISPID_IHTMLCURRENTSTYLE5_CAPTIONSIDE = @as(u32, 70755);
pub const DISPID_IHTMLCURRENTSTYLE5_OUTLINE = @as(u32, 70758);
pub const DISPID_IHTMLCURRENTSTYLE5_OUTLINEWIDTH = @as(u32, 70759);
pub const DISPID_IHTMLCURRENTSTYLE5_OUTLINESTYLE = @as(u32, 70760);
pub const DISPID_IHTMLCURRENTSTYLE5_OUTLINECOLOR = @as(u32, 70761);
pub const DISPID_IHTMLCURRENTSTYLE5_BOXSIZING = @as(u32, 70762);
pub const DISPID_IHTMLCURRENTSTYLE5_BORDERSPACING = @as(u32, 70763);
pub const DISPID_IHTMLCURRENTSTYLE5_ORPHANS = @as(u32, 70764);
pub const DISPID_IHTMLCURRENTSTYLE5_WIDOWS = @as(u32, 70765);
pub const DISPID_IHTMLCURRENTSTYLE5_PAGEBREAKINSIDE = @as(u32, 70766);
pub const DISPID_IHTMLCURRENTSTYLE5_EMPTYCELLS = @as(u32, 70786);
pub const DISPID_IHTMLCURRENTSTYLE5_MSBLOCKPROGRESSION = @as(u32, 70787);
pub const DISPID_IHTMLCURRENTSTYLE5_QUOTES = @as(u32, 70788);
pub const DISPID_IHTMLRECT_LEFT = @as(u32, 1001);
pub const DISPID_IHTMLRECT_TOP = @as(u32, 1002);
pub const DISPID_IHTMLRECT_RIGHT = @as(u32, 1003);
pub const DISPID_IHTMLRECT_BOTTOM = @as(u32, 1004);
pub const DISPID_IHTMLRECT2_WIDTH = @as(u32, 1005);
pub const DISPID_IHTMLRECT2_HEIGHT = @as(u32, 1006);
pub const DISPID_IHTMLRECTCOLLECTION_LENGTH = @as(u32, 1500);
pub const DISPID_IHTMLRECTCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLRECTCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLDOMNODE_NODETYPE = @as(u32, 66582);
pub const DISPID_IHTMLDOMNODE_PARENTNODE = @as(u32, 66583);
pub const DISPID_IHTMLDOMNODE_HASCHILDNODES = @as(u32, 66584);
pub const DISPID_IHTMLDOMNODE_CHILDNODES = @as(u32, 66585);
pub const DISPID_IHTMLDOMNODE_ATTRIBUTES = @as(u32, 66586);
pub const DISPID_IHTMLDOMNODE_INSERTBEFORE = @as(u32, 66587);
pub const DISPID_IHTMLDOMNODE_REMOVECHILD = @as(u32, 66588);
pub const DISPID_IHTMLDOMNODE_REPLACECHILD = @as(u32, 66589);
pub const DISPID_IHTMLDOMNODE_CLONENODE = @as(u32, 66597);
pub const DISPID_IHTMLDOMNODE_REMOVENODE = @as(u32, 66602);
pub const DISPID_IHTMLDOMNODE_SWAPNODE = @as(u32, 66604);
pub const DISPID_IHTMLDOMNODE_REPLACENODE = @as(u32, 66603);
pub const DISPID_IHTMLDOMNODE_APPENDCHILD = @as(u32, 66609);
pub const DISPID_IHTMLDOMNODE_NODENAME = @as(u32, 66610);
pub const DISPID_IHTMLDOMNODE_NODEVALUE = @as(u32, 66611);
pub const DISPID_IHTMLDOMNODE_FIRSTCHILD = @as(u32, 66612);
pub const DISPID_IHTMLDOMNODE_LASTCHILD = @as(u32, 66613);
pub const DISPID_IHTMLDOMNODE_PREVIOUSSIBLING = @as(u32, 66614);
pub const DISPID_IHTMLDOMNODE_NEXTSIBLING = @as(u32, 66615);
pub const DISPID_IHTMLDOMNODE2_OWNERDOCUMENT = @as(u32, 66649);
pub const DISPID_IHTMLDOMNODE3_PREFIX = @as(u32, 66656);
pub const DISPID_IHTMLDOMNODE3_LOCALNAME = @as(u32, 66654);
pub const DISPID_IHTMLDOMNODE3_NAMESPACEURI = @as(u32, 66655);
pub const DISPID_IHTMLDOMNODE3_TEXTCONTENT = @as(u32, 66663);
pub const DISPID_IHTMLDOMNODE3_ISEQUALNODE = @as(u32, 66657);
pub const DISPID_IHTMLDOMNODE3_LOOKUPNAMESPACEURI = @as(u32, 66658);
pub const DISPID_IHTMLDOMNODE3_LOOKUPPREFIX = @as(u32, 66659);
pub const DISPID_IHTMLDOMNODE3_ISDEFAULTNAMESPACE = @as(u32, 66660);
pub const DISPID_IHTMLDOMNODE3_IE9_APPENDCHILD = @as(u32, 66804);
pub const DISPID_IHTMLDOMNODE3_IE9_INSERTBEFORE = @as(u32, 66805);
pub const DISPID_IHTMLDOMNODE3_IE9_REMOVECHILD = @as(u32, 66806);
pub const DISPID_IHTMLDOMNODE3_IE9_REPLACECHILD = @as(u32, 66807);
pub const DISPID_IHTMLDOMNODE3_ISSAMENODE = @as(u32, 66661);
pub const DISPID_IHTMLDOMNODE3_COMPAREDOCUMENTPOSITION = @as(u32, 66662);
pub const DISPID_IHTMLDOMNODE3_ISSUPPORTED = @as(u32, 66813);
pub const DISPID_IHTMLDOMATTRIBUTE_NODENAME = @as(u32, 1000);
pub const DISPID_IHTMLDOMATTRIBUTE_NODEVALUE = @as(u32, 1002);
pub const DISPID_IHTMLDOMATTRIBUTE_SPECIFIED = @as(u32, 1001);
pub const DISPID_IHTMLDOMATTRIBUTE2_NAME = @as(u32, 1003);
pub const DISPID_IHTMLDOMATTRIBUTE2_VALUE = @as(u32, 1004);
pub const DISPID_IHTMLDOMATTRIBUTE2_EXPANDO = @as(u32, 1005);
pub const DISPID_IHTMLDOMATTRIBUTE2_NODETYPE = @as(u32, 1006);
pub const DISPID_IHTMLDOMATTRIBUTE2_PARENTNODE = @as(u32, 1007);
pub const DISPID_IHTMLDOMATTRIBUTE2_CHILDNODES = @as(u32, 1008);
pub const DISPID_IHTMLDOMATTRIBUTE2_FIRSTCHILD = @as(u32, 1009);
pub const DISPID_IHTMLDOMATTRIBUTE2_LASTCHILD = @as(u32, 1010);
pub const DISPID_IHTMLDOMATTRIBUTE2_PREVIOUSSIBLING = @as(u32, 1011);
pub const DISPID_IHTMLDOMATTRIBUTE2_NEXTSIBLING = @as(u32, 1012);
pub const DISPID_IHTMLDOMATTRIBUTE2_ATTRIBUTES = @as(u32, 1013);
pub const DISPID_IHTMLDOMATTRIBUTE2_OWNERDOCUMENT = @as(u32, 1014);
pub const DISPID_IHTMLDOMATTRIBUTE2_INSERTBEFORE = @as(u32, 1015);
pub const DISPID_IHTMLDOMATTRIBUTE2_REPLACECHILD = @as(u32, 1016);
pub const DISPID_IHTMLDOMATTRIBUTE2_REMOVECHILD = @as(u32, 1017);
pub const DISPID_IHTMLDOMATTRIBUTE2_APPENDCHILD = @as(u32, 1018);
pub const DISPID_IHTMLDOMATTRIBUTE2_HASCHILDNODES = @as(u32, 1019);
pub const DISPID_IHTMLDOMATTRIBUTE2_CLONENODE = @as(u32, 1020);
pub const DISPID_IHTMLDOMATTRIBUTE3_IE8_NODEVALUE = @as(u32, 1153);
pub const DISPID_IHTMLDOMATTRIBUTE3_IE8_VALUE = @as(u32, 1154);
pub const DISPID_IHTMLDOMATTRIBUTE3_IE8_SPECIFIED = @as(u32, 1150);
pub const DISPID_IHTMLDOMATTRIBUTE3_OWNERELEMENT = @as(u32, 1151);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_NODEVALUE = @as(u32, 1159);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_NODENAME = @as(u32, 1160);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_NAME = @as(u32, 1161);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_VALUE = @as(u32, 1162);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_FIRSTCHILD = @as(u32, 1163);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_LASTCHILD = @as(u32, 1164);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_CHILDNODES = @as(u32, 1165);
pub const DISPID_IHTMLDOMATTRIBUTE4_HASATTRIBUTES = @as(u32, 1166);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_HASCHILDNODES = @as(u32, 1167);
pub const DISPID_IHTMLDOMATTRIBUTE4_NORMALIZE = @as(u32, 1170);
pub const DISPID_IHTMLDOMATTRIBUTE4_IE9_SPECIFIED = @as(u32, 1171);
pub const DISPID_IHTMLDOMTEXTNODE_DATA = @as(u32, 1000);
pub const DISPID_IHTMLDOMTEXTNODE_TOSTRING = @as(u32, 1001);
pub const DISPID_IHTMLDOMTEXTNODE_LENGTH = @as(u32, 1002);
pub const DISPID_IHTMLDOMTEXTNODE_SPLITTEXT = @as(u32, 1003);
pub const DISPID_IHTMLDOMTEXTNODE2_SUBSTRINGDATA = @as(u32, 1004);
pub const DISPID_IHTMLDOMTEXTNODE2_APPENDDATA = @as(u32, 1005);
pub const DISPID_IHTMLDOMTEXTNODE2_INSERTDATA = @as(u32, 1006);
pub const DISPID_IHTMLDOMTEXTNODE2_DELETEDATA = @as(u32, 1007);
pub const DISPID_IHTMLDOMTEXTNODE2_REPLACEDATA = @as(u32, 1008);
pub const DISPID_IHTMLDOMTEXTNODE3_IE9_SUBSTRINGDATA = @as(u32, 1010);
pub const DISPID_IHTMLDOMTEXTNODE3_IE9_INSERTDATA = @as(u32, 1011);
pub const DISPID_IHTMLDOMTEXTNODE3_IE9_DELETEDATA = @as(u32, 1012);
pub const DISPID_IHTMLDOMTEXTNODE3_IE9_REPLACEDATA = @as(u32, 1013);
pub const DISPID_IHTMLDOMTEXTNODE3_IE9_SPLITTEXT = @as(u32, 1009);
pub const DISPID_IHTMLDOMTEXTNODE3_WHOLETEXT = @as(u32, 1014);
pub const DISPID_IHTMLDOMTEXTNODE3_REPLACEWHOLETEXT = @as(u32, 1015);
pub const DISPID_IHTMLDOMTEXTNODE3_HASATTRIBUTES = @as(u32, 1017);
pub const DISPID_IHTMLDOMTEXTNODE3_NORMALIZE = @as(u32, 1019);
pub const DISPID_IHTMLDOMIMPLEMENTATION_HASFEATURE = @as(u32, 1000);
pub const DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENTTYPE = @as(u32, 1001);
pub const DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENT = @as(u32, 1002);
pub const DISPID_IHTMLDOMIMPLEMENTATION2_CREATEHTMLDOCUMENT = @as(u32, 1003);
pub const DISPID_IHTMLDOMIMPLEMENTATION2_IE9_HASFEATURE = @as(u32, 1004);
pub const DISPID_IHTMLATTRIBUTECOLLECTION_LENGTH = @as(u32, 1500);
pub const DISPID_IHTMLATTRIBUTECOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLATTRIBUTECOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLATTRIBUTECOLLECTION2_GETNAMEDITEM = @as(u32, 1501);
pub const DISPID_IHTMLATTRIBUTECOLLECTION2_SETNAMEDITEM = @as(u32, 1502);
pub const DISPID_IHTMLATTRIBUTECOLLECTION2_REMOVENAMEDITEM = @as(u32, 1503);
pub const DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_GETNAMEDITEM = @as(u32, 1150);
pub const DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_SETNAMEDITEM = @as(u32, 1151);
pub const DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_REMOVENAMEDITEM = @as(u32, 1152);
pub const DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_ITEM = @as(u32, 1154);
pub const DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_LENGTH = @as(u32, 1153);
pub const DISPID_IHTMLATTRIBUTECOLLECTION4_GETNAMEDITEMNS = @as(u32, 1155);
pub const DISPID_IHTMLATTRIBUTECOLLECTION4_SETNAMEDITEMNS = @as(u32, 1156);
pub const DISPID_IHTMLATTRIBUTECOLLECTION4_REMOVENAMEDITEMNS = @as(u32, 1157);
pub const DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_GETNAMEDITEM = @as(u32, 1158);
pub const DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_SETNAMEDITEM = @as(u32, 1159);
pub const DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_REMOVENAMEDITEM = @as(u32, 1160);
pub const DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_ITEM = @as(u32, 1161);
pub const DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_LENGTH = @as(u32, 1162);
pub const DISPID_IHTMLDOMCHILDRENCOLLECTION_LENGTH = @as(u32, 1500);
pub const DISPID_IHTMLDOMCHILDRENCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLDOMCHILDRENCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLDOMCHILDRENCOLLECTION2_IE9_ITEM = @as(u32, 1);
pub const DISPID_IHTMLELEMENT_SETATTRIBUTE = @as(u32, 66037);
pub const DISPID_IHTMLELEMENT_GETATTRIBUTE = @as(u32, 66038);
pub const DISPID_IHTMLELEMENT_REMOVEATTRIBUTE = @as(u32, 66039);
pub const DISPID_IHTMLELEMENT_CLASSNAME = @as(u32, 66537);
pub const DISPID_IHTMLELEMENT_ID = @as(u32, 66538);
pub const DISPID_IHTMLELEMENT_TAGNAME = @as(u32, 66540);
pub const DISPID_IHTMLELEMENT_PARENTELEMENT = @as(u32, 65544);
pub const DISPID_IHTMLELEMENT_STYLE = @as(u32, 65610);
pub const DISPID_IHTMLELEMENT_ONHELP = @as(u32, 71549);
pub const DISPID_IHTMLELEMENT_ONCLICK = @as(u32, 71544);
pub const DISPID_IHTMLELEMENT_ONDBLCLICK = @as(u32, 71545);
pub const DISPID_IHTMLELEMENT_ONKEYDOWN = @as(u32, 71541);
pub const DISPID_IHTMLELEMENT_ONKEYUP = @as(u32, 71542);
pub const DISPID_IHTMLELEMENT_ONKEYPRESS = @as(u32, 71543);
pub const DISPID_IHTMLELEMENT_ONMOUSEOUT = @as(u32, 71537);
pub const DISPID_IHTMLELEMENT_ONMOUSEOVER = @as(u32, 71536);
pub const DISPID_IHTMLELEMENT_ONMOUSEMOVE = @as(u32, 71540);
pub const DISPID_IHTMLELEMENT_ONMOUSEDOWN = @as(u32, 71538);
pub const DISPID_IHTMLELEMENT_ONMOUSEUP = @as(u32, 71539);
pub const DISPID_IHTMLELEMENT_DOCUMENT = @as(u32, 66554);
pub const DISPID_IHTMLELEMENT_TITLE = @as(u32, 65605);
pub const DISPID_IHTMLELEMENT_LANGUAGE = @as(u32, 70636);
pub const DISPID_IHTMLELEMENT_ONSELECTSTART = @as(u32, 71573);
pub const DISPID_IHTMLELEMENT_SCROLLINTOVIEW = @as(u32, 66555);
pub const DISPID_IHTMLELEMENT_CONTAINS = @as(u32, 66556);
pub const DISPID_IHTMLELEMENT_SOURCEINDEX = @as(u32, 66560);
pub const DISPID_IHTMLELEMENT_RECORDNUMBER = @as(u32, 66561);
pub const DISPID_IHTMLELEMENT_LANG = @as(u32, 70545);
pub const DISPID_IHTMLELEMENT_OFFSETLEFT = @as(u32, 66544);
pub const DISPID_IHTMLELEMENT_OFFSETTOP = @as(u32, 66545);
pub const DISPID_IHTMLELEMENT_OFFSETWIDTH = @as(u32, 66546);
pub const DISPID_IHTMLELEMENT_OFFSETHEIGHT = @as(u32, 66547);
pub const DISPID_IHTMLELEMENT_OFFSETPARENT = @as(u32, 66548);
pub const DISPID_IHTMLELEMENT_INNERHTML = @as(u32, 66562);
pub const DISPID_IHTMLELEMENT_INNERTEXT = @as(u32, 66563);
pub const DISPID_IHTMLELEMENT_OUTERHTML = @as(u32, 66564);
pub const DISPID_IHTMLELEMENT_OUTERTEXT = @as(u32, 66565);
pub const DISPID_IHTMLELEMENT_INSERTADJACENTHTML = @as(u32, 66566);
pub const DISPID_IHTMLELEMENT_INSERTADJACENTTEXT = @as(u32, 66567);
pub const DISPID_IHTMLELEMENT_PARENTTEXTEDIT = @as(u32, 66568);
pub const DISPID_IHTMLELEMENT_ISTEXTEDIT = @as(u32, 66570);
pub const DISPID_IHTMLELEMENT_CLICK = @as(u32, 66569);
pub const DISPID_IHTMLELEMENT_FILTERS = @as(u32, 66571);
pub const DISPID_IHTMLELEMENT_ONDRAGSTART = @as(u32, 71571);
pub const DISPID_IHTMLELEMENT_TOSTRING = @as(u32, 66572);
pub const DISPID_IHTMLELEMENT_ONBEFOREUPDATE = @as(u32, 71557);
pub const DISPID_IHTMLELEMENT_ONAFTERUPDATE = @as(u32, 71558);
pub const DISPID_IHTMLELEMENT_ONERRORUPDATE = @as(u32, 71574);
pub const DISPID_IHTMLELEMENT_ONROWEXIT = @as(u32, 71554);
pub const DISPID_IHTMLELEMENT_ONROWENTER = @as(u32, 71555);
pub const DISPID_IHTMLELEMENT_ONDATASETCHANGED = @as(u32, 71576);
pub const DISPID_IHTMLELEMENT_ONDATAAVAILABLE = @as(u32, 71577);
pub const DISPID_IHTMLELEMENT_ONDATASETCOMPLETE = @as(u32, 71578);
pub const DISPID_IHTMLELEMENT_ONFILTERCHANGE = @as(u32, 71579);
pub const DISPID_IHTMLELEMENT_CHILDREN = @as(u32, 66573);
pub const DISPID_IHTMLELEMENT_ALL = @as(u32, 66574);
pub const DISPID_IHTMLELEMENT2_SCOPENAME = @as(u32, 66575);
pub const DISPID_IHTMLELEMENT2_SETCAPTURE = @as(u32, 66576);
pub const DISPID_IHTMLELEMENT2_RELEASECAPTURE = @as(u32, 66577);
pub const DISPID_IHTMLELEMENT2_ONLOSECAPTURE = @as(u32, 71582);
pub const DISPID_IHTMLELEMENT2_COMPONENTFROMPOINT = @as(u32, 66578);
pub const DISPID_IHTMLELEMENT2_DOSCROLL = @as(u32, 66579);
pub const DISPID_IHTMLELEMENT2_ONSCROLL = @as(u32, 71567);
pub const DISPID_IHTMLELEMENT2_ONDRAG = @as(u32, 71585);
pub const DISPID_IHTMLELEMENT2_ONDRAGEND = @as(u32, 71586);
pub const DISPID_IHTMLELEMENT2_ONDRAGENTER = @as(u32, 71587);
pub const DISPID_IHTMLELEMENT2_ONDRAGOVER = @as(u32, 71588);
pub const DISPID_IHTMLELEMENT2_ONDRAGLEAVE = @as(u32, 71589);
pub const DISPID_IHTMLELEMENT2_ONDROP = @as(u32, 71590);
pub const DISPID_IHTMLELEMENT2_ONBEFORECUT = @as(u32, 71594);
pub const DISPID_IHTMLELEMENT2_ONCUT = @as(u32, 71591);
pub const DISPID_IHTMLELEMENT2_ONBEFORECOPY = @as(u32, 71595);
pub const DISPID_IHTMLELEMENT2_ONCOPY = @as(u32, 71592);
pub const DISPID_IHTMLELEMENT2_ONBEFOREPASTE = @as(u32, 71596);
pub const DISPID_IHTMLELEMENT2_ONPASTE = @as(u32, 71593);
pub const DISPID_IHTMLELEMENT2_CURRENTSTYLE = @as(u32, 66543);
pub const DISPID_IHTMLELEMENT2_ONPROPERTYCHANGE = @as(u32, 71583);
pub const DISPID_IHTMLELEMENT2_GETCLIENTRECTS = @as(u32, 66580);
pub const DISPID_IHTMLELEMENT2_GETBOUNDINGCLIENTRECT = @as(u32, 66581);
pub const DISPID_IHTMLELEMENT2_SETEXPRESSION = @as(u32, 66040);
pub const DISPID_IHTMLELEMENT2_GETEXPRESSION = @as(u32, 66041);
pub const DISPID_IHTMLELEMENT2_REMOVEEXPRESSION = @as(u32, 66042);
pub const DISPID_IHTMLELEMENT2_TABINDEX = @as(u32, 65551);
pub const DISPID_IHTMLELEMENT2_FOCUS = @as(u32, 67536);
pub const DISPID_IHTMLELEMENT2_ACCESSKEY = @as(u32, 67541);
pub const DISPID_IHTMLELEMENT2_ONBLUR = @as(u32, 71551);
pub const DISPID_IHTMLELEMENT2_ONFOCUS = @as(u32, 71550);
pub const DISPID_IHTMLELEMENT2_ONRESIZE = @as(u32, 71572);
pub const DISPID_IHTMLELEMENT2_BLUR = @as(u32, 67538);
pub const DISPID_IHTMLELEMENT2_ADDFILTER = @as(u32, 67553);
pub const DISPID_IHTMLELEMENT2_REMOVEFILTER = @as(u32, 67554);
pub const DISPID_IHTMLELEMENT2_CLIENTHEIGHT = @as(u32, 67555);
pub const DISPID_IHTMLELEMENT2_CLIENTWIDTH = @as(u32, 67556);
pub const DISPID_IHTMLELEMENT2_CLIENTTOP = @as(u32, 67557);
pub const DISPID_IHTMLELEMENT2_CLIENTLEFT = @as(u32, 67558);
pub const DISPID_IHTMLELEMENT2_ATTACHEVENT = @as(u32, 66043);
pub const DISPID_IHTMLELEMENT2_DETACHEVENT = @as(u32, 66044);
pub const DISPID_IHTMLELEMENT2_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLELEMENT2_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLELEMENT2_ONROWSDELETE = @as(u32, 71598);
pub const DISPID_IHTMLELEMENT2_ONROWSINSERTED = @as(u32, 71599);
pub const DISPID_IHTMLELEMENT2_ONCELLCHANGE = @as(u32, 71600);
pub const DISPID_IHTMLELEMENT2_DIR = @as(u32, 70653);
pub const DISPID_IHTMLELEMENT2_CREATECONTROLRANGE = @as(u32, 66592);
pub const DISPID_IHTMLELEMENT2_SCROLLHEIGHT = @as(u32, 66593);
pub const DISPID_IHTMLELEMENT2_SCROLLWIDTH = @as(u32, 66594);
pub const DISPID_IHTMLELEMENT2_SCROLLTOP = @as(u32, 66595);
pub const DISPID_IHTMLELEMENT2_SCROLLLEFT = @as(u32, 66596);
pub const DISPID_IHTMLELEMENT2_CLEARATTRIBUTES = @as(u32, 66598);
pub const DISPID_IHTMLELEMENT2_MERGEATTRIBUTES = @as(u32, 66599);
pub const DISPID_IHTMLELEMENT2_ONCONTEXTMENU = @as(u32, 71601);
pub const DISPID_IHTMLELEMENT2_INSERTADJACENTELEMENT = @as(u32, 66605);
pub const DISPID_IHTMLELEMENT2_APPLYELEMENT = @as(u32, 66601);
pub const DISPID_IHTMLELEMENT2_GETADJACENTTEXT = @as(u32, 66606);
pub const DISPID_IHTMLELEMENT2_REPLACEADJACENTTEXT = @as(u32, 66607);
pub const DISPID_IHTMLELEMENT2_CANHAVECHILDREN = @as(u32, 66608);
pub const DISPID_IHTMLELEMENT2_ADDBEHAVIOR = @as(u32, 66616);
pub const DISPID_IHTMLELEMENT2_REMOVEBEHAVIOR = @as(u32, 66617);
pub const DISPID_IHTMLELEMENT2_RUNTIMESTYLE = @as(u32, 66600);
pub const DISPID_IHTMLELEMENT2_BEHAVIORURNS = @as(u32, 66618);
pub const DISPID_IHTMLELEMENT2_TAGURN = @as(u32, 66619);
pub const DISPID_IHTMLELEMENT2_ONBEFOREEDITFOCUS = @as(u32, 71605);
pub const DISPID_IHTMLELEMENT2_READYSTATEVALUE = @as(u32, 66620);
pub const DISPID_IHTMLELEMENT2_GETELEMENTSBYTAGNAME = @as(u32, 66621);
pub const DISPID_IHTMLELEMENT3_MERGEATTRIBUTES = @as(u32, 66632);
pub const DISPID_IHTMLELEMENT3_ISMULTILINE = @as(u32, 66633);
pub const DISPID_IHTMLELEMENT3_CANHAVEHTML = @as(u32, 66634);
pub const DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE = @as(u32, 71609);
pub const DISPID_IHTMLELEMENT3_ONPAGE = @as(u32, 71610);
pub const DISPID_IHTMLELEMENT3_INFLATEBLOCK = @as(u32, 66636);
pub const DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE = @as(u32, 71613);
pub const DISPID_IHTMLELEMENT3_SETACTIVE = @as(u32, 66637);
pub const DISPID_IHTMLELEMENT3_CONTENTEDITABLE = @as(u32, 70698);
pub const DISPID_IHTMLELEMENT3_ISCONTENTEDITABLE = @as(u32, 66638);
pub const DISPID_IHTMLELEMENT3_HIDEFOCUS = @as(u32, 70699);
pub const DISPID_IHTMLELEMENT3_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLELEMENT3_ISDISABLED = @as(u32, 66641);
pub const DISPID_IHTMLELEMENT3_ONMOVE = @as(u32, 71614);
pub const DISPID_IHTMLELEMENT3_ONCONTROLSELECT = @as(u32, 71615);
pub const DISPID_IHTMLELEMENT3_FIREEVENT = @as(u32, 66642);
pub const DISPID_IHTMLELEMENT3_ONRESIZESTART = @as(u32, 71619);
pub const DISPID_IHTMLELEMENT3_ONRESIZEEND = @as(u32, 71620);
pub const DISPID_IHTMLELEMENT3_ONMOVESTART = @as(u32, 71617);
pub const DISPID_IHTMLELEMENT3_ONMOVEEND = @as(u32, 71618);
pub const DISPID_IHTMLELEMENT3_ONMOUSEENTER = @as(u32, 71621);
pub const DISPID_IHTMLELEMENT3_ONMOUSELEAVE = @as(u32, 71622);
pub const DISPID_IHTMLELEMENT3_ONACTIVATE = @as(u32, 71623);
pub const DISPID_IHTMLELEMENT3_ONDEACTIVATE = @as(u32, 71624);
pub const DISPID_IHTMLELEMENT3_DRAGDROP = @as(u32, 66643);
pub const DISPID_IHTMLELEMENT3_GLYPHMODE = @as(u32, 66644);
pub const DISPID_IHTMLELEMENT4_ONMOUSEWHEEL = @as(u32, 71612);
pub const DISPID_IHTMLELEMENT4_NORMALIZE = @as(u32, 66648);
pub const DISPID_IHTMLELEMENT4_GETATTRIBUTENODE = @as(u32, 66645);
pub const DISPID_IHTMLELEMENT4_SETATTRIBUTENODE = @as(u32, 66646);
pub const DISPID_IHTMLELEMENT4_REMOVEATTRIBUTENODE = @as(u32, 66647);
pub const DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE = @as(u32, 71626);
pub const DISPID_IHTMLELEMENT4_ONFOCUSIN = @as(u32, 71627);
pub const DISPID_IHTMLELEMENT4_ONFOCUSOUT = @as(u32, 71628);
pub const DISPID_IELEMENTSELECTOR_QUERYSELECTOR = @as(u32, 66650);
pub const DISPID_IELEMENTSELECTOR_QUERYSELECTORALL = @as(u32, 66651);
pub const DISPID_IHTMLUNIQUENAME_UNIQUENUMBER = @as(u32, 66590);
pub const DISPID_IHTMLUNIQUENAME_UNIQUEID = @as(u32, 66591);
pub const DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTENODE = @as(u32, 66736);
pub const DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTENODE = @as(u32, 66737);
pub const DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTENODE = @as(u32, 66738);
pub const DISPID_IHTMLELEMENT5_HASATTRIBUTE = @as(u32, 66739);
pub const DISPID_IHTMLELEMENT5_ROLE = @as(u32, 66740);
pub const DISPID_IHTMLELEMENT5_ARIABUSY = @as(u32, 66741);
pub const DISPID_IHTMLELEMENT5_ARIACHECKED = @as(u32, 66742);
pub const DISPID_IHTMLELEMENT5_ARIADISABLED = @as(u32, 66743);
pub const DISPID_IHTMLELEMENT5_ARIAEXPANDED = @as(u32, 66744);
pub const DISPID_IHTMLELEMENT5_ARIAHASPOPUP = @as(u32, 66745);
pub const DISPID_IHTMLELEMENT5_ARIAHIDDEN = @as(u32, 66746);
pub const DISPID_IHTMLELEMENT5_ARIAINVALID = @as(u32, 66747);
pub const DISPID_IHTMLELEMENT5_ARIAMULTISELECTABLE = @as(u32, 66748);
pub const DISPID_IHTMLELEMENT5_ARIAPRESSED = @as(u32, 66749);
pub const DISPID_IHTMLELEMENT5_ARIAREADONLY = @as(u32, 66750);
pub const DISPID_IHTMLELEMENT5_ARIAREQUIRED = @as(u32, 66751);
pub const DISPID_IHTMLELEMENT5_ARIASECRET = @as(u32, 66752);
pub const DISPID_IHTMLELEMENT5_ARIASELECTED = @as(u32, 66753);
pub const DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTE = @as(u32, 66754);
pub const DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTE = @as(u32, 66755);
pub const DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTE = @as(u32, 66756);
pub const DISPID_IHTMLELEMENT5_IE8_ATTRIBUTES = @as(u32, 66757);
pub const DISPID_IHTMLELEMENT5_ARIAVALUENOW = @as(u32, 66758);
pub const DISPID_IHTMLELEMENT5_ARIAPOSINSET = @as(u32, 66759);
pub const DISPID_IHTMLELEMENT5_ARIASETSIZE = @as(u32, 66760);
pub const DISPID_IHTMLELEMENT5_ARIALEVEL = @as(u32, 66761);
pub const DISPID_IHTMLELEMENT5_ARIAVALUEMIN = @as(u32, 66762);
pub const DISPID_IHTMLELEMENT5_ARIAVALUEMAX = @as(u32, 66763);
pub const DISPID_IHTMLELEMENT5_ARIACONTROLS = @as(u32, 66764);
pub const DISPID_IHTMLELEMENT5_ARIADESCRIBEDBY = @as(u32, 66765);
pub const DISPID_IHTMLELEMENT5_ARIAFLOWTO = @as(u32, 66766);
pub const DISPID_IHTMLELEMENT5_ARIALABELLEDBY = @as(u32, 66767);
pub const DISPID_IHTMLELEMENT5_ARIAACTIVEDESCENDANT = @as(u32, 66768);
pub const DISPID_IHTMLELEMENT5_ARIAOWNS = @as(u32, 66769);
pub const DISPID_IHTMLELEMENT5_HASATTRIBUTES = @as(u32, 66770);
pub const DISPID_IHTMLELEMENT5_ARIALIVE = @as(u32, 66771);
pub const DISPID_IHTMLELEMENT5_ARIARELEVANT = @as(u32, 66772);
pub const DISPID_IHTMLELEMENT6_GETATTRIBUTENS = @as(u32, 66789);
pub const DISPID_IHTMLELEMENT6_SETATTRIBUTENS = @as(u32, 66790);
pub const DISPID_IHTMLELEMENT6_REMOVEATTRIBUTENS = @as(u32, 66791);
pub const DISPID_IHTMLELEMENT6_GETATTRIBUTENODENS = @as(u32, 66786);
pub const DISPID_IHTMLELEMENT6_SETATTRIBUTENODENS = @as(u32, 66787);
pub const DISPID_IHTMLELEMENT6_HASATTRIBUTENS = @as(u32, 66788);
pub const DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTE = @as(u32, 66796);
pub const DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTE = @as(u32, 66797);
pub const DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTE = @as(u32, 66798);
pub const DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTENODE = @as(u32, 66792);
pub const DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTENODE = @as(u32, 66793);
pub const DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTENODE = @as(u32, 66794);
pub const DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTE = @as(u32, 66795);
pub const DISPID_IHTMLELEMENT6_GETELEMENTSBYTAGNAMENS = @as(u32, 66799);
pub const DISPID_IHTMLELEMENT6_IE9_TAGNAME = @as(u32, 66801);
pub const DISPID_IHTMLELEMENT6_IE9_NODENAME = @as(u32, 66802);
pub const DISPID_IHTMLELEMENT6_GETELEMENTSBYCLASSNAME = @as(u32, 66803);
pub const DISPID_IHTMLELEMENT6_MSMATCHESSELECTOR = @as(u32, 66814);
pub const DISPID_IHTMLELEMENT6_ONABORT = @as(u32, 71564);
pub const DISPID_IHTMLELEMENT6_ONCANPLAY = @as(u32, 71670);
pub const DISPID_IHTMLELEMENT6_ONCANPLAYTHROUGH = @as(u32, 71671);
pub const DISPID_IHTMLELEMENT6_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLELEMENT6_ONDURATIONCHANGE = @as(u32, 71672);
pub const DISPID_IHTMLELEMENT6_ONEMPTIED = @as(u32, 71673);
pub const DISPID_IHTMLELEMENT6_ONENDED = @as(u32, 71674);
pub const DISPID_IHTMLELEMENT6_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLELEMENT6_ONINPUT = @as(u32, 71663);
pub const DISPID_IHTMLELEMENT6_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLELEMENT6_ONLOADEDDATA = @as(u32, 71675);
pub const DISPID_IHTMLELEMENT6_ONLOADEDMETADATA = @as(u32, 71676);
pub const DISPID_IHTMLELEMENT6_ONLOADSTART = @as(u32, 71677);
pub const DISPID_IHTMLELEMENT6_ONPAUSE = @as(u32, 71678);
pub const DISPID_IHTMLELEMENT6_ONPLAY = @as(u32, 71679);
pub const DISPID_IHTMLELEMENT6_ONPLAYING = @as(u32, 71680);
pub const DISPID_IHTMLELEMENT6_ONPROGRESS = @as(u32, 71681);
pub const DISPID_IHTMLELEMENT6_ONRATECHANGE = @as(u32, 71682);
pub const DISPID_IHTMLELEMENT6_ONRESET = @as(u32, 71548);
pub const DISPID_IHTMLELEMENT6_ONSEEKED = @as(u32, 71683);
pub const DISPID_IHTMLELEMENT6_ONSEEKING = @as(u32, 71684);
pub const DISPID_IHTMLELEMENT6_ONSELECT = @as(u32, 71546);
pub const DISPID_IHTMLELEMENT6_ONSTALLED = @as(u32, 71685);
pub const DISPID_IHTMLELEMENT6_ONSUBMIT = @as(u32, 71547);
pub const DISPID_IHTMLELEMENT6_ONSUSPEND = @as(u32, 71686);
pub const DISPID_IHTMLELEMENT6_ONTIMEUPDATE = @as(u32, 71687);
pub const DISPID_IHTMLELEMENT6_ONVOLUMECHANGE = @as(u32, 71688);
pub const DISPID_IHTMLELEMENT6_ONWAITING = @as(u32, 71689);
pub const DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTES = @as(u32, 66815);
pub const DISPID_IHTMLELEMENT7_ONMSPOINTERDOWN = @as(u32, 71690);
pub const DISPID_IHTMLELEMENT7_ONMSPOINTERMOVE = @as(u32, 71691);
pub const DISPID_IHTMLELEMENT7_ONMSPOINTERUP = @as(u32, 71692);
pub const DISPID_IHTMLELEMENT7_ONMSPOINTEROVER = @as(u32, 71693);
pub const DISPID_IHTMLELEMENT7_ONMSPOINTEROUT = @as(u32, 71694);
pub const DISPID_IHTMLELEMENT7_ONMSPOINTERCANCEL = @as(u32, 71695);
pub const DISPID_IHTMLELEMENT7_ONMSPOINTERHOVER = @as(u32, 71696);
pub const DISPID_IHTMLELEMENT7_ONMSLOSTPOINTERCAPTURE = @as(u32, 71706);
pub const DISPID_IHTMLELEMENT7_ONMSGOTPOINTERCAPTURE = @as(u32, 71707);
pub const DISPID_IHTMLELEMENT7_ONMSGESTURESTART = @as(u32, 71699);
pub const DISPID_IHTMLELEMENT7_ONMSGESTURECHANGE = @as(u32, 71700);
pub const DISPID_IHTMLELEMENT7_ONMSGESTUREEND = @as(u32, 71701);
pub const DISPID_IHTMLELEMENT7_ONMSGESTUREHOLD = @as(u32, 71702);
pub const DISPID_IHTMLELEMENT7_ONMSGESTURETAP = @as(u32, 71703);
pub const DISPID_IHTMLELEMENT7_ONMSGESTUREDOUBLETAP = @as(u32, 71704);
pub const DISPID_IHTMLELEMENT7_ONMSINERTIASTART = @as(u32, 71705);
pub const DISPID_IHTMLELEMENT7_MSSETPOINTERCAPTURE = @as(u32, 66822);
pub const DISPID_IHTMLELEMENT7_MSRELEASEPOINTERCAPTURE = @as(u32, 66823);
pub const DISPID_IHTMLELEMENT7_ONMSTRANSITIONSTART = @as(u32, 71709);
pub const DISPID_IHTMLELEMENT7_ONMSTRANSITIONEND = @as(u32, 71710);
pub const DISPID_IHTMLELEMENT7_ONMSANIMATIONSTART = @as(u32, 71711);
pub const DISPID_IHTMLELEMENT7_ONMSANIMATIONEND = @as(u32, 71712);
pub const DISPID_IHTMLELEMENT7_ONMSANIMATIONITERATION = @as(u32, 71713);
pub const DISPID_IHTMLELEMENT7_ONINVALID = @as(u32, 71724);
pub const DISPID_IHTMLELEMENT7_XMSACCELERATORKEY = @as(u32, 66834);
pub const DISPID_IHTMLELEMENT7_SPELLCHECK = @as(u32, 70907);
pub const DISPID_IHTMLELEMENT7_ONMSMANIPULATIONSTATECHANGED = @as(u32, 71714);
pub const DISPID_IHTMLELEMENT7_ONCUECHANGE = @as(u32, 71729);
pub const DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIED = @as(u32, 66652);
pub const DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIEDWITHANCESTOR = @as(u32, 66653);
pub const DISPID_IELEMENTTRAVERSAL_FIRSTELEMENTCHILD = @as(u32, 66808);
pub const DISPID_IELEMENTTRAVERSAL_LASTELEMENTCHILD = @as(u32, 66809);
pub const DISPID_IELEMENTTRAVERSAL_PREVIOUSELEMENTSIBLING = @as(u32, 66810);
pub const DISPID_IELEMENTTRAVERSAL_NEXTELEMENTSIBLING = @as(u32, 66811);
pub const DISPID_IELEMENTTRAVERSAL_CHILDELEMENTCOUNT = @as(u32, 66812);
pub const DISPID_IHTMLDATABINDING_DATAFLD = @as(u32, 66557);
pub const DISPID_IHTMLDATABINDING_DATASRC = @as(u32, 66558);
pub const DISPID_IHTMLDATABINDING_DATAFORMATAS = @as(u32, 66559);
pub const DISPID_HTMLELEMENTEVENTS4_ONABORT = @as(u32, 1000);
pub const DISPID_HTMLELEMENTEVENTS4_ONCHANGE = @as(u32, 1001);
pub const DISPID_HTMLELEMENTEVENTS4_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLELEMENTEVENTS4_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLELEMENTEVENTS4_ONRESET = @as(u32, 1015);
pub const DISPID_HTMLELEMENTEVENTS4_ONSELECT = @as(u32, 1006);
pub const DISPID_HTMLELEMENTEVENTS4_ONSUBMIT = @as(u32, 1007);
pub const DISPID_HTMLELEMENTEVENTS4_ONMSCONTENTZOOM = @as(u32, 71708);
pub const DISPID_HTMLELEMENTEVENTS3_ONONLINE = @as(u32, 1064);
pub const DISPID_HTMLELEMENTEVENTS3_ONOFFLINE = @as(u32, 1065);
pub const DISPID_HTMLELEMENTEVENTS2_ONHELP = @as(u32, 65546);
pub const DISPID_HTMLELEMENTEVENTS2_ONCLICK = @as(i32, -600);
pub const DISPID_HTMLELEMENTEVENTS2_ONDBLCLICK = @as(i32, -601);
pub const DISPID_HTMLELEMENTEVENTS2_ONKEYPRESS = @as(i32, -603);
pub const DISPID_HTMLELEMENTEVENTS2_ONKEYDOWN = @as(i32, -602);
pub const DISPID_HTMLELEMENTEVENTS2_ONKEYUP = @as(i32, -604);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOUSEOUT = @as(u32, 65545);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOUSEOVER = @as(u32, 65544);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOUSEMOVE = @as(i32, -606);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOUSEDOWN = @as(i32, -605);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOUSEUP = @as(i32, -607);
pub const DISPID_HTMLELEMENTEVENTS2_ONSELECTSTART = @as(u32, 65548);
pub const DISPID_HTMLELEMENTEVENTS2_ONFILTERCHANGE = @as(u32, 65553);
pub const DISPID_HTMLELEMENTEVENTS2_ONDRAGSTART = @as(u32, 65547);
pub const DISPID_HTMLELEMENTEVENTS2_ONBEFOREUPDATE = @as(u32, 65540);
pub const DISPID_HTMLELEMENTEVENTS2_ONAFTERUPDATE = @as(u32, 65541);
pub const DISPID_HTMLELEMENTEVENTS2_ONERRORUPDATE = @as(u32, 65549);
pub const DISPID_HTMLELEMENTEVENTS2_ONROWEXIT = @as(u32, 65542);
pub const DISPID_HTMLELEMENTEVENTS2_ONROWENTER = @as(u32, 65543);
pub const DISPID_HTMLELEMENTEVENTS2_ONDATASETCHANGED = @as(u32, 65550);
pub const DISPID_HTMLELEMENTEVENTS2_ONDATAAVAILABLE = @as(u32, 65551);
pub const DISPID_HTMLELEMENTEVENTS2_ONDATASETCOMPLETE = @as(u32, 65552);
pub const DISPID_HTMLELEMENTEVENTS2_ONLOSECAPTURE = @as(u32, 65554);
pub const DISPID_HTMLELEMENTEVENTS2_ONPROPERTYCHANGE = @as(u32, 65555);
pub const DISPID_HTMLELEMENTEVENTS2_ONSCROLL = @as(u32, 1014);
pub const DISPID_HTMLELEMENTEVENTS2_ONFOCUS = @as(u32, 65537);
pub const DISPID_HTMLELEMENTEVENTS2_ONRESIZE = @as(u32, 1016);
pub const DISPID_HTMLELEMENTEVENTS2_ONDRAG = @as(u32, 65556);
pub const DISPID_HTMLELEMENTEVENTS2_ONDRAGEND = @as(u32, 65557);
pub const DISPID_HTMLELEMENTEVENTS2_ONDRAGENTER = @as(u32, 65558);
pub const DISPID_HTMLELEMENTEVENTS2_ONDRAGOVER = @as(u32, 65559);
pub const DISPID_HTMLELEMENTEVENTS2_ONDRAGLEAVE = @as(u32, 65560);
pub const DISPID_HTMLELEMENTEVENTS2_ONDROP = @as(u32, 65561);
pub const DISPID_HTMLELEMENTEVENTS2_ONBEFORECUT = @as(u32, 65565);
pub const DISPID_HTMLELEMENTEVENTS2_ONCUT = @as(u32, 65562);
pub const DISPID_HTMLELEMENTEVENTS2_ONBEFORECOPY = @as(u32, 65566);
pub const DISPID_HTMLELEMENTEVENTS2_ONCOPY = @as(u32, 65563);
pub const DISPID_HTMLELEMENTEVENTS2_ONBEFOREPASTE = @as(u32, 65567);
pub const DISPID_HTMLELEMENTEVENTS2_ONPASTE = @as(u32, 65564);
pub const DISPID_HTMLELEMENTEVENTS2_ONCONTEXTMENU = @as(u32, 1023);
pub const DISPID_HTMLELEMENTEVENTS2_ONROWSDELETE = @as(u32, 65568);
pub const DISPID_HTMLELEMENTEVENTS2_ONROWSINSERTED = @as(u32, 65569);
pub const DISPID_HTMLELEMENTEVENTS2_ONCELLCHANGE = @as(u32, 65570);
pub const DISPID_HTMLELEMENTEVENTS2_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_HTMLELEMENTEVENTS2_ONLAYOUTCOMPLETE = @as(u32, 1030);
pub const DISPID_HTMLELEMENTEVENTS2_ONPAGE = @as(u32, 1031);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOUSEENTER = @as(u32, 1042);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOUSELEAVE = @as(u32, 1043);
pub const DISPID_HTMLELEMENTEVENTS2_ONACTIVATE = @as(u32, 1044);
pub const DISPID_HTMLELEMENTEVENTS2_ONDEACTIVATE = @as(u32, 1045);
pub const DISPID_HTMLELEMENTEVENTS2_ONBEFOREDEACTIVATE = @as(u32, 1034);
pub const DISPID_HTMLELEMENTEVENTS2_ONBEFOREACTIVATE = @as(u32, 1047);
pub const DISPID_HTMLELEMENTEVENTS2_ONFOCUSIN = @as(u32, 1048);
pub const DISPID_HTMLELEMENTEVENTS2_ONFOCUSOUT = @as(u32, 1049);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOVE = @as(u32, 1035);
pub const DISPID_HTMLELEMENTEVENTS2_ONCONTROLSELECT = @as(u32, 1036);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOVESTART = @as(u32, 1038);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOVEEND = @as(u32, 1039);
pub const DISPID_HTMLELEMENTEVENTS2_ONRESIZESTART = @as(u32, 1040);
pub const DISPID_HTMLELEMENTEVENTS2_ONRESIZEEND = @as(u32, 1041);
pub const DISPID_HTMLELEMENTEVENTS2_ONMOUSEWHEEL = @as(u32, 1033);
pub const DISPID_HTMLELEMENTEVENTS_ONHELP = @as(u32, 65546);
pub const DISPID_HTMLELEMENTEVENTS_ONCLICK = @as(i32, -600);
pub const DISPID_HTMLELEMENTEVENTS_ONDBLCLICK = @as(i32, -601);
pub const DISPID_HTMLELEMENTEVENTS_ONKEYPRESS = @as(i32, -603);
pub const DISPID_HTMLELEMENTEVENTS_ONKEYDOWN = @as(i32, -602);
pub const DISPID_HTMLELEMENTEVENTS_ONKEYUP = @as(i32, -604);
pub const DISPID_HTMLELEMENTEVENTS_ONMOUSEOUT = @as(u32, 65545);
pub const DISPID_HTMLELEMENTEVENTS_ONMOUSEOVER = @as(u32, 65544);
pub const DISPID_HTMLELEMENTEVENTS_ONMOUSEMOVE = @as(i32, -606);
pub const DISPID_HTMLELEMENTEVENTS_ONMOUSEDOWN = @as(i32, -605);
pub const DISPID_HTMLELEMENTEVENTS_ONMOUSEUP = @as(i32, -607);
pub const DISPID_HTMLELEMENTEVENTS_ONSELECTSTART = @as(u32, 65548);
pub const DISPID_HTMLELEMENTEVENTS_ONFILTERCHANGE = @as(u32, 65553);
pub const DISPID_HTMLELEMENTEVENTS_ONDRAGSTART = @as(u32, 65547);
pub const DISPID_HTMLELEMENTEVENTS_ONBEFOREUPDATE = @as(u32, 65540);
pub const DISPID_HTMLELEMENTEVENTS_ONAFTERUPDATE = @as(u32, 65541);
pub const DISPID_HTMLELEMENTEVENTS_ONERRORUPDATE = @as(u32, 65549);
pub const DISPID_HTMLELEMENTEVENTS_ONROWEXIT = @as(u32, 65542);
pub const DISPID_HTMLELEMENTEVENTS_ONROWENTER = @as(u32, 65543);
pub const DISPID_HTMLELEMENTEVENTS_ONDATASETCHANGED = @as(u32, 65550);
pub const DISPID_HTMLELEMENTEVENTS_ONDATAAVAILABLE = @as(u32, 65551);
pub const DISPID_HTMLELEMENTEVENTS_ONDATASETCOMPLETE = @as(u32, 65552);
pub const DISPID_HTMLELEMENTEVENTS_ONLOSECAPTURE = @as(u32, 65554);
pub const DISPID_HTMLELEMENTEVENTS_ONPROPERTYCHANGE = @as(u32, 65555);
pub const DISPID_HTMLELEMENTEVENTS_ONSCROLL = @as(u32, 1014);
pub const DISPID_HTMLELEMENTEVENTS_ONFOCUS = @as(u32, 65537);
pub const DISPID_HTMLELEMENTEVENTS_ONRESIZE = @as(u32, 1016);
pub const DISPID_HTMLELEMENTEVENTS_ONDRAG = @as(u32, 65556);
pub const DISPID_HTMLELEMENTEVENTS_ONDRAGEND = @as(u32, 65557);
pub const DISPID_HTMLELEMENTEVENTS_ONDRAGENTER = @as(u32, 65558);
pub const DISPID_HTMLELEMENTEVENTS_ONDRAGOVER = @as(u32, 65559);
pub const DISPID_HTMLELEMENTEVENTS_ONDRAGLEAVE = @as(u32, 65560);
pub const DISPID_HTMLELEMENTEVENTS_ONDROP = @as(u32, 65561);
pub const DISPID_HTMLELEMENTEVENTS_ONBEFORECUT = @as(u32, 65565);
pub const DISPID_HTMLELEMENTEVENTS_ONCUT = @as(u32, 65562);
pub const DISPID_HTMLELEMENTEVENTS_ONBEFORECOPY = @as(u32, 65566);
pub const DISPID_HTMLELEMENTEVENTS_ONCOPY = @as(u32, 65563);
pub const DISPID_HTMLELEMENTEVENTS_ONBEFOREPASTE = @as(u32, 65567);
pub const DISPID_HTMLELEMENTEVENTS_ONPASTE = @as(u32, 65564);
pub const DISPID_HTMLELEMENTEVENTS_ONCONTEXTMENU = @as(u32, 1023);
pub const DISPID_HTMLELEMENTEVENTS_ONROWSDELETE = @as(u32, 65568);
pub const DISPID_HTMLELEMENTEVENTS_ONROWSINSERTED = @as(u32, 65569);
pub const DISPID_HTMLELEMENTEVENTS_ONCELLCHANGE = @as(u32, 65570);
pub const DISPID_HTMLELEMENTEVENTS_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_HTMLELEMENTEVENTS_ONBEFOREEDITFOCUS = @as(u32, 1027);
pub const DISPID_HTMLELEMENTEVENTS_ONLAYOUTCOMPLETE = @as(u32, 1030);
pub const DISPID_HTMLELEMENTEVENTS_ONPAGE = @as(u32, 1031);
pub const DISPID_HTMLELEMENTEVENTS_ONBEFOREDEACTIVATE = @as(u32, 1034);
pub const DISPID_HTMLELEMENTEVENTS_ONBEFOREACTIVATE = @as(u32, 1047);
pub const DISPID_HTMLELEMENTEVENTS_ONMOVE = @as(u32, 1035);
pub const DISPID_HTMLELEMENTEVENTS_ONCONTROLSELECT = @as(u32, 1036);
pub const DISPID_HTMLELEMENTEVENTS_ONMOVESTART = @as(u32, 1038);
pub const DISPID_HTMLELEMENTEVENTS_ONMOVEEND = @as(u32, 1039);
pub const DISPID_HTMLELEMENTEVENTS_ONRESIZESTART = @as(u32, 1040);
pub const DISPID_HTMLELEMENTEVENTS_ONRESIZEEND = @as(u32, 1041);
pub const DISPID_HTMLELEMENTEVENTS_ONMOUSEENTER = @as(u32, 1042);
pub const DISPID_HTMLELEMENTEVENTS_ONMOUSELEAVE = @as(u32, 1043);
pub const DISPID_HTMLELEMENTEVENTS_ONMOUSEWHEEL = @as(u32, 1033);
pub const DISPID_HTMLELEMENTEVENTS_ONACTIVATE = @as(u32, 1044);
pub const DISPID_HTMLELEMENTEVENTS_ONDEACTIVATE = @as(u32, 1045);
pub const DISPID_HTMLELEMENTEVENTS_ONFOCUSIN = @as(u32, 1048);
pub const DISPID_HTMLELEMENTEVENTS_ONFOCUSOUT = @as(u32, 1049);
pub const DISPID_IHTMLELEMENTDEFAULTS_STYLE = @as(u32, 1001);
pub const DISPID_IHTMLELEMENTDEFAULTS_TABSTOP = @as(u32, 1002);
pub const DISPID_IHTMLELEMENTDEFAULTS_VIEWINHERITSTYLE = @as(u32, 70735);
pub const DISPID_IHTMLELEMENTDEFAULTS_VIEWMASTERTAB = @as(u32, 1006);
pub const DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTX = @as(u32, 1003);
pub const DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTY = @as(u32, 1004);
pub const DISPID_IHTMLELEMENTDEFAULTS_ISMULTILINE = @as(u32, 1008);
pub const DISPID_IHTMLELEMENTDEFAULTS_CONTENTEDITABLE = @as(u32, 70698);
pub const DISPID_IHTMLELEMENTDEFAULTS_CANHAVEHTML = @as(u32, 1009);
pub const DISPID_IHTMLELEMENTDEFAULTS_VIEWLINK = @as(u32, 1011);
pub const DISPID_IHTMLELEMENTDEFAULTS_FROZEN = @as(u32, 70734);
pub const DISPID_IHTCDEFAULTDISPATCH_ELEMENT = @as(u32, 70679);
pub const DISPID_IHTCDEFAULTDISPATCH_CREATEEVENTOBJECT = @as(u32, 70680);
pub const DISPID_IHTCDEFAULTDISPATCH_DEFAULTS = @as(u32, 70701);
pub const DISPID_IHTCDEFAULTDISPATCH_DOCUMENT = @as(u32, 70678);
pub const DISPID_IHTCPROPERTYBEHAVIOR_FIRECHANGE = @as(u32, 66036);
pub const DISPID_IHTCPROPERTYBEHAVIOR_VALUE = @as(u32, 70677);
pub const DISPID_IHTCEVENTBEHAVIOR_FIRE = @as(u32, 66036);
pub const DISPID_IHTCATTACHBEHAVIOR_FIREEVENT = @as(u32, 0);
pub const DISPID_IHTCATTACHBEHAVIOR_DETACHEVENT = @as(u32, 66036);
pub const DISPID_IHTCATTACHBEHAVIOR2_FIREEVENT = @as(u32, 0);
pub const DISPID_IHTCDESCBEHAVIOR_URN = @as(u32, 66036);
pub const DISPID_IHTCDESCBEHAVIOR_NAME = @as(u32, 66037);
pub const DISPID_IHTMLURNCOLLECTION_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLURNCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLGENERICELEMENT_RECORDSET = @as(u32, 1001);
pub const DISPID_IHTMLGENERICELEMENT_NAMEDRECORDSET = @as(u32, 1002);
pub const DISPID_IHTMLSTYLESHEETRULE_SELECTORTEXT = @as(u32, 1001);
pub const DISPID_IHTMLSTYLESHEETRULE_STYLE = @as(u32, 65610);
pub const DISPID_IHTMLSTYLESHEETRULE_READONLY = @as(u32, 1002);
pub const DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSSPECIFICITY = @as(u32, 1003);
pub const DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSGETSPECIFICITY = @as(u32, 1004);
pub const DISPID_IHTMLSTYLESHEETRULE2_IE9_SELECTORTEXT = @as(u32, 1005);
pub const DISPID_IHTMLSTYLESHEETRULESCOLLECTION_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLSTYLESHEETRULESCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_LENGTH = @as(u32, 1003);
pub const DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_ITEM = @as(u32, 1002);
pub const DISPID_IHTMLSTYLESHEETPAGE_SELECTOR = @as(u32, 1001);
pub const DISPID_IHTMLSTYLESHEETPAGE_PSEUDOCLASS = @as(u32, 1002);
pub const DISPID_IHTMLSTYLESHEETPAGE2_SELECTORTEXT = @as(u32, 1003);
pub const DISPID_IHTMLSTYLESHEETPAGE2_STYLE = @as(u32, 65610);
pub const DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLSTYLESHEET_TITLE = @as(u32, 1001);
pub const DISPID_IHTMLSTYLESHEET_PARENTSTYLESHEET = @as(u32, 1002);
pub const DISPID_IHTMLSTYLESHEET_OWNINGELEMENT = @as(u32, 1003);
pub const DISPID_IHTMLSTYLESHEET_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLSTYLESHEET_READONLY = @as(u32, 1004);
pub const DISPID_IHTMLSTYLESHEET_IMPORTS = @as(u32, 1005);
pub const DISPID_IHTMLSTYLESHEET_HREF = @as(u32, 1006);
pub const DISPID_IHTMLSTYLESHEET_TYPE = @as(u32, 1007);
pub const DISPID_IHTMLSTYLESHEET_ID = @as(u32, 1008);
pub const DISPID_IHTMLSTYLESHEET_ADDIMPORT = @as(u32, 1009);
pub const DISPID_IHTMLSTYLESHEET_ADDRULE = @as(u32, 1010);
pub const DISPID_IHTMLSTYLESHEET_REMOVEIMPORT = @as(u32, 1011);
pub const DISPID_IHTMLSTYLESHEET_REMOVERULE = @as(u32, 1012);
pub const DISPID_IHTMLSTYLESHEET_MEDIA = @as(u32, 1013);
pub const DISPID_IHTMLSTYLESHEET_CSSTEXT = @as(u32, 1014);
pub const DISPID_IHTMLSTYLESHEET_RULES = @as(u32, 1015);
pub const DISPID_IHTMLSTYLESHEET2_PAGES = @as(u32, 1016);
pub const DISPID_IHTMLSTYLESHEET2_ADDPAGERULE = @as(u32, 1017);
pub const DISPID_IHTMLSTYLESHEET3_IE8_HREF = @as(u32, 1150);
pub const DISPID_IHTMLSTYLESHEET3_ISALTERNATE = @as(u32, 1151);
pub const DISPID_IHTMLSTYLESHEET3_ISPREFALTERNATE = @as(u32, 1152);
pub const DISPID_IHTMLSTYLESHEET4_IE9_TYPE = @as(u32, 1153);
pub const DISPID_IHTMLSTYLESHEET4_IE9_HREF = @as(u32, 1154);
pub const DISPID_IHTMLSTYLESHEET4_IE9_TITLE = @as(u32, 1155);
pub const DISPID_IHTMLSTYLESHEET4_OWNERNODE = @as(u32, 1156);
pub const DISPID_IHTMLSTYLESHEET4_OWNERRULE = @as(u32, 1157);
pub const DISPID_IHTMLSTYLESHEET4_CSSRULES = @as(u32, 1158);
pub const DISPID_IHTMLSTYLESHEET4_IE9_MEDIA = @as(u32, 1159);
pub const DISPID_IHTMLSTYLESHEET4_INSERTRULE = @as(u32, 1160);
pub const DISPID_IHTMLSTYLESHEET4_DELETERULE = @as(u32, 1161);
pub const DISPID_IHTMLSTYLESHEETSCOLLECTION_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLSTYLESHEETSCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLSTYLESHEETSCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLSTYLESHEETSCOLLECTION2_IE9_ITEM = @as(u32, 1002);
pub const DISPID_IHTMLLINKELEMENT_HREF = @as(u32, 1005);
pub const DISPID_IHTMLLINKELEMENT_REL = @as(u32, 1006);
pub const DISPID_IHTMLLINKELEMENT_REV = @as(u32, 1007);
pub const DISPID_IHTMLLINKELEMENT_TYPE = @as(u32, 1008);
pub const DISPID_IHTMLLINKELEMENT_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLLINKELEMENT_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLLINKELEMENT_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLLINKELEMENT_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLLINKELEMENT_STYLESHEET = @as(u32, 1014);
pub const DISPID_IHTMLLINKELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLLINKELEMENT_MEDIA = @as(u32, 1016);
pub const DISPID_IHTMLLINKELEMENT2_TARGET = @as(u32, 1017);
pub const DISPID_IHTMLLINKELEMENT3_CHARSET = @as(u32, 1018);
pub const DISPID_IHTMLLINKELEMENT3_HREFLANG = @as(u32, 1019);
pub const DISPID_IHTMLLINKELEMENT4_IE8_HREF = @as(u32, 1150);
pub const DISPID_IHTMLLINKELEMENT5_SHEET = @as(u32, 1020);
pub const DISPID_HTMLLINKELEMENTEVENTS2_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLLINKELEMENTEVENTS2_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLLINKELEMENTEVENTS_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLLINKELEMENTEVENTS_ONERROR = @as(u32, 1002);
pub const DISPID_IHTMLTXTRANGE_HTMLTEXT = @as(u32, 1003);
pub const DISPID_IHTMLTXTRANGE_TEXT = @as(u32, 1004);
pub const DISPID_IHTMLTXTRANGE_PARENTELEMENT = @as(u32, 1006);
pub const DISPID_IHTMLTXTRANGE_DUPLICATE = @as(u32, 1008);
pub const DISPID_IHTMLTXTRANGE_INRANGE = @as(u32, 1010);
pub const DISPID_IHTMLTXTRANGE_ISEQUAL = @as(u32, 1011);
pub const DISPID_IHTMLTXTRANGE_SCROLLINTOVIEW = @as(u32, 1012);
pub const DISPID_IHTMLTXTRANGE_COLLAPSE = @as(u32, 1013);
pub const DISPID_IHTMLTXTRANGE_EXPAND = @as(u32, 1014);
pub const DISPID_IHTMLTXTRANGE_MOVE = @as(u32, 1015);
pub const DISPID_IHTMLTXTRANGE_MOVESTART = @as(u32, 1016);
pub const DISPID_IHTMLTXTRANGE_MOVEEND = @as(u32, 1017);
pub const DISPID_IHTMLTXTRANGE_SELECT = @as(u32, 1024);
pub const DISPID_IHTMLTXTRANGE_PASTEHTML = @as(u32, 1026);
pub const DISPID_IHTMLTXTRANGE_MOVETOELEMENTTEXT = @as(u32, 1001);
pub const DISPID_IHTMLTXTRANGE_SETENDPOINT = @as(u32, 1025);
pub const DISPID_IHTMLTXTRANGE_COMPAREENDPOINTS = @as(u32, 1018);
pub const DISPID_IHTMLTXTRANGE_FINDTEXT = @as(u32, 1019);
pub const DISPID_IHTMLTXTRANGE_MOVETOPOINT = @as(u32, 1020);
pub const DISPID_IHTMLTXTRANGE_GETBOOKMARK = @as(u32, 1021);
pub const DISPID_IHTMLTXTRANGE_MOVETOBOOKMARK = @as(u32, 1009);
pub const DISPID_IHTMLTXTRANGE_QUERYCOMMANDSUPPORTED = @as(u32, 1027);
pub const DISPID_IHTMLTXTRANGE_QUERYCOMMANDENABLED = @as(u32, 1028);
pub const DISPID_IHTMLTXTRANGE_QUERYCOMMANDSTATE = @as(u32, 1029);
pub const DISPID_IHTMLTXTRANGE_QUERYCOMMANDINDETERM = @as(u32, 1030);
pub const DISPID_IHTMLTXTRANGE_QUERYCOMMANDTEXT = @as(u32, 1031);
pub const DISPID_IHTMLTXTRANGE_QUERYCOMMANDVALUE = @as(u32, 1032);
pub const DISPID_IHTMLTXTRANGE_EXECCOMMAND = @as(u32, 1033);
pub const DISPID_IHTMLTXTRANGE_EXECCOMMANDSHOWHELP = @as(u32, 1034);
pub const DISPID_IHTMLTEXTRANGEMETRICS_OFFSETTOP = @as(u32, 1035);
pub const DISPID_IHTMLTEXTRANGEMETRICS_OFFSETLEFT = @as(u32, 1036);
pub const DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGTOP = @as(u32, 1037);
pub const DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGLEFT = @as(u32, 1038);
pub const DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGWIDTH = @as(u32, 1039);
pub const DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGHEIGHT = @as(u32, 1040);
pub const DISPID_IHTMLTEXTRANGEMETRICS2_GETCLIENTRECTS = @as(u32, 1041);
pub const DISPID_IHTMLTEXTRANGEMETRICS2_GETBOUNDINGCLIENTRECT = @as(u32, 1042);
pub const DISPID_IHTMLTXTRANGECOLLECTION_LENGTH = @as(u32, 1500);
pub const DISPID_IHTMLTXTRANGECOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLTXTRANGECOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLDOMRANGE_STARTCONTAINER = @as(u32, 1001);
pub const DISPID_IHTMLDOMRANGE_STARTOFFSET = @as(u32, 1002);
pub const DISPID_IHTMLDOMRANGE_ENDCONTAINER = @as(u32, 1003);
pub const DISPID_IHTMLDOMRANGE_ENDOFFSET = @as(u32, 1004);
pub const DISPID_IHTMLDOMRANGE_COLLAPSED = @as(u32, 1005);
pub const DISPID_IHTMLDOMRANGE_COMMONANCESTORCONTAINER = @as(u32, 1006);
pub const DISPID_IHTMLDOMRANGE_SETSTART = @as(u32, 1007);
pub const DISPID_IHTMLDOMRANGE_SETEND = @as(u32, 1008);
pub const DISPID_IHTMLDOMRANGE_SETSTARTBEFORE = @as(u32, 1009);
pub const DISPID_IHTMLDOMRANGE_SETSTARTAFTER = @as(u32, 1010);
pub const DISPID_IHTMLDOMRANGE_SETENDBEFORE = @as(u32, 1011);
pub const DISPID_IHTMLDOMRANGE_SETENDAFTER = @as(u32, 1012);
pub const DISPID_IHTMLDOMRANGE_COLLAPSE = @as(u32, 1013);
pub const DISPID_IHTMLDOMRANGE_SELECTNODE = @as(u32, 1014);
pub const DISPID_IHTMLDOMRANGE_SELECTNODECONTENTS = @as(u32, 1015);
pub const DISPID_IHTMLDOMRANGE_COMPAREBOUNDARYPOINTS = @as(u32, 1016);
pub const DISPID_IHTMLDOMRANGE_DELETECONTENTS = @as(u32, 1017);
pub const DISPID_IHTMLDOMRANGE_EXTRACTCONTENTS = @as(u32, 1018);
pub const DISPID_IHTMLDOMRANGE_CLONECONTENTS = @as(u32, 1019);
pub const DISPID_IHTMLDOMRANGE_INSERTNODE = @as(u32, 1020);
pub const DISPID_IHTMLDOMRANGE_SURROUNDCONTENTS = @as(u32, 1021);
pub const DISPID_IHTMLDOMRANGE_CLONERANGE = @as(u32, 1022);
pub const DISPID_IHTMLDOMRANGE_TOSTRING = @as(u32, 1023);
pub const DISPID_IHTMLDOMRANGE_DETACH = @as(u32, 1024);
pub const DISPID_IHTMLDOMRANGE_GETCLIENTRECTS = @as(u32, 1025);
pub const DISPID_IHTMLDOMRANGE_GETBOUNDINGCLIENTRECT = @as(u32, 1026);
pub const DISPID_IHTMLFORMELEMENT_ACTION = @as(u32, 1001);
pub const DISPID_IHTMLFORMELEMENT_DIR = @as(u32, 70653);
pub const DISPID_IHTMLFORMELEMENT_ENCODING = @as(u32, 1003);
pub const DISPID_IHTMLFORMELEMENT_METHOD = @as(u32, 1004);
pub const DISPID_IHTMLFORMELEMENT_ELEMENTS = @as(u32, 1005);
pub const DISPID_IHTMLFORMELEMENT_TARGET = @as(u32, 1006);
pub const DISPID_IHTMLFORMELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLFORMELEMENT_ONSUBMIT = @as(u32, 71547);
pub const DISPID_IHTMLFORMELEMENT_ONRESET = @as(u32, 71548);
pub const DISPID_IHTMLFORMELEMENT_SUBMIT = @as(u32, 1009);
pub const DISPID_IHTMLFORMELEMENT_RESET = @as(u32, 1010);
pub const DISPID_IHTMLFORMELEMENT_LENGTH = @as(u32, 1500);
pub const DISPID_IHTMLFORMELEMENT__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLFORMELEMENT_ITEM = @as(u32, 0);
pub const DISPID_IHTMLFORMELEMENT_TAGS = @as(u32, 1502);
pub const DISPID_IHTMLFORMELEMENT2_ACCEPTCHARSET = @as(u32, 1011);
pub const DISPID_IHTMLFORMELEMENT2_URNS = @as(u32, 1505);
pub const DISPID_IHTMLFORMELEMENT3_NAMEDITEM = @as(u32, 1506);
pub const DISPID_IHTMLSUBMITDATA_APPENDNAMEVALUEPAIR = @as(u32, 1012);
pub const DISPID_IHTMLSUBMITDATA_APPENDNAMEFILEPAIR = @as(u32, 1013);
pub const DISPID_IHTMLSUBMITDATA_APPENDITEMSEPARATOR = @as(u32, 1014);
pub const DISPID_IHTMLFORMELEMENT4_IE8_ACTION = @as(u32, 1150);
pub const DISPID_HTMLFORMELEMENTEVENTS2_ONSUBMIT = @as(u32, 1007);
pub const DISPID_HTMLFORMELEMENTEVENTS2_ONRESET = @as(u32, 1015);
pub const DISPID_HTMLFORMELEMENTEVENTS_ONSUBMIT = @as(u32, 1007);
pub const DISPID_HTMLFORMELEMENTEVENTS_ONRESET = @as(u32, 1015);
pub const DISPID_IHTMLCONTROLELEMENT_TABINDEX = @as(u32, 65551);
pub const DISPID_IHTMLCONTROLELEMENT_FOCUS = @as(u32, 67536);
pub const DISPID_IHTMLCONTROLELEMENT_ACCESSKEY = @as(u32, 67541);
pub const DISPID_IHTMLCONTROLELEMENT_ONBLUR = @as(u32, 71551);
pub const DISPID_IHTMLCONTROLELEMENT_ONFOCUS = @as(u32, 71550);
pub const DISPID_IHTMLCONTROLELEMENT_ONRESIZE = @as(u32, 71572);
pub const DISPID_IHTMLCONTROLELEMENT_BLUR = @as(u32, 67538);
pub const DISPID_IHTMLCONTROLELEMENT_ADDFILTER = @as(u32, 67553);
pub const DISPID_IHTMLCONTROLELEMENT_REMOVEFILTER = @as(u32, 67554);
pub const DISPID_IHTMLCONTROLELEMENT_CLIENTHEIGHT = @as(u32, 67555);
pub const DISPID_IHTMLCONTROLELEMENT_CLIENTWIDTH = @as(u32, 67556);
pub const DISPID_IHTMLCONTROLELEMENT_CLIENTTOP = @as(u32, 67557);
pub const DISPID_IHTMLCONTROLELEMENT_CLIENTLEFT = @as(u32, 67558);
pub const DISPID_IHTMLTEXTCONTAINER_CREATECONTROLRANGE = @as(u32, 1001);
pub const DISPID_IHTMLTEXTCONTAINER_SCROLLHEIGHT = @as(u32, 1002);
pub const DISPID_IHTMLTEXTCONTAINER_SCROLLWIDTH = @as(u32, 1003);
pub const DISPID_IHTMLTEXTCONTAINER_SCROLLTOP = @as(u32, 1004);
pub const DISPID_IHTMLTEXTCONTAINER_SCROLLLEFT = @as(u32, 1005);
pub const DISPID_IHTMLTEXTCONTAINER_ONSCROLL = @as(u32, 71567);
pub const DISPID_HTMLTEXTCONTAINEREVENTS2_ONCHANGE = @as(u32, 1001);
pub const DISPID_HTMLTEXTCONTAINEREVENTS2_ONSELECT = @as(u32, 1006);
pub const DISPID_HTMLTEXTCONTAINEREVENTS_ONCHANGE = @as(u32, 1001);
pub const DISPID_HTMLTEXTCONTAINEREVENTS_ONSELECT = @as(u32, 1006);
pub const DISPID_IHTMLCONTROLRANGE_SELECT = @as(u32, 1002);
pub const DISPID_IHTMLCONTROLRANGE_ADD = @as(u32, 1003);
pub const DISPID_IHTMLCONTROLRANGE_REMOVE = @as(u32, 1004);
pub const DISPID_IHTMLCONTROLRANGE_ITEM = @as(u32, 0);
pub const DISPID_IHTMLCONTROLRANGE_SCROLLINTOVIEW = @as(u32, 1006);
pub const DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSUPPORTED = @as(u32, 1007);
pub const DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDENABLED = @as(u32, 1008);
pub const DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSTATE = @as(u32, 1009);
pub const DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDINDETERM = @as(u32, 1010);
pub const DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDTEXT = @as(u32, 1011);
pub const DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDVALUE = @as(u32, 1012);
pub const DISPID_IHTMLCONTROLRANGE_EXECCOMMAND = @as(u32, 1013);
pub const DISPID_IHTMLCONTROLRANGE_EXECCOMMANDSHOWHELP = @as(u32, 1014);
pub const DISPID_IHTMLCONTROLRANGE_COMMONPARENTELEMENT = @as(u32, 1015);
pub const DISPID_IHTMLCONTROLRANGE_LENGTH = @as(u32, 1005);
pub const DISPID_IHTMLCONTROLRANGE2_ADDELEMENT = @as(u32, 1016);
pub const DISPID_IHTMLIMGELEMENT_ISMAP = @as(u32, 2002);
pub const DISPID_IHTMLIMGELEMENT_USEMAP = @as(u32, 2008);
pub const DISPID_IHTMLIMGELEMENT_MIMETYPE = @as(u32, 2010);
pub const DISPID_IHTMLIMGELEMENT_FILESIZE = @as(u32, 2011);
pub const DISPID_IHTMLIMGELEMENT_FILECREATEDDATE = @as(u32, 2012);
pub const DISPID_IHTMLIMGELEMENT_FILEMODIFIEDDATE = @as(u32, 2013);
pub const DISPID_IHTMLIMGELEMENT_FILEUPDATEDDATE = @as(u32, 2014);
pub const DISPID_IHTMLIMGELEMENT_PROTOCOL = @as(u32, 2015);
pub const DISPID_IHTMLIMGELEMENT_HREF = @as(u32, 2016);
pub const DISPID_IHTMLIMGELEMENT_NAMEPROP = @as(u32, 2017);
pub const DISPID_IHTMLIMGELEMENT_BORDER = @as(u32, 1004);
pub const DISPID_IHTMLIMGELEMENT_VSPACE = @as(u32, 1005);
pub const DISPID_IHTMLIMGELEMENT_HSPACE = @as(u32, 1006);
pub const DISPID_IHTMLIMGELEMENT_ALT = @as(u32, 1002);
pub const DISPID_IHTMLIMGELEMENT_SRC = @as(u32, 1003);
pub const DISPID_IHTMLIMGELEMENT_LOWSRC = @as(u32, 1007);
pub const DISPID_IHTMLIMGELEMENT_VRML = @as(u32, 1008);
pub const DISPID_IHTMLIMGELEMENT_DYNSRC = @as(u32, 1009);
pub const DISPID_IHTMLIMGELEMENT_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLIMGELEMENT_COMPLETE = @as(u32, 1010);
pub const DISPID_IHTMLIMGELEMENT_LOOP = @as(u32, 1011);
pub const DISPID_IHTMLIMGELEMENT_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLIMGELEMENT_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLIMGELEMENT_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLIMGELEMENT_ONABORT = @as(u32, 71564);
pub const DISPID_IHTMLIMGELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLIMGELEMENT_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLIMGELEMENT_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLIMGELEMENT_START = @as(u32, 1013);
pub const DISPID_IHTMLIMGELEMENT2_LONGDESC = @as(u32, 2019);
pub const DISPID_IHTMLIMGELEMENT3_IE8_LONGDESC = @as(u32, 1151);
pub const DISPID_IHTMLIMGELEMENT3_IE8_VRML = @as(u32, 1152);
pub const DISPID_IHTMLIMGELEMENT3_IE8_LOWSRC = @as(u32, 1153);
pub const DISPID_IHTMLIMGELEMENT3_IE8_DYNSRC = @as(u32, 1154);
pub const DISPID_IHTMLIMGELEMENT4_NATURALWIDTH = @as(u32, 1155);
pub const DISPID_IHTMLIMGELEMENT4_NATURALHEIGHT = @as(u32, 1156);
pub const DISPID_IHTMLMSIMGELEMENT_MSPLAYTODISABLED = @as(u32, 1157);
pub const DISPID_IHTMLMSIMGELEMENT_MSPLAYTOPRIMARY = @as(u32, 1158);
pub const DISPID_IHTMLIMAGEELEMENTFACTORY_CREATE = @as(u32, 0);
pub const DISPID_HTMLIMGEVENTS2_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLIMGEVENTS2_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLIMGEVENTS2_ONABORT = @as(u32, 1000);
pub const DISPID_HTMLIMGEVENTS_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLIMGEVENTS_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLIMGEVENTS_ONABORT = @as(u32, 1000);
pub const DISPID_IHTMLBODYELEMENT_BACKGROUND = @as(u32, 70537);
pub const DISPID_IHTMLBODYELEMENT_BGPROPERTIES = @as(u32, 70581);
pub const DISPID_IHTMLBODYELEMENT_LEFTMARGIN = @as(u32, 70576);
pub const DISPID_IHTMLBODYELEMENT_TOPMARGIN = @as(u32, 70573);
pub const DISPID_IHTMLBODYELEMENT_RIGHTMARGIN = @as(u32, 70574);
pub const DISPID_IHTMLBODYELEMENT_BOTTOMMARGIN = @as(u32, 70575);
pub const DISPID_IHTMLBODYELEMENT_NOWRAP = @as(u32, 70541);
pub const DISPID_IHTMLBODYELEMENT_BGCOLOR = @as(i32, -501);
pub const DISPID_IHTMLBODYELEMENT_TEXT = @as(u32, 70538);
pub const DISPID_IHTMLBODYELEMENT_LINK = @as(u32, 2010);
pub const DISPID_IHTMLBODYELEMENT_VLINK = @as(u32, 2012);
pub const DISPID_IHTMLBODYELEMENT_ALINK = @as(u32, 2011);
pub const DISPID_IHTMLBODYELEMENT_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLBODYELEMENT_ONUNLOAD = @as(u32, 71569);
pub const DISPID_IHTMLBODYELEMENT_SCROLL = @as(u32, 70615);
pub const DISPID_IHTMLBODYELEMENT_ONSELECT = @as(u32, 71546);
pub const DISPID_IHTMLBODYELEMENT_ONBEFOREUNLOAD = @as(u32, 71575);
pub const DISPID_IHTMLBODYELEMENT_CREATETEXTRANGE = @as(u32, 2013);
pub const DISPID_IHTMLBODYELEMENT2_ONBEFOREPRINT = @as(u32, 71602);
pub const DISPID_IHTMLBODYELEMENT2_ONAFTERPRINT = @as(u32, 71603);
pub const DISPID_IHTMLBODYELEMENT3_IE8_BACKGROUND = @as(u32, 1150);
pub const DISPID_IHTMLBODYELEMENT3_ONONLINE = @as(u32, 71643);
pub const DISPID_IHTMLBODYELEMENT3_ONOFFLINE = @as(u32, 71644);
pub const DISPID_IHTMLBODYELEMENT3_ONHASHCHANGE = @as(u32, 71645);
pub const DISPID_IHTMLBODYELEMENT4_ONMESSAGE = @as(u32, 71646);
pub const DISPID_IHTMLBODYELEMENT4_ONSTORAGE = @as(u32, 71636);
pub const DISPID_IHTMLBODYELEMENT5_ONPOPSTATE = @as(u32, 71728);
pub const DISPID_IHTMLFONTELEMENT_COLOR = @as(u32, 70538);
pub const DISPID_IHTMLFONTELEMENT_FACE = @as(u32, 70554);
pub const DISPID_IHTMLFONTELEMENT_SIZE = @as(u32, 70555);
pub const DISPID_IHTMLANCHORELEMENT_HREF = @as(u32, 0);
pub const DISPID_IHTMLANCHORELEMENT_TARGET = @as(u32, 1003);
pub const DISPID_IHTMLANCHORELEMENT_REL = @as(u32, 1005);
pub const DISPID_IHTMLANCHORELEMENT_REV = @as(u32, 1006);
pub const DISPID_IHTMLANCHORELEMENT_URN = @as(u32, 1007);
pub const DISPID_IHTMLANCHORELEMENT_METHODS = @as(u32, 1008);
pub const DISPID_IHTMLANCHORELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLANCHORELEMENT_HOST = @as(u32, 1012);
pub const DISPID_IHTMLANCHORELEMENT_HOSTNAME = @as(u32, 1013);
pub const DISPID_IHTMLANCHORELEMENT_PATHNAME = @as(u32, 1014);
pub const DISPID_IHTMLANCHORELEMENT_PORT = @as(u32, 1015);
pub const DISPID_IHTMLANCHORELEMENT_PROTOCOL = @as(u32, 1016);
pub const DISPID_IHTMLANCHORELEMENT_SEARCH = @as(u32, 1017);
pub const DISPID_IHTMLANCHORELEMENT_HASH = @as(u32, 1018);
pub const DISPID_IHTMLANCHORELEMENT_ONBLUR = @as(u32, 71551);
pub const DISPID_IHTMLANCHORELEMENT_ONFOCUS = @as(u32, 71550);
pub const DISPID_IHTMLANCHORELEMENT_ACCESSKEY = @as(u32, 67541);
pub const DISPID_IHTMLANCHORELEMENT_PROTOCOLLONG = @as(u32, 1031);
pub const DISPID_IHTMLANCHORELEMENT_MIMETYPE = @as(u32, 1030);
pub const DISPID_IHTMLANCHORELEMENT_NAMEPROP = @as(u32, 1032);
pub const DISPID_IHTMLANCHORELEMENT_TABINDEX = @as(u32, 65551);
pub const DISPID_IHTMLANCHORELEMENT_FOCUS = @as(u32, 67536);
pub const DISPID_IHTMLANCHORELEMENT_BLUR = @as(u32, 67538);
pub const DISPID_IHTMLANCHORELEMENT2_CHARSET = @as(u32, 1023);
pub const DISPID_IHTMLANCHORELEMENT2_COORDS = @as(u32, 1024);
pub const DISPID_IHTMLANCHORELEMENT2_HREFLANG = @as(u32, 1025);
pub const DISPID_IHTMLANCHORELEMENT2_SHAPE = @as(u32, 1026);
pub const DISPID_IHTMLANCHORELEMENT2_TYPE = @as(u32, 1027);
pub const DISPID_IHTMLANCHORELEMENT3_IE8_SHAPE = @as(u32, 1151);
pub const DISPID_IHTMLANCHORELEMENT3_IE8_COORDS = @as(u32, 1152);
pub const DISPID_IHTMLANCHORELEMENT3_IE8_HREF = @as(u32, 1153);
pub const DISPID_IHTMLLABELELEMENT_HTMLFOR = @as(u32, 1000);
pub const DISPID_IHTMLLABELELEMENT_ACCESSKEY = @as(u32, 67541);
pub const DISPID_IHTMLLABELELEMENT2_FORM = @as(u32, 1002);
pub const DISPID_IHTMLLISTELEMENT2_COMPACT = @as(u32, 1001);
pub const DISPID_IHTMLULISTELEMENT_COMPACT = @as(u32, 1001);
pub const DISPID_IHTMLULISTELEMENT_TYPE = @as(u32, 70553);
pub const DISPID_IHTMLOLISTELEMENT_COMPACT = @as(u32, 1001);
pub const DISPID_IHTMLOLISTELEMENT_START = @as(u32, 1003);
pub const DISPID_IHTMLOLISTELEMENT_TYPE = @as(u32, 70553);
pub const DISPID_IHTMLLIELEMENT_TYPE = @as(u32, 70553);
pub const DISPID_IHTMLLIELEMENT_VALUE = @as(u32, 1001);
pub const DISPID_IHTMLBLOCKELEMENT_CLEAR = @as(u32, 70552);
pub const DISPID_IHTMLBLOCKELEMENT2_CITE = @as(u32, 1001);
pub const DISPID_IHTMLBLOCKELEMENT2_WIDTH = @as(u32, 1002);
pub const DISPID_IHTMLBLOCKELEMENT3_IE8_CITE = @as(u32, 1150);
pub const DISPID_IHTMLDIVELEMENT_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLDIVELEMENT_NOWRAP = @as(u32, 70541);
pub const DISPID_IHTMLDDELEMENT_NOWRAP = @as(u32, 70541);
pub const DISPID_IHTMLDTELEMENT_NOWRAP = @as(u32, 70541);
pub const DISPID_IHTMLBRELEMENT_CLEAR = @as(u32, 70552);
pub const DISPID_IHTMLDLISTELEMENT_COMPACT = @as(u32, 1001);
pub const DISPID_IHTMLHRELEMENT_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLHRELEMENT_COLOR = @as(u32, 70538);
pub const DISPID_IHTMLHRELEMENT_NOSHADE = @as(u32, 1001);
pub const DISPID_IHTMLHRELEMENT_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLHRELEMENT_SIZE = @as(u32, 65542);
pub const DISPID_IHTMLPARAELEMENT_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLELEMENTCOLLECTION_TOSTRING = @as(u32, 1501);
pub const DISPID_IHTMLELEMENTCOLLECTION_LENGTH = @as(u32, 1500);
pub const DISPID_IHTMLELEMENTCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLELEMENTCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLELEMENTCOLLECTION_TAGS = @as(u32, 1502);
pub const DISPID_IHTMLELEMENTCOLLECTION2_URNS = @as(u32, 1505);
pub const DISPID_IHTMLELEMENTCOLLECTION3_NAMEDITEM = @as(u32, 1506);
pub const DISPID_IHTMLELEMENTCOLLECTION4_IE8_LENGTH = @as(u32, 1150);
pub const DISPID_IHTMLELEMENTCOLLECTION4_IE8_ITEM = @as(u32, 1152);
pub const DISPID_IHTMLELEMENTCOLLECTION4_IE8_NAMEDITEM = @as(u32, 1153);
pub const DISPID_IHTMLHEADERELEMENT_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLSELECTELEMENT_SIZE = @as(u32, 1002);
pub const DISPID_IHTMLSELECTELEMENT_MULTIPLE = @as(u32, 1003);
pub const DISPID_IHTMLSELECTELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLSELECTELEMENT_OPTIONS = @as(u32, 1005);
pub const DISPID_IHTMLSELECTELEMENT_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLSELECTELEMENT_SELECTEDINDEX = @as(u32, 1010);
pub const DISPID_IHTMLSELECTELEMENT_TYPE = @as(u32, 1012);
pub const DISPID_IHTMLSELECTELEMENT_VALUE = @as(u32, 1011);
pub const DISPID_IHTMLSELECTELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLSELECTELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLSELECTELEMENT_ADD = @as(u32, 1503);
pub const DISPID_IHTMLSELECTELEMENT_REMOVE = @as(u32, 1504);
pub const DISPID_IHTMLSELECTELEMENT_LENGTH = @as(u32, 1500);
pub const DISPID_IHTMLSELECTELEMENT__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLSELECTELEMENT_ITEM = @as(u32, 0);
pub const DISPID_IHTMLSELECTELEMENT_TAGS = @as(u32, 1502);
pub const DISPID_IHTMLSELECTELEMENT2_URNS = @as(u32, 1505);
pub const DISPID_IHTMLSELECTELEMENT4_NAMEDITEM = @as(u32, 1506);
pub const DISPID_IHTMLSELECTELEMENT5_IE8_ADD = @as(u32, 1150);
pub const DISPID_IHTMLSELECTELEMENT6_IE9_ADD = @as(u32, 1151);
pub const DISPID_IHTMLSELECTELEMENT6_IE9_VALUE = @as(u32, 1152);
pub const DISPID_HTMLSELECTELEMENTEVENTS2_ONCHANGE = @as(u32, 1001);
pub const DISPID_HTMLSELECTELEMENTEVENTS_ONCHANGE = @as(u32, 1001);
pub const DISPID_IHTMLSELECTIONOBJECT_CREATERANGE = @as(u32, 1001);
pub const DISPID_IHTMLSELECTIONOBJECT_EMPTY = @as(u32, 1002);
pub const DISPID_IHTMLSELECTIONOBJECT_CLEAR = @as(u32, 1003);
pub const DISPID_IHTMLSELECTIONOBJECT_TYPE = @as(u32, 1004);
pub const DISPID_IHTMLSELECTIONOBJECT2_CREATERANGECOLLECTION = @as(u32, 1005);
pub const DISPID_IHTMLSELECTIONOBJECT2_TYPEDETAIL = @as(u32, 1006);
pub const DISPID_IHTMLSELECTION_ANCHORNODE = @as(u32, 1001);
pub const DISPID_IHTMLSELECTION_ANCHOROFFSET = @as(u32, 1002);
pub const DISPID_IHTMLSELECTION_FOCUSNODE = @as(u32, 1003);
pub const DISPID_IHTMLSELECTION_FOCUSOFFSET = @as(u32, 1004);
pub const DISPID_IHTMLSELECTION_ISCOLLAPSED = @as(u32, 1005);
pub const DISPID_IHTMLSELECTION_COLLAPSE = @as(u32, 1006);
pub const DISPID_IHTMLSELECTION_COLLAPSETOSTART = @as(u32, 1007);
pub const DISPID_IHTMLSELECTION_COLLAPSETOEND = @as(u32, 1008);
pub const DISPID_IHTMLSELECTION_SELECTALLCHILDREN = @as(u32, 1009);
pub const DISPID_IHTMLSELECTION_DELETEFROMDOCUMENT = @as(u32, 1010);
pub const DISPID_IHTMLSELECTION_RANGECOUNT = @as(u32, 1011);
pub const DISPID_IHTMLSELECTION_GETRANGEAT = @as(u32, 1012);
pub const DISPID_IHTMLSELECTION_ADDRANGE = @as(u32, 1013);
pub const DISPID_IHTMLSELECTION_REMOVERANGE = @as(u32, 1014);
pub const DISPID_IHTMLSELECTION_REMOVEALLRANGES = @as(u32, 1015);
pub const DISPID_IHTMLSELECTION_TOSTRING = @as(u32, 1016);
pub const DISPID_IHTMLOPTIONELEMENT_SELECTED = @as(u32, 1001);
pub const DISPID_IHTMLOPTIONELEMENT_VALUE = @as(u32, 1002);
pub const DISPID_IHTMLOPTIONELEMENT_DEFAULTSELECTED = @as(u32, 1003);
pub const DISPID_IHTMLOPTIONELEMENT_INDEX = @as(u32, 1005);
pub const DISPID_IHTMLOPTIONELEMENT_TEXT = @as(u32, 1004);
pub const DISPID_IHTMLOPTIONELEMENT_FORM = @as(u32, 1006);
pub const DISPID_IHTMLOPTIONELEMENT3_LABEL = @as(u32, 1007);
pub const DISPID_IHTMLOPTIONELEMENT4_IE9_VALUE = @as(u32, 1008);
pub const DISPID_IHTMLOPTIONELEMENTFACTORY_CREATE = @as(u32, 0);
pub const DISPID_IHTMLINPUTELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLINPUTELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLINPUTELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLINPUTELEMENT_STATUS = @as(u32, 2001);
pub const DISPID_IHTMLINPUTELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLINPUTELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLINPUTELEMENT_SIZE = @as(u32, 2002);
pub const DISPID_IHTMLINPUTELEMENT_MAXLENGTH = @as(u32, 2003);
pub const DISPID_IHTMLINPUTELEMENT_SELECT = @as(u32, 2004);
pub const DISPID_IHTMLINPUTELEMENT_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLINPUTELEMENT_ONSELECT = @as(u32, 71546);
pub const DISPID_IHTMLINPUTELEMENT_DEFAULTVALUE = @as(u32, 70619);
pub const DISPID_IHTMLINPUTELEMENT_READONLY = @as(u32, 2005);
pub const DISPID_IHTMLINPUTELEMENT_CREATETEXTRANGE = @as(u32, 2006);
pub const DISPID_IHTMLINPUTELEMENT_INDETERMINATE = @as(u32, 2007);
pub const DISPID_IHTMLINPUTELEMENT_DEFAULTCHECKED = @as(u32, 2008);
pub const DISPID_IHTMLINPUTELEMENT_CHECKED = @as(u32, 2009);
pub const DISPID_IHTMLINPUTELEMENT_BORDER = @as(u32, 2012);
pub const DISPID_IHTMLINPUTELEMENT_VSPACE = @as(u32, 2013);
pub const DISPID_IHTMLINPUTELEMENT_HSPACE = @as(u32, 2014);
pub const DISPID_IHTMLINPUTELEMENT_ALT = @as(u32, 2010);
pub const DISPID_IHTMLINPUTELEMENT_SRC = @as(u32, 2011);
pub const DISPID_IHTMLINPUTELEMENT_LOWSRC = @as(u32, 2015);
pub const DISPID_IHTMLINPUTELEMENT_VRML = @as(u32, 2016);
pub const DISPID_IHTMLINPUTELEMENT_DYNSRC = @as(u32, 2017);
pub const DISPID_IHTMLINPUTELEMENT_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLINPUTELEMENT_COMPLETE = @as(u32, 2018);
pub const DISPID_IHTMLINPUTELEMENT_LOOP = @as(u32, 2019);
pub const DISPID_IHTMLINPUTELEMENT_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLINPUTELEMENT_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLINPUTELEMENT_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLINPUTELEMENT_ONABORT = @as(u32, 71564);
pub const DISPID_IHTMLINPUTELEMENT_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLINPUTELEMENT_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLINPUTELEMENT_START = @as(u32, 2020);
pub const DISPID_IHTMLINPUTELEMENT2_ACCEPT = @as(u32, 2022);
pub const DISPID_IHTMLINPUTELEMENT2_USEMAP = @as(u32, 2023);
pub const DISPID_IHTMLINPUTELEMENT3_IE8_SRC = @as(u32, 1150);
pub const DISPID_IHTMLINPUTELEMENT3_IE8_LOWSRC = @as(u32, 1151);
pub const DISPID_IHTMLINPUTELEMENT3_IE8_VRML = @as(u32, 1152);
pub const DISPID_IHTMLINPUTELEMENT3_IE8_DYNSRC = @as(u32, 1153);
pub const DISPID_IHTMLINPUTBUTTONELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLINPUTBUTTONELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLINPUTBUTTONELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLINPUTBUTTONELEMENT_STATUS = @as(u32, 2021);
pub const DISPID_IHTMLINPUTBUTTONELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLINPUTBUTTONELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLINPUTBUTTONELEMENT_CREATETEXTRANGE = @as(u32, 2006);
pub const DISPID_IHTMLINPUTHIDDENELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLINPUTHIDDENELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLINPUTHIDDENELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLINPUTHIDDENELEMENT_STATUS = @as(u32, 2021);
pub const DISPID_IHTMLINPUTHIDDENELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLINPUTHIDDENELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLINPUTHIDDENELEMENT_CREATETEXTRANGE = @as(u32, 2006);
pub const DISPID_IHTMLINPUTTEXTELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLINPUTTEXTELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLINPUTTEXTELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLINPUTTEXTELEMENT_STATUS = @as(u32, 2021);
pub const DISPID_IHTMLINPUTTEXTELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLINPUTTEXTELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLINPUTTEXTELEMENT_DEFAULTVALUE = @as(u32, 70619);
pub const DISPID_IHTMLINPUTTEXTELEMENT_SIZE = @as(u32, 2002);
pub const DISPID_IHTMLINPUTTEXTELEMENT_MAXLENGTH = @as(u32, 2003);
pub const DISPID_IHTMLINPUTTEXTELEMENT_SELECT = @as(u32, 2004);
pub const DISPID_IHTMLINPUTTEXTELEMENT_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLINPUTTEXTELEMENT_ONSELECT = @as(u32, 71546);
pub const DISPID_IHTMLINPUTTEXTELEMENT_READONLY = @as(u32, 2005);
pub const DISPID_IHTMLINPUTTEXTELEMENT_CREATETEXTRANGE = @as(u32, 2006);
pub const DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONSTART = @as(u32, 2025);
pub const DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONEND = @as(u32, 2026);
pub const DISPID_IHTMLINPUTTEXTELEMENT2_SETSELECTIONRANGE = @as(u32, 2027);
pub const DISPID_IHTMLINPUTFILEELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLINPUTFILEELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLINPUTFILEELEMENT_STATUS = @as(u32, 2021);
pub const DISPID_IHTMLINPUTFILEELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLINPUTFILEELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLINPUTFILEELEMENT_SIZE = @as(u32, 2002);
pub const DISPID_IHTMLINPUTFILEELEMENT_MAXLENGTH = @as(u32, 2003);
pub const DISPID_IHTMLINPUTFILEELEMENT_SELECT = @as(u32, 2004);
pub const DISPID_IHTMLINPUTFILEELEMENT_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLINPUTFILEELEMENT_ONSELECT = @as(u32, 71546);
pub const DISPID_IHTMLINPUTFILEELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_CHECKED = @as(u32, 2009);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_DEFAULTCHECKED = @as(u32, 2008);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_STATUS = @as(u32, 2001);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_INDETERMINATE = @as(u32, 2007);
pub const DISPID_IHTMLOPTIONBUTTONELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLINPUTIMAGE_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLINPUTIMAGE_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLINPUTIMAGE_BORDER = @as(u32, 2012);
pub const DISPID_IHTMLINPUTIMAGE_VSPACE = @as(u32, 2013);
pub const DISPID_IHTMLINPUTIMAGE_HSPACE = @as(u32, 2014);
pub const DISPID_IHTMLINPUTIMAGE_ALT = @as(u32, 2010);
pub const DISPID_IHTMLINPUTIMAGE_SRC = @as(u32, 2011);
pub const DISPID_IHTMLINPUTIMAGE_LOWSRC = @as(u32, 2015);
pub const DISPID_IHTMLINPUTIMAGE_VRML = @as(u32, 2016);
pub const DISPID_IHTMLINPUTIMAGE_DYNSRC = @as(u32, 2017);
pub const DISPID_IHTMLINPUTIMAGE_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLINPUTIMAGE_COMPLETE = @as(u32, 2018);
pub const DISPID_IHTMLINPUTIMAGE_LOOP = @as(u32, 2019);
pub const DISPID_IHTMLINPUTIMAGE_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLINPUTIMAGE_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLINPUTIMAGE_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLINPUTIMAGE_ONABORT = @as(u32, 71564);
pub const DISPID_IHTMLINPUTIMAGE_NAME = @as(u32, 65536);
pub const DISPID_IHTMLINPUTIMAGE_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLINPUTIMAGE_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLINPUTIMAGE_START = @as(u32, 2020);
pub const DISPID_IHTMLINPUTRANGEELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLINPUTRANGEELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLINPUTRANGEELEMENT_ALT = @as(u32, 2010);
pub const DISPID_IHTMLINPUTRANGEELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLINPUTRANGEELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLINPUTRANGEELEMENT_MIN = @as(u32, 2028);
pub const DISPID_IHTMLINPUTRANGEELEMENT_MAX = @as(u32, 2029);
pub const DISPID_IHTMLINPUTRANGEELEMENT_STEP = @as(u32, 2030);
pub const DISPID_IHTMLINPUTRANGEELEMENT_VALUEASNUMBER = @as(u32, 2031);
pub const DISPID_IHTMLINPUTRANGEELEMENT_STEPUP = @as(u32, 2033);
pub const DISPID_IHTMLINPUTRANGEELEMENT_STEPDOWN = @as(u32, 2032);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONCHANGE = @as(u32, 1001);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONSELECT = @as(u32, 1006);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONABORT = @as(u32, 1000);
pub const DISPID_HTMLINPUTIMAGEEVENTS2_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLINPUTIMAGEEVENTS2_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLINPUTIMAGEEVENTS2_ONABORT = @as(u32, 1000);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONCHANGE = @as(u32, 1001);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONSELECT = @as(u32, 1006);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONABORT = @as(u32, 1000);
pub const DISPID_HTMLINPUTIMAGEEVENTS_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLINPUTIMAGEEVENTS_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLINPUTIMAGEEVENTS_ONABORT = @as(u32, 1000);
pub const DISPID_IHTMLTEXTAREAELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLTEXTAREAELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLTEXTAREAELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLTEXTAREAELEMENT_STATUS = @as(u32, 2001);
pub const DISPID_IHTMLTEXTAREAELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLTEXTAREAELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLTEXTAREAELEMENT_DEFAULTVALUE = @as(u32, 70619);
pub const DISPID_IHTMLTEXTAREAELEMENT_SELECT = @as(u32, 7005);
pub const DISPID_IHTMLTEXTAREAELEMENT_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLTEXTAREAELEMENT_ONSELECT = @as(u32, 71546);
pub const DISPID_IHTMLTEXTAREAELEMENT_READONLY = @as(u32, 7004);
pub const DISPID_IHTMLTEXTAREAELEMENT_ROWS = @as(u32, 7001);
pub const DISPID_IHTMLTEXTAREAELEMENT_COLS = @as(u32, 7002);
pub const DISPID_IHTMLTEXTAREAELEMENT_WRAP = @as(u32, 7003);
pub const DISPID_IHTMLTEXTAREAELEMENT_CREATETEXTRANGE = @as(u32, 7006);
pub const DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONSTART = @as(u32, 7007);
pub const DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONEND = @as(u32, 7008);
pub const DISPID_IHTMLTEXTAREAELEMENT2_SETSELECTIONRANGE = @as(u32, 7009);
pub const DISPID_IHTMLBUTTONELEMENT_TYPE = @as(u32, 2000);
pub const DISPID_IHTMLBUTTONELEMENT_VALUE = @as(u32, 70637);
pub const DISPID_IHTMLBUTTONELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLBUTTONELEMENT_STATUS = @as(u32, 8001);
pub const DISPID_IHTMLBUTTONELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLBUTTONELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLBUTTONELEMENT_CREATETEXTRANGE = @as(u32, 8002);
pub const DISPID_IHTMLBUTTONELEMENT2_IE9_TYPE = @as(u32, 8003);
pub const DISPID_IHTMLMARQUEEELEMENT_BGCOLOR = @as(i32, -501);
pub const DISPID_IHTMLMARQUEEELEMENT_SCROLLDELAY = @as(u32, 6000);
pub const DISPID_IHTMLMARQUEEELEMENT_DIRECTION = @as(u32, 6001);
pub const DISPID_IHTMLMARQUEEELEMENT_BEHAVIOR = @as(u32, 6002);
pub const DISPID_IHTMLMARQUEEELEMENT_SCROLLAMOUNT = @as(u32, 6003);
pub const DISPID_IHTMLMARQUEEELEMENT_LOOP = @as(u32, 6004);
pub const DISPID_IHTMLMARQUEEELEMENT_VSPACE = @as(u32, 6005);
pub const DISPID_IHTMLMARQUEEELEMENT_HSPACE = @as(u32, 6006);
pub const DISPID_IHTMLMARQUEEELEMENT_ONFINISH = @as(u32, 71562);
pub const DISPID_IHTMLMARQUEEELEMENT_ONSTART = @as(u32, 71563);
pub const DISPID_IHTMLMARQUEEELEMENT_ONBOUNCE = @as(u32, 71556);
pub const DISPID_IHTMLMARQUEEELEMENT_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLMARQUEEELEMENT_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLMARQUEEELEMENT_TRUESPEED = @as(u32, 6007);
pub const DISPID_IHTMLMARQUEEELEMENT_START = @as(u32, 6010);
pub const DISPID_IHTMLMARQUEEELEMENT_STOP = @as(u32, 6011);
pub const DISPID_HTMLMARQUEEELEMENTEVENTS2_ONBOUNCE = @as(u32, 1009);
pub const DISPID_HTMLMARQUEEELEMENTEVENTS2_ONFINISH = @as(u32, 1010);
pub const DISPID_HTMLMARQUEEELEMENTEVENTS2_ONSTART = @as(u32, 1011);
pub const DISPID_HTMLMARQUEEELEMENTEVENTS_ONBOUNCE = @as(u32, 1009);
pub const DISPID_HTMLMARQUEEELEMENTEVENTS_ONFINISH = @as(u32, 1010);
pub const DISPID_HTMLMARQUEEELEMENTEVENTS_ONSTART = @as(u32, 1011);
pub const DISPID_IHTMLHTMLELEMENT_VERSION = @as(u32, 1001);
pub const DISPID_IHTMLHEADELEMENT_PROFILE = @as(u32, 1001);
pub const DISPID_IHTMLHEADELEMENT2_IE8_PROFILE = @as(u32, 1150);
pub const DISPID_IHTMLTITLEELEMENT_TEXT = @as(u32, 70637);
pub const DISPID_IHTMLMETAELEMENT_HTTPEQUIV = @as(u32, 1001);
pub const DISPID_IHTMLMETAELEMENT_CONTENT = @as(u32, 1002);
pub const DISPID_IHTMLMETAELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLMETAELEMENT_URL = @as(u32, 1003);
pub const DISPID_IHTMLMETAELEMENT_CHARSET = @as(u32, 1013);
pub const DISPID_IHTMLMETAELEMENT2_SCHEME = @as(u32, 1020);
pub const DISPID_IHTMLMETAELEMENT3_IE8_URL = @as(u32, 1150);
pub const DISPID_IHTMLBASEELEMENT_HREF = @as(u32, 1003);
pub const DISPID_IHTMLBASEELEMENT_TARGET = @as(u32, 1004);
pub const DISPID_IHTMLBASEELEMENT2_IE8_HREF = @as(u32, 1150);
pub const DISPID_IHTMLISINDEXELEMENT_PROMPT = @as(u32, 1010);
pub const DISPID_IHTMLISINDEXELEMENT_ACTION = @as(u32, 1011);
pub const DISPID_IHTMLISINDEXELEMENT2_FORM = @as(u32, 1012);
pub const DISPID_IHTMLNEXTIDELEMENT_N = @as(u32, 1012);
pub const DISPID_IHTMLBASEFONTELEMENT_COLOR = @as(u32, 70538);
pub const DISPID_IHTMLBASEFONTELEMENT_FACE = @as(u32, 70554);
pub const DISPID_IHTMLBASEFONTELEMENT_SIZE = @as(u32, 70562);
pub const DISPID_IOMHISTORY_LENGTH = @as(u32, 1);
pub const DISPID_IOMHISTORY_BACK = @as(u32, 2);
pub const DISPID_IOMHISTORY_FORWARD = @as(u32, 3);
pub const DISPID_IOMHISTORY_GO = @as(u32, 4);
pub const DISPID_IHTMLOPSPROFILE_ADDREQUEST = @as(u32, 1);
pub const DISPID_IHTMLOPSPROFILE_CLEARREQUEST = @as(u32, 2);
pub const DISPID_IHTMLOPSPROFILE_DOREQUEST = @as(u32, 3);
pub const DISPID_IHTMLOPSPROFILE_GETATTRIBUTE = @as(u32, 4);
pub const DISPID_IHTMLOPSPROFILE_SETATTRIBUTE = @as(u32, 5);
pub const DISPID_IHTMLOPSPROFILE_COMMITCHANGES = @as(u32, 6);
pub const DISPID_IHTMLOPSPROFILE_ADDREADREQUEST = @as(u32, 7);
pub const DISPID_IHTMLOPSPROFILE_DOREADREQUEST = @as(u32, 8);
pub const DISPID_IHTMLOPSPROFILE_DOWRITEREQUEST = @as(u32, 9);
pub const DISPID_IOMNAVIGATOR_APPCODENAME = @as(u32, 1);
pub const DISPID_IOMNAVIGATOR_APPNAME = @as(u32, 2);
pub const DISPID_IOMNAVIGATOR_APPVERSION = @as(u32, 3);
pub const DISPID_IOMNAVIGATOR_USERAGENT = @as(u32, 4);
pub const DISPID_IOMNAVIGATOR_JAVAENABLED = @as(u32, 5);
pub const DISPID_IOMNAVIGATOR_TAINTENABLED = @as(u32, 6);
pub const DISPID_IOMNAVIGATOR_MIMETYPES = @as(u32, 7);
pub const DISPID_IOMNAVIGATOR_PLUGINS = @as(u32, 8);
pub const DISPID_IOMNAVIGATOR_COOKIEENABLED = @as(u32, 9);
pub const DISPID_IOMNAVIGATOR_OPSPROFILE = @as(u32, 10);
pub const DISPID_IOMNAVIGATOR_TOSTRING = @as(u32, 11);
pub const DISPID_IOMNAVIGATOR_CPUCLASS = @as(u32, 12);
pub const DISPID_IOMNAVIGATOR_SYSTEMLANGUAGE = @as(u32, 13);
pub const DISPID_IOMNAVIGATOR_BROWSERLANGUAGE = @as(u32, 14);
pub const DISPID_IOMNAVIGATOR_USERLANGUAGE = @as(u32, 15);
pub const DISPID_IOMNAVIGATOR_PLATFORM = @as(u32, 16);
pub const DISPID_IOMNAVIGATOR_APPMINORVERSION = @as(u32, 17);
pub const DISPID_IOMNAVIGATOR_CONNECTIONSPEED = @as(u32, 18);
pub const DISPID_IOMNAVIGATOR_ONLINE = @as(u32, 19);
pub const DISPID_IOMNAVIGATOR_USERPROFILE = @as(u32, 20);
pub const DISPID_INAVIGATORGEOLOCATION_GEOLOCATION = @as(u32, 21);
pub const DISPID_INAVIGATORDONOTTRACK_MSDONOTTRACK = @as(u32, 22);
pub const DISPID_IHTMLLOCATION_HREF = @as(u32, 0);
pub const DISPID_IHTMLLOCATION_PROTOCOL = @as(u32, 1);
pub const DISPID_IHTMLLOCATION_HOST = @as(u32, 2);
pub const DISPID_IHTMLLOCATION_HOSTNAME = @as(u32, 3);
pub const DISPID_IHTMLLOCATION_PORT = @as(u32, 4);
pub const DISPID_IHTMLLOCATION_PATHNAME = @as(u32, 5);
pub const DISPID_IHTMLLOCATION_SEARCH = @as(u32, 6);
pub const DISPID_IHTMLLOCATION_HASH = @as(u32, 7);
pub const DISPID_IHTMLLOCATION_RELOAD = @as(u32, 8);
pub const DISPID_IHTMLLOCATION_REPLACE = @as(u32, 9);
pub const DISPID_IHTMLLOCATION_ASSIGN = @as(u32, 10);
pub const DISPID_IHTMLLOCATION_TOSTRING = @as(u32, 11);
pub const DISPID_IHTMLMIMETYPESCOLLECTION_LENGTH = @as(u32, 1);
pub const DISPID_IHTMLPLUGINSCOLLECTION_LENGTH = @as(u32, 1);
pub const DISPID_IHTMLPLUGINSCOLLECTION_REFRESH = @as(u32, 2);
pub const DISPID_IHTMLBOOKMARKCOLLECTION_LENGTH = @as(u32, 1501);
pub const DISPID_IHTMLBOOKMARKCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLBOOKMARKCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLDATATRANSFER_SETDATA = @as(u32, 1001);
pub const DISPID_IHTMLDATATRANSFER_GETDATA = @as(u32, 1002);
pub const DISPID_IHTMLDATATRANSFER_CLEARDATA = @as(u32, 1003);
pub const DISPID_IHTMLDATATRANSFER_DROPEFFECT = @as(u32, 1004);
pub const DISPID_IHTMLDATATRANSFER_EFFECTALLOWED = @as(u32, 1005);
pub const DISPID_IHTMLEVENTOBJ_SRCELEMENT = @as(u32, 1001);
pub const DISPID_IHTMLEVENTOBJ_ALTKEY = @as(u32, 1002);
pub const DISPID_IHTMLEVENTOBJ_CTRLKEY = @as(u32, 1003);
pub const DISPID_IHTMLEVENTOBJ_SHIFTKEY = @as(u32, 1004);
pub const DISPID_IHTMLEVENTOBJ_RETURNVALUE = @as(u32, 1007);
pub const DISPID_IHTMLEVENTOBJ_CANCELBUBBLE = @as(u32, 1008);
pub const DISPID_IHTMLEVENTOBJ_FROMELEMENT = @as(u32, 1009);
pub const DISPID_IHTMLEVENTOBJ_TOELEMENT = @as(u32, 1010);
pub const DISPID_IHTMLEVENTOBJ_KEYCODE = @as(u32, 1011);
pub const DISPID_IHTMLEVENTOBJ_BUTTON = @as(u32, 1012);
pub const DISPID_IHTMLEVENTOBJ_TYPE = @as(u32, 1013);
pub const DISPID_IHTMLEVENTOBJ_QUALIFIER = @as(u32, 1014);
pub const DISPID_IHTMLEVENTOBJ_REASON = @as(u32, 1015);
pub const DISPID_IHTMLEVENTOBJ_X = @as(u32, 1005);
pub const DISPID_IHTMLEVENTOBJ_Y = @as(u32, 1006);
pub const DISPID_IHTMLEVENTOBJ_CLIENTX = @as(u32, 1020);
pub const DISPID_IHTMLEVENTOBJ_CLIENTY = @as(u32, 1021);
pub const DISPID_IHTMLEVENTOBJ_OFFSETX = @as(u32, 1022);
pub const DISPID_IHTMLEVENTOBJ_OFFSETY = @as(u32, 1023);
pub const DISPID_IHTMLEVENTOBJ_SCREENX = @as(u32, 1024);
pub const DISPID_IHTMLEVENTOBJ_SCREENY = @as(u32, 1025);
pub const DISPID_IHTMLEVENTOBJ_SRCFILTER = @as(u32, 1026);
pub const DISPID_IHTMLEVENTOBJ2_SETATTRIBUTE = @as(u32, 66037);
pub const DISPID_IHTMLEVENTOBJ2_GETATTRIBUTE = @as(u32, 66038);
pub const DISPID_IHTMLEVENTOBJ2_REMOVEATTRIBUTE = @as(u32, 66039);
pub const DISPID_IHTMLEVENTOBJ2_PROPERTYNAME = @as(u32, 1027);
pub const DISPID_IHTMLEVENTOBJ2_BOOKMARKS = @as(u32, 1031);
pub const DISPID_IHTMLEVENTOBJ2_RECORDSET = @as(u32, 1032);
pub const DISPID_IHTMLEVENTOBJ2_DATAFLD = @as(u32, 1033);
pub const DISPID_IHTMLEVENTOBJ2_BOUNDELEMENTS = @as(u32, 1034);
pub const DISPID_IHTMLEVENTOBJ2_REPEAT = @as(u32, 1035);
pub const DISPID_IHTMLEVENTOBJ2_SRCURN = @as(u32, 1036);
pub const DISPID_IHTMLEVENTOBJ2_SRCELEMENT = @as(u32, 1001);
pub const DISPID_IHTMLEVENTOBJ2_ALTKEY = @as(u32, 1002);
pub const DISPID_IHTMLEVENTOBJ2_CTRLKEY = @as(u32, 1003);
pub const DISPID_IHTMLEVENTOBJ2_SHIFTKEY = @as(u32, 1004);
pub const DISPID_IHTMLEVENTOBJ2_FROMELEMENT = @as(u32, 1009);
pub const DISPID_IHTMLEVENTOBJ2_TOELEMENT = @as(u32, 1010);
pub const DISPID_IHTMLEVENTOBJ2_BUTTON = @as(u32, 1012);
pub const DISPID_IHTMLEVENTOBJ2_TYPE = @as(u32, 1013);
pub const DISPID_IHTMLEVENTOBJ2_QUALIFIER = @as(u32, 1014);
pub const DISPID_IHTMLEVENTOBJ2_REASON = @as(u32, 1015);
pub const DISPID_IHTMLEVENTOBJ2_X = @as(u32, 1005);
pub const DISPID_IHTMLEVENTOBJ2_Y = @as(u32, 1006);
pub const DISPID_IHTMLEVENTOBJ2_CLIENTX = @as(u32, 1020);
pub const DISPID_IHTMLEVENTOBJ2_CLIENTY = @as(u32, 1021);
pub const DISPID_IHTMLEVENTOBJ2_OFFSETX = @as(u32, 1022);
pub const DISPID_IHTMLEVENTOBJ2_OFFSETY = @as(u32, 1023);
pub const DISPID_IHTMLEVENTOBJ2_SCREENX = @as(u32, 1024);
pub const DISPID_IHTMLEVENTOBJ2_SCREENY = @as(u32, 1025);
pub const DISPID_IHTMLEVENTOBJ2_SRCFILTER = @as(u32, 1026);
pub const DISPID_IHTMLEVENTOBJ2_DATATRANSFER = @as(u32, 1037);
pub const DISPID_IHTMLEVENTOBJ3_CONTENTOVERFLOW = @as(u32, 1038);
pub const DISPID_IHTMLEVENTOBJ3_SHIFTLEFT = @as(u32, 1039);
pub const DISPID_IHTMLEVENTOBJ3_ALTLEFT = @as(u32, 1040);
pub const DISPID_IHTMLEVENTOBJ3_CTRLLEFT = @as(u32, 1041);
pub const DISPID_IHTMLEVENTOBJ3_IMECOMPOSITIONCHANGE = @as(u32, 1042);
pub const DISPID_IHTMLEVENTOBJ3_IMENOTIFYCOMMAND = @as(u32, 1043);
pub const DISPID_IHTMLEVENTOBJ3_IMENOTIFYDATA = @as(u32, 1044);
pub const DISPID_IHTMLEVENTOBJ3_IMEREQUEST = @as(u32, 1046);
pub const DISPID_IHTMLEVENTOBJ3_IMEREQUESTDATA = @as(u32, 1047);
pub const DISPID_IHTMLEVENTOBJ3_KEYBOARDLAYOUT = @as(u32, 1045);
pub const DISPID_IHTMLEVENTOBJ3_BEHAVIORCOOKIE = @as(u32, 1048);
pub const DISPID_IHTMLEVENTOBJ3_BEHAVIORPART = @as(u32, 1049);
pub const DISPID_IHTMLEVENTOBJ3_NEXTPAGE = @as(u32, 1050);
pub const DISPID_IHTMLEVENTOBJ4_WHEELDELTA = @as(u32, 1051);
pub const DISPID_IHTMLEVENTOBJ5_URL = @as(u32, 1052);
pub const DISPID_IHTMLEVENTOBJ5_DATA = @as(u32, 1054);
pub const DISPID_IHTMLEVENTOBJ5_SOURCE = @as(u32, 1055);
pub const DISPID_IHTMLEVENTOBJ5_ORIGIN = @as(u32, 1053);
pub const DISPID_IHTMLEVENTOBJ5_ISSESSION = @as(u32, 1056);
pub const DISPID_IHTMLEVENTOBJ6_ACTIONURL = @as(u32, 1058);
pub const DISPID_IHTMLEVENTOBJ6_BUTTONID = @as(u32, 1057);
pub const DISPID_IHTMLSTYLEMEDIA_TYPE = @as(u32, 1001);
pub const DISPID_IHTMLSTYLEMEDIA_MATCHMEDIUM = @as(u32, 1002);
pub const DISPID_IHTMLFRAMESCOLLECTION2_ITEM = @as(u32, 0);
pub const DISPID_IHTMLFRAMESCOLLECTION2_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLSCREEN_COLORDEPTH = @as(u32, 1001);
pub const DISPID_IHTMLSCREEN_BUFFERDEPTH = @as(u32, 1002);
pub const DISPID_IHTMLSCREEN_WIDTH = @as(u32, 1003);
pub const DISPID_IHTMLSCREEN_HEIGHT = @as(u32, 1004);
pub const DISPID_IHTMLSCREEN_UPDATEINTERVAL = @as(u32, 1005);
pub const DISPID_IHTMLSCREEN_AVAILHEIGHT = @as(u32, 1006);
pub const DISPID_IHTMLSCREEN_AVAILWIDTH = @as(u32, 1007);
pub const DISPID_IHTMLSCREEN_FONTSMOOTHINGENABLED = @as(u32, 1008);
pub const DISPID_IHTMLSCREEN2_LOGICALXDPI = @as(u32, 1009);
pub const DISPID_IHTMLSCREEN2_LOGICALYDPI = @as(u32, 1010);
pub const DISPID_IHTMLSCREEN2_DEVICEXDPI = @as(u32, 1011);
pub const DISPID_IHTMLSCREEN2_DEVICEYDPI = @as(u32, 1012);
pub const DISPID_IHTMLSCREEN3_SYSTEMXDPI = @as(u32, 1013);
pub const DISPID_IHTMLSCREEN3_SYSTEMYDPI = @as(u32, 1014);
pub const DISPID_IHTMLSCREEN4_PIXELDEPTH = @as(u32, 1015);
pub const DISPID_IHTMLWINDOW2_FRAMES = @as(u32, 1100);
pub const DISPID_IHTMLWINDOW2_DEFAULTSTATUS = @as(u32, 1101);
pub const DISPID_IHTMLWINDOW2_STATUS = @as(u32, 1102);
pub const DISPID_IHTMLWINDOW2_SETTIMEOUT = @as(u32, 1172);
pub const DISPID_IHTMLWINDOW2_CLEARTIMEOUT = @as(u32, 1104);
pub const DISPID_IHTMLWINDOW2_ALERT = @as(u32, 1105);
pub const DISPID_IHTMLWINDOW2_CONFIRM = @as(u32, 1110);
pub const DISPID_IHTMLWINDOW2_PROMPT = @as(u32, 1111);
pub const DISPID_IHTMLWINDOW2_IMAGE = @as(u32, 1125);
pub const DISPID_IHTMLWINDOW2_LOCATION = @as(u32, 14);
pub const DISPID_IHTMLWINDOW2_HISTORY = @as(u32, 2);
pub const DISPID_IHTMLWINDOW2_CLOSE = @as(u32, 3);
pub const DISPID_IHTMLWINDOW2_OPENER = @as(u32, 4);
pub const DISPID_IHTMLWINDOW2_NAVIGATOR = @as(u32, 5);
pub const DISPID_IHTMLWINDOW2_NAME = @as(u32, 11);
pub const DISPID_IHTMLWINDOW2_PARENT = @as(u32, 12);
pub const DISPID_IHTMLWINDOW2_OPEN = @as(u32, 13);
pub const DISPID_IHTMLWINDOW2_SELF = @as(u32, 20);
pub const DISPID_IHTMLWINDOW2_TOP = @as(u32, 21);
pub const DISPID_IHTMLWINDOW2_WINDOW = @as(u32, 22);
pub const DISPID_IHTMLWINDOW2_NAVIGATE = @as(u32, 25);
pub const DISPID_IHTMLWINDOW2_ONFOCUS = @as(u32, 71550);
pub const DISPID_IHTMLWINDOW2_ONBLUR = @as(u32, 71551);
pub const DISPID_IHTMLWINDOW2_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLWINDOW2_ONBEFOREUNLOAD = @as(u32, 71575);
pub const DISPID_IHTMLWINDOW2_ONUNLOAD = @as(u32, 71569);
pub const DISPID_IHTMLWINDOW2_ONHELP = @as(u32, 71549);
pub const DISPID_IHTMLWINDOW2_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLWINDOW2_ONRESIZE = @as(u32, 71572);
pub const DISPID_IHTMLWINDOW2_ONSCROLL = @as(u32, 71567);
pub const DISPID_IHTMLWINDOW2_DOCUMENT = @as(u32, 1151);
pub const DISPID_IHTMLWINDOW2_EVENT = @as(u32, 1152);
pub const DISPID_IHTMLWINDOW2__NEWENUM = @as(u32, 1153);
pub const DISPID_IHTMLWINDOW2_SHOWMODALDIALOG = @as(u32, 1154);
pub const DISPID_IHTMLWINDOW2_SHOWHELP = @as(u32, 1155);
pub const DISPID_IHTMLWINDOW2_SCREEN = @as(u32, 1156);
pub const DISPID_IHTMLWINDOW2_OPTION = @as(u32, 1157);
pub const DISPID_IHTMLWINDOW2_FOCUS = @as(u32, 1158);
pub const DISPID_IHTMLWINDOW2_CLOSED = @as(u32, 23);
pub const DISPID_IHTMLWINDOW2_BLUR = @as(u32, 1159);
pub const DISPID_IHTMLWINDOW2_SCROLL = @as(u32, 1160);
pub const DISPID_IHTMLWINDOW2_CLIENTINFORMATION = @as(u32, 1161);
pub const DISPID_IHTMLWINDOW2_SETINTERVAL = @as(u32, 1173);
pub const DISPID_IHTMLWINDOW2_CLEARINTERVAL = @as(u32, 1163);
pub const DISPID_IHTMLWINDOW2_OFFSCREENBUFFERING = @as(u32, 1164);
pub const DISPID_IHTMLWINDOW2_EXECSCRIPT = @as(u32, 1165);
pub const DISPID_IHTMLWINDOW2_TOSTRING = @as(u32, 1166);
pub const DISPID_IHTMLWINDOW2_SCROLLBY = @as(u32, 1167);
pub const DISPID_IHTMLWINDOW2_SCROLLTO = @as(u32, 1168);
pub const DISPID_IHTMLWINDOW2_MOVETO = @as(u32, 6);
pub const DISPID_IHTMLWINDOW2_MOVEBY = @as(u32, 7);
pub const DISPID_IHTMLWINDOW2_RESIZETO = @as(u32, 9);
pub const DISPID_IHTMLWINDOW2_RESIZEBY = @as(u32, 8);
pub const DISPID_IHTMLWINDOW2_EXTERNAL = @as(u32, 1169);
pub const DISPID_IHTMLWINDOW3_SCREENLEFT = @as(u32, 1170);
pub const DISPID_IHTMLWINDOW3_SCREENTOP = @as(u32, 1171);
pub const DISPID_IHTMLWINDOW3_ATTACHEVENT = @as(u32, 66043);
pub const DISPID_IHTMLWINDOW3_DETACHEVENT = @as(u32, 66044);
pub const DISPID_IHTMLWINDOW3_SETTIMEOUT = @as(u32, 1103);
pub const DISPID_IHTMLWINDOW3_SETINTERVAL = @as(u32, 1162);
pub const DISPID_IHTMLWINDOW3_PRINT = @as(u32, 1174);
pub const DISPID_IHTMLWINDOW3_ONBEFOREPRINT = @as(u32, 71602);
pub const DISPID_IHTMLWINDOW3_ONAFTERPRINT = @as(u32, 71603);
pub const DISPID_IHTMLWINDOW3_CLIPBOARDDATA = @as(u32, 1175);
pub const DISPID_IHTMLWINDOW3_SHOWMODELESSDIALOG = @as(u32, 1176);
pub const DISPID_IHTMLWINDOW4_CREATEPOPUP = @as(u32, 1180);
pub const DISPID_IHTMLWINDOW4_FRAMEELEMENT = @as(u32, 1181);
pub const DISPID_IHTMLWINDOW5_XMLHTTPREQUEST = @as(u32, 1190);
pub const DISPID_IHTMLWINDOW6_XDOMAINREQUEST = @as(u32, 1191);
pub const DISPID_IHTMLWINDOW6_SESSIONSTORAGE = @as(u32, 1192);
pub const DISPID_IHTMLWINDOW6_LOCALSTORAGE = @as(u32, 1193);
pub const DISPID_IHTMLWINDOW6_ONHASHCHANGE = @as(u32, 71645);
pub const DISPID_IHTMLWINDOW6_MAXCONNECTIONSPERSERVER = @as(u32, 1194);
pub const DISPID_IHTMLWINDOW6_POSTMESSAGE = @as(u32, 1196);
pub const DISPID_IHTMLWINDOW6_TOSTATICHTML = @as(u32, 1197);
pub const DISPID_IHTMLWINDOW6_ONMESSAGE = @as(u32, 71646);
pub const DISPID_IHTMLWINDOW6_MSWRITEPROFILERMARK = @as(u32, 1198);
pub const DISPID_IHTMLWINDOW7_GETSELECTION = @as(u32, 1199);
pub const DISPID_IHTMLWINDOW7_GETCOMPUTEDSTYLE = @as(u32, 1200);
pub const DISPID_IHTMLWINDOW7_STYLEMEDIA = @as(u32, 1202);
pub const DISPID_IHTMLWINDOW7_PERFORMANCE = @as(u32, 1203);
pub const DISPID_IHTMLWINDOW7_INNERWIDTH = @as(u32, 1204);
pub const DISPID_IHTMLWINDOW7_INNERHEIGHT = @as(u32, 1205);
pub const DISPID_IHTMLWINDOW7_PAGEXOFFSET = @as(u32, 1206);
pub const DISPID_IHTMLWINDOW7_PAGEYOFFSET = @as(u32, 1207);
pub const DISPID_IHTMLWINDOW7_SCREENX = @as(u32, 1208);
pub const DISPID_IHTMLWINDOW7_SCREENY = @as(u32, 1209);
pub const DISPID_IHTMLWINDOW7_OUTERWIDTH = @as(u32, 1210);
pub const DISPID_IHTMLWINDOW7_OUTERHEIGHT = @as(u32, 1211);
pub const DISPID_IHTMLWINDOW7_ONABORT = @as(u32, 71564);
pub const DISPID_IHTMLWINDOW7_ONCANPLAY = @as(u32, 71670);
pub const DISPID_IHTMLWINDOW7_ONCANPLAYTHROUGH = @as(u32, 71671);
pub const DISPID_IHTMLWINDOW7_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLWINDOW7_ONCLICK = @as(u32, 71544);
pub const DISPID_IHTMLWINDOW7_ONCONTEXTMENU = @as(u32, 71601);
pub const DISPID_IHTMLWINDOW7_ONDBLCLICK = @as(u32, 71545);
pub const DISPID_IHTMLWINDOW7_ONDRAG = @as(u32, 71585);
pub const DISPID_IHTMLWINDOW7_ONDRAGEND = @as(u32, 71586);
pub const DISPID_IHTMLWINDOW7_ONDRAGENTER = @as(u32, 71587);
pub const DISPID_IHTMLWINDOW7_ONDRAGLEAVE = @as(u32, 71589);
pub const DISPID_IHTMLWINDOW7_ONDRAGOVER = @as(u32, 71588);
pub const DISPID_IHTMLWINDOW7_ONDRAGSTART = @as(u32, 71571);
pub const DISPID_IHTMLWINDOW7_ONDROP = @as(u32, 71590);
pub const DISPID_IHTMLWINDOW7_ONDURATIONCHANGE = @as(u32, 71672);
pub const DISPID_IHTMLWINDOW7_ONFOCUSIN = @as(u32, 71627);
pub const DISPID_IHTMLWINDOW7_ONFOCUSOUT = @as(u32, 71628);
pub const DISPID_IHTMLWINDOW7_ONINPUT = @as(u32, 71663);
pub const DISPID_IHTMLWINDOW7_ONEMPTIED = @as(u32, 71673);
pub const DISPID_IHTMLWINDOW7_ONENDED = @as(u32, 71674);
pub const DISPID_IHTMLWINDOW7_ONKEYDOWN = @as(u32, 71541);
pub const DISPID_IHTMLWINDOW7_ONKEYPRESS = @as(u32, 71543);
pub const DISPID_IHTMLWINDOW7_ONKEYUP = @as(u32, 71542);
pub const DISPID_IHTMLWINDOW7_ONLOADEDDATA = @as(u32, 71675);
pub const DISPID_IHTMLWINDOW7_ONLOADEDMETADATA = @as(u32, 71676);
pub const DISPID_IHTMLWINDOW7_ONLOADSTART = @as(u32, 71677);
pub const DISPID_IHTMLWINDOW7_ONMOUSEDOWN = @as(u32, 71538);
pub const DISPID_IHTMLWINDOW7_ONMOUSEENTER = @as(u32, 71621);
pub const DISPID_IHTMLWINDOW7_ONMOUSELEAVE = @as(u32, 71622);
pub const DISPID_IHTMLWINDOW7_ONMOUSEMOVE = @as(u32, 71540);
pub const DISPID_IHTMLWINDOW7_ONMOUSEOUT = @as(u32, 71537);
pub const DISPID_IHTMLWINDOW7_ONMOUSEOVER = @as(u32, 71536);
pub const DISPID_IHTMLWINDOW7_ONMOUSEUP = @as(u32, 71539);
pub const DISPID_IHTMLWINDOW7_ONMOUSEWHEEL = @as(u32, 71612);
pub const DISPID_IHTMLWINDOW7_ONOFFLINE = @as(u32, 71644);
pub const DISPID_IHTMLWINDOW7_ONONLINE = @as(u32, 71643);
pub const DISPID_IHTMLWINDOW7_ONPROGRESS = @as(u32, 71681);
pub const DISPID_IHTMLWINDOW7_ONRATECHANGE = @as(u32, 71682);
pub const DISPID_IHTMLWINDOW7_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLWINDOW7_ONRESET = @as(u32, 71548);
pub const DISPID_IHTMLWINDOW7_ONSEEKED = @as(u32, 71683);
pub const DISPID_IHTMLWINDOW7_ONSEEKING = @as(u32, 71684);
pub const DISPID_IHTMLWINDOW7_ONSELECT = @as(u32, 71546);
pub const DISPID_IHTMLWINDOW7_ONSTALLED = @as(u32, 71685);
pub const DISPID_IHTMLWINDOW7_ONSTORAGE = @as(u32, 71636);
pub const DISPID_IHTMLWINDOW7_ONSUBMIT = @as(u32, 71547);
pub const DISPID_IHTMLWINDOW7_ONSUSPEND = @as(u32, 71686);
pub const DISPID_IHTMLWINDOW7_ONTIMEUPDATE = @as(u32, 71687);
pub const DISPID_IHTMLWINDOW7_ONPAUSE = @as(u32, 71678);
pub const DISPID_IHTMLWINDOW7_ONPLAY = @as(u32, 71679);
pub const DISPID_IHTMLWINDOW7_ONPLAYING = @as(u32, 71680);
pub const DISPID_IHTMLWINDOW7_ONVOLUMECHANGE = @as(u32, 71688);
pub const DISPID_IHTMLWINDOW7_ONWAITING = @as(u32, 71689);
pub const DISPID_IHTMLWINDOW8_ONMSPOINTERDOWN = @as(u32, 71690);
pub const DISPID_IHTMLWINDOW8_ONMSPOINTERMOVE = @as(u32, 71691);
pub const DISPID_IHTMLWINDOW8_ONMSPOINTERUP = @as(u32, 71692);
pub const DISPID_IHTMLWINDOW8_ONMSPOINTEROVER = @as(u32, 71693);
pub const DISPID_IHTMLWINDOW8_ONMSPOINTEROUT = @as(u32, 71694);
pub const DISPID_IHTMLWINDOW8_ONMSPOINTERCANCEL = @as(u32, 71695);
pub const DISPID_IHTMLWINDOW8_ONMSPOINTERHOVER = @as(u32, 71696);
pub const DISPID_IHTMLWINDOW8_ONMSGESTURESTART = @as(u32, 71699);
pub const DISPID_IHTMLWINDOW8_ONMSGESTURECHANGE = @as(u32, 71700);
pub const DISPID_IHTMLWINDOW8_ONMSGESTUREEND = @as(u32, 71701);
pub const DISPID_IHTMLWINDOW8_ONMSGESTUREHOLD = @as(u32, 71702);
pub const DISPID_IHTMLWINDOW8_ONMSGESTURETAP = @as(u32, 71703);
pub const DISPID_IHTMLWINDOW8_ONMSGESTUREDOUBLETAP = @as(u32, 71704);
pub const DISPID_IHTMLWINDOW8_ONMSINERTIASTART = @as(u32, 71705);
pub const DISPID_IHTMLWINDOW8_APPLICATIONCACHE = @as(u32, 1213);
pub const DISPID_IHTMLWINDOW8_ONPOPSTATE = @as(u32, 71728);
pub const DISPID_HTMLWINDOWEVENTS3_ONHASHCHANGE = @as(u32, 1066);
pub const DISPID_HTMLWINDOWEVENTS3_ONMESSAGE = @as(u32, 1067);
pub const DISPID_HTMLWINDOWEVENTS2_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLWINDOWEVENTS2_ONUNLOAD = @as(u32, 1008);
pub const DISPID_HTMLWINDOWEVENTS2_ONHELP = @as(u32, 65546);
pub const DISPID_HTMLWINDOWEVENTS2_ONFOCUS = @as(u32, 65537);
pub const DISPID_HTMLWINDOWEVENTS2_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLWINDOWEVENTS2_ONRESIZE = @as(u32, 1016);
pub const DISPID_HTMLWINDOWEVENTS2_ONSCROLL = @as(u32, 1014);
pub const DISPID_HTMLWINDOWEVENTS2_ONBEFOREUNLOAD = @as(u32, 1017);
pub const DISPID_HTMLWINDOWEVENTS2_ONBEFOREPRINT = @as(u32, 1024);
pub const DISPID_HTMLWINDOWEVENTS2_ONAFTERPRINT = @as(u32, 1025);
pub const DISPID_HTMLWINDOWEVENTS_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLWINDOWEVENTS_ONUNLOAD = @as(u32, 1008);
pub const DISPID_HTMLWINDOWEVENTS_ONHELP = @as(u32, 65546);
pub const DISPID_HTMLWINDOWEVENTS_ONFOCUS = @as(u32, 65537);
pub const DISPID_HTMLWINDOWEVENTS_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLWINDOWEVENTS_ONRESIZE = @as(u32, 1016);
pub const DISPID_HTMLWINDOWEVENTS_ONSCROLL = @as(u32, 1014);
pub const DISPID_HTMLWINDOWEVENTS_ONBEFOREUNLOAD = @as(u32, 1017);
pub const DISPID_HTMLWINDOWEVENTS_ONBEFOREPRINT = @as(u32, 1024);
pub const DISPID_HTMLWINDOWEVENTS_ONAFTERPRINT = @as(u32, 1025);
pub const DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_USERAGENT = @as(u32, 1001);
pub const DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_VERSION = @as(u32, 1002);
pub const DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLDOCUMENT_SCRIPT = @as(u32, 1001);
pub const DISPID_IHTMLDOCUMENT2_ALL = @as(u32, 1003);
pub const DISPID_IHTMLDOCUMENT2_BODY = @as(u32, 1004);
pub const DISPID_IHTMLDOCUMENT2_ACTIVEELEMENT = @as(u32, 1005);
pub const DISPID_IHTMLDOCUMENT2_IMAGES = @as(u32, 1011);
pub const DISPID_IHTMLDOCUMENT2_APPLETS = @as(u32, 1008);
pub const DISPID_IHTMLDOCUMENT2_LINKS = @as(u32, 1009);
pub const DISPID_IHTMLDOCUMENT2_FORMS = @as(u32, 1010);
pub const DISPID_IHTMLDOCUMENT2_ANCHORS = @as(u32, 1007);
pub const DISPID_IHTMLDOCUMENT2_TITLE = @as(u32, 1012);
pub const DISPID_IHTMLDOCUMENT2_SCRIPTS = @as(u32, 1013);
pub const DISPID_IHTMLDOCUMENT2_DESIGNMODE = @as(u32, 1014);
pub const DISPID_IHTMLDOCUMENT2_SELECTION = @as(u32, 1017);
pub const DISPID_IHTMLDOCUMENT2_READYSTATE = @as(u32, 1018);
pub const DISPID_IHTMLDOCUMENT2_FRAMES = @as(u32, 1019);
pub const DISPID_IHTMLDOCUMENT2_EMBEDS = @as(u32, 1015);
pub const DISPID_IHTMLDOCUMENT2_PLUGINS = @as(u32, 1021);
pub const DISPID_IHTMLDOCUMENT2_ALINKCOLOR = @as(u32, 1022);
pub const DISPID_IHTMLDOCUMENT2_BGCOLOR = @as(i32, -501);
pub const DISPID_IHTMLDOCUMENT2_FGCOLOR = @as(u32, 70538);
pub const DISPID_IHTMLDOCUMENT2_LINKCOLOR = @as(u32, 1024);
pub const DISPID_IHTMLDOCUMENT2_VLINKCOLOR = @as(u32, 1023);
pub const DISPID_IHTMLDOCUMENT2_REFERRER = @as(u32, 1027);
pub const DISPID_IHTMLDOCUMENT2_LOCATION = @as(u32, 1026);
pub const DISPID_IHTMLDOCUMENT2_LASTMODIFIED = @as(u32, 1028);
pub const DISPID_IHTMLDOCUMENT2_URL = @as(u32, 1025);
pub const DISPID_IHTMLDOCUMENT2_DOMAIN = @as(u32, 1029);
pub const DISPID_IHTMLDOCUMENT2_COOKIE = @as(u32, 1030);
pub const DISPID_IHTMLDOCUMENT2_EXPANDO = @as(u32, 1031);
pub const DISPID_IHTMLDOCUMENT2_CHARSET = @as(u32, 1032);
pub const DISPID_IHTMLDOCUMENT2_DEFAULTCHARSET = @as(u32, 1033);
pub const DISPID_IHTMLDOCUMENT2_MIMETYPE = @as(u32, 1041);
pub const DISPID_IHTMLDOCUMENT2_FILESIZE = @as(u32, 1042);
pub const DISPID_IHTMLDOCUMENT2_FILECREATEDDATE = @as(u32, 1043);
pub const DISPID_IHTMLDOCUMENT2_FILEMODIFIEDDATE = @as(u32, 1044);
pub const DISPID_IHTMLDOCUMENT2_FILEUPDATEDDATE = @as(u32, 1045);
pub const DISPID_IHTMLDOCUMENT2_SECURITY = @as(u32, 1046);
pub const DISPID_IHTMLDOCUMENT2_PROTOCOL = @as(u32, 1047);
pub const DISPID_IHTMLDOCUMENT2_NAMEPROP = @as(u32, 1048);
pub const DISPID_IHTMLDOCUMENT2_WRITE = @as(u32, 1054);
pub const DISPID_IHTMLDOCUMENT2_WRITELN = @as(u32, 1055);
pub const DISPID_IHTMLDOCUMENT2_OPEN = @as(u32, 1056);
pub const DISPID_IHTMLDOCUMENT2_CLOSE = @as(u32, 1057);
pub const DISPID_IHTMLDOCUMENT2_CLEAR = @as(u32, 1058);
pub const DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSUPPORTED = @as(u32, 1059);
pub const DISPID_IHTMLDOCUMENT2_QUERYCOMMANDENABLED = @as(u32, 1060);
pub const DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSTATE = @as(u32, 1061);
pub const DISPID_IHTMLDOCUMENT2_QUERYCOMMANDINDETERM = @as(u32, 1062);
pub const DISPID_IHTMLDOCUMENT2_QUERYCOMMANDTEXT = @as(u32, 1063);
pub const DISPID_IHTMLDOCUMENT2_QUERYCOMMANDVALUE = @as(u32, 1064);
pub const DISPID_IHTMLDOCUMENT2_EXECCOMMAND = @as(u32, 1065);
pub const DISPID_IHTMLDOCUMENT2_EXECCOMMANDSHOWHELP = @as(u32, 1066);
pub const DISPID_IHTMLDOCUMENT2_CREATEELEMENT = @as(u32, 1067);
pub const DISPID_IHTMLDOCUMENT2_ONHELP = @as(u32, 71549);
pub const DISPID_IHTMLDOCUMENT2_ONCLICK = @as(u32, 71544);
pub const DISPID_IHTMLDOCUMENT2_ONDBLCLICK = @as(u32, 71545);
pub const DISPID_IHTMLDOCUMENT2_ONKEYUP = @as(u32, 71542);
pub const DISPID_IHTMLDOCUMENT2_ONKEYDOWN = @as(u32, 71541);
pub const DISPID_IHTMLDOCUMENT2_ONKEYPRESS = @as(u32, 71543);
pub const DISPID_IHTMLDOCUMENT2_ONMOUSEUP = @as(u32, 71539);
pub const DISPID_IHTMLDOCUMENT2_ONMOUSEDOWN = @as(u32, 71538);
pub const DISPID_IHTMLDOCUMENT2_ONMOUSEMOVE = @as(u32, 71540);
pub const DISPID_IHTMLDOCUMENT2_ONMOUSEOUT = @as(u32, 71537);
pub const DISPID_IHTMLDOCUMENT2_ONMOUSEOVER = @as(u32, 71536);
pub const DISPID_IHTMLDOCUMENT2_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLDOCUMENT2_ONAFTERUPDATE = @as(u32, 71558);
pub const DISPID_IHTMLDOCUMENT2_ONROWEXIT = @as(u32, 71554);
pub const DISPID_IHTMLDOCUMENT2_ONROWENTER = @as(u32, 71555);
pub const DISPID_IHTMLDOCUMENT2_ONDRAGSTART = @as(u32, 71571);
pub const DISPID_IHTMLDOCUMENT2_ONSELECTSTART = @as(u32, 71573);
pub const DISPID_IHTMLDOCUMENT2_ELEMENTFROMPOINT = @as(u32, 1068);
pub const DISPID_IHTMLDOCUMENT2_PARENTWINDOW = @as(u32, 1034);
pub const DISPID_IHTMLDOCUMENT2_STYLESHEETS = @as(u32, 1069);
pub const DISPID_IHTMLDOCUMENT2_ONBEFOREUPDATE = @as(u32, 71557);
pub const DISPID_IHTMLDOCUMENT2_ONERRORUPDATE = @as(u32, 71574);
pub const DISPID_IHTMLDOCUMENT2_TOSTRING = @as(u32, 1070);
pub const DISPID_IHTMLDOCUMENT2_CREATESTYLESHEET = @as(u32, 1071);
pub const DISPID_IHTMLDOCUMENT3_RELEASECAPTURE = @as(u32, 1072);
pub const DISPID_IHTMLDOCUMENT3_RECALC = @as(u32, 1073);
pub const DISPID_IHTMLDOCUMENT3_CREATETEXTNODE = @as(u32, 1074);
pub const DISPID_IHTMLDOCUMENT3_DOCUMENTELEMENT = @as(u32, 1075);
pub const DISPID_IHTMLDOCUMENT3_UNIQUEID = @as(u32, 1077);
pub const DISPID_IHTMLDOCUMENT3_ATTACHEVENT = @as(u32, 66043);
pub const DISPID_IHTMLDOCUMENT3_DETACHEVENT = @as(u32, 66044);
pub const DISPID_IHTMLDOCUMENT3_ONROWSDELETE = @as(u32, 71598);
pub const DISPID_IHTMLDOCUMENT3_ONROWSINSERTED = @as(u32, 71599);
pub const DISPID_IHTMLDOCUMENT3_ONCELLCHANGE = @as(u32, 71600);
pub const DISPID_IHTMLDOCUMENT3_ONDATASETCHANGED = @as(u32, 71576);
pub const DISPID_IHTMLDOCUMENT3_ONDATAAVAILABLE = @as(u32, 71577);
pub const DISPID_IHTMLDOCUMENT3_ONDATASETCOMPLETE = @as(u32, 71578);
pub const DISPID_IHTMLDOCUMENT3_ONPROPERTYCHANGE = @as(u32, 71583);
pub const DISPID_IHTMLDOCUMENT3_DIR = @as(u32, 70653);
pub const DISPID_IHTMLDOCUMENT3_ONCONTEXTMENU = @as(u32, 71601);
pub const DISPID_IHTMLDOCUMENT3_ONSTOP = @as(u32, 71604);
pub const DISPID_IHTMLDOCUMENT3_CREATEDOCUMENTFRAGMENT = @as(u32, 1076);
pub const DISPID_IHTMLDOCUMENT3_PARENTDOCUMENT = @as(u32, 1078);
pub const DISPID_IHTMLDOCUMENT3_ENABLEDOWNLOAD = @as(u32, 1079);
pub const DISPID_IHTMLDOCUMENT3_BASEURL = @as(u32, 1080);
pub const DISPID_IHTMLDOCUMENT3_CHILDNODES = @as(u32, 66585);
pub const DISPID_IHTMLDOCUMENT3_INHERITSTYLESHEETS = @as(u32, 1082);
pub const DISPID_IHTMLDOCUMENT3_ONBEFOREEDITFOCUS = @as(u32, 71605);
pub const DISPID_IHTMLDOCUMENT3_GETELEMENTSBYNAME = @as(u32, 1086);
pub const DISPID_IHTMLDOCUMENT3_GETELEMENTBYID = @as(u32, 1088);
pub const DISPID_IHTMLDOCUMENT3_GETELEMENTSBYTAGNAME = @as(u32, 1087);
pub const DISPID_IHTMLDOCUMENT4_FOCUS = @as(u32, 1089);
pub const DISPID_IHTMLDOCUMENT4_HASFOCUS = @as(u32, 1090);
pub const DISPID_IHTMLDOCUMENT4_ONSELECTIONCHANGE = @as(u32, 71616);
pub const DISPID_IHTMLDOCUMENT4_NAMESPACES = @as(u32, 1091);
pub const DISPID_IHTMLDOCUMENT4_CREATEDOCUMENTFROMURL = @as(u32, 1092);
pub const DISPID_IHTMLDOCUMENT4_MEDIA = @as(u32, 1093);
pub const DISPID_IHTMLDOCUMENT4_CREATEEVENTOBJECT = @as(u32, 1094);
pub const DISPID_IHTMLDOCUMENT4_FIREEVENT = @as(u32, 1095);
pub const DISPID_IHTMLDOCUMENT4_CREATERENDERSTYLE = @as(u32, 1096);
pub const DISPID_IHTMLDOCUMENT4_ONCONTROLSELECT = @as(u32, 71615);
pub const DISPID_IHTMLDOCUMENT4_URLUNENCODED = @as(u32, 1097);
pub const DISPID_IHTMLDOCUMENT5_ONMOUSEWHEEL = @as(u32, 71612);
pub const DISPID_IHTMLDOCUMENT5_DOCTYPE = @as(u32, 1098);
pub const DISPID_IHTMLDOCUMENT5_IMPLEMENTATION = @as(u32, 1099);
pub const DISPID_IHTMLDOCUMENT5_CREATEATTRIBUTE = @as(u32, 1100);
pub const DISPID_IHTMLDOCUMENT5_CREATECOMMENT = @as(u32, 1101);
pub const DISPID_IHTMLDOCUMENT5_ONFOCUSIN = @as(u32, 71627);
pub const DISPID_IHTMLDOCUMENT5_ONFOCUSOUT = @as(u32, 71628);
pub const DISPID_IHTMLDOCUMENT5_ONACTIVATE = @as(u32, 71623);
pub const DISPID_IHTMLDOCUMENT5_ONDEACTIVATE = @as(u32, 71624);
pub const DISPID_IHTMLDOCUMENT5_ONBEFOREACTIVATE = @as(u32, 71626);
pub const DISPID_IHTMLDOCUMENT5_ONBEFOREDEACTIVATE = @as(u32, 71613);
pub const DISPID_IHTMLDOCUMENT5_COMPATMODE = @as(u32, 1102);
pub const DISPID_IHTMLDOCUMENT6_COMPATIBLE = @as(u32, 1103);
pub const DISPID_IHTMLDOCUMENT6_DOCUMENTMODE = @as(u32, 1104);
pub const DISPID_IHTMLDOCUMENT6_ONSTORAGE = @as(u32, 71636);
pub const DISPID_IHTMLDOCUMENT6_ONSTORAGECOMMIT = @as(u32, 71637);
pub const DISPID_IHTMLDOCUMENT6_IE8_GETELEMENTBYID = @as(u32, 1107);
pub const DISPID_IHTMLDOCUMENT6_UPDATESETTINGS = @as(u32, 1109);
pub const DISPID_IHTMLDOCUMENT7_DEFAULTVIEW = @as(u32, 1110);
pub const DISPID_IHTMLDOCUMENT7_CREATECDATASECTION = @as(u32, 1123);
pub const DISPID_IHTMLDOCUMENT7_GETSELECTION = @as(u32, 1112);
pub const DISPID_IHTMLDOCUMENT7_GETELEMENTSBYTAGNAMENS = @as(u32, 1113);
pub const DISPID_IHTMLDOCUMENT7_CREATEELEMENTNS = @as(u32, 1114);
pub const DISPID_IHTMLDOCUMENT7_CREATEATTRIBUTENS = @as(u32, 1115);
pub const DISPID_IHTMLDOCUMENT7_ONMSTHUMBNAILCLICK = @as(u32, 71657);
pub const DISPID_IHTMLDOCUMENT7_CHARACTERSET = @as(u32, 1117);
pub const DISPID_IHTMLDOCUMENT7_IE9_CREATEELEMENT = @as(u32, 1118);
pub const DISPID_IHTMLDOCUMENT7_IE9_CREATEATTRIBUTE = @as(u32, 1119);
pub const DISPID_IHTMLDOCUMENT7_GETELEMENTSBYCLASSNAME = @as(u32, 1120);
pub const DISPID_IHTMLDOCUMENT7_CREATEPROCESSINGINSTRUCTION = @as(u32, 1124);
pub const DISPID_IHTMLDOCUMENT7_ADOPTNODE = @as(u32, 1125);
pub const DISPID_IHTMLDOCUMENT7_ONMSSITEMODEJUMPLISTITEMREMOVED = @as(u32, 71666);
pub const DISPID_IHTMLDOCUMENT7_IE9_ALL = @as(u32, 1126);
pub const DISPID_IHTMLDOCUMENT7_INPUTENCODING = @as(u32, 1127);
pub const DISPID_IHTMLDOCUMENT7_XMLENCODING = @as(u32, 1128);
pub const DISPID_IHTMLDOCUMENT7_XMLSTANDALONE = @as(u32, 1129);
pub const DISPID_IHTMLDOCUMENT7_XMLVERSION = @as(u32, 1130);
pub const DISPID_IHTMLDOCUMENT7_HASATTRIBUTES = @as(u32, 1132);
pub const DISPID_IHTMLDOCUMENT7_ONABORT = @as(u32, 71564);
pub const DISPID_IHTMLDOCUMENT7_ONBLUR = @as(u32, 71551);
pub const DISPID_IHTMLDOCUMENT7_ONCANPLAY = @as(u32, 71670);
pub const DISPID_IHTMLDOCUMENT7_ONCANPLAYTHROUGH = @as(u32, 71671);
pub const DISPID_IHTMLDOCUMENT7_ONCHANGE = @as(u32, 71566);
pub const DISPID_IHTMLDOCUMENT7_ONDRAG = @as(u32, 71585);
pub const DISPID_IHTMLDOCUMENT7_ONDRAGEND = @as(u32, 71586);
pub const DISPID_IHTMLDOCUMENT7_ONDRAGENTER = @as(u32, 71587);
pub const DISPID_IHTMLDOCUMENT7_ONDRAGLEAVE = @as(u32, 71589);
pub const DISPID_IHTMLDOCUMENT7_ONDRAGOVER = @as(u32, 71588);
pub const DISPID_IHTMLDOCUMENT7_ONDROP = @as(u32, 71590);
pub const DISPID_IHTMLDOCUMENT7_ONDURATIONCHANGE = @as(u32, 71672);
pub const DISPID_IHTMLDOCUMENT7_ONEMPTIED = @as(u32, 71673);
pub const DISPID_IHTMLDOCUMENT7_ONENDED = @as(u32, 71674);
pub const DISPID_IHTMLDOCUMENT7_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLDOCUMENT7_ONFOCUS = @as(u32, 71550);
pub const DISPID_IHTMLDOCUMENT7_ONINPUT = @as(u32, 71663);
pub const DISPID_IHTMLDOCUMENT7_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLDOCUMENT7_ONLOADEDDATA = @as(u32, 71675);
pub const DISPID_IHTMLDOCUMENT7_ONLOADEDMETADATA = @as(u32, 71676);
pub const DISPID_IHTMLDOCUMENT7_ONLOADSTART = @as(u32, 71677);
pub const DISPID_IHTMLDOCUMENT7_ONPAUSE = @as(u32, 71678);
pub const DISPID_IHTMLDOCUMENT7_ONPLAY = @as(u32, 71679);
pub const DISPID_IHTMLDOCUMENT7_ONPLAYING = @as(u32, 71680);
pub const DISPID_IHTMLDOCUMENT7_ONPROGRESS = @as(u32, 71681);
pub const DISPID_IHTMLDOCUMENT7_ONRATECHANGE = @as(u32, 71682);
pub const DISPID_IHTMLDOCUMENT7_ONRESET = @as(u32, 71548);
pub const DISPID_IHTMLDOCUMENT7_ONSCROLL = @as(u32, 71567);
pub const DISPID_IHTMLDOCUMENT7_ONSEEKED = @as(u32, 71683);
pub const DISPID_IHTMLDOCUMENT7_ONSEEKING = @as(u32, 71684);
pub const DISPID_IHTMLDOCUMENT7_ONSELECT = @as(u32, 71546);
pub const DISPID_IHTMLDOCUMENT7_ONSTALLED = @as(u32, 71685);
pub const DISPID_IHTMLDOCUMENT7_ONSUBMIT = @as(u32, 71547);
pub const DISPID_IHTMLDOCUMENT7_ONSUSPEND = @as(u32, 71686);
pub const DISPID_IHTMLDOCUMENT7_ONTIMEUPDATE = @as(u32, 71687);
pub const DISPID_IHTMLDOCUMENT7_ONVOLUMECHANGE = @as(u32, 71688);
pub const DISPID_IHTMLDOCUMENT7_ONWAITING = @as(u32, 71689);
pub const DISPID_IHTMLDOCUMENT7_NORMALIZE = @as(u32, 1134);
pub const DISPID_IHTMLDOCUMENT7_IMPORTNODE = @as(u32, 1135);
pub const DISPID_IHTMLDOCUMENT7_IE9_PARENTWINDOW = @as(u32, 1136);
pub const DISPID_IHTMLDOCUMENT7_IE9_BODY = @as(u32, 1137);
pub const DISPID_IHTMLDOCUMENT7_HEAD = @as(u32, 1138);
pub const DISPID_IHTMLDOCUMENT8_ONMSCONTENTZOOM = @as(u32, 71708);
pub const DISPID_IHTMLDOCUMENT8_ONMSPOINTERDOWN = @as(u32, 71690);
pub const DISPID_IHTMLDOCUMENT8_ONMSPOINTERMOVE = @as(u32, 71691);
pub const DISPID_IHTMLDOCUMENT8_ONMSPOINTERUP = @as(u32, 71692);
pub const DISPID_IHTMLDOCUMENT8_ONMSPOINTEROVER = @as(u32, 71693);
pub const DISPID_IHTMLDOCUMENT8_ONMSPOINTEROUT = @as(u32, 71694);
pub const DISPID_IHTMLDOCUMENT8_ONMSPOINTERCANCEL = @as(u32, 71695);
pub const DISPID_IHTMLDOCUMENT8_ONMSPOINTERHOVER = @as(u32, 71696);
pub const DISPID_IHTMLDOCUMENT8_ONMSGESTURESTART = @as(u32, 71699);
pub const DISPID_IHTMLDOCUMENT8_ONMSGESTURECHANGE = @as(u32, 71700);
pub const DISPID_IHTMLDOCUMENT8_ONMSGESTUREEND = @as(u32, 71701);
pub const DISPID_IHTMLDOCUMENT8_ONMSGESTUREHOLD = @as(u32, 71702);
pub const DISPID_IHTMLDOCUMENT8_ONMSGESTURETAP = @as(u32, 71703);
pub const DISPID_IHTMLDOCUMENT8_ONMSGESTUREDOUBLETAP = @as(u32, 71704);
pub const DISPID_IHTMLDOCUMENT8_ONMSINERTIASTART = @as(u32, 71705);
pub const DISPID_IHTMLDOCUMENT8_ELEMENTSFROMPOINT = @as(u32, 1139);
pub const DISPID_IHTMLDOCUMENT8_ELEMENTSFROMRECT = @as(u32, 1140);
pub const DISPID_IHTMLDOCUMENT8_ONMSMANIPULATIONSTATECHANGED = @as(u32, 71714);
pub const DISPID_IHTMLDOCUMENT8_MSCAPSLOCKWARNINGOFF = @as(u32, 1141);
pub const DISPID_IDOCUMENTEVENT_CREATEEVENT = @as(u32, 1108);
pub const DISPID_IDOCUMENTRANGE_CREATERANGE = @as(u32, 1111);
pub const DISPID_IDOCUMENTSELECTOR_QUERYSELECTOR = @as(u32, 1105);
pub const DISPID_IDOCUMENTSELECTOR_QUERYSELECTORALL = @as(u32, 1106);
pub const DISPID_IDOCUMENTTRAVERSAL_CREATENODEITERATOR = @as(u32, 1121);
pub const DISPID_IDOCUMENTTRAVERSAL_CREATETREEWALKER = @as(u32, 1122);
pub const DISPID_HTMLDOCUMENTEVENTS4_ONMSTHUMBNAILCLICK = @as(u32, 71657);
pub const DISPID_HTMLDOCUMENTEVENTS4_ONMSSITEMODEJUMPLISTITEMREMOVED = @as(u32, 71666);
pub const DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGE = @as(u32, 1057);
pub const DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGECOMMIT = @as(u32, 1058);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONHELP = @as(u32, 65546);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONCLICK = @as(i32, -600);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONDBLCLICK = @as(i32, -601);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONKEYDOWN = @as(i32, -602);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONKEYUP = @as(i32, -604);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONKEYPRESS = @as(i32, -603);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEDOWN = @as(i32, -605);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEMOVE = @as(i32, -606);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEUP = @as(i32, -607);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOUT = @as(u32, 65545);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOVER = @as(u32, 65544);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREUPDATE = @as(u32, 65540);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONAFTERUPDATE = @as(u32, 65541);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONROWEXIT = @as(u32, 65542);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONROWENTER = @as(u32, 65543);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONDRAGSTART = @as(u32, 65547);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONSELECTSTART = @as(u32, 65548);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONERRORUPDATE = @as(u32, 65549);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU = @as(u32, 1023);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONSTOP = @as(u32, 1026);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONROWSDELETE = @as(u32, 65568);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONROWSINSERTED = @as(u32, 65569);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONCELLCHANGE = @as(u32, 65570);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONPROPERTYCHANGE = @as(u32, 65555);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCHANGED = @as(u32, 65550);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONDATAAVAILABLE = @as(u32, 65551);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCOMPLETE = @as(u32, 65552);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREEDITFOCUS = @as(u32, 1027);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONSELECTIONCHANGE = @as(u32, 1037);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONCONTROLSELECT = @as(u32, 1036);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEWHEEL = @as(u32, 1033);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSIN = @as(u32, 1048);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSOUT = @as(u32, 1049);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONACTIVATE = @as(u32, 1044);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONDEACTIVATE = @as(u32, 1045);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREACTIVATE = @as(u32, 1047);
pub const DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREDEACTIVATE = @as(u32, 1034);
pub const DISPID_HTMLDOCUMENTEVENTS_ONHELP = @as(u32, 65546);
pub const DISPID_HTMLDOCUMENTEVENTS_ONCLICK = @as(i32, -600);
pub const DISPID_HTMLDOCUMENTEVENTS_ONDBLCLICK = @as(i32, -601);
pub const DISPID_HTMLDOCUMENTEVENTS_ONKEYDOWN = @as(i32, -602);
pub const DISPID_HTMLDOCUMENTEVENTS_ONKEYUP = @as(i32, -604);
pub const DISPID_HTMLDOCUMENTEVENTS_ONKEYPRESS = @as(i32, -603);
pub const DISPID_HTMLDOCUMENTEVENTS_ONMOUSEDOWN = @as(i32, -605);
pub const DISPID_HTMLDOCUMENTEVENTS_ONMOUSEMOVE = @as(i32, -606);
pub const DISPID_HTMLDOCUMENTEVENTS_ONMOUSEUP = @as(i32, -607);
pub const DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOUT = @as(u32, 65545);
pub const DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOVER = @as(u32, 65544);
pub const DISPID_HTMLDOCUMENTEVENTS_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_HTMLDOCUMENTEVENTS_ONBEFOREUPDATE = @as(u32, 65540);
pub const DISPID_HTMLDOCUMENTEVENTS_ONAFTERUPDATE = @as(u32, 65541);
pub const DISPID_HTMLDOCUMENTEVENTS_ONROWEXIT = @as(u32, 65542);
pub const DISPID_HTMLDOCUMENTEVENTS_ONROWENTER = @as(u32, 65543);
pub const DISPID_HTMLDOCUMENTEVENTS_ONDRAGSTART = @as(u32, 65547);
pub const DISPID_HTMLDOCUMENTEVENTS_ONSELECTSTART = @as(u32, 65548);
pub const DISPID_HTMLDOCUMENTEVENTS_ONERRORUPDATE = @as(u32, 65549);
pub const DISPID_HTMLDOCUMENTEVENTS_ONCONTEXTMENU = @as(u32, 1023);
pub const DISPID_HTMLDOCUMENTEVENTS_ONSTOP = @as(u32, 1026);
pub const DISPID_HTMLDOCUMENTEVENTS_ONROWSDELETE = @as(u32, 65568);
pub const DISPID_HTMLDOCUMENTEVENTS_ONROWSINSERTED = @as(u32, 65569);
pub const DISPID_HTMLDOCUMENTEVENTS_ONCELLCHANGE = @as(u32, 65570);
pub const DISPID_HTMLDOCUMENTEVENTS_ONPROPERTYCHANGE = @as(u32, 65555);
pub const DISPID_HTMLDOCUMENTEVENTS_ONDATASETCHANGED = @as(u32, 65550);
pub const DISPID_HTMLDOCUMENTEVENTS_ONDATAAVAILABLE = @as(u32, 65551);
pub const DISPID_HTMLDOCUMENTEVENTS_ONDATASETCOMPLETE = @as(u32, 65552);
pub const DISPID_HTMLDOCUMENTEVENTS_ONBEFOREEDITFOCUS = @as(u32, 1027);
pub const DISPID_HTMLDOCUMENTEVENTS_ONSELECTIONCHANGE = @as(u32, 1037);
pub const DISPID_HTMLDOCUMENTEVENTS_ONCONTROLSELECT = @as(u32, 1036);
pub const DISPID_HTMLDOCUMENTEVENTS_ONMOUSEWHEEL = @as(u32, 1033);
pub const DISPID_HTMLDOCUMENTEVENTS_ONFOCUSIN = @as(u32, 1048);
pub const DISPID_HTMLDOCUMENTEVENTS_ONFOCUSOUT = @as(u32, 1049);
pub const DISPID_HTMLDOCUMENTEVENTS_ONACTIVATE = @as(u32, 1044);
pub const DISPID_HTMLDOCUMENTEVENTS_ONDEACTIVATE = @as(u32, 1045);
pub const DISPID_HTMLDOCUMENTEVENTS_ONBEFOREACTIVATE = @as(u32, 1047);
pub const DISPID_HTMLDOCUMENTEVENTS_ONBEFOREDEACTIVATE = @as(u32, 1034);
pub const DISPID_IWEBBRIDGE_URL = @as(u32, 1);
pub const DISPID_IWEBBRIDGE_SCROLLBAR = @as(u32, 2);
pub const DISPID_IWEBBRIDGE_EMBED = @as(u32, 3);
pub const DISPID_IWEBBRIDGE_EVENT = @as(u32, 1152);
pub const DISPID_IWEBBRIDGE_READYSTATE = @as(i32, -525);
pub const DISPID_IWEBBRIDGE_ABOUTBOX = @as(i32, -552);
pub const DISPID_IWBSCRIPTCONTROL_RAISEEVENT = @as(u32, 1);
pub const DISPID_IWBSCRIPTCONTROL_BUBBLEEVENT = @as(u32, 2);
pub const DISPID_IWBSCRIPTCONTROL_SETCONTEXTMENU = @as(u32, 3);
pub const DISPID_IWBSCRIPTCONTROL_SELECTABLECONTENT = @as(u32, 4);
pub const DISPID_IWBSCRIPTCONTROL_FROZEN = @as(u32, 5);
pub const DISPID_IWBSCRIPTCONTROL_SCROLLBAR = @as(u32, 7);
pub const DISPID_IWBSCRIPTCONTROL_VERSION = @as(u32, 8);
pub const DISPID_IWBSCRIPTCONTROL_VISIBILITY = @as(u32, 9);
pub const DISPID_IWBSCRIPTCONTROL_ONVISIBILITYCHANGE = @as(u32, 10);
pub const DISPID_DWEBBRIDGEEVENTS_ONSCRIPTLETEVENT = @as(u32, 1);
pub const DISPID_DWEBBRIDGEEVENTS_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_DWEBBRIDGEEVENTS_ONCLICK = @as(i32, -600);
pub const DISPID_DWEBBRIDGEEVENTS_ONDBLCLICK = @as(i32, -601);
pub const DISPID_DWEBBRIDGEEVENTS_ONKEYDOWN = @as(i32, -602);
pub const DISPID_DWEBBRIDGEEVENTS_ONKEYUP = @as(i32, -604);
pub const DISPID_DWEBBRIDGEEVENTS_ONKEYPRESS = @as(i32, -603);
pub const DISPID_DWEBBRIDGEEVENTS_ONMOUSEDOWN = @as(i32, -605);
pub const DISPID_DWEBBRIDGEEVENTS_ONMOUSEMOVE = @as(i32, -606);
pub const DISPID_DWEBBRIDGEEVENTS_ONMOUSEUP = @as(i32, -607);
pub const DISPID_IHTMLEMBEDELEMENT_HIDDEN = @as(u32, 68546);
pub const DISPID_IHTMLEMBEDELEMENT_PALETTE = @as(u32, 68540);
pub const DISPID_IHTMLEMBEDELEMENT_PLUGINSPAGE = @as(u32, 68541);
pub const DISPID_IHTMLEMBEDELEMENT_SRC = @as(u32, 68542);
pub const DISPID_IHTMLEMBEDELEMENT_UNITS = @as(u32, 68544);
pub const DISPID_IHTMLEMBEDELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLEMBEDELEMENT_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLEMBEDELEMENT_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLEMBEDELEMENT2_IE8_SRC = @as(u32, 1150);
pub const DISPID_IHTMLEMBEDELEMENT2_IE8_PLUGINSPAGE = @as(u32, 1151);
pub const DISPID_IHTMLAREASCOLLECTION_LENGTH = @as(u32, 1500);
pub const DISPID_IHTMLAREASCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLAREASCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLAREASCOLLECTION_TAGS = @as(u32, 1502);
pub const DISPID_IHTMLAREASCOLLECTION_ADD = @as(u32, 1503);
pub const DISPID_IHTMLAREASCOLLECTION_REMOVE = @as(u32, 1504);
pub const DISPID_IHTMLAREASCOLLECTION2_URNS = @as(u32, 1505);
pub const DISPID_IHTMLAREASCOLLECTION3_NAMEDITEM = @as(u32, 1506);
pub const DISPID_IHTMLAREASCOLLECTION4_IE8_LENGTH = @as(u32, 1150);
pub const DISPID_IHTMLAREASCOLLECTION4_IE8_ITEM = @as(u32, 1152);
pub const DISPID_IHTMLAREASCOLLECTION4_IE8_NAMEDITEM = @as(u32, 1153);
pub const DISPID_IHTMLMAPELEMENT_AREAS = @as(u32, 1002);
pub const DISPID_IHTMLMAPELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLAREAELEMENT_SHAPE = @as(u32, 1001);
pub const DISPID_IHTMLAREAELEMENT_COORDS = @as(u32, 1002);
pub const DISPID_IHTMLAREAELEMENT_HREF = @as(u32, 0);
pub const DISPID_IHTMLAREAELEMENT_TARGET = @as(u32, 1004);
pub const DISPID_IHTMLAREAELEMENT_ALT = @as(u32, 1005);
pub const DISPID_IHTMLAREAELEMENT_NOHREF = @as(u32, 1006);
pub const DISPID_IHTMLAREAELEMENT_HOST = @as(u32, 1007);
pub const DISPID_IHTMLAREAELEMENT_HOSTNAME = @as(u32, 1008);
pub const DISPID_IHTMLAREAELEMENT_PATHNAME = @as(u32, 1009);
pub const DISPID_IHTMLAREAELEMENT_PORT = @as(u32, 1010);
pub const DISPID_IHTMLAREAELEMENT_PROTOCOL = @as(u32, 1011);
pub const DISPID_IHTMLAREAELEMENT_SEARCH = @as(u32, 1012);
pub const DISPID_IHTMLAREAELEMENT_HASH = @as(u32, 1013);
pub const DISPID_IHTMLAREAELEMENT_ONBLUR = @as(u32, 71551);
pub const DISPID_IHTMLAREAELEMENT_ONFOCUS = @as(u32, 71550);
pub const DISPID_IHTMLAREAELEMENT_TABINDEX = @as(u32, 65551);
pub const DISPID_IHTMLAREAELEMENT_FOCUS = @as(u32, 67536);
pub const DISPID_IHTMLAREAELEMENT_BLUR = @as(u32, 67538);
pub const DISPID_IHTMLAREAELEMENT2_IE8_SHAPE = @as(u32, 1151);
pub const DISPID_IHTMLAREAELEMENT2_IE8_COORDS = @as(u32, 1152);
pub const DISPID_IHTMLAREAELEMENT2_IE8_HREF = @as(u32, 1153);
pub const DISPID_IHTMLTABLECAPTION_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLTABLECAPTION_VALIGN = @as(u32, 70567);
pub const DISPID_IHTMLCOMMENTELEMENT_TEXT = @as(u32, 1001);
pub const DISPID_IHTMLCOMMENTELEMENT_ATOMIC = @as(u32, 1002);
pub const DISPID_IHTMLCOMMENTELEMENT2_DATA = @as(u32, 1003);
pub const DISPID_IHTMLCOMMENTELEMENT2_LENGTH = @as(u32, 1004);
pub const DISPID_IHTMLCOMMENTELEMENT2_SUBSTRINGDATA = @as(u32, 1005);
pub const DISPID_IHTMLCOMMENTELEMENT2_APPENDDATA = @as(u32, 1006);
pub const DISPID_IHTMLCOMMENTELEMENT2_INSERTDATA = @as(u32, 1007);
pub const DISPID_IHTMLCOMMENTELEMENT2_DELETEDATA = @as(u32, 1008);
pub const DISPID_IHTMLCOMMENTELEMENT2_REPLACEDATA = @as(u32, 1009);
pub const DISPID_IHTMLCOMMENTELEMENT3_IE9_SUBSTRINGDATA = @as(u32, 1010);
pub const DISPID_IHTMLCOMMENTELEMENT3_IE9_INSERTDATA = @as(u32, 1011);
pub const DISPID_IHTMLCOMMENTELEMENT3_IE9_DELETEDATA = @as(u32, 1012);
pub const DISPID_IHTMLCOMMENTELEMENT3_IE9_REPLACEDATA = @as(u32, 1013);
pub const DISPID_IHTMLPHRASEELEMENT2_CITE = @as(u32, 1001);
pub const DISPID_IHTMLPHRASEELEMENT2_DATETIME = @as(u32, 1002);
pub const DISPID_IHTMLPHRASEELEMENT3_IE8_CITE = @as(u32, 1150);
pub const DISPID_IHTMLTABLE_COLS = @as(u32, 1001);
pub const DISPID_IHTMLTABLE_BORDER = @as(u32, 1002);
pub const DISPID_IHTMLTABLE_FRAME = @as(u32, 1004);
pub const DISPID_IHTMLTABLE_RULES = @as(u32, 1003);
pub const DISPID_IHTMLTABLE_CELLSPACING = @as(u32, 1005);
pub const DISPID_IHTMLTABLE_CELLPADDING = @as(u32, 1006);
pub const DISPID_IHTMLTABLE_BACKGROUND = @as(u32, 70537);
pub const DISPID_IHTMLTABLE_BGCOLOR = @as(i32, -501);
pub const DISPID_IHTMLTABLE_BORDERCOLOR = @as(u32, 70564);
pub const DISPID_IHTMLTABLE_BORDERCOLORLIGHT = @as(u32, 70565);
pub const DISPID_IHTMLTABLE_BORDERCOLORDARK = @as(u32, 70566);
pub const DISPID_IHTMLTABLE_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLTABLE_REFRESH = @as(u32, 1015);
pub const DISPID_IHTMLTABLE_ROWS = @as(u32, 1016);
pub const DISPID_IHTMLTABLE_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLTABLE_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLTABLE_DATAPAGESIZE = @as(u32, 1017);
pub const DISPID_IHTMLTABLE_NEXTPAGE = @as(u32, 1018);
pub const DISPID_IHTMLTABLE_PREVIOUSPAGE = @as(u32, 1019);
pub const DISPID_IHTMLTABLE_THEAD = @as(u32, 1020);
pub const DISPID_IHTMLTABLE_TFOOT = @as(u32, 1021);
pub const DISPID_IHTMLTABLE_TBODIES = @as(u32, 1024);
pub const DISPID_IHTMLTABLE_CAPTION = @as(u32, 1025);
pub const DISPID_IHTMLTABLE_CREATETHEAD = @as(u32, 1026);
pub const DISPID_IHTMLTABLE_DELETETHEAD = @as(u32, 1027);
pub const DISPID_IHTMLTABLE_CREATETFOOT = @as(u32, 1028);
pub const DISPID_IHTMLTABLE_DELETETFOOT = @as(u32, 1029);
pub const DISPID_IHTMLTABLE_CREATECAPTION = @as(u32, 1030);
pub const DISPID_IHTMLTABLE_DELETECAPTION = @as(u32, 1031);
pub const DISPID_IHTMLTABLE_INSERTROW = @as(u32, 1032);
pub const DISPID_IHTMLTABLE_DELETEROW = @as(u32, 1033);
pub const DISPID_IHTMLTABLE_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLTABLE_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLTABLE2_FIRSTPAGE = @as(u32, 1035);
pub const DISPID_IHTMLTABLE2_LASTPAGE = @as(u32, 1036);
pub const DISPID_IHTMLTABLE2_CELLS = @as(u32, 1037);
pub const DISPID_IHTMLTABLE2_MOVEROW = @as(u32, 1038);
pub const DISPID_IHTMLTABLE3_SUMMARY = @as(u32, 1039);
pub const DISPID_IHTMLTABLE4_IE9_THEAD = @as(u32, 1040);
pub const DISPID_IHTMLTABLE4_IE9_TFOOT = @as(u32, 1041);
pub const DISPID_IHTMLTABLE4_IE9_CAPTION = @as(u32, 1042);
pub const DISPID_IHTMLTABLE4_IE9_INSERTROW = @as(u32, 1043);
pub const DISPID_IHTMLTABLE4_IE9_DELETEROW = @as(u32, 1044);
pub const DISPID_IHTMLTABLE4_CREATETBODY = @as(u32, 1045);
pub const DISPID_IHTMLTABLECOL_SPAN = @as(u32, 1001);
pub const DISPID_IHTMLTABLECOL_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLTABLECOL_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLTABLECOL_VALIGN = @as(u32, 70567);
pub const DISPID_IHTMLTABLECOL2_CH = @as(u32, 1002);
pub const DISPID_IHTMLTABLECOL2_CHOFF = @as(u32, 1003);
pub const DISPID_IHTMLTABLECOL3_IE9_CH = @as(u32, 1004);
pub const DISPID_IHTMLTABLECOL3_IE9_CHOFF = @as(u32, 1005);
pub const DISPID_IHTMLTABLESECTION_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLTABLESECTION_VALIGN = @as(u32, 70567);
pub const DISPID_IHTMLTABLESECTION_BGCOLOR = @as(i32, -501);
pub const DISPID_IHTMLTABLESECTION_ROWS = @as(u32, 1000);
pub const DISPID_IHTMLTABLESECTION_INSERTROW = @as(u32, 1001);
pub const DISPID_IHTMLTABLESECTION_DELETEROW = @as(u32, 1002);
pub const DISPID_IHTMLTABLESECTION2_MOVEROW = @as(u32, 1003);
pub const DISPID_IHTMLTABLESECTION3_CH = @as(u32, 1004);
pub const DISPID_IHTMLTABLESECTION3_CHOFF = @as(u32, 1005);
pub const DISPID_IHTMLTABLESECTION4_IE9_CH = @as(u32, 1006);
pub const DISPID_IHTMLTABLESECTION4_IE9_CHOFF = @as(u32, 1007);
pub const DISPID_IHTMLTABLESECTION4_IE9_INSERTROW = @as(u32, 1008);
pub const DISPID_IHTMLTABLESECTION4_IE9_DELETEROW = @as(u32, 1009);
pub const DISPID_IHTMLTABLEROW_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLTABLEROW_VALIGN = @as(u32, 70567);
pub const DISPID_IHTMLTABLEROW_BGCOLOR = @as(i32, -501);
pub const DISPID_IHTMLTABLEROW_BORDERCOLOR = @as(u32, 70564);
pub const DISPID_IHTMLTABLEROW_BORDERCOLORLIGHT = @as(u32, 70565);
pub const DISPID_IHTMLTABLEROW_BORDERCOLORDARK = @as(u32, 70566);
pub const DISPID_IHTMLTABLEROW_ROWINDEX = @as(u32, 1000);
pub const DISPID_IHTMLTABLEROW_SECTIONROWINDEX = @as(u32, 1001);
pub const DISPID_IHTMLTABLEROW_CELLS = @as(u32, 1002);
pub const DISPID_IHTMLTABLEROW_INSERTCELL = @as(u32, 1003);
pub const DISPID_IHTMLTABLEROW_DELETECELL = @as(u32, 1004);
pub const DISPID_IHTMLTABLEROW2_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLTABLEROW3_CH = @as(u32, 1009);
pub const DISPID_IHTMLTABLEROW3_CHOFF = @as(u32, 1010);
pub const DISPID_IHTMLTABLEROW4_IE9_CH = @as(u32, 1011);
pub const DISPID_IHTMLTABLEROW4_IE9_CHOFF = @as(u32, 1012);
pub const DISPID_IHTMLTABLEROW4_IE9_INSERTCELL = @as(u32, 1013);
pub const DISPID_IHTMLTABLEROW4_IE9_DELETECELL = @as(u32, 1014);
pub const DISPID_IHTMLTABLEROWMETRICS_CLIENTHEIGHT = @as(u32, 67555);
pub const DISPID_IHTMLTABLEROWMETRICS_CLIENTWIDTH = @as(u32, 67556);
pub const DISPID_IHTMLTABLEROWMETRICS_CLIENTTOP = @as(u32, 67557);
pub const DISPID_IHTMLTABLEROWMETRICS_CLIENTLEFT = @as(u32, 67558);
pub const DISPID_IHTMLTABLECELL_ROWSPAN = @as(u32, 2001);
pub const DISPID_IHTMLTABLECELL_COLSPAN = @as(u32, 2002);
pub const DISPID_IHTMLTABLECELL_ALIGN = @as(u32, 65608);
pub const DISPID_IHTMLTABLECELL_VALIGN = @as(u32, 70567);
pub const DISPID_IHTMLTABLECELL_BGCOLOR = @as(i32, -501);
pub const DISPID_IHTMLTABLECELL_NOWRAP = @as(u32, 70541);
pub const DISPID_IHTMLTABLECELL_BACKGROUND = @as(u32, 70537);
pub const DISPID_IHTMLTABLECELL_BORDERCOLOR = @as(u32, 70564);
pub const DISPID_IHTMLTABLECELL_BORDERCOLORLIGHT = @as(u32, 70565);
pub const DISPID_IHTMLTABLECELL_BORDERCOLORDARK = @as(u32, 70566);
pub const DISPID_IHTMLTABLECELL_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLTABLECELL_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLTABLECELL_CELLINDEX = @as(u32, 2003);
pub const DISPID_IHTMLTABLECELL2_ABBR = @as(u32, 2004);
pub const DISPID_IHTMLTABLECELL2_AXIS = @as(u32, 2005);
pub const DISPID_IHTMLTABLECELL2_CH = @as(u32, 2006);
pub const DISPID_IHTMLTABLECELL2_CHOFF = @as(u32, 2007);
pub const DISPID_IHTMLTABLECELL2_HEADERS = @as(u32, 2008);
pub const DISPID_IHTMLTABLECELL2_SCOPE = @as(u32, 2009);
pub const DISPID_IHTMLTABLECELL3_IE9_CH = @as(u32, 2010);
pub const DISPID_IHTMLTABLECELL3_IE9_CHOFF = @as(u32, 2011);
pub const DISPID_IHTMLSCRIPTELEMENT_SRC = @as(u32, 1001);
pub const DISPID_IHTMLSCRIPTELEMENT_HTMLFOR = @as(u32, 1004);
pub const DISPID_IHTMLSCRIPTELEMENT_EVENT = @as(u32, 1005);
pub const DISPID_IHTMLSCRIPTELEMENT_TEXT = @as(u32, 1006);
pub const DISPID_IHTMLSCRIPTELEMENT_DEFER = @as(u32, 1007);
pub const DISPID_IHTMLSCRIPTELEMENT_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLSCRIPTELEMENT_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLSCRIPTELEMENT_TYPE = @as(u32, 1009);
pub const DISPID_IHTMLSCRIPTELEMENT2_CHARSET = @as(u32, 1010);
pub const DISPID_IHTMLSCRIPTELEMENT3_IE8_SRC = @as(u32, 1150);
pub const DISPID_IHTMLSCRIPTELEMENT4_USEDCHARSET = @as(u32, 1011);
pub const DISPID_HTMLSCRIPTEVENTS2_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLSCRIPTEVENTS_ONERROR = @as(u32, 1002);
pub const DISPID_IHTMLOBJECTELEMENT_OBJECT = @as(u32, 68537);
pub const DISPID_IHTMLOBJECTELEMENT_CLASSID = @as(u32, 68538);
pub const DISPID_IHTMLOBJECTELEMENT_DATA = @as(u32, 68539);
pub const DISPID_IHTMLOBJECTELEMENT_RECORDSET = @as(u32, 68541);
pub const DISPID_IHTMLOBJECTELEMENT_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLOBJECTELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLOBJECTELEMENT_CODEBASE = @as(u32, 68542);
pub const DISPID_IHTMLOBJECTELEMENT_CODETYPE = @as(u32, 68543);
pub const DISPID_IHTMLOBJECTELEMENT_CODE = @as(u32, 68544);
pub const DISPID_IHTMLOBJECTELEMENT_BASEHREF = @as(u32, 65538);
pub const DISPID_IHTMLOBJECTELEMENT_TYPE = @as(u32, 68545);
pub const DISPID_IHTMLOBJECTELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IHTMLOBJECTELEMENT_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLOBJECTELEMENT_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLOBJECTELEMENT_READYSTATE = @as(u32, 68546);
pub const DISPID_IHTMLOBJECTELEMENT_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLOBJECTELEMENT_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLOBJECTELEMENT_ALTHTML = @as(u32, 68547);
pub const DISPID_IHTMLOBJECTELEMENT_VSPACE = @as(u32, 68548);
pub const DISPID_IHTMLOBJECTELEMENT_HSPACE = @as(u32, 68549);
pub const DISPID_IHTMLOBJECTELEMENT2_NAMEDRECORDSET = @as(u32, 68550);
pub const DISPID_IHTMLOBJECTELEMENT2_CLASSID = @as(u32, 68538);
pub const DISPID_IHTMLOBJECTELEMENT2_DATA = @as(u32, 68539);
pub const DISPID_IHTMLOBJECTELEMENT3_ARCHIVE = @as(u32, 68551);
pub const DISPID_IHTMLOBJECTELEMENT3_ALT = @as(u32, 68552);
pub const DISPID_IHTMLOBJECTELEMENT3_DECLARE = @as(u32, 68553);
pub const DISPID_IHTMLOBJECTELEMENT3_STANDBY = @as(u32, 68554);
pub const DISPID_IHTMLOBJECTELEMENT3_BORDER = @as(u32, 68555);
pub const DISPID_IHTMLOBJECTELEMENT3_USEMAP = @as(u32, 68556);
pub const DISPID_IHTMLOBJECTELEMENT4_CONTENTDOCUMENT = @as(u32, 68566);
pub const DISPID_IHTMLOBJECTELEMENT4_IE8_CODEBASE = @as(u32, 68567);
pub const DISPID_IHTMLOBJECTELEMENT4_IE8_DATA = @as(u32, 68568);
pub const DISPID_IHTMLOBJECTELEMENT5_IE9_OBJECT = @as(u32, 68569);
pub const DISPID_IHTMLPARAMELEMENT_NAME = @as(u32, 1001);
pub const DISPID_IHTMLPARAMELEMENT_VALUE = @as(u32, 1002);
pub const DISPID_IHTMLPARAMELEMENT_TYPE = @as(u32, 1003);
pub const DISPID_IHTMLPARAMELEMENT_VALUETYPE = @as(u32, 1004);
pub const DISPID_IHTMLPARAMELEMENT2_NAME = @as(u32, 1001);
pub const DISPID_IHTMLPARAMELEMENT2_TYPE = @as(u32, 1003);
pub const DISPID_IHTMLPARAMELEMENT2_VALUE = @as(u32, 1002);
pub const DISPID_IHTMLPARAMELEMENT2_IE8_VALUETYPE = @as(u32, 1150);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONBEFOREUPDATE = @as(u32, 65540);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONAFTERUPDATE = @as(u32, 65541);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONERRORUPDATE = @as(u32, 65549);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWEXIT = @as(u32, 65542);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWENTER = @as(u32, 65543);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCHANGED = @as(u32, 65550);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATAAVAILABLE = @as(u32, 65551);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCOMPLETE = @as(u32, 65552);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONERROR = @as(u32, 65555);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSDELETE = @as(u32, 65568);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSINSERTED = @as(u32, 65569);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONCELLCHANGE = @as(u32, 65570);
pub const DISPID_HTMLOBJECTELEMENTEVENTS2_ONREADYSTATECHANGE = @as(u32, 65556);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONBEFOREUPDATE = @as(u32, 65540);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONAFTERUPDATE = @as(u32, 65541);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONERRORUPDATE = @as(u32, 65549);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONROWEXIT = @as(u32, 65542);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONROWENTER = @as(u32, 65543);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCHANGED = @as(u32, 65550);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONDATAAVAILABLE = @as(u32, 65551);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCOMPLETE = @as(u32, 65552);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONERROR = @as(u32, 65555);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSDELETE = @as(u32, 65568);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSINSERTED = @as(u32, 65569);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONCELLCHANGE = @as(u32, 65570);
pub const DISPID_HTMLOBJECTELEMENTEVENTS_ONREADYSTATECHANGE = @as(u32, 65556);
pub const DISPID_IHTMLFRAMEBASE_SRC = @as(u32, 68536);
pub const DISPID_IHTMLFRAMEBASE_NAME = @as(u32, 65536);
pub const DISPID_IHTMLFRAMEBASE_BORDER = @as(u32, 68538);
pub const DISPID_IHTMLFRAMEBASE_FRAMEBORDER = @as(u32, 68539);
pub const DISPID_IHTMLFRAMEBASE_FRAMESPACING = @as(u32, 68540);
pub const DISPID_IHTMLFRAMEBASE_MARGINWIDTH = @as(u32, 68541);
pub const DISPID_IHTMLFRAMEBASE_MARGINHEIGHT = @as(u32, 68542);
pub const DISPID_IHTMLFRAMEBASE_NORESIZE = @as(u32, 68543);
pub const DISPID_IHTMLFRAMEBASE_SCROLLING = @as(u32, 68544);
pub const DISPID_IHTMLFRAMEBASE2_CONTENTWINDOW = @as(u32, 68545);
pub const DISPID_IHTMLFRAMEBASE2_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLFRAMEBASE2_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLFRAMEBASE2_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLFRAMEBASE2_ALLOWTRANSPARENCY = @as(u32, 70742);
pub const DISPID_IHTMLFRAMEBASE3_LONGDESC = @as(u32, 68546);
pub const DISPID_HTMLFRAMESITEEVENTS2_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLFRAMESITEEVENTS_ONLOAD = @as(u32, 1003);
pub const DISPID_IHTMLFRAMEELEMENT_BORDERCOLOR = @as(u32, 69537);
pub const DISPID_IHTMLFRAMEELEMENT2_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLFRAMEELEMENT2_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLFRAMEELEMENT3_CONTENTDOCUMENT = @as(u32, 69656);
pub const DISPID_IHTMLFRAMEELEMENT3_IE8_SRC = @as(u32, 69657);
pub const DISPID_IHTMLFRAMEELEMENT3_IE8_LONGDESC = @as(u32, 69658);
pub const DISPID_IHTMLFRAMEELEMENT3_IE8_FRAMEBORDER = @as(u32, 69659);
pub const DISPID_IHTMLIFRAMEELEMENT_VSPACE = @as(u32, 69537);
pub const DISPID_IHTMLIFRAMEELEMENT_HSPACE = @as(u32, 69538);
pub const DISPID_IHTMLIFRAMEELEMENT_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLIFRAMEELEMENT2_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLIFRAMEELEMENT2_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLIFRAMEELEMENT3_CONTENTDOCUMENT = @as(u32, 69656);
pub const DISPID_IHTMLIFRAMEELEMENT3_IE8_SRC = @as(u32, 69657);
pub const DISPID_IHTMLIFRAMEELEMENT3_IE8_LONGDESC = @as(u32, 69658);
pub const DISPID_IHTMLIFRAMEELEMENT3_IE8_FRAMEBORDER = @as(u32, 69659);
pub const DISPID_IHTMLDIVPOSITION_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLFIELDSETELEMENT_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLFIELDSETELEMENT2_FORM = @as(u32, 67540);
pub const DISPID_IHTMLLEGENDELEMENT_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLLEGENDELEMENT2_FORM = @as(u32, 67540);
pub const DISPID_IHTMLSPANFLOW_ALIGN = @as(u32, 65609);
pub const DISPID_IHTMLFRAMESETELEMENT_ROWS = @as(u32, 1000);
pub const DISPID_IHTMLFRAMESETELEMENT_COLS = @as(u32, 1001);
pub const DISPID_IHTMLFRAMESETELEMENT_BORDER = @as(u32, 1002);
pub const DISPID_IHTMLFRAMESETELEMENT_BORDERCOLOR = @as(u32, 1003);
pub const DISPID_IHTMLFRAMESETELEMENT_FRAMEBORDER = @as(u32, 1004);
pub const DISPID_IHTMLFRAMESETELEMENT_FRAMESPACING = @as(u32, 1005);
pub const DISPID_IHTMLFRAMESETELEMENT_NAME = @as(u32, 65536);
pub const DISPID_IHTMLFRAMESETELEMENT_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLFRAMESETELEMENT_ONUNLOAD = @as(u32, 71569);
pub const DISPID_IHTMLFRAMESETELEMENT_ONBEFOREUNLOAD = @as(u32, 71575);
pub const DISPID_IHTMLFRAMESETELEMENT2_ONBEFOREPRINT = @as(u32, 71602);
pub const DISPID_IHTMLFRAMESETELEMENT2_ONAFTERPRINT = @as(u32, 71603);
pub const DISPID_IHTMLFRAMESETELEMENT3_ONHASHCHANGE = @as(u32, 71645);
pub const DISPID_IHTMLFRAMESETELEMENT3_ONMESSAGE = @as(u32, 71646);
pub const DISPID_IHTMLFRAMESETELEMENT3_ONOFFLINE = @as(u32, 71644);
pub const DISPID_IHTMLFRAMESETELEMENT3_ONONLINE = @as(u32, 71643);
pub const DISPID_IHTMLFRAMESETELEMENT3_ONSTORAGE = @as(u32, 71636);
pub const DISPID_IHTMLBGSOUND_SRC = @as(u32, 1001);
pub const DISPID_IHTMLBGSOUND_LOOP = @as(u32, 1002);
pub const DISPID_IHTMLBGSOUND_VOLUME = @as(u32, 1003);
pub const DISPID_IHTMLBGSOUND_BALANCE = @as(u32, 1004);
pub const DISPID_IHTMLFONTNAMESCOLLECTION_LENGTH = @as(u32, 1501);
pub const DISPID_IHTMLFONTNAMESCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLFONTNAMESCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLFONTSIZESCOLLECTION_LENGTH = @as(u32, 1502);
pub const DISPID_IHTMLFONTSIZESCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLFONTSIZESCOLLECTION_FORFONT = @as(u32, 1503);
pub const DISPID_IHTMLFONTSIZESCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLOPTIONSHOLDER_DOCUMENT = @as(u32, 1503);
pub const DISPID_IHTMLOPTIONSHOLDER_FONTS = @as(u32, 1504);
pub const DISPID_IHTMLOPTIONSHOLDER_EXECARG = @as(u32, 1505);
pub const DISPID_IHTMLOPTIONSHOLDER_ERRORLINE = @as(u32, 1506);
pub const DISPID_IHTMLOPTIONSHOLDER_ERRORCHARACTER = @as(u32, 1507);
pub const DISPID_IHTMLOPTIONSHOLDER_ERRORCODE = @as(u32, 1508);
pub const DISPID_IHTMLOPTIONSHOLDER_ERRORMESSAGE = @as(u32, 1509);
pub const DISPID_IHTMLOPTIONSHOLDER_ERRORDEBUG = @as(u32, 1510);
pub const DISPID_IHTMLOPTIONSHOLDER_UNSECUREDWINDOWOFDOCUMENT = @as(u32, 1511);
pub const DISPID_IHTMLOPTIONSHOLDER_FINDTEXT = @as(u32, 1512);
pub const DISPID_IHTMLOPTIONSHOLDER_ANYTHINGAFTERFRAMESET = @as(u32, 1513);
pub const DISPID_IHTMLOPTIONSHOLDER_SIZES = @as(u32, 1514);
pub const DISPID_IHTMLOPTIONSHOLDER_OPENFILEDLG = @as(u32, 1515);
pub const DISPID_IHTMLOPTIONSHOLDER_SAVEFILEDLG = @as(u32, 1516);
pub const DISPID_IHTMLOPTIONSHOLDER_CHOOSECOLORDLG = @as(u32, 1517);
pub const DISPID_IHTMLOPTIONSHOLDER_SHOWSECURITYINFO = @as(u32, 1518);
pub const DISPID_IHTMLOPTIONSHOLDER_ISAPARTMENTMODEL = @as(u32, 1519);
pub const DISPID_IHTMLOPTIONSHOLDER_GETCHARSET = @as(u32, 1520);
pub const DISPID_IHTMLOPTIONSHOLDER_SECURECONNECTIONINFO = @as(u32, 1521);
pub const DISPID_IHTMLSTYLEELEMENT_TYPE = @as(u32, 1002);
pub const DISPID_IHTMLSTYLEELEMENT_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLSTYLEELEMENT_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLSTYLEELEMENT_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLSTYLEELEMENT_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLSTYLEELEMENT_STYLESHEET = @as(u32, 1004);
pub const DISPID_IHTMLSTYLEELEMENT_DISABLED = @as(u32, 65612);
pub const DISPID_IHTMLSTYLEELEMENT_MEDIA = @as(u32, 1006);
pub const DISPID_IHTMLSTYLEELEMENT2_SHEET = @as(u32, 1007);
pub const DISPID_HTMLSTYLEELEMENTEVENTS2_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLSTYLEELEMENTEVENTS2_ONERROR = @as(u32, 1002);
pub const DISPID_HTMLSTYLEELEMENTEVENTS_ONLOAD = @as(u32, 1003);
pub const DISPID_HTMLSTYLEELEMENTEVENTS_ONERROR = @as(u32, 1002);
pub const DISPID_IHTMLSTYLEFONTFACE_FONTSRC = @as(u32, 70633);
pub const DISPID_IHTMLSTYLEFONTFACE2_STYLE = @as(u32, 65610);
pub const DISPID_IHTMLXDOMAINREQUEST_RESPONSETEXT = @as(u32, 1003);
pub const DISPID_IHTMLXDOMAINREQUEST_TIMEOUT = @as(u32, 1004);
pub const DISPID_IHTMLXDOMAINREQUEST_CONTENTTYPE = @as(u32, 1005);
pub const DISPID_IHTMLXDOMAINREQUEST_ONPROGRESS = @as(u32, 1006);
pub const DISPID_IHTMLXDOMAINREQUEST_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLXDOMAINREQUEST_ONTIMEOUT = @as(u32, 71648);
pub const DISPID_IHTMLXDOMAINREQUEST_ONLOAD = @as(u32, 71568);
pub const DISPID_IHTMLXDOMAINREQUEST_ABORT = @as(u32, 1010);
pub const DISPID_IHTMLXDOMAINREQUEST_OPEN = @as(u32, 1011);
pub const DISPID_IHTMLXDOMAINREQUEST_SEND = @as(u32, 1012);
pub const DISPID_IHTMLXDOMAINREQUESTFACTORY_CREATE = @as(u32, 0);
pub const DISPID_IHTMLSTORAGE_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLSTORAGE_REMAININGSPACE = @as(u32, 1002);
pub const DISPID_IHTMLSTORAGE_KEY = @as(u32, 1006);
pub const DISPID_IHTMLSTORAGE_GETITEM = @as(u32, 1003);
pub const DISPID_IHTMLSTORAGE_SETITEM = @as(u32, 1004);
pub const DISPID_IHTMLSTORAGE_REMOVEITEM = @as(u32, 1005);
pub const DISPID_IHTMLSTORAGE_CLEAR = @as(u32, 1007);
pub const DISPID_IHTMLSTORAGE2_IE9_SETITEM = @as(u32, 1008);
pub const DISPID_IEVENTTARGET_ADDEVENTLISTENER = @as(u32, 66046);
pub const DISPID_IEVENTTARGET_REMOVEEVENTLISTENER = @as(u32, 66047);
pub const DISPID_IEVENTTARGET_DISPATCHEVENT = @as(u32, 66048);
pub const DISPID_IDOMEVENT_BUBBLES = @as(u32, 1001);
pub const DISPID_IDOMEVENT_CANCELABLE = @as(u32, 1002);
pub const DISPID_IDOMEVENT_CURRENTTARGET = @as(u32, 1003);
pub const DISPID_IDOMEVENT_DEFAULTPREVENTED = @as(u32, 1004);
pub const DISPID_IDOMEVENT_EVENTPHASE = @as(u32, 1005);
pub const DISPID_IDOMEVENT_TARGET = @as(u32, 1006);
pub const DISPID_IDOMEVENT_TIMESTAMP = @as(u32, 1007);
pub const DISPID_IDOMEVENT_TYPE = @as(u32, 1008);
pub const DISPID_IDOMEVENT_INITEVENT = @as(u32, 1009);
pub const DISPID_IDOMEVENT_PREVENTDEFAULT = @as(u32, 1010);
pub const DISPID_IDOMEVENT_STOPPROPAGATION = @as(u32, 1011);
pub const DISPID_IDOMEVENT_STOPIMMEDIATEPROPAGATION = @as(u32, 1012);
pub const DISPID_IDOMEVENT_ISTRUSTED = @as(u32, 1013);
pub const DISPID_IDOMEVENT_CANCELBUBBLE = @as(u32, 1014);
pub const DISPID_IDOMEVENT_SRCELEMENT = @as(u32, 1015);
pub const DISPID_IDOMUIEVENT_VIEW = @as(u32, 1026);
pub const DISPID_IDOMUIEVENT_DETAIL = @as(u32, 1027);
pub const DISPID_IDOMUIEVENT_INITUIEVENT = @as(u32, 1028);
pub const DISPID_IDOMMOUSEEVENT_SCREENX = @as(u32, 1051);
pub const DISPID_IDOMMOUSEEVENT_SCREENY = @as(u32, 1052);
pub const DISPID_IDOMMOUSEEVENT_CLIENTX = @as(u32, 1053);
pub const DISPID_IDOMMOUSEEVENT_CLIENTY = @as(u32, 1054);
pub const DISPID_IDOMMOUSEEVENT_CTRLKEY = @as(u32, 1055);
pub const DISPID_IDOMMOUSEEVENT_SHIFTKEY = @as(u32, 1056);
pub const DISPID_IDOMMOUSEEVENT_ALTKEY = @as(u32, 1057);
pub const DISPID_IDOMMOUSEEVENT_METAKEY = @as(u32, 1058);
pub const DISPID_IDOMMOUSEEVENT_BUTTON = @as(u32, 1059);
pub const DISPID_IDOMMOUSEEVENT_RELATEDTARGET = @as(u32, 1060);
pub const DISPID_IDOMMOUSEEVENT_INITMOUSEEVENT = @as(u32, 1061);
pub const DISPID_IDOMMOUSEEVENT_GETMODIFIERSTATE = @as(u32, 1062);
pub const DISPID_IDOMMOUSEEVENT_BUTTONS = @as(u32, 1063);
pub const DISPID_IDOMMOUSEEVENT_FROMELEMENT = @as(u32, 1064);
pub const DISPID_IDOMMOUSEEVENT_TOELEMENT = @as(u32, 1065);
pub const DISPID_IDOMMOUSEEVENT_X = @as(u32, 1066);
pub const DISPID_IDOMMOUSEEVENT_Y = @as(u32, 1067);
pub const DISPID_IDOMMOUSEEVENT_OFFSETX = @as(u32, 1068);
pub const DISPID_IDOMMOUSEEVENT_OFFSETY = @as(u32, 1069);
pub const DISPID_IDOMMOUSEEVENT_PAGEX = @as(u32, 1070);
pub const DISPID_IDOMMOUSEEVENT_PAGEY = @as(u32, 1071);
pub const DISPID_IDOMMOUSEEVENT_LAYERX = @as(u32, 1072);
pub const DISPID_IDOMMOUSEEVENT_LAYERY = @as(u32, 1073);
pub const DISPID_IDOMMOUSEEVENT_WHICH = @as(u32, 1074);
pub const DISPID_IDOMDRAGEVENT_DATATRANSFER = @as(u32, 1401);
pub const DISPID_IDOMDRAGEVENT_INITDRAGEVENT = @as(u32, 1402);
pub const DISPID_IDOMMOUSEWHEELEVENT_WHEELDELTA = @as(u32, 1076);
pub const DISPID_IDOMMOUSEWHEELEVENT_INITMOUSEWHEELEVENT = @as(u32, 1077);
pub const DISPID_IDOMWHEELEVENT_DELTAX = @as(u32, 1101);
pub const DISPID_IDOMWHEELEVENT_DELTAY = @as(u32, 1102);
pub const DISPID_IDOMWHEELEVENT_DELTAZ = @as(u32, 1103);
pub const DISPID_IDOMWHEELEVENT_DELTAMODE = @as(u32, 1104);
pub const DISPID_IDOMWHEELEVENT_INITWHEELEVENT = @as(u32, 1105);
pub const DISPID_IDOMTEXTEVENT_DATA = @as(u32, 1126);
pub const DISPID_IDOMTEXTEVENT_INPUTMETHOD = @as(u32, 1127);
pub const DISPID_IDOMTEXTEVENT_INITTEXTEVENT = @as(u32, 1128);
pub const DISPID_IDOMTEXTEVENT_LOCALE = @as(u32, 1129);
pub const DISPID_IDOMKEYBOARDEVENT_KEY = @as(u32, 1151);
pub const DISPID_IDOMKEYBOARDEVENT_LOCATION = @as(u32, 1152);
pub const DISPID_IDOMKEYBOARDEVENT_CTRLKEY = @as(u32, 1153);
pub const DISPID_IDOMKEYBOARDEVENT_SHIFTKEY = @as(u32, 1154);
pub const DISPID_IDOMKEYBOARDEVENT_ALTKEY = @as(u32, 1155);
pub const DISPID_IDOMKEYBOARDEVENT_METAKEY = @as(u32, 1156);
pub const DISPID_IDOMKEYBOARDEVENT_REPEAT = @as(u32, 1157);
pub const DISPID_IDOMKEYBOARDEVENT_GETMODIFIERSTATE = @as(u32, 1158);
pub const DISPID_IDOMKEYBOARDEVENT_INITKEYBOARDEVENT = @as(u32, 1159);
pub const DISPID_IDOMKEYBOARDEVENT_KEYCODE = @as(u32, 1160);
pub const DISPID_IDOMKEYBOARDEVENT_CHARCODE = @as(u32, 1161);
pub const DISPID_IDOMKEYBOARDEVENT_WHICH = @as(u32, 1162);
pub const DISPID_IDOMKEYBOARDEVENT_IE9_CHAR = @as(u32, 1163);
pub const DISPID_IDOMKEYBOARDEVENT_LOCALE = @as(u32, 1164);
pub const DISPID_IDOMCOMPOSITIONEVENT_DATA = @as(u32, 1176);
pub const DISPID_IDOMCOMPOSITIONEVENT_INITCOMPOSITIONEVENT = @as(u32, 1177);
pub const DISPID_IDOMCOMPOSITIONEVENT_LOCALE = @as(u32, 1178);
pub const DISPID_IDOMMUTATIONEVENT_RELATEDNODE = @as(u32, 1226);
pub const DISPID_IDOMMUTATIONEVENT_PREVVALUE = @as(u32, 1227);
pub const DISPID_IDOMMUTATIONEVENT_NEWVALUE = @as(u32, 1228);
pub const DISPID_IDOMMUTATIONEVENT_ATTRNAME = @as(u32, 1229);
pub const DISPID_IDOMMUTATIONEVENT_ATTRCHANGE = @as(u32, 1230);
pub const DISPID_IDOMMUTATIONEVENT_INITMUTATIONEVENT = @as(u32, 1231);
pub const DISPID_IDOMBEFOREUNLOADEVENT_RETURNVALUE = @as(u32, 1376);
pub const DISPID_IDOMFOCUSEVENT_RELATEDTARGET = @as(u32, 1251);
pub const DISPID_IDOMFOCUSEVENT_INITFOCUSEVENT = @as(u32, 1252);
pub const DISPID_IDOMCUSTOMEVENT_DETAIL = @as(u32, 1201);
pub const DISPID_IDOMCUSTOMEVENT_INITCUSTOMEVENT = @as(u32, 1202);
pub const DISPID_ICANVASGRADIENT_ADDCOLORSTOP = @as(u32, 1000);
pub const DISPID_ICANVASTEXTMETRICS_WIDTH = @as(u32, 1000);
pub const DISPID_ICANVASIMAGEDATA_WIDTH = @as(u32, 1000);
pub const DISPID_ICANVASIMAGEDATA_HEIGHT = @as(u32, 1001);
pub const DISPID_ICANVASIMAGEDATA_DATA = @as(u32, 1002);
pub const DISPID_ICANVASPIXELARRAY_LENGTH = @as(u32, 1000);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_CANVAS = @as(u32, 1000);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_RESTORE = @as(u32, 1001);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_SAVE = @as(u32, 1002);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_ROTATE = @as(u32, 1003);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_SCALE = @as(u32, 1004);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_SETTRANSFORM = @as(u32, 1005);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_TRANSFORM = @as(u32, 1006);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_TRANSLATE = @as(u32, 1007);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALALPHA = @as(u32, 1008);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALCOMPOSITEOPERATION = @as(u32, 1009);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_FILLSTYLE = @as(u32, 1010);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_STROKESTYLE = @as(u32, 1011);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_CREATELINEARGRADIENT = @as(u32, 1012);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_CREATERADIALGRADIENT = @as(u32, 1013);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_CREATEPATTERN = @as(u32, 1014);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_LINECAP = @as(u32, 1015);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_LINEJOIN = @as(u32, 1016);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_LINEWIDTH = @as(u32, 1017);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_MITERLIMIT = @as(u32, 1018);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWBLUR = @as(u32, 1019);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWCOLOR = @as(u32, 1020);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETX = @as(u32, 1021);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETY = @as(u32, 1022);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_CLEARRECT = @as(u32, 1023);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_FILLRECT = @as(u32, 1024);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_STROKERECT = @as(u32, 1025);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_ARC = @as(u32, 1026);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_ARCTO = @as(u32, 1027);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_BEGINPATH = @as(u32, 1028);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_BEZIERCURVETO = @as(u32, 1029);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_CLIP = @as(u32, 1030);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_CLOSEPATH = @as(u32, 1031);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_FILL = @as(u32, 1032);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_LINETO = @as(u32, 1033);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_MOVETO = @as(u32, 1034);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_QUADRATICCURVETO = @as(u32, 1035);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_RECT = @as(u32, 1036);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_STROKE = @as(u32, 1037);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_ISPOINTINPATH = @as(u32, 1038);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_FONT = @as(u32, 1039);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_TEXTALIGN = @as(u32, 1040);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_TEXTBASELINE = @as(u32, 1041);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_FILLTEXT = @as(u32, 1042);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_MEASURETEXT = @as(u32, 1043);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_STROKETEXT = @as(u32, 1044);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_DRAWIMAGE = @as(u32, 1045);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_CREATEIMAGEDATA = @as(u32, 1046);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_GETIMAGEDATA = @as(u32, 1047);
pub const DISPID_ICANVASRENDERINGCONTEXT2D_PUTIMAGEDATA = @as(u32, 1048);
pub const DISPID_IHTMLCANVASELEMENT_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLCANVASELEMENT_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLCANVASELEMENT_GETCONTEXT = @as(u32, 1001);
pub const DISPID_IHTMLCANVASELEMENT_TODATAURL = @as(u32, 1002);
pub const DISPID_IDOMPROGRESSEVENT_LENGTHCOMPUTABLE = @as(u32, 1551);
pub const DISPID_IDOMPROGRESSEVENT_LOADED = @as(u32, 1552);
pub const DISPID_IDOMPROGRESSEVENT_TOTAL = @as(u32, 1553);
pub const DISPID_IDOMPROGRESSEVENT_INITPROGRESSEVENT = @as(u32, 1554);
pub const DISPID_IDOMMESSAGEEVENT_DATA = @as(u32, 1326);
pub const DISPID_IDOMMESSAGEEVENT_ORIGIN = @as(u32, 1327);
pub const DISPID_IDOMMESSAGEEVENT_SOURCE = @as(u32, 1328);
pub const DISPID_IDOMMESSAGEEVENT_INITMESSAGEEVENT = @as(u32, 1329);
pub const DISPID_IDOMSITEMODEEVENT_BUTTONID = @as(u32, 1301);
pub const DISPID_IDOMSITEMODEEVENT_ACTIONURL = @as(u32, 1302);
pub const DISPID_IDOMSTORAGEEVENT_KEY = @as(u32, 1351);
pub const DISPID_IDOMSTORAGEEVENT_OLDVALUE = @as(u32, 1352);
pub const DISPID_IDOMSTORAGEEVENT_NEWVALUE = @as(u32, 1353);
pub const DISPID_IDOMSTORAGEEVENT_URL = @as(u32, 1354);
pub const DISPID_IDOMSTORAGEEVENT_STORAGEAREA = @as(u32, 1355);
pub const DISPID_IDOMSTORAGEEVENT_INITSTORAGEEVENT = @as(u32, 1356);
pub const DISPID_IHTMLXMLHTTPREQUEST_READYSTATE = @as(u32, 1002);
pub const DISPID_IHTMLXMLHTTPREQUEST_RESPONSEBODY = @as(u32, 1003);
pub const DISPID_IHTMLXMLHTTPREQUEST_RESPONSETEXT = @as(u32, 1004);
pub const DISPID_IHTMLXMLHTTPREQUEST_RESPONSEXML = @as(u32, 1005);
pub const DISPID_IHTMLXMLHTTPREQUEST_STATUS = @as(u32, 1006);
pub const DISPID_IHTMLXMLHTTPREQUEST_STATUSTEXT = @as(u32, 1007);
pub const DISPID_IHTMLXMLHTTPREQUEST_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLXMLHTTPREQUEST_ABORT = @as(u32, 1009);
pub const DISPID_IHTMLXMLHTTPREQUEST_OPEN = @as(u32, 1010);
pub const DISPID_IHTMLXMLHTTPREQUEST_SEND = @as(u32, 1011);
pub const DISPID_IHTMLXMLHTTPREQUEST_GETALLRESPONSEHEADERS = @as(u32, 1012);
pub const DISPID_IHTMLXMLHTTPREQUEST_GETRESPONSEHEADER = @as(u32, 1013);
pub const DISPID_IHTMLXMLHTTPREQUEST_SETREQUESTHEADER = @as(u32, 1014);
pub const DISPID_IHTMLXMLHTTPREQUEST2_TIMEOUT = @as(u32, 1015);
pub const DISPID_IHTMLXMLHTTPREQUEST2_ONTIMEOUT = @as(u32, 71648);
pub const DISPID_IHTMLXMLHTTPREQUESTFACTORY_CREATE = @as(u32, 0);
pub const DISPID_HTMLXMLHTTPREQUESTEVENTS_ONTIMEOUT = @as(u32, 1016);
pub const DISPID_HTMLXMLHTTPREQUESTEVENTS_ONREADYSTATECHANGE = @as(u32, 1008);
pub const DISPID_ISVGANGLE_UNITTYPE = @as(u32, 1000);
pub const DISPID_ISVGANGLE_VALUE = @as(u32, 1001);
pub const DISPID_ISVGANGLE_VALUEINSPECIFIEDUNITS = @as(u32, 1002);
pub const DISPID_ISVGANGLE_VALUEASSTRING = @as(u32, 1003);
pub const DISPID_ISVGANGLE_NEWVALUESPECIFIEDUNITS = @as(u32, 1004);
pub const DISPID_ISVGANGLE_CONVERTTOSPECIFIEDUNITS = @as(u32, 1005);
pub const DISPID_ISVGSTYLABLE_CLASSNAME = @as(u32, 1001);
pub const DISPID_ISVGLOCATABLE_NEARESTVIEWPORTELEMENT = @as(u32, 1002);
pub const DISPID_ISVGLOCATABLE_FARTHESTVIEWPORTELEMENT = @as(u32, 1003);
pub const DISPID_ISVGLOCATABLE_GETBBOX = @as(u32, 1004);
pub const DISPID_ISVGLOCATABLE_GETCTM = @as(u32, 1005);
pub const DISPID_ISVGLOCATABLE_GETSCREENCTM = @as(u32, 1006);
pub const DISPID_ISVGLOCATABLE_GETTRANSFORMTOELEMENT = @as(u32, 1007);
pub const DISPID_ISVGTRANSFORMABLE_TRANSFORM = @as(u32, 1009);
pub const DISPID_ISVGTESTS_REQUIREDFEATURES = @as(u32, 1011);
pub const DISPID_ISVGTESTS_REQUIREDEXTENSIONS = @as(u32, 1013);
pub const DISPID_ISVGTESTS_SYSTEMLANGUAGE = @as(u32, 1015);
pub const DISPID_ISVGTESTS_HASEXTENSION = @as(u32, 1016);
pub const DISPID_ISVGLANGSPACE_XMLLANG = @as(u32, 1017);
pub const DISPID_ISVGLANGSPACE_XMLSPACE = @as(u32, 1018);
pub const DISPID_ISVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED = @as(u32, 1020);
pub const DISPID_ISVGFITTOVIEWBOX_VIEWBOX = @as(u32, 1022);
pub const DISPID_ISVGFITTOVIEWBOX_PRESERVEASPECTRATIO = @as(u32, 1024);
pub const DISPID_ISVGZOOMANDPAN_ZOOMANDPAN = @as(u32, 1025);
pub const DISPID_ISVGURIREFERENCE_HREF = @as(u32, 1026);
pub const DISPID_ISVGANIMATEDANGLE_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDANGLE_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDTRANSFORMLIST_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDTRANSFORMLIST_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDBOOLEAN_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDBOOLEAN_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDENUMERATION_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDENUMERATION_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDINTEGER_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDINTEGER_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDLENGTH_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDLENGTH_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDLENGTHLIST_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDLENGTHLIST_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDNUMBER_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDNUMBER_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDNUMBERLIST_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDNUMBERLIST_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDRECT_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDRECT_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDSTRING_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDSTRING_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGCLIPPATHELEMENT_CLIPPATHUNITS = @as(u32, 1051);
pub const DISPID_ISVGDOCUMENT_ROOTELEMENT = @as(u32, 1116);
pub const DISPID_IGETSVGDOCUMENT_GETSVGDOCUMENT = @as(u32, 65615);
pub const DISPID_ISVGELEMENT_XMLBASE = @as(u32, 1032);
pub const DISPID_ISVGELEMENT_OWNERSVGELEMENT = @as(u32, 1033);
pub const DISPID_ISVGELEMENT_VIEWPORTELEMENT = @as(u32, 1034);
pub const DISPID_ISVGELEMENT_FOCUSABLE = @as(u32, 1036);
pub const DISPID_ISVGLENGTH_UNITTYPE = @as(u32, 1000);
pub const DISPID_ISVGLENGTH_VALUE = @as(u32, 1001);
pub const DISPID_ISVGLENGTH_VALUEINSPECIFIEDUNITS = @as(u32, 1002);
pub const DISPID_ISVGLENGTH_VALUEASSTRING = @as(u32, 1003);
pub const DISPID_ISVGLENGTH_NEWVALUESPECIFIEDUNITS = @as(u32, 1004);
pub const DISPID_ISVGLENGTH_CONVERTTOSPECIFIEDUNITS = @as(u32, 1005);
pub const DISPID_ISVGLENGTHLIST_NUMBEROFITEMS = @as(u32, 1000);
pub const DISPID_ISVGLENGTHLIST_CLEAR = @as(u32, 1001);
pub const DISPID_ISVGLENGTHLIST_INITIALIZE = @as(u32, 1002);
pub const DISPID_ISVGLENGTHLIST_GETITEM = @as(u32, 1003);
pub const DISPID_ISVGLENGTHLIST_INSERTITEMBEFORE = @as(u32, 1004);
pub const DISPID_ISVGLENGTHLIST_REPLACEITEM = @as(u32, 1005);
pub const DISPID_ISVGLENGTHLIST_REMOVEITEM = @as(u32, 1006);
pub const DISPID_ISVGLENGTHLIST_APPENDITEM = @as(u32, 1007);
pub const DISPID_ISVGMATRIX_A = @as(u32, 1000);
pub const DISPID_ISVGMATRIX_B = @as(u32, 1001);
pub const DISPID_ISVGMATRIX_C = @as(u32, 1002);
pub const DISPID_ISVGMATRIX_D = @as(u32, 1003);
pub const DISPID_ISVGMATRIX_E = @as(u32, 1004);
pub const DISPID_ISVGMATRIX_F = @as(u32, 1005);
pub const DISPID_ISVGMATRIX_MULTIPLY = @as(u32, 1006);
pub const DISPID_ISVGMATRIX_INVERSE = @as(u32, 1007);
pub const DISPID_ISVGMATRIX_TRANSLATE = @as(u32, 1008);
pub const DISPID_ISVGMATRIX_SCALE = @as(u32, 1009);
pub const DISPID_ISVGMATRIX_SCALENONUNIFORM = @as(u32, 1010);
pub const DISPID_ISVGMATRIX_ROTATE = @as(u32, 1011);
pub const DISPID_ISVGMATRIX_ROTATEFROMVECTOR = @as(u32, 1012);
pub const DISPID_ISVGMATRIX_FLIPX = @as(u32, 1013);
pub const DISPID_ISVGMATRIX_FLIPY = @as(u32, 1014);
pub const DISPID_ISVGMATRIX_SKEWX = @as(u32, 1015);
pub const DISPID_ISVGMATRIX_SKEWY = @as(u32, 1016);
pub const DISPID_ISVGNUMBER_VALUE = @as(u32, 1000);
pub const DISPID_ISVGNUMBERLIST_NUMBEROFITEMS = @as(u32, 1000);
pub const DISPID_ISVGNUMBERLIST_CLEAR = @as(u32, 1001);
pub const DISPID_ISVGNUMBERLIST_INITIALIZE = @as(u32, 1002);
pub const DISPID_ISVGNUMBERLIST_GETITEM = @as(u32, 1003);
pub const DISPID_ISVGNUMBERLIST_INSERTITEMBEFORE = @as(u32, 1004);
pub const DISPID_ISVGNUMBERLIST_REPLACEITEM = @as(u32, 1005);
pub const DISPID_ISVGNUMBERLIST_REMOVEITEM = @as(u32, 1006);
pub const DISPID_ISVGNUMBERLIST_APPENDITEM = @as(u32, 1007);
pub const DISPID_ISVGPATTERNELEMENT_PATTERNUNITS = @as(u32, 1051);
pub const DISPID_ISVGPATTERNELEMENT_PATTERNCONTENTUNITS = @as(u32, 1053);
pub const DISPID_ISVGPATTERNELEMENT_PATTERNTRANSFORM = @as(u32, 1055);
pub const DISPID_ISVGPATTERNELEMENT_X = @as(u32, 1057);
pub const DISPID_ISVGPATTERNELEMENT_Y = @as(u32, 1059);
pub const DISPID_ISVGPATTERNELEMENT_WIDTH = @as(u32, 1061);
pub const DISPID_ISVGPATTERNELEMENT_HEIGHT = @as(u32, 1063);
pub const DISPID_ISVGPATHSEG_PATHSEGTYPE = @as(u32, 1000);
pub const DISPID_ISVGPATHSEG_PATHSEGTYPEASLETTER = @as(u32, 1001);
pub const DISPID_ISVGPATHSEGARCABS_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGARCABS_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGARCABS_R1 = @as(u32, 1022);
pub const DISPID_ISVGPATHSEGARCABS_R2 = @as(u32, 1023);
pub const DISPID_ISVGPATHSEGARCABS_ANGLE = @as(u32, 1024);
pub const DISPID_ISVGPATHSEGARCABS_LARGEARCFLAG = @as(u32, 1025);
pub const DISPID_ISVGPATHSEGARCABS_SWEEPFLAG = @as(u32, 1026);
pub const DISPID_ISVGPATHSEGARCREL_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGARCREL_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGARCREL_R1 = @as(u32, 1022);
pub const DISPID_ISVGPATHSEGARCREL_R2 = @as(u32, 1023);
pub const DISPID_ISVGPATHSEGARCREL_ANGLE = @as(u32, 1024);
pub const DISPID_ISVGPATHSEGARCREL_LARGEARCFLAG = @as(u32, 1025);
pub const DISPID_ISVGPATHSEGARCREL_SWEEPFLAG = @as(u32, 1026);
pub const DISPID_ISVGPATHSEGMOVETOABS_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGMOVETOABS_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGMOVETOREL_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGMOVETOREL_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGLINETOABS_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGLINETOABS_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGLINETOREL_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGLINETOREL_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGCURVETOCUBICABS_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGCURVETOCUBICABS_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGCURVETOCUBICABS_X1 = @as(u32, 1022);
pub const DISPID_ISVGPATHSEGCURVETOCUBICABS_Y1 = @as(u32, 1023);
pub const DISPID_ISVGPATHSEGCURVETOCUBICABS_X2 = @as(u32, 1024);
pub const DISPID_ISVGPATHSEGCURVETOCUBICABS_Y2 = @as(u32, 1025);
pub const DISPID_ISVGPATHSEGCURVETOCUBICREL_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGCURVETOCUBICREL_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGCURVETOCUBICREL_X1 = @as(u32, 1022);
pub const DISPID_ISVGPATHSEGCURVETOCUBICREL_Y1 = @as(u32, 1023);
pub const DISPID_ISVGPATHSEGCURVETOCUBICREL_X2 = @as(u32, 1024);
pub const DISPID_ISVGPATHSEGCURVETOCUBICREL_Y2 = @as(u32, 1025);
pub const DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X2 = @as(u32, 1022);
pub const DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y2 = @as(u32, 1023);
pub const DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X2 = @as(u32, 1022);
pub const DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y2 = @as(u32, 1023);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X1 = @as(u32, 1022);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y1 = @as(u32, 1023);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X1 = @as(u32, 1022);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y1 = @as(u32, 1023);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_Y = @as(u32, 1021);
pub const DISPID_ISVGPATHSEGLINETOHORIZONTALABS_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGLINETOHORIZONTALREL_X = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGLINETOVERTICALABS_Y = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGLINETOVERTICALREL_Y = @as(u32, 1020);
pub const DISPID_ISVGPATHSEGLIST_NUMBEROFITEMS = @as(u32, 1000);
pub const DISPID_ISVGPATHSEGLIST_CLEAR = @as(u32, 1001);
pub const DISPID_ISVGPATHSEGLIST_INITIALIZE = @as(u32, 1002);
pub const DISPID_ISVGPATHSEGLIST_GETITEM = @as(u32, 1003);
pub const DISPID_ISVGPATHSEGLIST_INSERTITEMBEFORE = @as(u32, 1004);
pub const DISPID_ISVGPATHSEGLIST_REPLACEITEM = @as(u32, 1005);
pub const DISPID_ISVGPATHSEGLIST_REMOVEITEM = @as(u32, 1006);
pub const DISPID_ISVGPATHSEGLIST_APPENDITEM = @as(u32, 1007);
pub const DISPID_ISVGPOINT_X = @as(u32, 1000);
pub const DISPID_ISVGPOINT_Y = @as(u32, 1001);
pub const DISPID_ISVGPOINT_MATRIXTRANSFORM = @as(u32, 1002);
pub const DISPID_ISVGPOINTLIST_NUMBEROFITEMS = @as(u32, 1000);
pub const DISPID_ISVGPOINTLIST_CLEAR = @as(u32, 1001);
pub const DISPID_ISVGPOINTLIST_INITIALIZE = @as(u32, 1002);
pub const DISPID_ISVGPOINTLIST_GETITEM = @as(u32, 1003);
pub const DISPID_ISVGPOINTLIST_INSERTITEMBEFORE = @as(u32, 1004);
pub const DISPID_ISVGPOINTLIST_REPLACEITEM = @as(u32, 1005);
pub const DISPID_ISVGPOINTLIST_REMOVEITEM = @as(u32, 1006);
pub const DISPID_ISVGPOINTLIST_APPENDITEM = @as(u32, 1007);
pub const DISPID_ISVGRECT_X = @as(u32, 1000);
pub const DISPID_ISVGRECT_Y = @as(u32, 1001);
pub const DISPID_ISVGRECT_WIDTH = @as(u32, 1002);
pub const DISPID_ISVGRECT_HEIGHT = @as(u32, 1003);
pub const DISPID_ISVGSTRINGLIST_NUMBEROFITEMS = @as(u32, 1000);
pub const DISPID_ISVGSTRINGLIST_CLEAR = @as(u32, 1001);
pub const DISPID_ISVGSTRINGLIST_INITIALIZE = @as(u32, 1002);
pub const DISPID_ISVGSTRINGLIST_GETITEM = @as(u32, 1003);
pub const DISPID_ISVGSTRINGLIST_INSERTITEMBEFORE = @as(u32, 1004);
pub const DISPID_ISVGSTRINGLIST_REPLACEITEM = @as(u32, 1005);
pub const DISPID_ISVGSTRINGLIST_REMOVEITEM = @as(u32, 1006);
pub const DISPID_ISVGSTRINGLIST_APPENDITEM = @as(u32, 1007);
pub const DISPID_ISVGTRANSFORM_TYPE = @as(u32, 1000);
pub const DISPID_ISVGTRANSFORM_MATRIX = @as(u32, 1001);
pub const DISPID_ISVGTRANSFORM_ANGLE = @as(u32, 1002);
pub const DISPID_ISVGTRANSFORM_SETMATRIX = @as(u32, 1003);
pub const DISPID_ISVGTRANSFORM_SETTRANSLATE = @as(u32, 1004);
pub const DISPID_ISVGTRANSFORM_SETSCALE = @as(u32, 1005);
pub const DISPID_ISVGTRANSFORM_SETROTATE = @as(u32, 1006);
pub const DISPID_ISVGTRANSFORM_SETSKEWX = @as(u32, 1007);
pub const DISPID_ISVGTRANSFORM_SETSKEWY = @as(u32, 1008);
pub const DISPID_ISVGSVGELEMENT_X = @as(u32, 1052);
pub const DISPID_ISVGSVGELEMENT_Y = @as(u32, 1054);
pub const DISPID_ISVGSVGELEMENT_WIDTH = @as(u32, 1056);
pub const DISPID_ISVGSVGELEMENT_HEIGHT = @as(u32, 1058);
pub const DISPID_ISVGSVGELEMENT_CONTENTSCRIPTTYPE = @as(u32, 1059);
pub const DISPID_ISVGSVGELEMENT_CONTENTSTYLETYPE = @as(u32, 1060);
pub const DISPID_ISVGSVGELEMENT_VIEWPORT = @as(u32, 1061);
pub const DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERX = @as(u32, 1062);
pub const DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERY = @as(u32, 1063);
pub const DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERX = @as(u32, 1064);
pub const DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERY = @as(u32, 1065);
pub const DISPID_ISVGSVGELEMENT_USECURRENTVIEW = @as(u32, 1066);
pub const DISPID_ISVGSVGELEMENT_CURRENTVIEW = @as(u32, 1067);
pub const DISPID_ISVGSVGELEMENT_CURRENTSCALE = @as(u32, 1068);
pub const DISPID_ISVGSVGELEMENT_CURRENTTRANSLATE = @as(u32, 1069);
pub const DISPID_ISVGSVGELEMENT_SUSPENDREDRAW = @as(u32, 1070);
pub const DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAW = @as(u32, 1071);
pub const DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAWALL = @as(u32, 1072);
pub const DISPID_ISVGSVGELEMENT_FORCEREDRAW = @as(u32, 1073);
pub const DISPID_ISVGSVGELEMENT_PAUSEANIMATIONS = @as(u32, 1074);
pub const DISPID_ISVGSVGELEMENT_UNPAUSEANIMATIONS = @as(u32, 1075);
pub const DISPID_ISVGSVGELEMENT_ANIMATIONSPAUSED = @as(u32, 1076);
pub const DISPID_ISVGSVGELEMENT_GETCURRENTTIME = @as(u32, 1077);
pub const DISPID_ISVGSVGELEMENT_SETCURRENTTIME = @as(u32, 1078);
pub const DISPID_ISVGSVGELEMENT_GETINTERSECTIONLIST = @as(u32, 1079);
pub const DISPID_ISVGSVGELEMENT_GETENCLOSURELIST = @as(u32, 1080);
pub const DISPID_ISVGSVGELEMENT_CHECKINTERSECTION = @as(u32, 1081);
pub const DISPID_ISVGSVGELEMENT_CHECKENCLOSURE = @as(u32, 1082);
pub const DISPID_ISVGSVGELEMENT_DESELECTALL = @as(u32, 1083);
pub const DISPID_ISVGSVGELEMENT_CREATESVGNUMBER = @as(u32, 1084);
pub const DISPID_ISVGSVGELEMENT_CREATESVGLENGTH = @as(u32, 1085);
pub const DISPID_ISVGSVGELEMENT_CREATESVGANGLE = @as(u32, 1086);
pub const DISPID_ISVGSVGELEMENT_CREATESVGPOINT = @as(u32, 1087);
pub const DISPID_ISVGSVGELEMENT_CREATESVGMATRIX = @as(u32, 1088);
pub const DISPID_ISVGSVGELEMENT_CREATESVGRECT = @as(u32, 1089);
pub const DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORM = @as(u32, 1090);
pub const DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORMFROMMATRIX = @as(u32, 1091);
pub const DISPID_ISVGSVGELEMENT_GETELEMENTBYID = @as(u32, 1092);
pub const DISPID_ISVGUSEELEMENT_X = @as(u32, 1052);
pub const DISPID_ISVGUSEELEMENT_Y = @as(u32, 1054);
pub const DISPID_ISVGUSEELEMENT_WIDTH = @as(u32, 1056);
pub const DISPID_ISVGUSEELEMENT_HEIGHT = @as(u32, 1058);
pub const DISPID_ISVGUSEELEMENT_INSTANCEROOT = @as(u32, 1059);
pub const DISPID_ISVGUSEELEMENT_ANIMATEDINSTANCEROOT = @as(u32, 1060);
pub const DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_LENGTH = @as(u32, 1001);
pub const DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDBY = @as(u32, 1002);
pub const DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACE = @as(u32, 1004);
pub const DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACELENGTH = @as(u32, 1005);
pub const DISPID_IRULESAPPLIED_ELEMENT = @as(u32, 1001);
pub const DISPID_IRULESAPPLIED_INLINESTYLES = @as(u32, 1002);
pub const DISPID_IRULESAPPLIED_APPLIEDRULES = @as(u32, 1003);
pub const DISPID_IRULESAPPLIED_PROPERTYISINLINE = @as(u32, 1004);
pub const DISPID_IRULESAPPLIED_PROPERTYISINHERITABLE = @as(u32, 1005);
pub const DISPID_IRULESAPPLIED_HASINHERITABLEPROPERTY = @as(u32, 1006);
pub const DISPID_IRULESAPPLIEDCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IRULESAPPLIEDCOLLECTION_LENGTH = @as(u32, 1001);
pub const DISPID_IRULESAPPLIEDCOLLECTION_ELEMENT = @as(u32, 1002);
pub const DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDFROM = @as(u32, 1003);
pub const DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYCOUNT = @as(u32, 1004);
pub const DISPID_IRULESAPPLIEDCOLLECTION_PROPERTY = @as(u32, 1005);
pub const DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACE = @as(u32, 1006);
pub const DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACELENGTH = @as(u32, 1007);
pub const DISPID_ISVGTRANSFORMLIST_NUMBEROFITEMS = @as(u32, 1000);
pub const DISPID_ISVGTRANSFORMLIST_CLEAR = @as(u32, 1001);
pub const DISPID_ISVGTRANSFORMLIST_INITIALIZE = @as(u32, 1002);
pub const DISPID_ISVGTRANSFORMLIST_GETITEM = @as(u32, 1003);
pub const DISPID_ISVGTRANSFORMLIST_INSERTITEMBEFORE = @as(u32, 1004);
pub const DISPID_ISVGTRANSFORMLIST_REPLACEITEM = @as(u32, 1005);
pub const DISPID_ISVGTRANSFORMLIST_REMOVEITEM = @as(u32, 1006);
pub const DISPID_ISVGTRANSFORMLIST_APPENDITEM = @as(u32, 1007);
pub const DISPID_ISVGTRANSFORMLIST_CREATESVGTRANSFORMFROMMATRIX = @as(u32, 1008);
pub const DISPID_ISVGTRANSFORMLIST_CONSOLIDATE = @as(u32, 1009);
pub const DISPID_ISVGANIMATEDPOINTS_POINTS = @as(u32, 1050);
pub const DISPID_ISVGANIMATEDPOINTS_ANIMATEDPOINTS = @as(u32, 1052);
pub const DISPID_ISVGCIRCLEELEMENT_CX = @as(u32, 1052);
pub const DISPID_ISVGCIRCLEELEMENT_CY = @as(u32, 1054);
pub const DISPID_ISVGCIRCLEELEMENT_R = @as(u32, 1056);
pub const DISPID_ISVGELLIPSEELEMENT_CX = @as(u32, 1052);
pub const DISPID_ISVGELLIPSEELEMENT_CY = @as(u32, 1054);
pub const DISPID_ISVGELLIPSEELEMENT_RX = @as(u32, 1056);
pub const DISPID_ISVGELLIPSEELEMENT_RY = @as(u32, 1058);
pub const DISPID_ISVGLINEELEMENT_X1 = @as(u32, 1052);
pub const DISPID_ISVGLINEELEMENT_Y1 = @as(u32, 1054);
pub const DISPID_ISVGLINEELEMENT_X2 = @as(u32, 1056);
pub const DISPID_ISVGLINEELEMENT_Y2 = @as(u32, 1058);
pub const DISPID_ISVGRECTELEMENT_X = @as(u32, 1052);
pub const DISPID_ISVGRECTELEMENT_Y = @as(u32, 1054);
pub const DISPID_ISVGRECTELEMENT_WIDTH = @as(u32, 1056);
pub const DISPID_ISVGRECTELEMENT_HEIGHT = @as(u32, 1058);
pub const DISPID_ISVGRECTELEMENT_RX = @as(u32, 1060);
pub const DISPID_ISVGRECTELEMENT_RY = @as(u32, 1062);
pub const DISPID_ISVGANIMATEDPATHDATA_PATHSEGLIST = @as(u32, 1052);
pub const DISPID_ISVGANIMATEDPATHDATA_NORMALIZEDPATHSEGLIST = @as(u32, 1076);
pub const DISPID_ISVGANIMATEDPATHDATA_ANIMATEDPATHSEGLIST = @as(u32, 1077);
pub const DISPID_ISVGANIMATEDPATHDATA_ANIMATEDNORMALIZEDPATHSEGLIST = @as(u32, 1078);
pub const DISPID_ISVGPATHELEMENT_PATHLENGTH = @as(u32, 1053);
pub const DISPID_ISVGPATHELEMENT_GETTOTALLENGTH = @as(u32, 1073);
pub const DISPID_ISVGPATHELEMENT_GETPOINTATLENGTH = @as(u32, 1074);
pub const DISPID_ISVGPATHELEMENT_GETPATHSEGATLENGTH = @as(u32, 1075);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCLOSEPATH = @as(u32, 1054);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOABS = @as(u32, 1055);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOREL = @as(u32, 1056);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOABS = @as(u32, 1057);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOREL = @as(u32, 1058);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICABS = @as(u32, 1059);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICREL = @as(u32, 1060);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICABS = @as(u32, 1061);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICREL = @as(u32, 1062);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCABS = @as(u32, 1063);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCREL = @as(u32, 1064);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALABS = @as(u32, 1065);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALREL = @as(u32, 1066);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALABS = @as(u32, 1067);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALREL = @as(u32, 1068);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHABS = @as(u32, 1069);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHREL = @as(u32, 1070);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHABS = @as(u32, 1071);
pub const DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHREL = @as(u32, 1072);
pub const DISPID_ISVGPRESERVEASPECTRATIO_ALIGN = @as(u32, 1000);
pub const DISPID_ISVGPRESERVEASPECTRATIO_MEETORSLICE = @as(u32, 1001);
pub const DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_BASEVAL = @as(u32, 1000);
pub const DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_ANIMVAL = @as(u32, 1001);
pub const DISPID_ISVGIMAGEELEMENT_X = @as(u32, 1051);
pub const DISPID_ISVGIMAGEELEMENT_Y = @as(u32, 1053);
pub const DISPID_ISVGIMAGEELEMENT_WIDTH = @as(u32, 1055);
pub const DISPID_ISVGIMAGEELEMENT_HEIGHT = @as(u32, 1057);
pub const DISPID_ISVGSTOPELEMENT_OFFSET = @as(u32, 1051);
pub const DISPID_ISVGGRADIENTELEMENT_GRADIENTUNITS = @as(u32, 1051);
pub const DISPID_ISVGGRADIENTELEMENT_GRADIENTTRANSFORM = @as(u32, 1053);
pub const DISPID_ISVGGRADIENTELEMENT_SPREADMETHOD = @as(u32, 1055);
pub const DISPID_ISVGLINEARGRADIENTELEMENT_X1 = @as(u32, 1071);
pub const DISPID_ISVGLINEARGRADIENTELEMENT_Y1 = @as(u32, 1073);
pub const DISPID_ISVGLINEARGRADIENTELEMENT_X2 = @as(u32, 1075);
pub const DISPID_ISVGLINEARGRADIENTELEMENT_Y2 = @as(u32, 1077);
pub const DISPID_ISVGRADIALGRADIENTELEMENT_CX = @as(u32, 1071);
pub const DISPID_ISVGRADIALGRADIENTELEMENT_CY = @as(u32, 1073);
pub const DISPID_ISVGRADIALGRADIENTELEMENT_R = @as(u32, 1075);
pub const DISPID_ISVGRADIALGRADIENTELEMENT_FX = @as(u32, 1077);
pub const DISPID_ISVGRADIALGRADIENTELEMENT_FY = @as(u32, 1079);
pub const DISPID_ISVGMASKELEMENT_MASKUNITS = @as(u32, 1051);
pub const DISPID_ISVGMASKELEMENT_MASKCONTENTUNITS = @as(u32, 1053);
pub const DISPID_ISVGMASKELEMENT_X = @as(u32, 1055);
pub const DISPID_ISVGMASKELEMENT_Y = @as(u32, 1057);
pub const DISPID_ISVGMASKELEMENT_WIDTH = @as(u32, 1059);
pub const DISPID_ISVGMASKELEMENT_HEIGHT = @as(u32, 1061);
pub const DISPID_ISVGMARKERELEMENT_REFX = @as(u32, 1051);
pub const DISPID_ISVGMARKERELEMENT_REFY = @as(u32, 1053);
pub const DISPID_ISVGMARKERELEMENT_MARKERUNITS = @as(u32, 1055);
pub const DISPID_ISVGMARKERELEMENT_MARKERWIDTH = @as(u32, 1057);
pub const DISPID_ISVGMARKERELEMENT_MARKERHEIGHT = @as(u32, 1059);
pub const DISPID_ISVGMARKERELEMENT_ORIENTTYPE = @as(u32, 1061);
pub const DISPID_ISVGMARKERELEMENT_ORIENTANGLE = @as(u32, 1062);
pub const DISPID_ISVGMARKERELEMENT_SETORIENTTOAUTO = @as(u32, 1063);
pub const DISPID_ISVGMARKERELEMENT_SETORIENTTOANGLE = @as(u32, 1064);
pub const DISPID_ISVGZOOMEVENT_ZOOMRECTSCREEN = @as(u32, 1276);
pub const DISPID_ISVGZOOMEVENT_PREVIOUSSCALE = @as(u32, 1277);
pub const DISPID_ISVGZOOMEVENT_PREVIOUSTRANSLATE = @as(u32, 1278);
pub const DISPID_ISVGZOOMEVENT_NEWSCALE = @as(u32, 1279);
pub const DISPID_ISVGZOOMEVENT_NEWTRANSLATE = @as(u32, 1280);
pub const DISPID_ISVGAELEMENT_TARGET = @as(u32, 1052);
pub const DISPID_ISVGVIEWELEMENT_VIEWTARGET = @as(u32, 1052);
pub const DISPID_IHTMLMEDIAERROR_CODE = @as(u32, 1000);
pub const DISPID_IHTMLTIMERANGES_LENGTH = @as(u32, 1000);
pub const DISPID_IHTMLTIMERANGES_START = @as(u32, 1001);
pub const DISPID_IHTMLTIMERANGES_END = @as(u32, 1002);
pub const DISPID_IHTMLTIMERANGES2_STARTDOUBLE = @as(u32, 1003);
pub const DISPID_IHTMLTIMERANGES2_ENDDOUBLE = @as(u32, 1004);
pub const DISPID_IHTMLMEDIAELEMENT_ERROR = @as(u32, 1000);
pub const DISPID_IHTMLMEDIAELEMENT_SRC = @as(u32, 1001);
pub const DISPID_IHTMLMEDIAELEMENT_CURRENTSRC = @as(u32, 1002);
pub const DISPID_IHTMLMEDIAELEMENT_NETWORKSTATE = @as(u32, 1003);
pub const DISPID_IHTMLMEDIAELEMENT_PRELOAD = @as(u32, 1004);
pub const DISPID_IHTMLMEDIAELEMENT_BUFFERED = @as(u32, 1005);
pub const DISPID_IHTMLMEDIAELEMENT_LOAD = @as(u32, 1006);
pub const DISPID_IHTMLMEDIAELEMENT_CANPLAYTYPE = @as(u32, 1007);
pub const DISPID_IHTMLMEDIAELEMENT_SEEKING = @as(u32, 1009);
pub const DISPID_IHTMLMEDIAELEMENT_CURRENTTIME = @as(u32, 1010);
pub const DISPID_IHTMLMEDIAELEMENT_INITIALTIME = @as(u32, 1011);
pub const DISPID_IHTMLMEDIAELEMENT_DURATION = @as(u32, 1012);
pub const DISPID_IHTMLMEDIAELEMENT_PAUSED = @as(u32, 1013);
pub const DISPID_IHTMLMEDIAELEMENT_DEFAULTPLAYBACKRATE = @as(u32, 1014);
pub const DISPID_IHTMLMEDIAELEMENT_PLAYBACKRATE = @as(u32, 1015);
pub const DISPID_IHTMLMEDIAELEMENT_PLAYED = @as(u32, 1016);
pub const DISPID_IHTMLMEDIAELEMENT_SEEKABLE = @as(u32, 1017);
pub const DISPID_IHTMLMEDIAELEMENT_ENDED = @as(u32, 1018);
pub const DISPID_IHTMLMEDIAELEMENT_AUTOPLAY = @as(u32, 1019);
pub const DISPID_IHTMLMEDIAELEMENT_LOOP = @as(u32, 1020);
pub const DISPID_IHTMLMEDIAELEMENT_PLAY = @as(u32, 1021);
pub const DISPID_IHTMLMEDIAELEMENT_PAUSE = @as(u32, 1022);
pub const DISPID_IHTMLMEDIAELEMENT_CONTROLS = @as(u32, 1023);
pub const DISPID_IHTMLMEDIAELEMENT_VOLUME = @as(u32, 1024);
pub const DISPID_IHTMLMEDIAELEMENT_MUTED = @as(u32, 1025);
pub const DISPID_IHTMLMEDIAELEMENT_AUTOBUFFER = @as(u32, 1026);
pub const DISPID_IHTMLMEDIAELEMENT2_CURRENTTIMEDOUBLE = @as(u32, 1027);
pub const DISPID_IHTMLMEDIAELEMENT2_INITIALTIMEDOUBLE = @as(u32, 1028);
pub const DISPID_IHTMLMEDIAELEMENT2_DURATIONDOUBLE = @as(u32, 1029);
pub const DISPID_IHTMLMEDIAELEMENT2_DEFAULTPLAYBACKRATEDOUBLE = @as(u32, 1030);
pub const DISPID_IHTMLMEDIAELEMENT2_PLAYBACKRATEDOUBLE = @as(u32, 1031);
pub const DISPID_IHTMLMEDIAELEMENT2_VOLUMEDOUBLE = @as(u32, 1032);
pub const DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTODISABLED = @as(u32, 1033);
pub const DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTOPRIMARY = @as(u32, 1034);
pub const DISPID_IHTMLSOURCEELEMENT_SRC = @as(u32, 1000);
pub const DISPID_IHTMLSOURCEELEMENT_TYPE = @as(u32, 1001);
pub const DISPID_IHTMLSOURCEELEMENT_MEDIA = @as(u32, 1002);
pub const DISPID_IHTMLVIDEOELEMENT_WIDTH = @as(u32, 65541);
pub const DISPID_IHTMLVIDEOELEMENT_HEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLVIDEOELEMENT_VIDEOWIDTH = @as(u32, 1050);
pub const DISPID_IHTMLVIDEOELEMENT_VIDEOHEIGHT = @as(u32, 1051);
pub const DISPID_IHTMLVIDEOELEMENT_POSTER = @as(u32, 1052);
pub const DISPID_IHTMLAUDIOELEMENTFACTORY_CREATE = @as(u32, 0);
pub const DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGELEMENT = @as(u32, 1000);
pub const DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGUSEELEMENT = @as(u32, 1001);
pub const DISPID_ISVGELEMENTINSTANCE_PARENTNODE = @as(u32, 1002);
pub const DISPID_ISVGELEMENTINSTANCE_CHILDNODES = @as(u32, 1003);
pub const DISPID_ISVGELEMENTINSTANCE_FIRSTCHILD = @as(u32, 1004);
pub const DISPID_ISVGELEMENTINSTANCE_LASTCHILD = @as(u32, 1005);
pub const DISPID_ISVGELEMENTINSTANCE_PREVIOUSSIBLING = @as(u32, 1006);
pub const DISPID_ISVGELEMENTINSTANCE_NEXTSIBLING = @as(u32, 1007);
pub const DISPID_ISVGELEMENTINSTANCELIST_LENGTH = @as(u32, 1000);
pub const DISPID_ISVGELEMENTINSTANCELIST_ITEM = @as(u32, 1001);
pub const DISPID_IDOMEXCEPTION_CODE = @as(u32, 1000);
pub const DISPID_IDOMEXCEPTION_MESSAGE = @as(u32, 1001);
pub const DISPID_IRANGEEXCEPTION_CODE = @as(u32, 1000);
pub const DISPID_IRANGEEXCEPTION_MESSAGE = @as(u32, 1001);
pub const DISPID_ISVGEXCEPTION_CODE = @as(u32, 1000);
pub const DISPID_ISVGEXCEPTION_MESSAGE = @as(u32, 1001);
pub const DISPID_IEVENTEXCEPTION_CODE = @as(u32, 1000);
pub const DISPID_IEVENTEXCEPTION_MESSAGE = @as(u32, 1001);
pub const DISPID_ISVGSCRIPTELEMENT_TYPE = @as(u32, 1052);
pub const DISPID_ISVGSTYLEELEMENT_TYPE = @as(u32, 1051);
pub const DISPID_ISVGSTYLEELEMENT_MEDIA = @as(u32, 1052);
pub const DISPID_ISVGTEXTCONTENTELEMENT_TEXTLENGTH = @as(u32, 1053);
pub const DISPID_ISVGTEXTCONTENTELEMENT_LENGTHADJUST = @as(u32, 1051);
pub const DISPID_ISVGTEXTCONTENTELEMENT_GETNUMBEROFCHARS = @as(u32, 1054);
pub const DISPID_ISVGTEXTCONTENTELEMENT_GETCOMPUTEDTEXTLENGTH = @as(u32, 1055);
pub const DISPID_ISVGTEXTCONTENTELEMENT_GETSUBSTRINGLENGTH = @as(u32, 1056);
pub const DISPID_ISVGTEXTCONTENTELEMENT_GETSTARTPOSITIONOFCHAR = @as(u32, 1057);
pub const DISPID_ISVGTEXTCONTENTELEMENT_GETENDPOSITIONOFCHAR = @as(u32, 1058);
pub const DISPID_ISVGTEXTCONTENTELEMENT_GETEXTENTOFCHAR = @as(u32, 1059);
pub const DISPID_ISVGTEXTCONTENTELEMENT_GETROTATIONOFCHAR = @as(u32, 1060);
pub const DISPID_ISVGTEXTCONTENTELEMENT_GETCHARNUMATPOSITION = @as(u32, 1061);
pub const DISPID_ISVGTEXTCONTENTELEMENT_SELECTSUBSTRING = @as(u32, 1062);
pub const DISPID_ISVGTEXTPOSITIONINGELEMENT_X = @as(u32, 1071);
pub const DISPID_ISVGTEXTPOSITIONINGELEMENT_Y = @as(u32, 1073);
pub const DISPID_ISVGTEXTPOSITIONINGELEMENT_DX = @as(u32, 1075);
pub const DISPID_ISVGTEXTPOSITIONINGELEMENT_DY = @as(u32, 1077);
pub const DISPID_ISVGTEXTPOSITIONINGELEMENT_ROTATE = @as(u32, 1079);
pub const DISPID_IDOMDOCUMENTTYPE_NAME = @as(u32, 1000);
pub const DISPID_IDOMDOCUMENTTYPE_ENTITIES = @as(u32, 1001);
pub const DISPID_IDOMDOCUMENTTYPE_NOTATIONS = @as(u32, 1002);
pub const DISPID_IDOMDOCUMENTTYPE_PUBLICID = @as(u32, 1003);
pub const DISPID_IDOMDOCUMENTTYPE_SYSTEMID = @as(u32, 1004);
pub const DISPID_IDOMDOCUMENTTYPE_INTERNALSUBSET = @as(u32, 1005);
pub const DISPID_IDOMNODEITERATOR_ROOT = @as(u32, 1000);
pub const DISPID_IDOMNODEITERATOR_WHATTOSHOW = @as(u32, 1001);
pub const DISPID_IDOMNODEITERATOR_FILTER = @as(u32, 1002);
pub const DISPID_IDOMNODEITERATOR_EXPANDENTITYREFERENCES = @as(u32, 1003);
pub const DISPID_IDOMNODEITERATOR_NEXTNODE = @as(u32, 1010);
pub const DISPID_IDOMNODEITERATOR_PREVIOUSNODE = @as(u32, 1011);
pub const DISPID_IDOMNODEITERATOR_DETACH = @as(u32, 1012);
pub const DISPID_IDOMTREEWALKER_ROOT = @as(u32, 1000);
pub const DISPID_IDOMTREEWALKER_WHATTOSHOW = @as(u32, 1001);
pub const DISPID_IDOMTREEWALKER_FILTER = @as(u32, 1002);
pub const DISPID_IDOMTREEWALKER_EXPANDENTITYREFERENCES = @as(u32, 1003);
pub const DISPID_IDOMTREEWALKER_CURRENTNODE = @as(u32, 1020);
pub const DISPID_IDOMTREEWALKER_PARENTNODE = @as(u32, 1021);
pub const DISPID_IDOMTREEWALKER_FIRSTCHILD = @as(u32, 1022);
pub const DISPID_IDOMTREEWALKER_LASTCHILD = @as(u32, 1023);
pub const DISPID_IDOMTREEWALKER_PREVIOUSSIBLING = @as(u32, 1024);
pub const DISPID_IDOMTREEWALKER_NEXTSIBLING = @as(u32, 1025);
pub const DISPID_IDOMTREEWALKER_PREVIOUSNODE = @as(u32, 1026);
pub const DISPID_IDOMTREEWALKER_NEXTNODE = @as(u32, 1027);
pub const DISPID_IDOMPROCESSINGINSTRUCTION_TARGET = @as(u32, 1000);
pub const DISPID_IDOMPROCESSINGINSTRUCTION_DATA = @as(u32, 1001);
pub const DISPID_IHTMLPERFORMANCE_NAVIGATION = @as(u32, 1000);
pub const DISPID_IHTMLPERFORMANCE_TIMING = @as(u32, 1001);
pub const DISPID_IHTMLPERFORMANCE_TOSTRING = @as(u32, 1002);
pub const DISPID_IHTMLPERFORMANCE_TOJSON = @as(u32, 1003);
pub const DISPID_IHTMLPERFORMANCENAVIGATION_TYPE = @as(u32, 1000);
pub const DISPID_IHTMLPERFORMANCENAVIGATION_REDIRECTCOUNT = @as(u32, 1001);
pub const DISPID_IHTMLPERFORMANCENAVIGATION_TOSTRING = @as(u32, 1002);
pub const DISPID_IHTMLPERFORMANCENAVIGATION_TOJSON = @as(u32, 1003);
pub const DISPID_IHTMLPERFORMANCETIMING_NAVIGATIONSTART = @as(u32, 1000);
pub const DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTSTART = @as(u32, 1001);
pub const DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTEND = @as(u32, 1002);
pub const DISPID_IHTMLPERFORMANCETIMING_REDIRECTSTART = @as(u32, 1003);
pub const DISPID_IHTMLPERFORMANCETIMING_REDIRECTEND = @as(u32, 1004);
pub const DISPID_IHTMLPERFORMANCETIMING_FETCHSTART = @as(u32, 1005);
pub const DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPSTART = @as(u32, 1006);
pub const DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPEND = @as(u32, 1007);
pub const DISPID_IHTMLPERFORMANCETIMING_CONNECTSTART = @as(u32, 1008);
pub const DISPID_IHTMLPERFORMANCETIMING_CONNECTEND = @as(u32, 1009);
pub const DISPID_IHTMLPERFORMANCETIMING_REQUESTSTART = @as(u32, 1010);
pub const DISPID_IHTMLPERFORMANCETIMING_RESPONSESTART = @as(u32, 1011);
pub const DISPID_IHTMLPERFORMANCETIMING_RESPONSEEND = @as(u32, 1012);
pub const DISPID_IHTMLPERFORMANCETIMING_DOMLOADING = @as(u32, 1013);
pub const DISPID_IHTMLPERFORMANCETIMING_DOMINTERACTIVE = @as(u32, 1014);
pub const DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTSTART = @as(u32, 1015);
pub const DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTEND = @as(u32, 1016);
pub const DISPID_IHTMLPERFORMANCETIMING_DOMCOMPLETE = @as(u32, 1017);
pub const DISPID_IHTMLPERFORMANCETIMING_LOADEVENTSTART = @as(u32, 1018);
pub const DISPID_IHTMLPERFORMANCETIMING_LOADEVENTEND = @as(u32, 1019);
pub const DISPID_IHTMLPERFORMANCETIMING_MSFIRSTPAINT = @as(u32, 1020);
pub const DISPID_IHTMLPERFORMANCETIMING_TOSTRING = @as(u32, 1021);
pub const DISPID_IHTMLPERFORMANCETIMING_TOJSON = @as(u32, 1022);
pub const DISPID_ITEMPLATEPRINTER_STARTDOC = @as(u32, 1);
pub const DISPID_ITEMPLATEPRINTER_STOPDOC = @as(u32, 2);
pub const DISPID_ITEMPLATEPRINTER_PRINTBLANKPAGE = @as(u32, 3);
pub const DISPID_ITEMPLATEPRINTER_PRINTPAGE = @as(u32, 4);
pub const DISPID_ITEMPLATEPRINTER_ENSUREPRINTDIALOGDEFAULTS = @as(u32, 5);
pub const DISPID_ITEMPLATEPRINTER_SHOWPRINTDIALOG = @as(u32, 6);
pub const DISPID_ITEMPLATEPRINTER_SHOWPAGESETUPDIALOG = @as(u32, 7);
pub const DISPID_ITEMPLATEPRINTER_PRINTNONNATIVE = @as(u32, 8);
pub const DISPID_ITEMPLATEPRINTER_PRINTNONNATIVEFRAMES = @as(u32, 9);
pub const DISPID_ITEMPLATEPRINTER_FRAMESETDOCUMENT = @as(u32, 10);
pub const DISPID_ITEMPLATEPRINTER_FRAMEACTIVE = @as(u32, 11);
pub const DISPID_ITEMPLATEPRINTER_FRAMEASSHOWN = @as(u32, 12);
pub const DISPID_ITEMPLATEPRINTER_SELECTION = @as(u32, 13);
pub const DISPID_ITEMPLATEPRINTER_SELECTEDPAGES = @as(u32, 14);
pub const DISPID_ITEMPLATEPRINTER_CURRENTPAGE = @as(u32, 15);
pub const DISPID_ITEMPLATEPRINTER_CURRENTPAGEAVAIL = @as(u32, 16);
pub const DISPID_ITEMPLATEPRINTER_COLLATE = @as(u32, 17);
pub const DISPID_ITEMPLATEPRINTER_DUPLEX = @as(u32, 18);
pub const DISPID_ITEMPLATEPRINTER_COPIES = @as(u32, 19);
pub const DISPID_ITEMPLATEPRINTER_PAGEFROM = @as(u32, 20);
pub const DISPID_ITEMPLATEPRINTER_PAGETO = @as(u32, 21);
pub const DISPID_ITEMPLATEPRINTER_TABLEOFLINKS = @as(u32, 22);
pub const DISPID_ITEMPLATEPRINTER_ALLLINKEDDOCUMENTS = @as(u32, 23);
pub const DISPID_ITEMPLATEPRINTER_HEADER = @as(u32, 24);
pub const DISPID_ITEMPLATEPRINTER_FOOTER = @as(u32, 25);
pub const DISPID_ITEMPLATEPRINTER_MARGINLEFT = @as(u32, 26);
pub const DISPID_ITEMPLATEPRINTER_MARGINRIGHT = @as(u32, 27);
pub const DISPID_ITEMPLATEPRINTER_MARGINTOP = @as(u32, 28);
pub const DISPID_ITEMPLATEPRINTER_MARGINBOTTOM = @as(u32, 29);
pub const DISPID_ITEMPLATEPRINTER_PAGEWIDTH = @as(u32, 30);
pub const DISPID_ITEMPLATEPRINTER_PAGEHEIGHT = @as(u32, 31);
pub const DISPID_ITEMPLATEPRINTER_UNPRINTABLELEFT = @as(u32, 32);
pub const DISPID_ITEMPLATEPRINTER_UNPRINTABLETOP = @as(u32, 33);
pub const DISPID_ITEMPLATEPRINTER_UNPRINTABLERIGHT = @as(u32, 34);
pub const DISPID_ITEMPLATEPRINTER_UNPRINTABLEBOTTOM = @as(u32, 35);
pub const DISPID_ITEMPLATEPRINTER_UPDATEPAGESTATUS = @as(u32, 36);
pub const DISPID_ITEMPLATEPRINTER2_SELECTIONENABLED = @as(u32, 37);
pub const DISPID_ITEMPLATEPRINTER2_FRAMEACTIVEENABLED = @as(u32, 38);
pub const DISPID_ITEMPLATEPRINTER2_ORIENTATION = @as(u32, 39);
pub const DISPID_ITEMPLATEPRINTER2_USEPRINTERCOPYCOLLATE = @as(u32, 40);
pub const DISPID_ITEMPLATEPRINTER2_DEVICESUPPORTS = @as(u32, 41);
pub const DISPID_ITEMPLATEPRINTER3_HEADERFOOTERFONT = @as(u32, 42);
pub const DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOP = @as(u32, 43);
pub const DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHT = @as(u32, 44);
pub const DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOM = @as(u32, 45);
pub const DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFT = @as(u32, 46);
pub const DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOPIMPORTANT = @as(u32, 47);
pub const DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHTIMPORTANT = @as(u32, 48);
pub const DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOMIMPORTANT = @as(u32, 49);
pub const DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFTIMPORTANT = @as(u32, 50);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER_STARTPRINT = @as(u32, 501);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER_DRAWPREVIEWPAGE = @as(u32, 502);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER_SETPAGECOUNT = @as(u32, 503);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER_INVALIDATEPREVIEW = @as(u32, 504);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER_GETPRINTTASKOPTIONVALUE = @as(u32, 505);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER_ENDPRINT = @as(u32, 506);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHOWHEADERFOOTER = @as(u32, 507);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHRINKTOFIT = @as(u32, 508);
pub const DISPID_IPRINTMANAGERTEMPLATEPRINTER2_PERCENTSCALE = @as(u32, 509);
pub const DISPID_ISVGTEXTPATHELEMENT_STARTOFFSET = @as(u32, 1071);
pub const DISPID_ISVGTEXTPATHELEMENT_METHOD = @as(u32, 1073);
pub const DISPID_ISVGTEXTPATHELEMENT_SPACING = @as(u32, 1075);
pub const DISPID_IDOMXMLSERIALIZER_SERIALIZETOSTRING = @as(u32, 1000);
pub const DISPID_IDOMPARSER_PARSEFROMSTRING = @as(u32, 1000);
pub const DISPID_IDOMXMLSERIALIZERFACTORY_CREATE = @as(u32, 0);
pub const DISPID_IDOMPARSERFACTORY_CREATE = @as(u32, 0);
pub const DISPID_IHTMLPROGRESSELEMENT_VALUE = @as(u32, 0);
pub const DISPID_IHTMLPROGRESSELEMENT_MAX = @as(u32, 1000);
pub const DISPID_IHTMLPROGRESSELEMENT_POSITION = @as(u32, 1001);
pub const DISPID_IHTMLPROGRESSELEMENT_FORM = @as(u32, 67540);
pub const DISPID_IDOMMSTRANSITIONEVENT_PROPERTYNAME = @as(u32, 1476);
pub const DISPID_IDOMMSTRANSITIONEVENT_ELAPSEDTIME = @as(u32, 1477);
pub const DISPID_IDOMMSTRANSITIONEVENT_INITMSTRANSITIONEVENT = @as(u32, 1478);
pub const DISPID_IDOMMSANIMATIONEVENT_ANIMATIONNAME = @as(u32, 1501);
pub const DISPID_IDOMMSANIMATIONEVENT_ELAPSEDTIME = @as(u32, 1502);
pub const DISPID_IDOMMSANIMATIONEVENT_INITMSANIMATIONEVENT = @as(u32, 1503);
pub const DISPID_IWEBGEOLOCATION_GETCURRENTPOSITION = @as(u32, 1001);
pub const DISPID_IWEBGEOLOCATION_WATCHPOSITION = @as(u32, 1002);
pub const DISPID_IWEBGEOLOCATION_CLEARWATCH = @as(u32, 1003);
pub const DISPID_IWEBGEOCOORDINATES_LATITUDE = @as(u32, 1001);
pub const DISPID_IWEBGEOCOORDINATES_LONGITUDE = @as(u32, 1002);
pub const DISPID_IWEBGEOCOORDINATES_ALTITUDE = @as(u32, 1003);
pub const DISPID_IWEBGEOCOORDINATES_ACCURACY = @as(u32, 1004);
pub const DISPID_IWEBGEOCOORDINATES_ALTITUDEACCURACY = @as(u32, 1005);
pub const DISPID_IWEBGEOCOORDINATES_HEADING = @as(u32, 1006);
pub const DISPID_IWEBGEOCOORDINATES_SPEED = @as(u32, 1007);
pub const DISPID_IWEBGEOPOSITIONERROR_CODE = @as(u32, 1001);
pub const DISPID_IWEBGEOPOSITIONERROR_MESSAGE = @as(u32, 1002);
pub const DISPID_IWEBGEOPOSITION_COORDS = @as(u32, 1001);
pub const DISPID_IWEBGEOPOSITION_TIMESTAMP = @as(u32, 1002);
pub const DISPID_ICLIENTCAPS_JAVAENABLED = @as(u32, 1);
pub const DISPID_ICLIENTCAPS_COOKIEENABLED = @as(u32, 2);
pub const DISPID_ICLIENTCAPS_CPUCLASS = @as(u32, 3);
pub const DISPID_ICLIENTCAPS_SYSTEMLANGUAGE = @as(u32, 4);
pub const DISPID_ICLIENTCAPS_USERLANGUAGE = @as(u32, 5);
pub const DISPID_ICLIENTCAPS_PLATFORM = @as(u32, 6);
pub const DISPID_ICLIENTCAPS_CONNECTIONSPEED = @as(u32, 7);
pub const DISPID_ICLIENTCAPS_ONLINE = @as(u32, 8);
pub const DISPID_ICLIENTCAPS_COLORDEPTH = @as(u32, 9);
pub const DISPID_ICLIENTCAPS_BUFFERDEPTH = @as(u32, 10);
pub const DISPID_ICLIENTCAPS_WIDTH = @as(u32, 11);
pub const DISPID_ICLIENTCAPS_HEIGHT = @as(u32, 12);
pub const DISPID_ICLIENTCAPS_AVAILHEIGHT = @as(u32, 13);
pub const DISPID_ICLIENTCAPS_AVAILWIDTH = @as(u32, 14);
pub const DISPID_ICLIENTCAPS_CONNECTIONTYPE = @as(u32, 15);
pub const DISPID_ICLIENTCAPS_ISCOMPONENTINSTALLED = @as(u32, 16);
pub const DISPID_ICLIENTCAPS_GETCOMPONENTVERSION = @as(u32, 17);
pub const DISPID_ICLIENTCAPS_COMPAREVERSIONS = @as(u32, 18);
pub const DISPID_ICLIENTCAPS_ADDCOMPONENTREQUEST = @as(u32, 19);
pub const DISPID_ICLIENTCAPS_DOCOMPONENTREQUEST = @as(u32, 20);
pub const DISPID_ICLIENTCAPS_CLEARCOMPONENTREQUEST = @as(u32, 21);
pub const DISPID_IDOMMSMANIPULATIONEVENT_LASTSTATE = @as(u32, 1526);
pub const DISPID_IDOMMSMANIPULATIONEVENT_CURRENTSTATE = @as(u32, 1527);
pub const DISPID_IDOMMSMANIPULATIONEVENT_INITMSMANIPULATIONEVENT = @as(u32, 1528);
pub const DISPID_IDOMCLOSEEVENT_WASCLEAN = @as(u32, 1526);
pub const DISPID_IDOMCLOSEEVENT_INITCLOSEEVENT = @as(u32, 1529);
pub const DISPID_IHTMLAPPLICATIONCACHE_STATUS = @as(u32, 1001);
pub const DISPID_IHTMLAPPLICATIONCACHE_ONCHECKING = @as(u32, 71717);
pub const DISPID_IHTMLAPPLICATIONCACHE_ONERROR = @as(u32, 71565);
pub const DISPID_IHTMLAPPLICATIONCACHE_ONNOUPDATE = @as(u32, 71718);
pub const DISPID_IHTMLAPPLICATIONCACHE_ONDOWNLOADING = @as(u32, 71719);
pub const DISPID_IHTMLAPPLICATIONCACHE_ONPROGRESS = @as(u32, 71681);
pub const DISPID_IHTMLAPPLICATIONCACHE_ONUPDATEREADY = @as(u32, 71720);
pub const DISPID_IHTMLAPPLICATIONCACHE_ONCACHED = @as(u32, 71721);
pub const DISPID_IHTMLAPPLICATIONCACHE_ONOBSOLETE = @as(u32, 71722);
pub const DISPID_IHTMLAPPLICATIONCACHE_UPDATE = @as(u32, 1002);
pub const DISPID_IHTMLAPPLICATIONCACHE_SWAPCACHE = @as(u32, 1003);
pub const DISPID_IHTMLAPPLICATIONCACHE_ABORT = @as(u32, 1004);
pub const DISPID_ILINEINFO_X = @as(u32, 1001);
pub const DISPID_ILINEINFO_BASELINE = @as(u32, 1002);
pub const DISPID_ILINEINFO_TEXTDESCENT = @as(u32, 1003);
pub const DISPID_ILINEINFO_TEXTHEIGHT = @as(u32, 1004);
pub const DISPID_ILINEINFO_LINEDIRECTION = @as(u32, 1005);
pub const DISPID_IHTMLCOMPUTEDSTYLE_BOLD = @as(u32, 1001);
pub const DISPID_IHTMLCOMPUTEDSTYLE_ITALIC = @as(u32, 1002);
pub const DISPID_IHTMLCOMPUTEDSTYLE_UNDERLINE = @as(u32, 1003);
pub const DISPID_IHTMLCOMPUTEDSTYLE_OVERLINE = @as(u32, 1004);
pub const DISPID_IHTMLCOMPUTEDSTYLE_STRIKEOUT = @as(u32, 1005);
pub const DISPID_IHTMLCOMPUTEDSTYLE_SUBSCRIPT = @as(u32, 1006);
pub const DISPID_IHTMLCOMPUTEDSTYLE_SUPERSCRIPT = @as(u32, 1007);
pub const DISPID_IHTMLCOMPUTEDSTYLE_EXPLICITFACE = @as(u32, 1008);
pub const DISPID_IHTMLCOMPUTEDSTYLE_FONTWEIGHT = @as(u32, 1009);
pub const DISPID_IHTMLCOMPUTEDSTYLE_FONTSIZE = @as(u32, 1010);
pub const DISPID_IHTMLCOMPUTEDSTYLE_FONTNAME = @as(u32, 1011);
pub const DISPID_IHTMLCOMPUTEDSTYLE_HASBGCOLOR = @as(u32, 1012);
pub const DISPID_IHTMLCOMPUTEDSTYLE_TEXTCOLOR = @as(u32, 1013);
pub const DISPID_IHTMLCOMPUTEDSTYLE_BACKGROUNDCOLOR = @as(u32, 1014);
pub const DISPID_IHTMLCOMPUTEDSTYLE_PREFORMATTED = @as(u32, 1015);
pub const DISPID_IHTMLCOMPUTEDSTYLE_DIRECTION = @as(u32, 1016);
pub const DISPID_IHTMLCOMPUTEDSTYLE_BLOCKDIRECTION = @as(u32, 1017);
pub const DISPID_IHTMLCOMPUTEDSTYLE_OL = @as(u32, 1018);
pub const DISPID_IHTMLDLGSAFEHELPER_CHOOSECOLORDLG = @as(u32, 1);
pub const DISPID_IHTMLDLGSAFEHELPER_GETCHARSET = @as(u32, 2);
pub const DISPID_IHTMLDLGSAFEHELPER_FONTS = @as(u32, 3);
pub const DISPID_IHTMLDLGSAFEHELPER_BLOCKFORMATS = @as(u32, 4);
pub const DISPID_IBLOCKFORMATS__NEWENUM = @as(i32, -4);
pub const DISPID_IBLOCKFORMATS_COUNT = @as(u32, 1);
pub const DISPID_IBLOCKFORMATS_ITEM = @as(u32, 0);
pub const DISPID_IFONTNAMES__NEWENUM = @as(i32, -4);
pub const DISPID_IFONTNAMES_COUNT = @as(u32, 1);
pub const DISPID_IFONTNAMES_ITEM = @as(u32, 0);
pub const DISPID_IHTMLNAMESPACE_NAME = @as(u32, 1000);
pub const DISPID_IHTMLNAMESPACE_URN = @as(u32, 1001);
pub const DISPID_IHTMLNAMESPACE_TAGNAMES = @as(u32, 1002);
pub const DISPID_IHTMLNAMESPACE_READYSTATE = @as(u32, 70652);
pub const DISPID_IHTMLNAMESPACE_ONREADYSTATECHANGE = @as(u32, 71561);
pub const DISPID_IHTMLNAMESPACE_DOIMPORT = @as(u32, 1003);
pub const DISPID_IHTMLNAMESPACE_ATTACHEVENT = @as(u32, 66043);
pub const DISPID_IHTMLNAMESPACE_DETACHEVENT = @as(u32, 66044);
pub const DISPID_IHTMLNAMESPACECOLLECTION_LENGTH = @as(u32, 1000);
pub const DISPID_IHTMLNAMESPACECOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLNAMESPACECOLLECTION_ADD = @as(u32, 1001);
pub const DISPID_HTMLNAMESPACEEVENTS_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_IHTMLIPRINTCOLLECTION_LENGTH = @as(u32, 1501);
pub const DISPID_IHTMLIPRINTCOLLECTION__NEWENUM = @as(i32, -4);
pub const DISPID_IHTMLIPRINTCOLLECTION_ITEM = @as(u32, 0);
pub const DISPID_IHTMLDIALOG_DIALOGTOP = @as(u32, 65540);
pub const DISPID_IHTMLDIALOG_DIALOGLEFT = @as(u32, 65539);
pub const DISPID_IHTMLDIALOG_DIALOGWIDTH = @as(u32, 65541);
pub const DISPID_IHTMLDIALOG_DIALOGHEIGHT = @as(u32, 65542);
pub const DISPID_IHTMLDIALOG_DIALOGARGUMENTS = @as(u32, 25000);
pub const DISPID_IHTMLDIALOG_MENUARGUMENTS = @as(u32, 25013);
pub const DISPID_IHTMLDIALOG_RETURNVALUE = @as(u32, 25001);
pub const DISPID_IHTMLDIALOG_CLOSE = @as(u32, 25011);
pub const DISPID_IHTMLDIALOG_TOSTRING = @as(u32, 25012);
pub const DISPID_IHTMLDIALOG2_STATUS = @as(u32, 25014);
pub const DISPID_IHTMLDIALOG2_RESIZABLE = @as(u32, 25015);
pub const DISPID_IHTMLDIALOG3_UNADORNED = @as(u32, 25016);
pub const DISPID_IHTMLDIALOG3_DIALOGHIDE = @as(u32, 25007);
pub const DISPID_IHTMLMODELESSINIT_PARAMETERS = @as(u32, 25000);
pub const DISPID_IHTMLMODELESSINIT_OPTIONSTRING = @as(u32, 25001);
pub const DISPID_IHTMLMODELESSINIT_MONIKER = @as(u32, 25006);
pub const DISPID_IHTMLMODELESSINIT_DOCUMENT = @as(u32, 25007);
pub const DISPID_IHTMLPOPUP_SHOW = @as(u32, 27001);
pub const DISPID_IHTMLPOPUP_HIDE = @as(u32, 27002);
pub const DISPID_IHTMLPOPUP_DOCUMENT = @as(u32, 27003);
pub const DISPID_IHTMLPOPUP_ISOPEN = @as(u32, 27004);
pub const DISPID_IHTMLAPPBEHAVIOR_APPLICATIONNAME = @as(u32, 5000);
pub const DISPID_IHTMLAPPBEHAVIOR_VERSION = @as(u32, 5001);
pub const DISPID_IHTMLAPPBEHAVIOR_ICON = @as(u32, 5002);
pub const DISPID_IHTMLAPPBEHAVIOR_SINGLEINSTANCE = @as(u32, 5003);
pub const DISPID_IHTMLAPPBEHAVIOR_MINIMIZEBUTTON = @as(u32, 5005);
pub const DISPID_IHTMLAPPBEHAVIOR_MAXIMIZEBUTTON = @as(u32, 5006);
pub const DISPID_IHTMLAPPBEHAVIOR_BORDER = @as(u32, 5007);
pub const DISPID_IHTMLAPPBEHAVIOR_BORDERSTYLE = @as(u32, 5008);
pub const DISPID_IHTMLAPPBEHAVIOR_SYSMENU = @as(u32, 5009);
pub const DISPID_IHTMLAPPBEHAVIOR_CAPTION = @as(u32, 5010);
pub const DISPID_IHTMLAPPBEHAVIOR_WINDOWSTATE = @as(u32, 5011);
pub const DISPID_IHTMLAPPBEHAVIOR_SHOWINTASKBAR = @as(u32, 5012);
pub const DISPID_IHTMLAPPBEHAVIOR_COMMANDLINE = @as(u32, 5013);
pub const DISPID_IHTMLAPPBEHAVIOR2_CONTEXTMENU = @as(u32, 5014);
pub const DISPID_IHTMLAPPBEHAVIOR2_INNERBORDER = @as(u32, 5015);
pub const DISPID_IHTMLAPPBEHAVIOR2_SCROLL = @as(u32, 5016);
pub const DISPID_IHTMLAPPBEHAVIOR2_SCROLLFLAT = @as(u32, 5017);
pub const DISPID_IHTMLAPPBEHAVIOR2_SELECTION = @as(u32, 5018);
pub const DISPID_IHTMLAPPBEHAVIOR3_NAVIGABLE = @as(u32, 5019);
pub const DISPID_IHTMLTXTRANGEINTERNAL_GET_VISIBLETEXT = @as(u32, 1050);
pub const DISPID_IE9EVENTS_ABORT = @as(u32, 1000);
pub const DISPID_IE9EVENTS_ACTIVATE = @as(u32, 1044);
pub const DISPID_IE9EVENTS_AFTERPRINT = @as(u32, 1025);
pub const DISPID_IE9EVENTS_BEFOREACTIVATE = @as(u32, 1047);
pub const DISPID_IE9EVENTS_BEFOREDEACTIVATE = @as(u32, 1034);
pub const DISPID_IE9EVENTS_BEFOREUNLOAD = @as(u32, 1017);
pub const DISPID_IE9EVENTS_BEFOREPRINT = @as(u32, 1024);
pub const DISPID_IE9EVENTS_BOUNCE = @as(u32, 1009);
pub const DISPID_IE9EVENTS_CHANGE = @as(u32, 1001);
pub const DISPID_IE9EVENTS_CLICK = @as(i32, -600);
pub const DISPID_IE9EVENTS_COMPLETE = @as(u32, 71727);
pub const DISPID_IE9EVENTS_CONTEXTMENU = @as(u32, 1023);
pub const DISPID_IE9EVENTS_DEACTIVATE = @as(u32, 1045);
pub const DISPID_IE9EVENTS_DOMCONTENTLOADED = @as(u32, 71662);
pub const DISPID_IE9EVENTS_SUCCESS = @as(u32, 71725);
pub const DISPID_IE9EVENTS_ERROR = @as(u32, 1002);
pub const DISPID_IE9EVENTS_FINISH = @as(u32, 1010);
pub const DISPID_IE9EVENTS_FOCUS = @as(u32, 65537);
pub const DISPID_IE9EVENTS_FOCUSIN = @as(u32, 1048);
pub const DISPID_IE9EVENTS_FOCUSOUT = @as(u32, 1049);
pub const DISPID_IE9EVENTS_HASHCHANGE = @as(u32, 1066);
pub const DISPID_IE9EVENTS_HELP = @as(u32, 65546);
pub const DISPID_IE9EVENTS_INPUT = @as(u32, 71663);
pub const DISPID_IE9EVENTS_LOAD = @as(u32, 1003);
pub const DISPID_IE9EVENTS_KEYDOWN = @as(i32, -602);
pub const DISPID_IE9EVENTS_KEYPRESS = @as(i32, -603);
pub const DISPID_IE9EVENTS_KEYUP = @as(i32, -604);
pub const DISPID_IE9EVENTS_MESSAGE = @as(u32, 1067);
pub const DISPID_IE9EVENTS_ONLINE = @as(u32, 1064);
pub const DISPID_IE9EVENTS_OFFLINE = @as(u32, 1065);
pub const DISPID_IE9EVENTS_READYSTATECHANGE = @as(i32, -609);
pub const DISPID_IE9EVENTS_RESET = @as(u32, 1015);
pub const DISPID_IE9EVENTS_RESIZE = @as(u32, 1016);
pub const DISPID_IE9EVENTS_SCROLL = @as(u32, 1014);
pub const DISPID_IE9EVENTS_SELECT = @as(u32, 1006);
pub const DISPID_IE9EVENTS_SELECTIONCHANGE = @as(u32, 1037);
pub const DISPID_IE9EVENTS_SELECTSTART = @as(u32, 65548);
pub const DISPID_IE9EVENTS_START = @as(u32, 1011);
pub const DISPID_IE9EVENTS_STOP = @as(u32, 1026);
pub const DISPID_IE9EVENTS_STORAGE = @as(u32, 1057);
pub const DISPID_IE9EVENTS_STORAGECOMMIT = @as(u32, 1058);
pub const DISPID_IE9EVENTS_SUBMIT = @as(u32, 1007);
pub const DISPID_IE9EVENTS_TEXTINPUT = @as(u32, 71665);
pub const DISPID_IE9EVENTS_TIMEOUT = @as(u32, 0);
pub const DISPID_IE9EVENTS_UNLOAD = @as(u32, 1008);
pub const DISPID_IE9EVENTS_WHEEL = @as(u32, 71649);
pub const DISPID_IE9EVENTS_DBLCLICK = @as(i32, -601);
pub const DISPID_IE9EVENTS_MOUSEDOWN = @as(i32, -605);
pub const DISPID_IE9EVENTS_MOUSEENTER = @as(u32, 1042);
pub const DISPID_IE9EVENTS_MOUSELEAVE = @as(u32, 1043);
pub const DISPID_IE9EVENTS_MOUSEMOVE = @as(i32, -606);
pub const DISPID_IE9EVENTS_MOUSEOUT = @as(u32, 65545);
pub const DISPID_IE9EVENTS_MOUSEOVER = @as(u32, 65544);
pub const DISPID_IE9EVENTS_MOUSEUP = @as(i32, -607);
pub const DISPID_IE9EVENTS_MOUSEWHEEL = @as(u32, 1033);
pub const DISPID_IE9EVENTS_BEFORECOPY = @as(u32, 65566);
pub const DISPID_IE9EVENTS_BEFORECUT = @as(u32, 65565);
pub const DISPID_IE9EVENTS_BEFOREPASTE = @as(u32, 65567);
pub const DISPID_IE9EVENTS_COPY = @as(u32, 65563);
pub const DISPID_IE9EVENTS_CUT = @as(u32, 65562);
pub const DISPID_IE9EVENTS_DRAG = @as(u32, 65556);
pub const DISPID_IE9EVENTS_DRAGEND = @as(u32, 65557);
pub const DISPID_IE9EVENTS_DRAGENTER = @as(u32, 65558);
pub const DISPID_IE9EVENTS_DRAGLEAVE = @as(u32, 65560);
pub const DISPID_IE9EVENTS_DRAGOVER = @as(u32, 65559);
pub const DISPID_IE9EVENTS_DRAGSTART = @as(u32, 65547);
pub const DISPID_IE9EVENTS_DROP = @as(u32, 65561);
pub const DISPID_IE9EVENTS_PASTE = @as(u32, 65564);
pub const DISPID_IE9EVENTS_MSBEFOREEDITFOCUS = @as(u32, 1027);
pub const DISPID_IE9EVENTS_MSCONTROLSELECT = @as(u32, 1036);
pub const DISPID_IE9EVENTS_MSCONTROLRESIZESTART = @as(u32, 1040);
pub const DISPID_IE9EVENTS_MSCONTROLRESIZEEND = @as(u32, 1041);
pub const DISPID_IE9EVENTS_COMPOSITIONSTART = @as(u32, 71658);
pub const DISPID_IE9EVENTS_COMPOSITIONUPDATE = @as(u32, 71659);
pub const DISPID_IE9EVENTS_COMPOSITIONEND = @as(u32, 71660);
pub const DISPID_IE9EVENTS_DOMATTRMODIFIED = @as(u32, 71661);
pub const DISPID_IE9EVENTS_DOMCHARACTERDATAMODIFIED = @as(u32, 71664);
pub const DISPID_IE9EVENTS_DOMNODEINSERTED = @as(u32, 71667);
pub const DISPID_IE9EVENTS_DOMNODEREMOVED = @as(u32, 71668);
pub const DISPID_IE9EVENTS_DOMSUBTREEMODIFIED = @as(u32, 71669);
pub const DISPID_IE9EVENTS_SVGLOAD = @as(u32, 71650);
pub const DISPID_IE9EVENTS_SVGUNLOAD = @as(u32, 71651);
pub const DISPID_IE9EVENTS_SVGABORT = @as(u32, 71652);
pub const DISPID_IE9EVENTS_SVGERROR = @as(u32, 71653);
pub const DISPID_IE9EVENTS_SVGRESIZE = @as(u32, 71654);
pub const DISPID_IE9EVENTS_SVGSCROLL = @as(u32, 71655);
pub const DISPID_IE9EVENTS_SVGZOOM = @as(u32, 71656);
pub const DISPID_IE9EVENTS_MSTHUMBNAILCLICK = @as(u32, 71657);
pub const DISPID_IE9EVENTS_MSSITEMODEJUMPLISTITEMREMOVED = @as(u32, 71666);
pub const DISPID_IE9EVENTS_CANPLAY = @as(u32, 71670);
pub const DISPID_IE9EVENTS_CANPLAYTHROUGH = @as(u32, 71671);
pub const DISPID_IE9EVENTS_DURATIONCHANGE = @as(u32, 71672);
pub const DISPID_IE9EVENTS_EMPTIED = @as(u32, 71673);
pub const DISPID_IE9EVENTS_ENDED = @as(u32, 71674);
pub const DISPID_IE9EVENTS_LOADEDDATA = @as(u32, 71675);
pub const DISPID_IE9EVENTS_LOADEDMETADATA = @as(u32, 71676);
pub const DISPID_IE9EVENTS_LOADSTART = @as(u32, 71677);
pub const DISPID_IE9EVENTS_PAUSE = @as(u32, 71678);
pub const DISPID_IE9EVENTS_PLAY = @as(u32, 71679);
pub const DISPID_IE9EVENTS_PLAYING = @as(u32, 71680);
pub const DISPID_IE9EVENTS_PROGRESS = @as(u32, 71681);
pub const DISPID_IE9EVENTS_RATECHANGE = @as(u32, 71682);
pub const DISPID_IE9EVENTS_SEEKED = @as(u32, 71683);
pub const DISPID_IE9EVENTS_SEEKING = @as(u32, 71684);
pub const DISPID_IE9EVENTS_STALLED = @as(u32, 71685);
pub const DISPID_IE9EVENTS_SUSPEND = @as(u32, 71686);
pub const DISPID_IE9EVENTS_TIMEUPDATE = @as(u32, 71687);
pub const DISPID_IE9EVENTS_VOLUMECHANGE = @as(u32, 71688);
pub const DISPID_IE9EVENTS_WAITING = @as(u32, 71689);
pub const DISPID_IE9EVENTS_BLOCKED = @as(u32, 71726);
pub const DISPID_IE9EVENTS_UPGRADENEEDED = @as(u32, 71734);
pub const DISPID_IE9EVENTS_CUECHANGE = @as(u32, 71729);
pub const DISPID_IE9EVENTS_ENTER = @as(u32, 71730);
pub const DISPID_IE9EVENTS_EXIT = @as(u32, 71731);
pub const DISPID_IE9EVENTS_ADDTRACK = @as(u32, 71736);
pub const DISPID_IE9EVENTS_REMOVETRACK = @as(u32, 71781);
pub const DISPID_IE9EVENTS_MSPOINTERDOWN = @as(u32, 71690);
pub const DISPID_IE9EVENTS_MSPOINTERMOVE = @as(u32, 71691);
pub const DISPID_IE9EVENTS_MSPOINTERUP = @as(u32, 71692);
pub const DISPID_IE9EVENTS_MSPOINTEROVER = @as(u32, 71693);
pub const DISPID_IE9EVENTS_MSPOINTEROUT = @as(u32, 71694);
pub const DISPID_IE9EVENTS_MSPOINTERCANCEL = @as(u32, 71695);
pub const DISPID_IE9EVENTS_MSPOINTERHOVER = @as(u32, 71696);
pub const DISPID_IE9EVENTS_MSLOSTPOINTERCAPTURE = @as(u32, 71706);
pub const DISPID_IE9EVENTS_MSGOTPOINTERCAPTURE = @as(u32, 71707);
pub const DISPID_IE9EVENTS_MSPOINTERENTER = @as(u32, 71769);
pub const DISPID_IE9EVENTS_MSPOINTERLEAVE = @as(u32, 71770);
pub const DISPID_IE9EVENTS_TOUCHSTART = @as(u32, 71784);
pub const DISPID_IE9EVENTS_TOUCHEND = @as(u32, 71785);
pub const DISPID_IE9EVENTS_TOUCHMOVE = @as(u32, 71786);
pub const DISPID_IE9EVENTS_TOUCHCANCEL = @as(u32, 71787);
pub const DISPID_IE9EVENTS_MSGESTURESTART = @as(u32, 71699);
pub const DISPID_IE9EVENTS_MSGESTURECHANGE = @as(u32, 71700);
pub const DISPID_IE9EVENTS_MSGESTUREEND = @as(u32, 71701);
pub const DISPID_IE9EVENTS_MSGESTUREHOLD = @as(u32, 71702);
pub const DISPID_IE9EVENTS_MSGESTURETAP = @as(u32, 71703);
pub const DISPID_IE9EVENTS_MSGESTUREDOUBLETAP = @as(u32, 71704);
pub const DISPID_IE9EVENTS_MSINERTIASTART = @as(u32, 71705);
pub const DISPID_IE9EVENTS_MSCONTENTZOOM = @as(u32, 71708);
pub const DISPID_IE9EVENTS_MSHOLDVISUAL = @as(u32, 71738);
pub const DISPID_IE9EVENTS_TRANSITIONSTART = @as(u32, 71709);
pub const DISPID_IE9EVENTS_TRANSITIONEND = @as(u32, 71710);
pub const DISPID_IE9EVENTS_ANIMATIONSTART = @as(u32, 71711);
pub const DISPID_IE9EVENTS_ANIMATIONEND = @as(u32, 71712);
pub const DISPID_IE9EVENTS_ANIMATIONITERATION = @as(u32, 71713);
pub const DISPID_IE9EVENTS_MSMANIPULATIONSTATECHANGED = @as(u32, 71714);
pub const DISPID_IE9EVENTS_CHECKING = @as(u32, 71717);
pub const DISPID_IE9EVENTS_NOUPDATE = @as(u32, 71718);
pub const DISPID_IE9EVENTS_DOWNLOADING = @as(u32, 71719);
pub const DISPID_IE9EVENTS_UPDATEREADY = @as(u32, 71720);
pub const DISPID_IE9EVENTS_CACHED = @as(u32, 71721);
pub const DISPID_IE9EVENTS_OBSOLETE = @as(u32, 71722);
pub const DISPID_IE9EVENTS_INVALID = @as(u32, 71724);
pub const DISPID_IE9EVENTS_OPEN = @as(u32, 71715);
pub const DISPID_IE9EVENTS_CLOSE = @as(u32, 71716);
pub const DISPID_IE9EVENTS_LOADEND = @as(u32, 71723);
pub const DISPID_IE9EVENTS_POPSTATE = @as(u32, 71728);
pub const DISPID_IE9EVENTS_VISIBILITYCHANGE = @as(u32, 71732);
pub const DISPID_IE9EVENTS_MSREGIONUPDATE = @as(u32, 71733);
pub const DISPID_IE9EVENTS_MSVIDEOFORMATCHANGED = @as(u32, 71735);
pub const DISPID_IE9EVENTS_MSVIDEOFRAMESTEPCOMPLETED = @as(u32, 71737);
pub const DISPID_IE9EVENTS_MSVIDEOOPTIMALLAYOUTCHANGED = @as(u32, 71739);
pub const DISPID_IE9EVENTS_MSFULLSCREENCHANGE = @as(u32, 71740);
pub const DISPID_IE9EVENTS_MSFULLSCREENERROR = @as(u32, 71741);
pub const DISPID_IE9EVENTS_MSELEMENTRESIZE = @as(u32, 71742);
pub const DISPID_IE9EVENTS_SOURCEOPEN = @as(u32, 71743);
pub const DISPID_IE9EVENTS_SOURCEENDED = @as(u32, 71745);
pub const DISPID_IE9EVENTS_SOURCECLOSE = @as(u32, 71744);
pub const DISPID_IE9EVENTS_ADDSOURCEBUFFER = @as(u32, 71746);
pub const DISPID_IE9EVENTS_REMOVESOURCEBUFFER = @as(u32, 71747);
pub const DISPID_IE9EVENTS_UPDATESTART = @as(u32, 71766);
pub const DISPID_IE9EVENTS_UPDATE = @as(u32, 71767);
pub const DISPID_IE9EVENTS_UPDATEEND = @as(u32, 71768);
pub const DISPID_IE9EVENTS_MSNEEDKEY = @as(u32, 71748);
pub const DISPID_IE9EVENTS_MSKEYMESSAGE = @as(u32, 71749);
pub const DISPID_IE9EVENTS_MSKEYERROR = @as(u32, 71750);
pub const DISPID_IE9EVENTS_MSKEYADDED = @as(u32, 71751);
pub const DISPID_IE9EVENTS_MSWEBVIEWDOMCONTENTLOADED = @as(u32, 71752);
pub const DISPID_IE9EVENTS_MSWEBVIEWCONTENTLOADING = @as(u32, 71753);
pub const DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONSTARTING = @as(u32, 71754);
pub const DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONCOMPLETED = @as(u32, 71755);
pub const DISPID_IE9EVENTS_MSWEBVIEWFRAMEDOMCONTENTLOADED = @as(u32, 71756);
pub const DISPID_IE9EVENTS_MSWEBVIEWFRAMECONTENTLOADING = @as(u32, 71757);
pub const DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONSTARTING = @as(u32, 71758);
pub const DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONCOMPLETED = @as(u32, 71759);
pub const DISPID_IE9EVENTS_MSWEBVIEWSCRIPTNOTIFY = @as(u32, 71760);
pub const DISPID_IE9EVENTS_MSWEBVIEWLONGRUNNINGSCRIPTDETECTED = @as(u32, 71763);
pub const DISPID_IE9EVENTS_MSWEBVIEWUNVIEWABLECONTENTIDENTIFIED = @as(u32, 71761);
pub const DISPID_IE9EVENTS_MSWEBVIEWUNSAFECONTENTWARNINGDISPLAYING = @as(u32, 71762);
pub const DISPID_IE9EVENTS_MSWEBVIEWCONTAINSFULLSCREENELEMENTCHANGED = @as(u32, 71783);
pub const DISPID_IE9EVENTS_WEBGLCONTEXTLOST = @as(u32, 71764);
pub const DISPID_IE9EVENTS_WEBGLCONTEXTRESTORED = @as(u32, 71765);
pub const DISPID_IE9EVENTS_WEBGLCONTEXTCREATIONERROR = @as(u32, 71792);
pub const DISPID_IE9EVENTS_MSSITEPINNED = @as(u32, 71771);
pub const DISPID_IE9EVENTS_MSORIENTATIONCHANGE = @as(u32, 71772);
pub const DISPID_IE9EVENTS_ORIENTATIONCHANGE = @as(u32, 71795);
pub const DISPID_IE9EVENTS_DEVICEORIENTATION = @as(u32, 71773);
pub const DISPID_IE9EVENTS_DEVICEMOTION = @as(u32, 71774);
pub const DISPID_IE9EVENTS_COMPASSNEEDSCALIBRATION = @as(u32, 71782);
pub const DISPID_IE9EVENTS_PAGESHOW = @as(u32, 71775);
pub const DISPID_IE9EVENTS_PAGEHIDE = @as(u32, 71776);
pub const DISPID_IE9EVENTS_MSCANDIDATEWINDOWSHOW = @as(u32, 71777);
pub const DISPID_IE9EVENTS_MSCANDIDATEWINDOWUPDATE = @as(u32, 71778);
pub const DISPID_IE9EVENTS_MSCANDIDATEWINDOWHIDE = @as(u32, 71779);
pub const CONTEXT_MENU_DEFAULT = @as(u32, 0);
pub const CONTEXT_MENU_IMAGE = @as(u32, 1);
pub const CONTEXT_MENU_CONTROL = @as(u32, 2);
pub const CONTEXT_MENU_TABLE = @as(u32, 3);
pub const CONTEXT_MENU_TEXTSELECT = @as(u32, 4);
pub const CONTEXT_MENU_ANCHOR = @as(u32, 5);
pub const CONTEXT_MENU_UNKNOWN = @as(u32, 6);
pub const CONTEXT_MENU_IMGDYNSRC = @as(u32, 7);
pub const CONTEXT_MENU_DEBUG = @as(u32, 8);
pub const CONTEXT_MENU_VSCROLL = @as(u32, 9);
pub const CONTEXT_MENU_HSCROLL = @as(u32, 10);
pub const CONTEXT_MENU_MEDIA = @as(u32, 11);
pub const CONTEXT_MENU_ENTITY = @as(u32, 12);
pub const CONTEXT_MENU_PDF = @as(u32, 13);
pub const CONTEXT_MENU_DISABLEDFLASH = @as(u32, 14);
pub const MENUEXT_SHOWDIALOG = @as(u32, 1);
pub const HTMLDLG_NOUI = @as(u32, 16);
pub const HTMLDLG_MODAL = @as(u32, 32);
pub const HTMLDLG_MODELESS = @as(u32, 64);
pub const HTMLDLG_PRINT_TEMPLATE = @as(u32, 128);
pub const HTMLDLG_VERIFY = @as(u32, 256);
pub const HTMLDLG_ALLOW_UNKNOWN_THREAD = @as(u32, 512);
pub const PRINT_DONTBOTHERUSER = @as(u32, 1);
pub const PRINT_WAITFORCOMPLETION = @as(u32, 2);
pub const CMDID_SCRIPTSITE_URL = @as(u32, 0);
pub const CMDID_SCRIPTSITE_HTMLDLGTRUST = @as(u32, 1);
pub const CMDID_SCRIPTSITE_SECSTATE = @as(u32, 2);
pub const CMDID_SCRIPTSITE_SID = @as(u32, 3);
pub const CMDID_SCRIPTSITE_TRUSTEDDOC = @as(u32, 4);
pub const CMDID_SCRIPTSITE_SECURITY_WINDOW = @as(u32, 5);
pub const CMDID_SCRIPTSITE_NAMESPACE = @as(u32, 6);
pub const CMDID_SCRIPTSITE_IURI = @as(u32, 7);
pub const CMDID_HOSTCONTEXT_URL = @as(u32, 8);
pub const CMDID_SCRIPTSITE_ALLOWRECOVERY = @as(u32, 9);
pub const CMDID_SCRIPTSITE_BASEIURI = @as(u32, 10);
pub const SZ_HTML_CLIENTSITE_OBJECTPARAM = "{d4db6850-5385-11d0-89e9-00a0c90a90ac}";
pub const CGID_DocHostCommandHandler = Guid.initString("f38bc242-b950-11d1-8918-00c04fc2c836");
pub const IECMDID_CLEAR_AUTOCOMPLETE_FOR_FORMS = @as(u32, 0);
pub const IECMDID_SETID_AUTOCOMPLETE_FOR_FORMS = @as(u32, 1);
pub const IECMDID_BEFORENAVIGATE_GETSHELLBROWSE = @as(u32, 2);
pub const IECMDID_BEFORENAVIGATE_DOEXTERNALBROWSE = @as(u32, 3);
pub const IECMDID_BEFORENAVIGATE_GETIDLIST = @as(u32, 4);
pub const IECMDID_SET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = @as(u32, 5);
pub const IECMDID_GET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = @as(u32, 6);
pub const IECMDID_ARG_CLEAR_FORMS_ALL = @as(u32, 0);
pub const IECMDID_ARG_CLEAR_FORMS_ALL_BUT_PASSWORDS = @as(u32, 1);
pub const IECMDID_ARG_CLEAR_FORMS_PASSWORDS_ONLY = @as(u32, 2);
pub const CATID_MSOfficeAntiVirus = Guid.initString("56ffcc30-d398-11d0-b2ae-00a0c908fa49");
pub const msoedmEnable = @as(u32, 1);
pub const msoedmDisable = @as(u32, 2);
pub const msoedmDontOpen = @as(u32, 3);
pub const msoslUndefined = @as(u32, 0);
pub const msoslNone = @as(u32, 1);
pub const msoslMedium = @as(u32, 2);
pub const msoslHigh = @as(u32, 3);
pub const msodsvNoMacros = @as(u32, 0);
pub const msodsvUnsigned = @as(u32, 1);
pub const msodsvPassedTrusted = @as(u32, 2);
pub const msodsvFailed = @as(u32, 3);
pub const msodsvLowSecurityLevel = @as(u32, 4);
pub const msodsvPassedTrustedCert = @as(u32, 5);
pub const STATURL_QUERYFLAG_ISCACHED = @as(u32, 65536);
pub const STATURL_QUERYFLAG_NOURL = @as(u32, 131072);
pub const STATURL_QUERYFLAG_NOTITLE = @as(u32, 262144);
pub const STATURL_QUERYFLAG_TOPLEVEL = @as(u32, 524288);
pub const STATURLFLAG_ISCACHED = @as(u32, 1);
pub const STATURLFLAG_ISTOPLEVEL = @as(u32, 2);
pub const SURFACE_LOCK_EXCLUSIVE = @as(u32, 1);
pub const SURFACE_LOCK_ALLOW_DISCARD = @as(u32, 2);
pub const SURFACE_LOCK_WAIT = @as(u32, 4);
pub const E_SURFACE_NOSURFACE = @as(i32, -2147434496);
pub const E_SURFACE_UNKNOWN_FORMAT = @as(i32, -2147434495);
pub const E_SURFACE_NOTMYPOINTER = @as(i32, -2147434494);
pub const E_SURFACE_DISCARDED = @as(i32, -2147434493);
pub const E_SURFACE_NODC = @as(i32, -2147434492);
pub const E_SURFACE_NOTMYDC = @as(i32, -2147434491);
pub const S_SURFACE_DISCARDED = @as(i32, 49155);
pub const COLOR_NO_TRANSPARENT = @as(u32, 4294967295);
pub const IMGDECODE_EVENT_PROGRESS = @as(u32, 1);
pub const IMGDECODE_EVENT_PALETTE = @as(u32, 2);
pub const IMGDECODE_EVENT_BEGINBITS = @as(u32, 4);
pub const IMGDECODE_EVENT_BITSCOMPLETE = @as(u32, 8);
pub const IMGDECODE_EVENT_USEDDRAW = @as(u32, 16);
pub const IMGDECODE_HINT_TOPDOWN = @as(u32, 1);
pub const IMGDECODE_HINT_BOTTOMUP = @as(u32, 2);
pub const IMGDECODE_HINT_FULLWIDTH = @as(u32, 4);
pub const MAPMIME_DEFAULT = @as(u32, 0);
pub const MAPMIME_CLSID = @as(u32, 1);
pub const MAPMIME_DISABLE = @as(u32, 2);
pub const MAPMIME_DEFAULT_ALWAYS = @as(u32, 3);
pub const TIMERMODE_NORMAL = @as(u32, 0);
pub const TIMERMODE_VISIBILITYAWARE = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (1565)
//--------------------------------------------------------------------------------
const CLSID_HTMLCSSStyleDeclaration_Value = Guid.initString("30510741-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCSSStyleDeclaration = &CLSID_HTMLCSSStyleDeclaration_Value;

const CLSID_HTMLStyle_Value = Guid.initString("3050f285-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyle = &CLSID_HTMLStyle_Value;

const CLSID_HTMLRuleStyle_Value = Guid.initString("3050f3d0-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLRuleStyle = &CLSID_HTMLRuleStyle_Value;

const CLSID_HTMLCSSRule_Value = Guid.initString("305106ef-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCSSRule = &CLSID_HTMLCSSRule_Value;

const CLSID_HTMLCSSImportRule_Value = Guid.initString("305106f0-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCSSImportRule = &CLSID_HTMLCSSImportRule_Value;

const CLSID_HTMLCSSMediaRule_Value = Guid.initString("305106f1-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCSSMediaRule = &CLSID_HTMLCSSMediaRule_Value;

const CLSID_HTMLCSSMediaList_Value = Guid.initString("30510732-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCSSMediaList = &CLSID_HTMLCSSMediaList_Value;

const CLSID_HTMLCSSNamespaceRule_Value = Guid.initString("305106f2-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCSSNamespaceRule = &CLSID_HTMLCSSNamespaceRule_Value;

const CLSID_HTMLMSCSSKeyframeRule_Value = Guid.initString("3051080e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLMSCSSKeyframeRule = &CLSID_HTMLMSCSSKeyframeRule_Value;

const CLSID_HTMLMSCSSKeyframesRule_Value = Guid.initString("3051080f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLMSCSSKeyframesRule = &CLSID_HTMLMSCSSKeyframesRule_Value;

const CLSID_HTMLRenderStyle_Value = Guid.initString("3050f6aa-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLRenderStyle = &CLSID_HTMLRenderStyle_Value;

const CLSID_HTMLCurrentStyle_Value = Guid.initString("3050f3dc-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCurrentStyle = &CLSID_HTMLCurrentStyle_Value;

const CLSID_HTMLDOMAttribute_Value = Guid.initString("3050f4b2-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDOMAttribute = &CLSID_HTMLDOMAttribute_Value;

const CLSID_HTMLDOMTextNode_Value = Guid.initString("3050f4ba-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDOMTextNode = &CLSID_HTMLDOMTextNode_Value;

const CLSID_HTMLDOMImplementation_Value = Guid.initString("3050f80e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDOMImplementation = &CLSID_HTMLDOMImplementation_Value;

const CLSID_HTMLAttributeCollection_Value = Guid.initString("3050f4cc-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLAttributeCollection = &CLSID_HTMLAttributeCollection_Value;

const CLSID_StaticNodeList_Value = Guid.initString("30510467-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_StaticNodeList = &CLSID_StaticNodeList_Value;

const CLSID_DOMChildrenCollection_Value = Guid.initString("3050f5aa-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMChildrenCollection = &CLSID_DOMChildrenCollection_Value;

const CLSID_HTMLDefaults_Value = Guid.initString("3050f6c8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDefaults = &CLSID_HTMLDefaults_Value;

const CLSID_HTCDefaultDispatch_Value = Guid.initString("3050f4fc-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTCDefaultDispatch = &CLSID_HTCDefaultDispatch_Value;

const CLSID_HTCPropertyBehavior_Value = Guid.initString("3050f5de-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTCPropertyBehavior = &CLSID_HTCPropertyBehavior_Value;

const CLSID_HTCMethodBehavior_Value = Guid.initString("3050f630-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTCMethodBehavior = &CLSID_HTCMethodBehavior_Value;

const CLSID_HTCEventBehavior_Value = Guid.initString("3050f4fe-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTCEventBehavior = &CLSID_HTCEventBehavior_Value;

const CLSID_HTCAttachBehavior_Value = Guid.initString("3050f5f5-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTCAttachBehavior = &CLSID_HTCAttachBehavior_Value;

const CLSID_HTCDescBehavior_Value = Guid.initString("3050f5dd-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTCDescBehavior = &CLSID_HTCDescBehavior_Value;

const CLSID_HTMLUrnCollection_Value = Guid.initString("3050f580-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLUrnCollection = &CLSID_HTMLUrnCollection_Value;

const CLSID_HTMLGenericElement_Value = Guid.initString("3050f4b8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLGenericElement = &CLSID_HTMLGenericElement_Value;

const CLSID_HTMLStyleSheetRule_Value = Guid.initString("3050f3ce-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleSheetRule = &CLSID_HTMLStyleSheetRule_Value;

const CLSID_HTMLStyleSheetRulesCollection_Value = Guid.initString("3050f3cd-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleSheetRulesCollection = &CLSID_HTMLStyleSheetRulesCollection_Value;

const CLSID_HTMLStyleSheetPage_Value = Guid.initString("3050f7ef-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleSheetPage = &CLSID_HTMLStyleSheetPage_Value;

const CLSID_HTMLStyleSheetPagesCollection_Value = Guid.initString("3050f7f1-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleSheetPagesCollection = &CLSID_HTMLStyleSheetPagesCollection_Value;

const CLSID_HTMLStyleSheet_Value = Guid.initString("3050f2e4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleSheet = &CLSID_HTMLStyleSheet_Value;

const CLSID_HTMLStyleSheetsCollection_Value = Guid.initString("3050f37f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleSheetsCollection = &CLSID_HTMLStyleSheetsCollection_Value;

const CLSID_HTMLLinkElement_Value = Guid.initString("3050f277-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLLinkElement = &CLSID_HTMLLinkElement_Value;

const CLSID_HTMLDOMRange_Value = Guid.initString("305106c3-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDOMRange = &CLSID_HTMLDOMRange_Value;

const CLSID_HTMLFormElement_Value = Guid.initString("3050f251-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLFormElement = &CLSID_HTMLFormElement_Value;

const CLSID_HTMLTextElement_Value = Guid.initString("3050f26a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTextElement = &CLSID_HTMLTextElement_Value;

const CLSID_HTMLImg_Value = Guid.initString("3050f241-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLImg = &CLSID_HTMLImg_Value;

const CLSID_HTMLImageElementFactory_Value = Guid.initString("3050f38f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLImageElementFactory = &CLSID_HTMLImageElementFactory_Value;

const CLSID_HTMLBody_Value = Guid.initString("3050f24a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLBody = &CLSID_HTMLBody_Value;

const CLSID_HTMLFontElement_Value = Guid.initString("3050f27b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLFontElement = &CLSID_HTMLFontElement_Value;

const CLSID_HTMLAnchorElement_Value = Guid.initString("3050f248-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLAnchorElement = &CLSID_HTMLAnchorElement_Value;

const CLSID_HTMLLabelElement_Value = Guid.initString("3050f32b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLLabelElement = &CLSID_HTMLLabelElement_Value;

const CLSID_HTMLListElement_Value = Guid.initString("3050f272-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLListElement = &CLSID_HTMLListElement_Value;

const CLSID_HTMLUListElement_Value = Guid.initString("3050f269-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLUListElement = &CLSID_HTMLUListElement_Value;

const CLSID_HTMLOListElement_Value = Guid.initString("3050f270-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLOListElement = &CLSID_HTMLOListElement_Value;

const CLSID_HTMLLIElement_Value = Guid.initString("3050f273-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLLIElement = &CLSID_HTMLLIElement_Value;

const CLSID_HTMLBlockElement_Value = Guid.initString("3050f281-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLBlockElement = &CLSID_HTMLBlockElement_Value;

const CLSID_HTMLDivElement_Value = Guid.initString("3050f27e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDivElement = &CLSID_HTMLDivElement_Value;

const CLSID_HTMLDDElement_Value = Guid.initString("3050f27f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDDElement = &CLSID_HTMLDDElement_Value;

const CLSID_HTMLDTElement_Value = Guid.initString("3050f27c-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDTElement = &CLSID_HTMLDTElement_Value;

const CLSID_HTMLBRElement_Value = Guid.initString("3050f280-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLBRElement = &CLSID_HTMLBRElement_Value;

const CLSID_HTMLDListElement_Value = Guid.initString("3050f27d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDListElement = &CLSID_HTMLDListElement_Value;

const CLSID_HTMLHRElement_Value = Guid.initString("3050f252-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLHRElement = &CLSID_HTMLHRElement_Value;

const CLSID_HTMLParaElement_Value = Guid.initString("3050f26f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLParaElement = &CLSID_HTMLParaElement_Value;

const CLSID_HTMLElementCollection_Value = Guid.initString("3050f4cb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLElementCollection = &CLSID_HTMLElementCollection_Value;

const CLSID_HTMLHeaderElement_Value = Guid.initString("3050f27a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLHeaderElement = &CLSID_HTMLHeaderElement_Value;

const CLSID_HTMLSelectElement_Value = Guid.initString("3050f245-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLSelectElement = &CLSID_HTMLSelectElement_Value;

const CLSID_HTMLWndSelectElement_Value = Guid.initString("3050f2cf-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLWndSelectElement = &CLSID_HTMLWndSelectElement_Value;

const CLSID_HTMLOptionElement_Value = Guid.initString("3050f24d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLOptionElement = &CLSID_HTMLOptionElement_Value;

const CLSID_HTMLOptionElementFactory_Value = Guid.initString("3050f38d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLOptionElementFactory = &CLSID_HTMLOptionElementFactory_Value;

const CLSID_HTMLWndOptionElement_Value = Guid.initString("3050f2d0-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLWndOptionElement = &CLSID_HTMLWndOptionElement_Value;

const CLSID_HTMLInputElement_Value = Guid.initString("3050f5d8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLInputElement = &CLSID_HTMLInputElement_Value;

const CLSID_HTMLTextAreaElement_Value = Guid.initString("3050f2ac-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTextAreaElement = &CLSID_HTMLTextAreaElement_Value;

const CLSID_HTMLRichtextElement_Value = Guid.initString("3050f2df-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLRichtextElement = &CLSID_HTMLRichtextElement_Value;

const CLSID_HTMLButtonElement_Value = Guid.initString("3050f2c6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLButtonElement = &CLSID_HTMLButtonElement_Value;

const CLSID_HTMLMarqueeElement_Value = Guid.initString("3050f2b9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLMarqueeElement = &CLSID_HTMLMarqueeElement_Value;

const CLSID_HTMLHtmlElement_Value = Guid.initString("3050f491-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLHtmlElement = &CLSID_HTMLHtmlElement_Value;

const CLSID_HTMLHeadElement_Value = Guid.initString("3050f493-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLHeadElement = &CLSID_HTMLHeadElement_Value;

const CLSID_HTMLTitleElement_Value = Guid.initString("3050f284-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTitleElement = &CLSID_HTMLTitleElement_Value;

const CLSID_HTMLMetaElement_Value = Guid.initString("3050f275-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLMetaElement = &CLSID_HTMLMetaElement_Value;

const CLSID_HTMLBaseElement_Value = Guid.initString("3050f276-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLBaseElement = &CLSID_HTMLBaseElement_Value;

const CLSID_HTMLIsIndexElement_Value = Guid.initString("3050f278-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLIsIndexElement = &CLSID_HTMLIsIndexElement_Value;

const CLSID_HTMLNextIdElement_Value = Guid.initString("3050f279-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLNextIdElement = &CLSID_HTMLNextIdElement_Value;

const CLSID_HTMLBaseFontElement_Value = Guid.initString("3050f282-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLBaseFontElement = &CLSID_HTMLBaseFontElement_Value;

const CLSID_HTMLUnknownElement_Value = Guid.initString("3050f268-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLUnknownElement = &CLSID_HTMLUnknownElement_Value;

const CLSID_HTMLHistory_Value = Guid.initString("feceaaa3-8405-11cf-8ba1-00aa00476da6");
pub const CLSID_HTMLHistory = &CLSID_HTMLHistory_Value;

const CLSID_COpsProfile_Value = Guid.initString("3050f402-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_COpsProfile = &CLSID_COpsProfile_Value;

const CLSID_HTMLNavigator_Value = Guid.initString("feceaaa6-8405-11cf-8ba1-00aa00476da6");
pub const CLSID_HTMLNavigator = &CLSID_HTMLNavigator_Value;

const CLSID_HTMLLocation_Value = Guid.initString("163bb1e1-6e00-11cf-837a-48dc04c10000");
pub const CLSID_HTMLLocation = &CLSID_HTMLLocation_Value;

const CLSID_CMimeTypes_Value = Guid.initString("3050f3fe-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CMimeTypes = &CLSID_CMimeTypes_Value;

const CLSID_CPlugins_Value = Guid.initString("3050f3ff-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CPlugins = &CLSID_CPlugins_Value;

const CLSID_CEventObj_Value = Guid.initString("3050f48a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CEventObj = &CLSID_CEventObj_Value;

const CLSID_HTMLStyleMedia_Value = Guid.initString("3051074c-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleMedia = &CLSID_HTMLStyleMedia_Value;

const CLSID_FramesCollection_Value = Guid.initString("3050f7f6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_FramesCollection = &CLSID_FramesCollection_Value;

const CLSID_HTMLScreen_Value = Guid.initString("3050f35d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLScreen = &CLSID_HTMLScreen_Value;

const CLSID_HTMLWindow2_Value = Guid.initString("d48a6ec6-6a4a-11cf-94a7-444553540000");
pub const CLSID_HTMLWindow2 = &CLSID_HTMLWindow2_Value;

const CLSID_HTMLWindowProxy_Value = Guid.initString("3050f391-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLWindowProxy = &CLSID_HTMLWindowProxy_Value;

const CLSID_HTMLDocumentCompatibleInfo_Value = Guid.initString("3051041b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDocumentCompatibleInfo = &CLSID_HTMLDocumentCompatibleInfo_Value;

const CLSID_HTMLDocumentCompatibleInfoCollection_Value = Guid.initString("30510419-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDocumentCompatibleInfoCollection = &CLSID_HTMLDocumentCompatibleInfoCollection_Value;

const CLSID_HTMLDocument_Value = Guid.initString("25336920-03f9-11cf-8fd0-00aa00686f13");
pub const CLSID_HTMLDocument = &CLSID_HTMLDocument_Value;

const CLSID_Scriptlet_Value = Guid.initString("ae24fdae-03c6-11d1-8b76-0080c744f389");
pub const CLSID_Scriptlet = &CLSID_Scriptlet_Value;

const CLSID_HTMLEmbed_Value = Guid.initString("3050f25d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLEmbed = &CLSID_HTMLEmbed_Value;

const CLSID_HTMLAreasCollection_Value = Guid.initString("3050f4ca-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLAreasCollection = &CLSID_HTMLAreasCollection_Value;

const CLSID_HTMLMapElement_Value = Guid.initString("3050f271-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLMapElement = &CLSID_HTMLMapElement_Value;

const CLSID_HTMLAreaElement_Value = Guid.initString("3050f283-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLAreaElement = &CLSID_HTMLAreaElement_Value;

const CLSID_HTMLTableCaption_Value = Guid.initString("3050f2ec-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTableCaption = &CLSID_HTMLTableCaption_Value;

const CLSID_HTMLCommentElement_Value = Guid.initString("3050f317-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCommentElement = &CLSID_HTMLCommentElement_Value;

const CLSID_HTMLPhraseElement_Value = Guid.initString("3050f26e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLPhraseElement = &CLSID_HTMLPhraseElement_Value;

const CLSID_HTMLSpanElement_Value = Guid.initString("3050f3f5-98b4-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLSpanElement = &CLSID_HTMLSpanElement_Value;

const CLSID_HTMLTable_Value = Guid.initString("3050f26b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTable = &CLSID_HTMLTable_Value;

const CLSID_HTMLTableCol_Value = Guid.initString("3050f26c-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTableCol = &CLSID_HTMLTableCol_Value;

const CLSID_HTMLTableSection_Value = Guid.initString("3050f2e9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTableSection = &CLSID_HTMLTableSection_Value;

const CLSID_HTMLTableRow_Value = Guid.initString("3050f26d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTableRow = &CLSID_HTMLTableRow_Value;

const CLSID_HTMLTableCell_Value = Guid.initString("3050f246-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTableCell = &CLSID_HTMLTableCell_Value;

const CLSID_HTMLScriptElement_Value = Guid.initString("3050f28c-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLScriptElement = &CLSID_HTMLScriptElement_Value;

const CLSID_HTMLNoShowElement_Value = Guid.initString("3050f38b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLNoShowElement = &CLSID_HTMLNoShowElement_Value;

const CLSID_HTMLObjectElement_Value = Guid.initString("3050f24e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLObjectElement = &CLSID_HTMLObjectElement_Value;

const CLSID_HTMLParamElement_Value = Guid.initString("3050f83e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLParamElement = &CLSID_HTMLParamElement_Value;

const CLSID_HTMLFrameBase_Value = Guid.initString("3050f312-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLFrameBase = &CLSID_HTMLFrameBase_Value;

const CLSID_HTMLFrameElement_Value = Guid.initString("3050f314-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLFrameElement = &CLSID_HTMLFrameElement_Value;

const CLSID_HTMLIFrame_Value = Guid.initString("3050f316-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLIFrame = &CLSID_HTMLIFrame_Value;

const CLSID_HTMLDivPosition_Value = Guid.initString("3050f249-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDivPosition = &CLSID_HTMLDivPosition_Value;

const CLSID_HTMLFieldSetElement_Value = Guid.initString("3050f3e8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLFieldSetElement = &CLSID_HTMLFieldSetElement_Value;

const CLSID_HTMLLegendElement_Value = Guid.initString("3050f3e9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLLegendElement = &CLSID_HTMLLegendElement_Value;

const CLSID_HTMLSpanFlow_Value = Guid.initString("3050f3e6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLSpanFlow = &CLSID_HTMLSpanFlow_Value;

const CLSID_HTMLFrameSetSite_Value = Guid.initString("3050f31a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLFrameSetSite = &CLSID_HTMLFrameSetSite_Value;

const CLSID_HTMLBGsound_Value = Guid.initString("3050f370-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLBGsound = &CLSID_HTMLBGsound_Value;

const CLSID_HTMLStyleElement_Value = Guid.initString("3050f37d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleElement = &CLSID_HTMLStyleElement_Value;

const CLSID_HTMLStyleFontFace_Value = Guid.initString("3050f3d4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStyleFontFace = &CLSID_HTMLStyleFontFace_Value;

const CLSID_XDomainRequest_Value = Guid.initString("30510455-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_XDomainRequest = &CLSID_XDomainRequest_Value;

const CLSID_XDomainRequestFactory_Value = Guid.initString("30510457-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_XDomainRequestFactory = &CLSID_XDomainRequestFactory_Value;

const CLSID_HTMLStorage_Value = Guid.initString("30510475-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLStorage = &CLSID_HTMLStorage_Value;

const CLSID_DOMEvent_Value = Guid.initString("305104bb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMEvent = &CLSID_DOMEvent_Value;

const CLSID_DOMUIEvent_Value = Guid.initString("305106cb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMUIEvent = &CLSID_DOMUIEvent_Value;

const CLSID_DOMMouseEvent_Value = Guid.initString("305106cf-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMMouseEvent = &CLSID_DOMMouseEvent_Value;

const CLSID_DOMDragEvent_Value = Guid.initString("30510762-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMDragEvent = &CLSID_DOMDragEvent_Value;

const CLSID_DOMMouseWheelEvent_Value = Guid.initString("305106d1-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMMouseWheelEvent = &CLSID_DOMMouseWheelEvent_Value;

const CLSID_DOMWheelEvent_Value = Guid.initString("305106d3-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMWheelEvent = &CLSID_DOMWheelEvent_Value;

const CLSID_DOMTextEvent_Value = Guid.initString("305106d5-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMTextEvent = &CLSID_DOMTextEvent_Value;

const CLSID_DOMKeyboardEvent_Value = Guid.initString("305106d7-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMKeyboardEvent = &CLSID_DOMKeyboardEvent_Value;

const CLSID_DOMCompositionEvent_Value = Guid.initString("305106d9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMCompositionEvent = &CLSID_DOMCompositionEvent_Value;

const CLSID_DOMMutationEvent_Value = Guid.initString("305106db-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMMutationEvent = &CLSID_DOMMutationEvent_Value;

const CLSID_DOMBeforeUnloadEvent_Value = Guid.initString("30510764-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMBeforeUnloadEvent = &CLSID_DOMBeforeUnloadEvent_Value;

const CLSID_DOMFocusEvent_Value = Guid.initString("305106cd-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMFocusEvent = &CLSID_DOMFocusEvent_Value;

const CLSID_DOMCustomEvent_Value = Guid.initString("305106df-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMCustomEvent = &CLSID_DOMCustomEvent_Value;

const CLSID_CanvasGradient_Value = Guid.initString("30510715-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CanvasGradient = &CLSID_CanvasGradient_Value;

const CLSID_CanvasPattern_Value = Guid.initString("30510717-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CanvasPattern = &CLSID_CanvasPattern_Value;

const CLSID_CanvasTextMetrics_Value = Guid.initString("30510719-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CanvasTextMetrics = &CLSID_CanvasTextMetrics_Value;

const CLSID_CanvasImageData_Value = Guid.initString("3051071b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CanvasImageData = &CLSID_CanvasImageData_Value;

const CLSID_CanvasRenderingContext2D_Value = Guid.initString("30510700-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CanvasRenderingContext2D = &CLSID_CanvasRenderingContext2D_Value;

const CLSID_HTMLCanvasElement_Value = Guid.initString("305106e5-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLCanvasElement = &CLSID_HTMLCanvasElement_Value;

const CLSID_DOMProgressEvent_Value = Guid.initString("3051071f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMProgressEvent = &CLSID_DOMProgressEvent_Value;

const CLSID_DOMMessageEvent_Value = Guid.initString("30510721-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMMessageEvent = &CLSID_DOMMessageEvent_Value;

const CLSID_DOMSiteModeEvent_Value = Guid.initString("30510766-98b6-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMSiteModeEvent = &CLSID_DOMSiteModeEvent_Value;

const CLSID_DOMStorageEvent_Value = Guid.initString("30510723-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMStorageEvent = &CLSID_DOMStorageEvent_Value;

const CLSID_XMLHttpRequestEventTarget_Value = Guid.initString("30510831-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_XMLHttpRequestEventTarget = &CLSID_XMLHttpRequestEventTarget_Value;

const CLSID_HTMLXMLHttpRequest_Value = Guid.initString("3051040b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLXMLHttpRequest = &CLSID_HTMLXMLHttpRequest_Value;

const CLSID_HTMLXMLHttpRequestFactory_Value = Guid.initString("3051040d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLXMLHttpRequestFactory = &CLSID_HTMLXMLHttpRequestFactory_Value;

const CLSID_SVGAngle_Value = Guid.initString("30510584-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAngle = &CLSID_SVGAngle_Value;

const CLSID_SVGAnimatedAngle_Value = Guid.initString("305105e4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedAngle = &CLSID_SVGAnimatedAngle_Value;

const CLSID_SVGAnimatedTransformList_Value = Guid.initString("305105b1-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedTransformList = &CLSID_SVGAnimatedTransformList_Value;

const CLSID_SVGAnimatedBoolean_Value = Guid.initString("3051058b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedBoolean = &CLSID_SVGAnimatedBoolean_Value;

const CLSID_SVGAnimatedEnumeration_Value = Guid.initString("3051058e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedEnumeration = &CLSID_SVGAnimatedEnumeration_Value;

const CLSID_SVGAnimatedInteger_Value = Guid.initString("3051058f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedInteger = &CLSID_SVGAnimatedInteger_Value;

const CLSID_SVGAnimatedLength_Value = Guid.initString("30510581-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedLength = &CLSID_SVGAnimatedLength_Value;

const CLSID_SVGAnimatedLengthList_Value = Guid.initString("30510582-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedLengthList = &CLSID_SVGAnimatedLengthList_Value;

const CLSID_SVGAnimatedNumber_Value = Guid.initString("30510588-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedNumber = &CLSID_SVGAnimatedNumber_Value;

const CLSID_SVGAnimatedNumberList_Value = Guid.initString("3051058a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedNumberList = &CLSID_SVGAnimatedNumberList_Value;

const CLSID_SVGAnimatedRect_Value = Guid.initString("30510586-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedRect = &CLSID_SVGAnimatedRect_Value;

const CLSID_SVGAnimatedString_Value = Guid.initString("3051058c-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedString = &CLSID_SVGAnimatedString_Value;

const CLSID_SVGClipPathElement_Value = Guid.initString("305105e6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGClipPathElement = &CLSID_SVGClipPathElement_Value;

const CLSID_SVGElement_Value = Guid.initString("30510564-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGElement = &CLSID_SVGElement_Value;

const CLSID_SVGLength_Value = Guid.initString("3051057e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGLength = &CLSID_SVGLength_Value;

const CLSID_SVGLengthList_Value = Guid.initString("30510580-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGLengthList = &CLSID_SVGLengthList_Value;

const CLSID_SVGMatrix_Value = Guid.initString("305105ae-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGMatrix = &CLSID_SVGMatrix_Value;

const CLSID_SVGNumber_Value = Guid.initString("30510587-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGNumber = &CLSID_SVGNumber_Value;

const CLSID_SVGNumberList_Value = Guid.initString("30510589-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGNumberList = &CLSID_SVGNumberList_Value;

const CLSID_SVGPatternElement_Value = Guid.initString("305105d4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPatternElement = &CLSID_SVGPatternElement_Value;

const CLSID_SVGPathSeg_Value = Guid.initString("305105b3-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSeg = &CLSID_SVGPathSeg_Value;

const CLSID_SVGPathSegArcAbs_Value = Guid.initString("305105bb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegArcAbs = &CLSID_SVGPathSegArcAbs_Value;

const CLSID_SVGPathSegArcRel_Value = Guid.initString("305105bc-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegArcRel = &CLSID_SVGPathSegArcRel_Value;

const CLSID_SVGPathSegClosePath_Value = Guid.initString("305105bd-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegClosePath = &CLSID_SVGPathSegClosePath_Value;

const CLSID_SVGPathSegMovetoAbs_Value = Guid.initString("305105cc-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegMovetoAbs = &CLSID_SVGPathSegMovetoAbs_Value;

const CLSID_SVGPathSegMovetoRel_Value = Guid.initString("305105cd-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegMovetoRel = &CLSID_SVGPathSegMovetoRel_Value;

const CLSID_SVGPathSegLinetoAbs_Value = Guid.initString("305105c6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegLinetoAbs = &CLSID_SVGPathSegLinetoAbs_Value;

const CLSID_SVGPathSegLinetoRel_Value = Guid.initString("305105c9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegLinetoRel = &CLSID_SVGPathSegLinetoRel_Value;

const CLSID_SVGPathSegCurvetoCubicAbs_Value = Guid.initString("305105be-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegCurvetoCubicAbs = &CLSID_SVGPathSegCurvetoCubicAbs_Value;

const CLSID_SVGPathSegCurvetoCubicRel_Value = Guid.initString("305105bf-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegCurvetoCubicRel = &CLSID_SVGPathSegCurvetoCubicRel_Value;

const CLSID_SVGPathSegCurvetoCubicSmoothAbs_Value = Guid.initString("305105c0-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegCurvetoCubicSmoothAbs = &CLSID_SVGPathSegCurvetoCubicSmoothAbs_Value;

const CLSID_SVGPathSegCurvetoCubicSmoothRel_Value = Guid.initString("305105c1-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegCurvetoCubicSmoothRel = &CLSID_SVGPathSegCurvetoCubicSmoothRel_Value;

const CLSID_SVGPathSegCurvetoQuadraticAbs_Value = Guid.initString("305105c2-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegCurvetoQuadraticAbs = &CLSID_SVGPathSegCurvetoQuadraticAbs_Value;

const CLSID_SVGPathSegCurvetoQuadraticRel_Value = Guid.initString("305105c3-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegCurvetoQuadraticRel = &CLSID_SVGPathSegCurvetoQuadraticRel_Value;

const CLSID_SVGPathSegCurvetoQuadraticSmoothAbs_Value = Guid.initString("305105c4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegCurvetoQuadraticSmoothAbs = &CLSID_SVGPathSegCurvetoQuadraticSmoothAbs_Value;

const CLSID_SVGPathSegCurvetoQuadraticSmoothRel_Value = Guid.initString("305105c5-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegCurvetoQuadraticSmoothRel = &CLSID_SVGPathSegCurvetoQuadraticSmoothRel_Value;

const CLSID_SVGPathSegLinetoHorizontalAbs_Value = Guid.initString("305105c7-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegLinetoHorizontalAbs = &CLSID_SVGPathSegLinetoHorizontalAbs_Value;

const CLSID_SVGPathSegLinetoHorizontalRel_Value = Guid.initString("305105c8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegLinetoHorizontalRel = &CLSID_SVGPathSegLinetoHorizontalRel_Value;

const CLSID_SVGPathSegLinetoVerticalAbs_Value = Guid.initString("305105ca-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegLinetoVerticalAbs = &CLSID_SVGPathSegLinetoVerticalAbs_Value;

const CLSID_SVGPathSegLinetoVerticalRel_Value = Guid.initString("305105cb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegLinetoVerticalRel = &CLSID_SVGPathSegLinetoVerticalRel_Value;

const CLSID_SVGPathSegList_Value = Guid.initString("305105b4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathSegList = &CLSID_SVGPathSegList_Value;

const CLSID_SVGPoint_Value = Guid.initString("305105ba-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPoint = &CLSID_SVGPoint_Value;

const CLSID_SVGPointList_Value = Guid.initString("305105b9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPointList = &CLSID_SVGPointList_Value;

const CLSID_SVGRect_Value = Guid.initString("30510583-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGRect = &CLSID_SVGRect_Value;

const CLSID_SVGStringList_Value = Guid.initString("3051058d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGStringList = &CLSID_SVGStringList_Value;

const CLSID_SVGTransform_Value = Guid.initString("305105af-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGTransform = &CLSID_SVGTransform_Value;

const CLSID_SVGSVGElement_Value = Guid.initString("30510574-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGSVGElement = &CLSID_SVGSVGElement_Value;

const CLSID_SVGUseElement_Value = Guid.initString("30510590-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGUseElement = &CLSID_SVGUseElement_Value;

const CLSID_HTMLStyleSheetRulesAppliedCollection_Value = Guid.initString("eb36f845-2395-4719-b85c-d0d80e184bd9");
pub const CLSID_HTMLStyleSheetRulesAppliedCollection = &CLSID_HTMLStyleSheetRulesAppliedCollection_Value;

const CLSID_RulesApplied_Value = Guid.initString("7c803920-7a53-4d26-98ac-fdd23e6b9e01");
pub const CLSID_RulesApplied = &CLSID_RulesApplied_Value;

const CLSID_RulesAppliedCollection_Value = Guid.initString("671926ee-c3cf-40af-be8f-1cbaee6486e8");
pub const CLSID_RulesAppliedCollection = &CLSID_RulesAppliedCollection_Value;

const CLSID_HTMLW3CComputedStyle_Value = Guid.initString("305106c8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLW3CComputedStyle = &CLSID_HTMLW3CComputedStyle_Value;

const CLSID_SVGTransformList_Value = Guid.initString("305105b0-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGTransformList = &CLSID_SVGTransformList_Value;

const CLSID_SVGCircleElement_Value = Guid.initString("30510578-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGCircleElement = &CLSID_SVGCircleElement_Value;

const CLSID_SVGEllipseElement_Value = Guid.initString("30510579-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGEllipseElement = &CLSID_SVGEllipseElement_Value;

const CLSID_SVGLineElement_Value = Guid.initString("3051057a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGLineElement = &CLSID_SVGLineElement_Value;

const CLSID_SVGRectElement_Value = Guid.initString("30510577-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGRectElement = &CLSID_SVGRectElement_Value;

const CLSID_SVGPolygonElement_Value = Guid.initString("3051057b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPolygonElement = &CLSID_SVGPolygonElement_Value;

const CLSID_SVGPolylineElement_Value = Guid.initString("3051057c-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPolylineElement = &CLSID_SVGPolylineElement_Value;

const CLSID_SVGGElement_Value = Guid.initString("3051056f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGGElement = &CLSID_SVGGElement_Value;

const CLSID_SVGSymbolElement_Value = Guid.initString("30510571-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGSymbolElement = &CLSID_SVGSymbolElement_Value;

const CLSID_SVGDefsElement_Value = Guid.initString("30510570-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGDefsElement = &CLSID_SVGDefsElement_Value;

const CLSID_SVGPathElement_Value = Guid.initString("305105b2-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPathElement = &CLSID_SVGPathElement_Value;

const CLSID_SVGPreserveAspectRatio_Value = Guid.initString("305105d0-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGPreserveAspectRatio = &CLSID_SVGPreserveAspectRatio_Value;

const CLSID_SVGTextElement_Value = Guid.initString("305105df-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGTextElement = &CLSID_SVGTextElement_Value;

const CLSID_SVGAnimatedPreserveAspectRatio_Value = Guid.initString("305105ce-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAnimatedPreserveAspectRatio = &CLSID_SVGAnimatedPreserveAspectRatio_Value;

const CLSID_SVGImageElement_Value = Guid.initString("305105cf-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGImageElement = &CLSID_SVGImageElement_Value;

const CLSID_SVGStopElement_Value = Guid.initString("305105d5-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGStopElement = &CLSID_SVGStopElement_Value;

const CLSID_SVGGradientElement_Value = Guid.initString("305105d6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGGradientElement = &CLSID_SVGGradientElement_Value;

const CLSID_SVGLinearGradientElement_Value = Guid.initString("305105d2-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGLinearGradientElement = &CLSID_SVGLinearGradientElement_Value;

const CLSID_SVGRadialGradientElement_Value = Guid.initString("305105d3-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGRadialGradientElement = &CLSID_SVGRadialGradientElement_Value;

const CLSID_SVGMaskElement_Value = Guid.initString("305105e7-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGMaskElement = &CLSID_SVGMaskElement_Value;

const CLSID_SVGMarkerElement_Value = Guid.initString("305105de-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGMarkerElement = &CLSID_SVGMarkerElement_Value;

const CLSID_SVGZoomEvent_Value = Guid.initString("305105d9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGZoomEvent = &CLSID_SVGZoomEvent_Value;

const CLSID_SVGAElement_Value = Guid.initString("305105db-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGAElement = &CLSID_SVGAElement_Value;

const CLSID_SVGViewElement_Value = Guid.initString("305105dc-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGViewElement = &CLSID_SVGViewElement_Value;

const CLSID_HTMLMediaError_Value = Guid.initString("3051070a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLMediaError = &CLSID_HTMLMediaError_Value;

const CLSID_HTMLTimeRanges_Value = Guid.initString("3051070b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLTimeRanges = &CLSID_HTMLTimeRanges_Value;

const CLSID_HTMLMediaElement_Value = Guid.initString("3051070c-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLMediaElement = &CLSID_HTMLMediaElement_Value;

const CLSID_HTMLSourceElement_Value = Guid.initString("3051070d-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLSourceElement = &CLSID_HTMLSourceElement_Value;

const CLSID_HTMLAudioElement_Value = Guid.initString("3051070e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLAudioElement = &CLSID_HTMLAudioElement_Value;

const CLSID_HTMLAudioElementFactory_Value = Guid.initString("305107ec-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLAudioElementFactory = &CLSID_HTMLAudioElementFactory_Value;

const CLSID_HTMLVideoElement_Value = Guid.initString("3051070f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLVideoElement = &CLSID_HTMLVideoElement_Value;

const CLSID_SVGSwitchElement_Value = Guid.initString("305105d8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGSwitchElement = &CLSID_SVGSwitchElement_Value;

const CLSID_SVGDescElement_Value = Guid.initString("30510572-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGDescElement = &CLSID_SVGDescElement_Value;

const CLSID_SVGTitleElement_Value = Guid.initString("30510573-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGTitleElement = &CLSID_SVGTitleElement_Value;

const CLSID_SVGMetadataElement_Value = Guid.initString("305105d7-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGMetadataElement = &CLSID_SVGMetadataElement_Value;

const CLSID_SVGElementInstance_Value = Guid.initString("30510575-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGElementInstance = &CLSID_SVGElementInstance_Value;

const CLSID_SVGElementInstanceList_Value = Guid.initString("30510576-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGElementInstanceList = &CLSID_SVGElementInstanceList_Value;

const CLSID_DOMException_Value = Guid.initString("3051072c-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMException = &CLSID_DOMException_Value;

const CLSID_RangeException_Value = Guid.initString("3051072e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_RangeException = &CLSID_RangeException_Value;

const CLSID_SVGException_Value = Guid.initString("30510730-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGException = &CLSID_SVGException_Value;

const CLSID_EventException_Value = Guid.initString("3051073b-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_EventException = &CLSID_EventException_Value;

const CLSID_SVGScriptElement_Value = Guid.initString("305105e1-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGScriptElement = &CLSID_SVGScriptElement_Value;

const CLSID_SVGStyleElement_Value = Guid.initString("305105d1-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGStyleElement = &CLSID_SVGStyleElement_Value;

const CLSID_SVGTextContentElement_Value = Guid.initString("305105dd-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGTextContentElement = &CLSID_SVGTextContentElement_Value;

const CLSID_SVGTextPositioningElement_Value = Guid.initString("305105e0-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGTextPositioningElement = &CLSID_SVGTextPositioningElement_Value;

const CLSID_DOMDocumentType_Value = Guid.initString("30510739-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMDocumentType = &CLSID_DOMDocumentType_Value;

const CLSID_NodeIterator_Value = Guid.initString("30510745-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_NodeIterator = &CLSID_NodeIterator_Value;

const CLSID_TreeWalker_Value = Guid.initString("30510747-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_TreeWalker = &CLSID_TreeWalker_Value;

const CLSID_DOMProcessingInstruction_Value = Guid.initString("30510743-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMProcessingInstruction = &CLSID_DOMProcessingInstruction_Value;

const CLSID_HTMLPerformance_Value = Guid.initString("3051074f-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLPerformance = &CLSID_HTMLPerformance_Value;

const CLSID_HTMLPerformanceNavigation_Value = Guid.initString("30510751-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLPerformanceNavigation = &CLSID_HTMLPerformanceNavigation_Value;

const CLSID_HTMLPerformanceTiming_Value = Guid.initString("30510753-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLPerformanceTiming = &CLSID_HTMLPerformanceTiming_Value;

const CLSID_SVGTSpanElement_Value = Guid.initString("305105e2-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGTSpanElement = &CLSID_SVGTSpanElement_Value;

const CLSID_CTemplatePrinter_Value = Guid.initString("3050f6b3-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CTemplatePrinter = &CLSID_CTemplatePrinter_Value;

const CLSID_CPrintManagerTemplatePrinter_Value = Guid.initString("63619f54-9d71-4c23-a08d-50d7f18db2e9");
pub const CLSID_CPrintManagerTemplatePrinter = &CLSID_CPrintManagerTemplatePrinter_Value;

const CLSID_SVGTextPathElement_Value = Guid.initString("305105eb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_SVGTextPathElement = &CLSID_SVGTextPathElement_Value;

const CLSID_XMLSerializer_Value = Guid.initString("3051077e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_XMLSerializer = &CLSID_XMLSerializer_Value;

const CLSID_DOMParser_Value = Guid.initString("30510782-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMParser = &CLSID_DOMParser_Value;

const CLSID_HTMLDOMXmlSerializerFactory_Value = Guid.initString("30510780-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDOMXmlSerializerFactory = &CLSID_HTMLDOMXmlSerializerFactory_Value;

const CLSID_DOMParserFactory_Value = Guid.initString("30510784-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMParserFactory = &CLSID_DOMParserFactory_Value;

const CLSID_HTMLSemanticElement_Value = Guid.initString("305107b0-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLSemanticElement = &CLSID_HTMLSemanticElement_Value;

const CLSID_HTMLProgressElement_Value = Guid.initString("3050f2d5-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLProgressElement = &CLSID_HTMLProgressElement_Value;

const CLSID_DOMMSTransitionEvent_Value = Guid.initString("305107b6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMMSTransitionEvent = &CLSID_DOMMSTransitionEvent_Value;

const CLSID_DOMMSAnimationEvent_Value = Guid.initString("305107b8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMMSAnimationEvent = &CLSID_DOMMSAnimationEvent_Value;

const CLSID_WebGeolocation_Value = Guid.initString("305107c6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_WebGeolocation = &CLSID_WebGeolocation_Value;

const CLSID_WebGeocoordinates_Value = Guid.initString("305107c8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_WebGeocoordinates = &CLSID_WebGeocoordinates_Value;

const CLSID_WebGeopositionError_Value = Guid.initString("305107ca-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_WebGeopositionError = &CLSID_WebGeopositionError_Value;

const CLSID_WebGeoposition_Value = Guid.initString("305107ce-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_WebGeoposition = &CLSID_WebGeoposition_Value;

const CLSID_CClientCaps_Value = Guid.initString("7e8bc44e-aeff-11d1-89c2-00c04fb6bfc4");
pub const CLSID_CClientCaps = &CLSID_CClientCaps_Value;

const CLSID_DOMMSManipulationEvent_Value = Guid.initString("30510817-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMMSManipulationEvent = &CLSID_DOMMSManipulationEvent_Value;

const CLSID_DOMCloseEvent_Value = Guid.initString("30510800-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_DOMCloseEvent = &CLSID_DOMCloseEvent_Value;

const CLSID_ApplicationCache_Value = Guid.initString("30510829-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_ApplicationCache = &CLSID_ApplicationCache_Value;

const CLSID_HtmlDlgSafeHelper_Value = Guid.initString("3050f819-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HtmlDlgSafeHelper = &CLSID_HtmlDlgSafeHelper_Value;

const CLSID_BlockFormats_Value = Guid.initString("3050f831-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_BlockFormats = &CLSID_BlockFormats_Value;

const CLSID_FontNames_Value = Guid.initString("3050f83a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_FontNames = &CLSID_FontNames_Value;

const CLSID_HTMLNamespace_Value = Guid.initString("3050f6bc-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLNamespace = &CLSID_HTMLNamespace_Value;

const CLSID_HTMLNamespaceCollection_Value = Guid.initString("3050f6b9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLNamespaceCollection = &CLSID_HTMLNamespaceCollection_Value;

const CLSID_ThreadDialogProcParam_Value = Guid.initString("3050f5eb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_ThreadDialogProcParam = &CLSID_ThreadDialogProcParam_Value;

const CLSID_HTMLDialog_Value = Guid.initString("3050f28a-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLDialog = &CLSID_HTMLDialog_Value;

const CLSID_HTMLPopup_Value = Guid.initString("3050f667-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLPopup = &CLSID_HTMLPopup_Value;

const CLSID_HTMLAppBehavior_Value = Guid.initString("3050f5cb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLAppBehavior = &CLSID_HTMLAppBehavior_Value;

const CLSID_OldHTMLDocument_Value = Guid.initString("d48a6ec9-6a4a-11cf-94a7-444553540000");
pub const CLSID_OldHTMLDocument = &CLSID_OldHTMLDocument_Value;

const CLSID_OldHTMLFormElement_Value = Guid.initString("0d04d285-6bec-11cf-8b97-00aa00476da6");
pub const CLSID_OldHTMLFormElement = &CLSID_OldHTMLFormElement_Value;

const CLSID_HTMLInputButtonElement_Value = Guid.initString("3050f2b4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLInputButtonElement = &CLSID_HTMLInputButtonElement_Value;

const CLSID_HTMLInputTextElement_Value = Guid.initString("3050f2ab-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLInputTextElement = &CLSID_HTMLInputTextElement_Value;

const CLSID_HTMLInputFileElement_Value = Guid.initString("3050f2ae-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLInputFileElement = &CLSID_HTMLInputFileElement_Value;

const CLSID_HTMLOptionButtonElement_Value = Guid.initString("3050f2be-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLOptionButtonElement = &CLSID_HTMLOptionButtonElement_Value;

const CLSID_HTMLInputImage_Value = Guid.initString("3050f2c4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_HTMLInputImage = &CLSID_HTMLInputImage_Value;

const IID_IHTMLFiltersCollection_Value = Guid.initString("3050f3ee-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFiltersCollection = &IID_IHTMLFiltersCollection_Value;
pub const IHTMLFiltersCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLFiltersCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLFiltersCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLFiltersCollection,
            pvarIndex: ?*VARIANT,
            pvarResult: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLFiltersCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLFiltersCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLFiltersCollection, pvarIndex: ?*VARIANT, pvarResult: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, pvarIndex, pvarResult);
    }
};

const IID_IIE70DispatchEx_Value = Guid.initString("3051046b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IIE70DispatchEx = &IID_IIE70DispatchEx_Value;
pub const IIE70DispatchEx = extern union {
    pub const VTable = extern struct {
        base: IDispatchEx.VTable,
    };
    vtable: *const VTable,
    IDispatchEx: IDispatchEx,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IIE80DispatchEx_Value = Guid.initString("3051046c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IIE80DispatchEx = &IID_IIE80DispatchEx_Value;
pub const IIE80DispatchEx = extern union {
    pub const VTable = extern struct {
        base: IDispatchEx.VTable,
    };
    vtable: *const VTable,
    IDispatchEx: IDispatchEx,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

pub const htmlDesignMode = enum(i32) {
    Inherit = -2,
    On = -1,
    Off = 0,
    _Max = 2147483647,
};
pub const htmlDesignModeInherit = htmlDesignMode.Inherit;
pub const htmlDesignModeOn = htmlDesignMode.On;
pub const htmlDesignModeOff = htmlDesignMode.Off;
pub const htmlDesignMode_Max = htmlDesignMode._Max;

pub const htmlZOrder = enum(i32) {
    Front = 0,
    Back = 1,
    _Max = 2147483647,
};
pub const htmlZOrderFront = htmlZOrder.Front;
pub const htmlZOrderBack = htmlZOrder.Back;
pub const htmlZOrder_Max = htmlZOrder._Max;

pub const htmlClear = enum(i32) {
    NotSet = 0,
    All = 1,
    Left = 2,
    Right = 3,
    Both = 4,
    None = 5,
    _Max = 2147483647,
};
pub const htmlClearNotSet = htmlClear.NotSet;
pub const htmlClearAll = htmlClear.All;
pub const htmlClearLeft = htmlClear.Left;
pub const htmlClearRight = htmlClear.Right;
pub const htmlClearBoth = htmlClear.Both;
pub const htmlClearNone = htmlClear.None;
pub const htmlClear_Max = htmlClear._Max;

pub const htmlControlAlign = enum(i32) {
    NotSet = 0,
    Left = 1,
    Center = 2,
    Right = 3,
    TextTop = 4,
    AbsMiddle = 5,
    Baseline = 6,
    AbsBottom = 7,
    Bottom = 8,
    Middle = 9,
    Top = 10,
    _Max = 2147483647,
};
pub const htmlControlAlignNotSet = htmlControlAlign.NotSet;
pub const htmlControlAlignLeft = htmlControlAlign.Left;
pub const htmlControlAlignCenter = htmlControlAlign.Center;
pub const htmlControlAlignRight = htmlControlAlign.Right;
pub const htmlControlAlignTextTop = htmlControlAlign.TextTop;
pub const htmlControlAlignAbsMiddle = htmlControlAlign.AbsMiddle;
pub const htmlControlAlignBaseline = htmlControlAlign.Baseline;
pub const htmlControlAlignAbsBottom = htmlControlAlign.AbsBottom;
pub const htmlControlAlignBottom = htmlControlAlign.Bottom;
pub const htmlControlAlignMiddle = htmlControlAlign.Middle;
pub const htmlControlAlignTop = htmlControlAlign.Top;
pub const htmlControlAlign_Max = htmlControlAlign._Max;

pub const htmlBlockAlign = enum(i32) {
    NotSet = 0,
    Left = 1,
    Center = 2,
    Right = 3,
    Justify = 4,
    _Max = 2147483647,
};
pub const htmlBlockAlignNotSet = htmlBlockAlign.NotSet;
pub const htmlBlockAlignLeft = htmlBlockAlign.Left;
pub const htmlBlockAlignCenter = htmlBlockAlign.Center;
pub const htmlBlockAlignRight = htmlBlockAlign.Right;
pub const htmlBlockAlignJustify = htmlBlockAlign.Justify;
pub const htmlBlockAlign_Max = htmlBlockAlign._Max;

pub const htmlReadyState = enum(i32) {
    uninitialized = 0,
    loading = 1,
    loaded = 2,
    interactive = 3,
    complete = 4,
    _Max = 2147483647,
};
pub const htmlReadyStateuninitialized = htmlReadyState.uninitialized;
pub const htmlReadyStateloading = htmlReadyState.loading;
pub const htmlReadyStateloaded = htmlReadyState.loaded;
pub const htmlReadyStateinteractive = htmlReadyState.interactive;
pub const htmlReadyStatecomplete = htmlReadyState.complete;
pub const htmlReadyState_Max = htmlReadyState._Max;

pub const htmlLoop = enum(i32) {
    LoopInfinite = -1,
    _Max = 2147483647,
};
pub const htmlLoopLoopInfinite = htmlLoop.LoopInfinite;
pub const htmlLoop_Max = htmlLoop._Max;

pub const mediaType = enum(i32) {
    NotSet = 0,
    All = 511,
    Aural = 1,
    Braille = 2,
    Embossed = 4,
    Handheld = 8,
    Print = 16,
    Projection = 32,
    Screen = 64,
    Tty = 128,
    Tv = 256,
    _Max = 2147483647,
};
pub const mediaTypeNotSet = mediaType.NotSet;
pub const mediaTypeAll = mediaType.All;
pub const mediaTypeAural = mediaType.Aural;
pub const mediaTypeBraille = mediaType.Braille;
pub const mediaTypeEmbossed = mediaType.Embossed;
pub const mediaTypeHandheld = mediaType.Handheld;
pub const mediaTypePrint = mediaType.Print;
pub const mediaTypeProjection = mediaType.Projection;
pub const mediaTypeScreen = mediaType.Screen;
pub const mediaTypeTty = mediaType.Tty;
pub const mediaTypeTv = mediaType.Tv;
pub const mediaType_Max = mediaType._Max;

pub const DomConstructor = enum(i32) {
    Object = 0,
    Attr = 1,
    BehaviorUrnsCollection = 2,
    BookmarkCollection = 3,
    CompatibleInfo = 4,
    CompatibleInfoCollection = 5,
    ControlRangeCollection = 6,
    CSSCurrentStyleDeclaration = 7,
    CSSRuleList = 8,
    CSSRuleStyleDeclaration = 9,
    CSSStyleDeclaration = 10,
    CSSStyleRule = 11,
    CSSStyleSheet = 12,
    DataTransfer = 13,
    DOMImplementation = 14,
    Element = 15,
    Event = 16,
    History = 17,
    HTCElementBehaviorDefaults = 18,
    HTMLAnchorElement = 19,
    HTMLAreaElement = 20,
    HTMLAreasCollection = 21,
    HTMLBaseElement = 22,
    HTMLBaseFontElement = 23,
    HTMLBGSoundElement = 24,
    HTMLBlockElement = 25,
    HTMLBodyElement = 26,
    HTMLBRElement = 27,
    HTMLButtonElement = 28,
    HTMLCollection = 29,
    HTMLCommentElement = 30,
    HTMLDDElement = 31,
    HTMLDivElement = 32,
    HTMLDocument = 33,
    HTMLDListElement = 34,
    HTMLDTElement = 35,
    HTMLEmbedElement = 36,
    HTMLFieldSetElement = 37,
    HTMLFontElement = 38,
    HTMLFormElement = 39,
    HTMLFrameElement = 40,
    HTMLFrameSetElement = 41,
    HTMLGenericElement = 42,
    HTMLHeadElement = 43,
    HTMLHeadingElement = 44,
    HTMLHRElement = 45,
    HTMLHtmlElement = 46,
    HTMLIFrameElement = 47,
    HTMLImageElement = 48,
    HTMLInputElement = 49,
    HTMLIsIndexElement = 50,
    HTMLLabelElement = 51,
    HTMLLegendElement = 52,
    HTMLLIElement = 53,
    HTMLLinkElement = 54,
    HTMLMapElement = 55,
    HTMLMarqueeElement = 56,
    HTMLMetaElement = 57,
    HTMLModelessDialog = 58,
    HTMLNamespaceInfo = 59,
    HTMLNamespaceInfoCollection = 60,
    HTMLNextIdElement = 61,
    HTMLNoShowElement = 62,
    HTMLObjectElement = 63,
    HTMLOListElement = 64,
    HTMLOptionElement = 65,
    HTMLParagraphElement = 66,
    HTMLParamElement = 67,
    HTMLPhraseElement = 68,
    HTMLPluginsCollection = 69,
    HTMLPopup = 70,
    HTMLScriptElement = 71,
    HTMLSelectElement = 72,
    HTMLSpanElement = 73,
    HTMLStyleElement = 74,
    HTMLTableCaptionElement = 75,
    HTMLTableCellElement = 76,
    HTMLTableColElement = 77,
    HTMLTableElement = 78,
    HTMLTableRowElement = 79,
    HTMLTableSectionElement = 80,
    HTMLTextAreaElement = 81,
    HTMLTextElement = 82,
    HTMLTitleElement = 83,
    HTMLUListElement = 84,
    HTMLUnknownElement = 85,
    Image = 86,
    Location = 87,
    NamedNodeMap = 88,
    Navigator = 89,
    NodeList = 90,
    Option = 91,
    Screen = 92,
    Selection = 93,
    StaticNodeList = 94,
    Storage = 95,
    StyleSheetList = 96,
    StyleSheetPage = 97,
    StyleSheetPageList = 98,
    Text = 99,
    TextRange = 100,
    TextRangeCollection = 101,
    TextRectangle = 102,
    TextRectangleList = 103,
    Window = 104,
    XDomainRequest = 105,
    XMLHttpRequest = 106,
    Max = 107,
    _Max = 2147483647,
};
pub const DomConstructorObject = DomConstructor.Object;
pub const DomConstructorAttr = DomConstructor.Attr;
pub const DomConstructorBehaviorUrnsCollection = DomConstructor.BehaviorUrnsCollection;
pub const DomConstructorBookmarkCollection = DomConstructor.BookmarkCollection;
pub const DomConstructorCompatibleInfo = DomConstructor.CompatibleInfo;
pub const DomConstructorCompatibleInfoCollection = DomConstructor.CompatibleInfoCollection;
pub const DomConstructorControlRangeCollection = DomConstructor.ControlRangeCollection;
pub const DomConstructorCSSCurrentStyleDeclaration = DomConstructor.CSSCurrentStyleDeclaration;
pub const DomConstructorCSSRuleList = DomConstructor.CSSRuleList;
pub const DomConstructorCSSRuleStyleDeclaration = DomConstructor.CSSRuleStyleDeclaration;
pub const DomConstructorCSSStyleDeclaration = DomConstructor.CSSStyleDeclaration;
pub const DomConstructorCSSStyleRule = DomConstructor.CSSStyleRule;
pub const DomConstructorCSSStyleSheet = DomConstructor.CSSStyleSheet;
pub const DomConstructorDataTransfer = DomConstructor.DataTransfer;
pub const DomConstructorDOMImplementation = DomConstructor.DOMImplementation;
pub const DomConstructorElement = DomConstructor.Element;
pub const DomConstructorEvent = DomConstructor.Event;
pub const DomConstructorHistory = DomConstructor.History;
pub const DomConstructorHTCElementBehaviorDefaults = DomConstructor.HTCElementBehaviorDefaults;
pub const DomConstructorHTMLAnchorElement = DomConstructor.HTMLAnchorElement;
pub const DomConstructorHTMLAreaElement = DomConstructor.HTMLAreaElement;
pub const DomConstructorHTMLAreasCollection = DomConstructor.HTMLAreasCollection;
pub const DomConstructorHTMLBaseElement = DomConstructor.HTMLBaseElement;
pub const DomConstructorHTMLBaseFontElement = DomConstructor.HTMLBaseFontElement;
pub const DomConstructorHTMLBGSoundElement = DomConstructor.HTMLBGSoundElement;
pub const DomConstructorHTMLBlockElement = DomConstructor.HTMLBlockElement;
pub const DomConstructorHTMLBodyElement = DomConstructor.HTMLBodyElement;
pub const DomConstructorHTMLBRElement = DomConstructor.HTMLBRElement;
pub const DomConstructorHTMLButtonElement = DomConstructor.HTMLButtonElement;
pub const DomConstructorHTMLCollection = DomConstructor.HTMLCollection;
pub const DomConstructorHTMLCommentElement = DomConstructor.HTMLCommentElement;
pub const DomConstructorHTMLDDElement = DomConstructor.HTMLDDElement;
pub const DomConstructorHTMLDivElement = DomConstructor.HTMLDivElement;
pub const DomConstructorHTMLDocument = DomConstructor.HTMLDocument;
pub const DomConstructorHTMLDListElement = DomConstructor.HTMLDListElement;
pub const DomConstructorHTMLDTElement = DomConstructor.HTMLDTElement;
pub const DomConstructorHTMLEmbedElement = DomConstructor.HTMLEmbedElement;
pub const DomConstructorHTMLFieldSetElement = DomConstructor.HTMLFieldSetElement;
pub const DomConstructorHTMLFontElement = DomConstructor.HTMLFontElement;
pub const DomConstructorHTMLFormElement = DomConstructor.HTMLFormElement;
pub const DomConstructorHTMLFrameElement = DomConstructor.HTMLFrameElement;
pub const DomConstructorHTMLFrameSetElement = DomConstructor.HTMLFrameSetElement;
pub const DomConstructorHTMLGenericElement = DomConstructor.HTMLGenericElement;
pub const DomConstructorHTMLHeadElement = DomConstructor.HTMLHeadElement;
pub const DomConstructorHTMLHeadingElement = DomConstructor.HTMLHeadingElement;
pub const DomConstructorHTMLHRElement = DomConstructor.HTMLHRElement;
pub const DomConstructorHTMLHtmlElement = DomConstructor.HTMLHtmlElement;
pub const DomConstructorHTMLIFrameElement = DomConstructor.HTMLIFrameElement;
pub const DomConstructorHTMLImageElement = DomConstructor.HTMLImageElement;
pub const DomConstructorHTMLInputElement = DomConstructor.HTMLInputElement;
pub const DomConstructorHTMLIsIndexElement = DomConstructor.HTMLIsIndexElement;
pub const DomConstructorHTMLLabelElement = DomConstructor.HTMLLabelElement;
pub const DomConstructorHTMLLegendElement = DomConstructor.HTMLLegendElement;
pub const DomConstructorHTMLLIElement = DomConstructor.HTMLLIElement;
pub const DomConstructorHTMLLinkElement = DomConstructor.HTMLLinkElement;
pub const DomConstructorHTMLMapElement = DomConstructor.HTMLMapElement;
pub const DomConstructorHTMLMarqueeElement = DomConstructor.HTMLMarqueeElement;
pub const DomConstructorHTMLMetaElement = DomConstructor.HTMLMetaElement;
pub const DomConstructorHTMLModelessDialog = DomConstructor.HTMLModelessDialog;
pub const DomConstructorHTMLNamespaceInfo = DomConstructor.HTMLNamespaceInfo;
pub const DomConstructorHTMLNamespaceInfoCollection = DomConstructor.HTMLNamespaceInfoCollection;
pub const DomConstructorHTMLNextIdElement = DomConstructor.HTMLNextIdElement;
pub const DomConstructorHTMLNoShowElement = DomConstructor.HTMLNoShowElement;
pub const DomConstructorHTMLObjectElement = DomConstructor.HTMLObjectElement;
pub const DomConstructorHTMLOListElement = DomConstructor.HTMLOListElement;
pub const DomConstructorHTMLOptionElement = DomConstructor.HTMLOptionElement;
pub const DomConstructorHTMLParagraphElement = DomConstructor.HTMLParagraphElement;
pub const DomConstructorHTMLParamElement = DomConstructor.HTMLParamElement;
pub const DomConstructorHTMLPhraseElement = DomConstructor.HTMLPhraseElement;
pub const DomConstructorHTMLPluginsCollection = DomConstructor.HTMLPluginsCollection;
pub const DomConstructorHTMLPopup = DomConstructor.HTMLPopup;
pub const DomConstructorHTMLScriptElement = DomConstructor.HTMLScriptElement;
pub const DomConstructorHTMLSelectElement = DomConstructor.HTMLSelectElement;
pub const DomConstructorHTMLSpanElement = DomConstructor.HTMLSpanElement;
pub const DomConstructorHTMLStyleElement = DomConstructor.HTMLStyleElement;
pub const DomConstructorHTMLTableCaptionElement = DomConstructor.HTMLTableCaptionElement;
pub const DomConstructorHTMLTableCellElement = DomConstructor.HTMLTableCellElement;
pub const DomConstructorHTMLTableColElement = DomConstructor.HTMLTableColElement;
pub const DomConstructorHTMLTableElement = DomConstructor.HTMLTableElement;
pub const DomConstructorHTMLTableRowElement = DomConstructor.HTMLTableRowElement;
pub const DomConstructorHTMLTableSectionElement = DomConstructor.HTMLTableSectionElement;
pub const DomConstructorHTMLTextAreaElement = DomConstructor.HTMLTextAreaElement;
pub const DomConstructorHTMLTextElement = DomConstructor.HTMLTextElement;
pub const DomConstructorHTMLTitleElement = DomConstructor.HTMLTitleElement;
pub const DomConstructorHTMLUListElement = DomConstructor.HTMLUListElement;
pub const DomConstructorHTMLUnknownElement = DomConstructor.HTMLUnknownElement;
pub const DomConstructorImage = DomConstructor.Image;
pub const DomConstructorLocation = DomConstructor.Location;
pub const DomConstructorNamedNodeMap = DomConstructor.NamedNodeMap;
pub const DomConstructorNavigator = DomConstructor.Navigator;
pub const DomConstructorNodeList = DomConstructor.NodeList;
pub const DomConstructorOption = DomConstructor.Option;
pub const DomConstructorScreen = DomConstructor.Screen;
pub const DomConstructorSelection = DomConstructor.Selection;
pub const DomConstructorStaticNodeList = DomConstructor.StaticNodeList;
pub const DomConstructorStorage = DomConstructor.Storage;
pub const DomConstructorStyleSheetList = DomConstructor.StyleSheetList;
pub const DomConstructorStyleSheetPage = DomConstructor.StyleSheetPage;
pub const DomConstructorStyleSheetPageList = DomConstructor.StyleSheetPageList;
pub const DomConstructorText = DomConstructor.Text;
pub const DomConstructorTextRange = DomConstructor.TextRange;
pub const DomConstructorTextRangeCollection = DomConstructor.TextRangeCollection;
pub const DomConstructorTextRectangle = DomConstructor.TextRectangle;
pub const DomConstructorTextRectangleList = DomConstructor.TextRectangleList;
pub const DomConstructorWindow = DomConstructor.Window;
pub const DomConstructorXDomainRequest = DomConstructor.XDomainRequest;
pub const DomConstructorXMLHttpRequest = DomConstructor.XMLHttpRequest;
pub const DomConstructorMax = DomConstructor.Max;
pub const DomConstructor_Max = DomConstructor._Max;

pub const styleTextTransform = enum(i32) {
    NotSet = 0,
    Capitalize = 1,
    Lowercase = 2,
    Uppercase = 3,
    None = 4,
    _Max = 2147483647,
};
pub const styleTextTransformNotSet = styleTextTransform.NotSet;
pub const styleTextTransformCapitalize = styleTextTransform.Capitalize;
pub const styleTextTransformLowercase = styleTextTransform.Lowercase;
pub const styleTextTransformUppercase = styleTextTransform.Uppercase;
pub const styleTextTransformNone = styleTextTransform.None;
pub const styleTextTransform_Max = styleTextTransform._Max;

pub const styleDataRepeat = enum(i32) {
    None = 0,
    Inner = 1,
    _Max = 2147483647,
};
pub const styleDataRepeatNone = styleDataRepeat.None;
pub const styleDataRepeatInner = styleDataRepeat.Inner;
pub const styleDataRepeat_Max = styleDataRepeat._Max;

pub const styleOverflow = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Hidden = 2,
    Visible = 3,
    Scroll = 4,
    _Max = 2147483647,
};
pub const styleOverflowNotSet = styleOverflow.NotSet;
pub const styleOverflowAuto = styleOverflow.Auto;
pub const styleOverflowHidden = styleOverflow.Hidden;
pub const styleOverflowVisible = styleOverflow.Visible;
pub const styleOverflowScroll = styleOverflow.Scroll;
pub const styleOverflow_Max = styleOverflow._Max;

pub const styleMsOverflowStyle = enum(i32) {
    NotSet = 0,
    Auto = 1,
    None = 2,
    Scrollbar = 3,
    MsAutoHidingScrollbar = 4,
    _Max = 2147483647,
};
pub const styleMsOverflowStyleNotSet = styleMsOverflowStyle.NotSet;
pub const styleMsOverflowStyleAuto = styleMsOverflowStyle.Auto;
pub const styleMsOverflowStyleNone = styleMsOverflowStyle.None;
pub const styleMsOverflowStyleScrollbar = styleMsOverflowStyle.Scrollbar;
pub const styleMsOverflowStyleMsAutoHidingScrollbar = styleMsOverflowStyle.MsAutoHidingScrollbar;
pub const styleMsOverflowStyle_Max = styleMsOverflowStyle._Max;

pub const styleTableLayout = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Fixed = 2,
    _Max = 2147483647,
};
pub const styleTableLayoutNotSet = styleTableLayout.NotSet;
pub const styleTableLayoutAuto = styleTableLayout.Auto;
pub const styleTableLayoutFixed = styleTableLayout.Fixed;
pub const styleTableLayout_Max = styleTableLayout._Max;

pub const styleBorderCollapse = enum(i32) {
    NotSet = 0,
    Separate = 1,
    Collapse = 2,
    _Max = 2147483647,
};
pub const styleBorderCollapseNotSet = styleBorderCollapse.NotSet;
pub const styleBorderCollapseSeparate = styleBorderCollapse.Separate;
pub const styleBorderCollapseCollapse = styleBorderCollapse.Collapse;
pub const styleBorderCollapse_Max = styleBorderCollapse._Max;

pub const styleCaptionSide = enum(i32) {
    NotSet = 0,
    Top = 1,
    Bottom = 2,
    Left = 3,
    Right = 4,
    _Max = 2147483647,
};
pub const styleCaptionSideNotSet = styleCaptionSide.NotSet;
pub const styleCaptionSideTop = styleCaptionSide.Top;
pub const styleCaptionSideBottom = styleCaptionSide.Bottom;
pub const styleCaptionSideLeft = styleCaptionSide.Left;
pub const styleCaptionSideRight = styleCaptionSide.Right;
pub const styleCaptionSide_Max = styleCaptionSide._Max;

pub const styleEmptyCells = enum(i32) {
    NotSet = 0,
    Show = 1,
    Hide = 2,
    _Max = 2147483647,
};
pub const styleEmptyCellsNotSet = styleEmptyCells.NotSet;
pub const styleEmptyCellsShow = styleEmptyCells.Show;
pub const styleEmptyCellsHide = styleEmptyCells.Hide;
pub const styleEmptyCells_Max = styleEmptyCells._Max;

pub const styleFontStyle = enum(i32) {
    NotSet = 0,
    Italic = 1,
    Oblique = 2,
    Normal = 3,
    _Max = 2147483647,
};
pub const styleFontStyleNotSet = styleFontStyle.NotSet;
pub const styleFontStyleItalic = styleFontStyle.Italic;
pub const styleFontStyleOblique = styleFontStyle.Oblique;
pub const styleFontStyleNormal = styleFontStyle.Normal;
pub const styleFontStyle_Max = styleFontStyle._Max;

pub const styleFontVariant = enum(i32) {
    NotSet = 0,
    SmallCaps = 1,
    Normal = 2,
    _Max = 2147483647,
};
pub const styleFontVariantNotSet = styleFontVariant.NotSet;
pub const styleFontVariantSmallCaps = styleFontVariant.SmallCaps;
pub const styleFontVariantNormal = styleFontVariant.Normal;
pub const styleFontVariant_Max = styleFontVariant._Max;

pub const styleBackgroundRepeat = enum(i32) {
    Repeat = 0,
    RepeatX = 1,
    RepeatY = 2,
    NoRepeat = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleBackgroundRepeatRepeat = styleBackgroundRepeat.Repeat;
pub const styleBackgroundRepeatRepeatX = styleBackgroundRepeat.RepeatX;
pub const styleBackgroundRepeatRepeatY = styleBackgroundRepeat.RepeatY;
pub const styleBackgroundRepeatNoRepeat = styleBackgroundRepeat.NoRepeat;
pub const styleBackgroundRepeatNotSet = styleBackgroundRepeat.NotSet;
pub const styleBackgroundRepeat_Max = styleBackgroundRepeat._Max;

pub const styleBackgroundAttachment = enum(i32) {
    Fixed = 0,
    Scroll = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleBackgroundAttachmentFixed = styleBackgroundAttachment.Fixed;
pub const styleBackgroundAttachmentScroll = styleBackgroundAttachment.Scroll;
pub const styleBackgroundAttachmentNotSet = styleBackgroundAttachment.NotSet;
pub const styleBackgroundAttachment_Max = styleBackgroundAttachment._Max;

pub const styleBackgroundAttachment3 = enum(i32) {
    Fixed = 0,
    Scroll = 1,
    Local = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleBackgroundAttachment3Fixed = styleBackgroundAttachment3.Fixed;
pub const styleBackgroundAttachment3Scroll = styleBackgroundAttachment3.Scroll;
pub const styleBackgroundAttachment3Local = styleBackgroundAttachment3.Local;
pub const styleBackgroundAttachment3NotSet = styleBackgroundAttachment3.NotSet;
pub const styleBackgroundAttachment3_Max = styleBackgroundAttachment3._Max;

pub const styleBackgroundClip = enum(i32) {
    BorderBox = 0,
    PaddingBox = 1,
    ContentBox = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleBackgroundClipBorderBox = styleBackgroundClip.BorderBox;
pub const styleBackgroundClipPaddingBox = styleBackgroundClip.PaddingBox;
pub const styleBackgroundClipContentBox = styleBackgroundClip.ContentBox;
pub const styleBackgroundClipNotSet = styleBackgroundClip.NotSet;
pub const styleBackgroundClip_Max = styleBackgroundClip._Max;

pub const styleBackgroundOrigin = enum(i32) {
    BorderBox = 0,
    PaddingBox = 1,
    ContentBox = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleBackgroundOriginBorderBox = styleBackgroundOrigin.BorderBox;
pub const styleBackgroundOriginPaddingBox = styleBackgroundOrigin.PaddingBox;
pub const styleBackgroundOriginContentBox = styleBackgroundOrigin.ContentBox;
pub const styleBackgroundOriginNotSet = styleBackgroundOrigin.NotSet;
pub const styleBackgroundOrigin_Max = styleBackgroundOrigin._Max;

pub const styleVerticalAlign = enum(i32) {
    Auto = 0,
    Baseline = 1,
    Sub = 2,
    Super = 3,
    Top = 4,
    TextTop = 5,
    Middle = 6,
    Bottom = 7,
    TextBottom = 8,
    Inherit = 9,
    NotSet = 10,
    _Max = 2147483647,
};
pub const styleVerticalAlignAuto = styleVerticalAlign.Auto;
pub const styleVerticalAlignBaseline = styleVerticalAlign.Baseline;
pub const styleVerticalAlignSub = styleVerticalAlign.Sub;
pub const styleVerticalAlignSuper = styleVerticalAlign.Super;
pub const styleVerticalAlignTop = styleVerticalAlign.Top;
pub const styleVerticalAlignTextTop = styleVerticalAlign.TextTop;
pub const styleVerticalAlignMiddle = styleVerticalAlign.Middle;
pub const styleVerticalAlignBottom = styleVerticalAlign.Bottom;
pub const styleVerticalAlignTextBottom = styleVerticalAlign.TextBottom;
pub const styleVerticalAlignInherit = styleVerticalAlign.Inherit;
pub const styleVerticalAlignNotSet = styleVerticalAlign.NotSet;
pub const styleVerticalAlign_Max = styleVerticalAlign._Max;

pub const styleFontWeight = enum(i32) {
    NotSet = 0,
    @"100" = 1,
    @"200" = 2,
    @"300" = 3,
    @"400" = 4,
    @"500" = 5,
    @"600" = 6,
    @"700" = 7,
    @"800" = 8,
    @"900" = 9,
    Normal = 10,
    Bold = 11,
    Bolder = 12,
    Lighter = 13,
    _Max = 2147483647,
};
pub const styleFontWeightNotSet = styleFontWeight.NotSet;
pub const styleFontWeight100 = styleFontWeight.@"100";
pub const styleFontWeight200 = styleFontWeight.@"200";
pub const styleFontWeight300 = styleFontWeight.@"300";
pub const styleFontWeight400 = styleFontWeight.@"400";
pub const styleFontWeight500 = styleFontWeight.@"500";
pub const styleFontWeight600 = styleFontWeight.@"600";
pub const styleFontWeight700 = styleFontWeight.@"700";
pub const styleFontWeight800 = styleFontWeight.@"800";
pub const styleFontWeight900 = styleFontWeight.@"900";
pub const styleFontWeightNormal = styleFontWeight.Normal;
pub const styleFontWeightBold = styleFontWeight.Bold;
pub const styleFontWeightBolder = styleFontWeight.Bolder;
pub const styleFontWeightLighter = styleFontWeight.Lighter;
pub const styleFontWeight_Max = styleFontWeight._Max;

pub const styleFontSize = enum(i32) {
    XXSmall = 0,
    XSmall = 1,
    Small = 2,
    Medium = 3,
    Large = 4,
    XLarge = 5,
    XXLarge = 6,
    Smaller = 7,
    Larger = 8,
    _Max = 2147483647,
};
pub const styleFontSizeXXSmall = styleFontSize.XXSmall;
pub const styleFontSizeXSmall = styleFontSize.XSmall;
pub const styleFontSizeSmall = styleFontSize.Small;
pub const styleFontSizeMedium = styleFontSize.Medium;
pub const styleFontSizeLarge = styleFontSize.Large;
pub const styleFontSizeXLarge = styleFontSize.XLarge;
pub const styleFontSizeXXLarge = styleFontSize.XXLarge;
pub const styleFontSizeSmaller = styleFontSize.Smaller;
pub const styleFontSizeLarger = styleFontSize.Larger;
pub const styleFontSize_Max = styleFontSize._Max;

pub const styleZIndex = enum(i32) {
    Auto = -2147483647,
    _Max = 2147483647,
};
pub const styleZIndexAuto = styleZIndex.Auto;
pub const styleZIndex_Max = styleZIndex._Max;

pub const styleWidowsOrphans = enum(i32) {
    NotSet = -2147483647,
    _Max = 2147483647,
};
pub const styleWidowsOrphansNotSet = styleWidowsOrphans.NotSet;
pub const styleWidowsOrphans_Max = styleWidowsOrphans._Max;

pub const styleAuto = enum(i32) {
    Auto = 0,
    _Max = 2147483647,
};
pub const styleAutoAuto = styleAuto.Auto;
pub const styleAuto_Max = styleAuto._Max;

pub const styleNone = enum(i32) {
    None = 0,
    _Max = 2147483647,
};
pub const styleNoneNone = styleNone.None;
pub const styleNone_Max = styleNone._Max;

pub const styleNormal = enum(i32) {
    Normal = 0,
    _Max = 2147483647,
};
pub const styleNormalNormal = styleNormal.Normal;
pub const styleNormal_Max = styleNormal._Max;

pub const styleBorderWidth = enum(i32) {
    Thin = 0,
    Medium = 1,
    Thick = 2,
    _Max = 2147483647,
};
pub const styleBorderWidthThin = styleBorderWidth.Thin;
pub const styleBorderWidthMedium = styleBorderWidth.Medium;
pub const styleBorderWidthThick = styleBorderWidth.Thick;
pub const styleBorderWidth_Max = styleBorderWidth._Max;

pub const stylePosition = enum(i32) {
    NotSet = 0,
    static = 1,
    relative = 2,
    absolute = 3,
    fixed = 4,
    MsPage = 5,
    MsDeviceFixed = 6,
    _Max = 2147483647,
};
pub const stylePositionNotSet = stylePosition.NotSet;
pub const stylePositionstatic = stylePosition.static;
pub const stylePositionrelative = stylePosition.relative;
pub const stylePositionabsolute = stylePosition.absolute;
pub const stylePositionfixed = stylePosition.fixed;
pub const stylePositionMsPage = stylePosition.MsPage;
pub const stylePositionMsDeviceFixed = stylePosition.MsDeviceFixed;
pub const stylePosition_Max = stylePosition._Max;

pub const styleBorderStyle = enum(i32) {
    NotSet = 0,
    Dotted = 1,
    Dashed = 2,
    Solid = 3,
    Double = 4,
    Groove = 5,
    Ridge = 6,
    Inset = 7,
    Outset = 8,
    WindowInset = 9,
    None = 10,
    Hidden = 11,
    _Max = 2147483647,
};
pub const styleBorderStyleNotSet = styleBorderStyle.NotSet;
pub const styleBorderStyleDotted = styleBorderStyle.Dotted;
pub const styleBorderStyleDashed = styleBorderStyle.Dashed;
pub const styleBorderStyleSolid = styleBorderStyle.Solid;
pub const styleBorderStyleDouble = styleBorderStyle.Double;
pub const styleBorderStyleGroove = styleBorderStyle.Groove;
pub const styleBorderStyleRidge = styleBorderStyle.Ridge;
pub const styleBorderStyleInset = styleBorderStyle.Inset;
pub const styleBorderStyleOutset = styleBorderStyle.Outset;
pub const styleBorderStyleWindowInset = styleBorderStyle.WindowInset;
pub const styleBorderStyleNone = styleBorderStyle.None;
pub const styleBorderStyleHidden = styleBorderStyle.Hidden;
pub const styleBorderStyle_Max = styleBorderStyle._Max;

pub const styleOutlineStyle = enum(i32) {
    NotSet = 0,
    Dotted = 1,
    Dashed = 2,
    Solid = 3,
    Double = 4,
    Groove = 5,
    Ridge = 6,
    Inset = 7,
    Outset = 8,
    WindowInset = 9,
    None = 10,
    _Max = 2147483647,
};
pub const styleOutlineStyleNotSet = styleOutlineStyle.NotSet;
pub const styleOutlineStyleDotted = styleOutlineStyle.Dotted;
pub const styleOutlineStyleDashed = styleOutlineStyle.Dashed;
pub const styleOutlineStyleSolid = styleOutlineStyle.Solid;
pub const styleOutlineStyleDouble = styleOutlineStyle.Double;
pub const styleOutlineStyleGroove = styleOutlineStyle.Groove;
pub const styleOutlineStyleRidge = styleOutlineStyle.Ridge;
pub const styleOutlineStyleInset = styleOutlineStyle.Inset;
pub const styleOutlineStyleOutset = styleOutlineStyle.Outset;
pub const styleOutlineStyleWindowInset = styleOutlineStyle.WindowInset;
pub const styleOutlineStyleNone = styleOutlineStyle.None;
pub const styleOutlineStyle_Max = styleOutlineStyle._Max;

pub const styleStyleFloat = enum(i32) {
    NotSet = 0,
    Left = 1,
    Right = 2,
    None = 3,
    _Max = 2147483647,
};
pub const styleStyleFloatNotSet = styleStyleFloat.NotSet;
pub const styleStyleFloatLeft = styleStyleFloat.Left;
pub const styleStyleFloatRight = styleStyleFloat.Right;
pub const styleStyleFloatNone = styleStyleFloat.None;
pub const styleStyleFloat_Max = styleStyleFloat._Max;

pub const styleDisplay = enum(i32) {
    NotSet = 0,
    Block = 1,
    Inline = 2,
    ListItem = 3,
    None = 4,
    TableHeaderGroup = 5,
    TableFooterGroup = 6,
    InlineBlock = 7,
    Table = 8,
    InlineTable = 9,
    TableRow = 10,
    TableRowGroup = 11,
    TableColumn = 12,
    TableColumnGroup = 13,
    TableCell = 14,
    TableCaption = 15,
    RunIn = 16,
    Ruby = 17,
    RubyBase = 18,
    RubyText = 19,
    RubyBaseContainer = 20,
    RubyTextContainer = 21,
    MsFlexbox = 22,
    MsInlineFlexbox = 23,
    MsGrid = 24,
    MsInlineGrid = 25,
    Flex = 26,
    InlineFlex = 27,
    WebkitBox = 28,
    WebkitInlineBox = 29,
    _Max = 2147483647,
};
pub const styleDisplayNotSet = styleDisplay.NotSet;
pub const styleDisplayBlock = styleDisplay.Block;
pub const styleDisplayInline = styleDisplay.Inline;
pub const styleDisplayListItem = styleDisplay.ListItem;
pub const styleDisplayNone = styleDisplay.None;
pub const styleDisplayTableHeaderGroup = styleDisplay.TableHeaderGroup;
pub const styleDisplayTableFooterGroup = styleDisplay.TableFooterGroup;
pub const styleDisplayInlineBlock = styleDisplay.InlineBlock;
pub const styleDisplayTable = styleDisplay.Table;
pub const styleDisplayInlineTable = styleDisplay.InlineTable;
pub const styleDisplayTableRow = styleDisplay.TableRow;
pub const styleDisplayTableRowGroup = styleDisplay.TableRowGroup;
pub const styleDisplayTableColumn = styleDisplay.TableColumn;
pub const styleDisplayTableColumnGroup = styleDisplay.TableColumnGroup;
pub const styleDisplayTableCell = styleDisplay.TableCell;
pub const styleDisplayTableCaption = styleDisplay.TableCaption;
pub const styleDisplayRunIn = styleDisplay.RunIn;
pub const styleDisplayRuby = styleDisplay.Ruby;
pub const styleDisplayRubyBase = styleDisplay.RubyBase;
pub const styleDisplayRubyText = styleDisplay.RubyText;
pub const styleDisplayRubyBaseContainer = styleDisplay.RubyBaseContainer;
pub const styleDisplayRubyTextContainer = styleDisplay.RubyTextContainer;
pub const styleDisplayMsFlexbox = styleDisplay.MsFlexbox;
pub const styleDisplayMsInlineFlexbox = styleDisplay.MsInlineFlexbox;
pub const styleDisplayMsGrid = styleDisplay.MsGrid;
pub const styleDisplayMsInlineGrid = styleDisplay.MsInlineGrid;
pub const styleDisplayFlex = styleDisplay.Flex;
pub const styleDisplayInlineFlex = styleDisplay.InlineFlex;
pub const styleDisplayWebkitBox = styleDisplay.WebkitBox;
pub const styleDisplayWebkitInlineBox = styleDisplay.WebkitInlineBox;
pub const styleDisplay_Max = styleDisplay._Max;

pub const styleVisibility = enum(i32) {
    NotSet = 0,
    Inherit = 1,
    Visible = 2,
    Hidden = 3,
    Collapse = 4,
    _Max = 2147483647,
};
pub const styleVisibilityNotSet = styleVisibility.NotSet;
pub const styleVisibilityInherit = styleVisibility.Inherit;
pub const styleVisibilityVisible = styleVisibility.Visible;
pub const styleVisibilityHidden = styleVisibility.Hidden;
pub const styleVisibilityCollapse = styleVisibility.Collapse;
pub const styleVisibility_Max = styleVisibility._Max;

pub const styleListStyleType = enum(i32) {
    NotSet = 0,
    Disc = 1,
    Circle = 2,
    Square = 3,
    Decimal = 4,
    LowerRoman = 5,
    UpperRoman = 6,
    LowerAlpha = 7,
    UpperAlpha = 8,
    None = 9,
    DecimalLeadingZero = 10,
    Georgian = 11,
    Armenian = 12,
    UpperLatin = 13,
    LowerLatin = 14,
    UpperGreek = 15,
    LowerGreek = 16,
    _Max = 2147483647,
};
pub const styleListStyleTypeNotSet = styleListStyleType.NotSet;
pub const styleListStyleTypeDisc = styleListStyleType.Disc;
pub const styleListStyleTypeCircle = styleListStyleType.Circle;
pub const styleListStyleTypeSquare = styleListStyleType.Square;
pub const styleListStyleTypeDecimal = styleListStyleType.Decimal;
pub const styleListStyleTypeLowerRoman = styleListStyleType.LowerRoman;
pub const styleListStyleTypeUpperRoman = styleListStyleType.UpperRoman;
pub const styleListStyleTypeLowerAlpha = styleListStyleType.LowerAlpha;
pub const styleListStyleTypeUpperAlpha = styleListStyleType.UpperAlpha;
pub const styleListStyleTypeNone = styleListStyleType.None;
pub const styleListStyleTypeDecimalLeadingZero = styleListStyleType.DecimalLeadingZero;
pub const styleListStyleTypeGeorgian = styleListStyleType.Georgian;
pub const styleListStyleTypeArmenian = styleListStyleType.Armenian;
pub const styleListStyleTypeUpperLatin = styleListStyleType.UpperLatin;
pub const styleListStyleTypeLowerLatin = styleListStyleType.LowerLatin;
pub const styleListStyleTypeUpperGreek = styleListStyleType.UpperGreek;
pub const styleListStyleTypeLowerGreek = styleListStyleType.LowerGreek;
pub const styleListStyleType_Max = styleListStyleType._Max;

pub const styleListStylePosition = enum(i32) {
    NotSet = 0,
    Inside = 1,
    OutSide = 2,
    _Max = 2147483647,
};
pub const styleListStylePositionNotSet = styleListStylePosition.NotSet;
pub const styleListStylePositionInside = styleListStylePosition.Inside;
pub const styleListStylePositionOutSide = styleListStylePosition.OutSide;
pub const styleListStylePosition_Max = styleListStylePosition._Max;

pub const styleWhiteSpace = enum(i32) {
    NotSet = 0,
    Normal = 1,
    Pre = 2,
    Nowrap = 3,
    Preline = 4,
    Prewrap = 5,
    _Max = 2147483647,
};
pub const styleWhiteSpaceNotSet = styleWhiteSpace.NotSet;
pub const styleWhiteSpaceNormal = styleWhiteSpace.Normal;
pub const styleWhiteSpacePre = styleWhiteSpace.Pre;
pub const styleWhiteSpaceNowrap = styleWhiteSpace.Nowrap;
pub const styleWhiteSpacePreline = styleWhiteSpace.Preline;
pub const styleWhiteSpacePrewrap = styleWhiteSpace.Prewrap;
pub const styleWhiteSpace_Max = styleWhiteSpace._Max;

pub const stylePageBreak = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Always = 2,
    Left = 3,
    Right = 4,
    Avoid = 5,
    _Max = 2147483647,
};
pub const stylePageBreakNotSet = stylePageBreak.NotSet;
pub const stylePageBreakAuto = stylePageBreak.Auto;
pub const stylePageBreakAlways = stylePageBreak.Always;
pub const stylePageBreakLeft = stylePageBreak.Left;
pub const stylePageBreakRight = stylePageBreak.Right;
pub const stylePageBreakAvoid = stylePageBreak.Avoid;
pub const stylePageBreak_Max = stylePageBreak._Max;

pub const stylePageBreakInside = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Avoid = 2,
    _Max = 2147483647,
};
pub const stylePageBreakInsideNotSet = stylePageBreakInside.NotSet;
pub const stylePageBreakInsideAuto = stylePageBreakInside.Auto;
pub const stylePageBreakInsideAvoid = stylePageBreakInside.Avoid;
pub const stylePageBreakInside_Max = stylePageBreakInside._Max;

pub const styleCursor = enum(i32) {
    Auto = 0,
    Crosshair = 1,
    Default = 2,
    Hand = 3,
    Move = 4,
    E_resize = 5,
    Ne_resize = 6,
    Nw_resize = 7,
    N_resize = 8,
    Se_resize = 9,
    Sw_resize = 10,
    S_resize = 11,
    W_resize = 12,
    Text = 13,
    Wait = 14,
    Help = 15,
    Pointer = 16,
    Progress = 17,
    Not_allowed = 18,
    No_drop = 19,
    Vertical_text = 20,
    all_scroll = 21,
    col_resize = 22,
    row_resize = 23,
    None = 24,
    Context_menu = 25,
    Ew_resize = 26,
    Ns_resize = 27,
    Nesw_resize = 28,
    Nwse_resize = 29,
    Cell = 30,
    Copy = 31,
    Alias = 32,
    custom = 33,
    NotSet = 34,
    _Max = 2147483647,
};
pub const styleCursorAuto = styleCursor.Auto;
pub const styleCursorCrosshair = styleCursor.Crosshair;
pub const styleCursorDefault = styleCursor.Default;
pub const styleCursorHand = styleCursor.Hand;
pub const styleCursorMove = styleCursor.Move;
pub const styleCursorE_resize = styleCursor.E_resize;
pub const styleCursorNe_resize = styleCursor.Ne_resize;
pub const styleCursorNw_resize = styleCursor.Nw_resize;
pub const styleCursorN_resize = styleCursor.N_resize;
pub const styleCursorSe_resize = styleCursor.Se_resize;
pub const styleCursorSw_resize = styleCursor.Sw_resize;
pub const styleCursorS_resize = styleCursor.S_resize;
pub const styleCursorW_resize = styleCursor.W_resize;
pub const styleCursorText = styleCursor.Text;
pub const styleCursorWait = styleCursor.Wait;
pub const styleCursorHelp = styleCursor.Help;
pub const styleCursorPointer = styleCursor.Pointer;
pub const styleCursorProgress = styleCursor.Progress;
pub const styleCursorNot_allowed = styleCursor.Not_allowed;
pub const styleCursorNo_drop = styleCursor.No_drop;
pub const styleCursorVertical_text = styleCursor.Vertical_text;
pub const styleCursorall_scroll = styleCursor.all_scroll;
pub const styleCursorcol_resize = styleCursor.col_resize;
pub const styleCursorrow_resize = styleCursor.row_resize;
pub const styleCursorNone = styleCursor.None;
pub const styleCursorContext_menu = styleCursor.Context_menu;
pub const styleCursorEw_resize = styleCursor.Ew_resize;
pub const styleCursorNs_resize = styleCursor.Ns_resize;
pub const styleCursorNesw_resize = styleCursor.Nesw_resize;
pub const styleCursorNwse_resize = styleCursor.Nwse_resize;
pub const styleCursorCell = styleCursor.Cell;
pub const styleCursorCopy = styleCursor.Copy;
pub const styleCursorAlias = styleCursor.Alias;
pub const styleCursorcustom = styleCursor.custom;
pub const styleCursorNotSet = styleCursor.NotSet;
pub const styleCursor_Max = styleCursor._Max;

pub const styleDir = enum(i32) {
    NotSet = 0,
    LeftToRight = 1,
    RightToLeft = 2,
    Inherit = 3,
    _Max = 2147483647,
};
pub const styleDirNotSet = styleDir.NotSet;
pub const styleDirLeftToRight = styleDir.LeftToRight;
pub const styleDirRightToLeft = styleDir.RightToLeft;
pub const styleDirInherit = styleDir.Inherit;
pub const styleDir_Max = styleDir._Max;

pub const styleBidi = enum(i32) {
    NotSet = 0,
    Normal = 1,
    Embed = 2,
    Override = 3,
    Inherit = 4,
    _Max = 2147483647,
};
pub const styleBidiNotSet = styleBidi.NotSet;
pub const styleBidiNormal = styleBidi.Normal;
pub const styleBidiEmbed = styleBidi.Embed;
pub const styleBidiOverride = styleBidi.Override;
pub const styleBidiInherit = styleBidi.Inherit;
pub const styleBidi_Max = styleBidi._Max;

pub const styleImeMode = enum(i32) {
    Auto = 0,
    Active = 1,
    Inactive = 2,
    Disabled = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleImeModeAuto = styleImeMode.Auto;
pub const styleImeModeActive = styleImeMode.Active;
pub const styleImeModeInactive = styleImeMode.Inactive;
pub const styleImeModeDisabled = styleImeMode.Disabled;
pub const styleImeModeNotSet = styleImeMode.NotSet;
pub const styleImeMode_Max = styleImeMode._Max;

pub const styleRubyAlign = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Left = 2,
    Center = 3,
    Right = 4,
    DistributeLetter = 5,
    DistributeSpace = 6,
    LineEdge = 7,
    _Max = 2147483647,
};
pub const styleRubyAlignNotSet = styleRubyAlign.NotSet;
pub const styleRubyAlignAuto = styleRubyAlign.Auto;
pub const styleRubyAlignLeft = styleRubyAlign.Left;
pub const styleRubyAlignCenter = styleRubyAlign.Center;
pub const styleRubyAlignRight = styleRubyAlign.Right;
pub const styleRubyAlignDistributeLetter = styleRubyAlign.DistributeLetter;
pub const styleRubyAlignDistributeSpace = styleRubyAlign.DistributeSpace;
pub const styleRubyAlignLineEdge = styleRubyAlign.LineEdge;
pub const styleRubyAlign_Max = styleRubyAlign._Max;

pub const styleRubyPosition = enum(i32) {
    NotSet = 0,
    Above = 1,
    Inline = 2,
    _Max = 2147483647,
};
pub const styleRubyPositionNotSet = styleRubyPosition.NotSet;
pub const styleRubyPositionAbove = styleRubyPosition.Above;
pub const styleRubyPositionInline = styleRubyPosition.Inline;
pub const styleRubyPosition_Max = styleRubyPosition._Max;

pub const styleRubyOverhang = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Whitespace = 2,
    None = 3,
    _Max = 2147483647,
};
pub const styleRubyOverhangNotSet = styleRubyOverhang.NotSet;
pub const styleRubyOverhangAuto = styleRubyOverhang.Auto;
pub const styleRubyOverhangWhitespace = styleRubyOverhang.Whitespace;
pub const styleRubyOverhangNone = styleRubyOverhang.None;
pub const styleRubyOverhang_Max = styleRubyOverhang._Max;

pub const styleLayoutGridChar = enum(i32) {
    NotSet = 0,
    Auto = 1,
    None = 2,
    _Max = 2147483647,
};
pub const styleLayoutGridCharNotSet = styleLayoutGridChar.NotSet;
pub const styleLayoutGridCharAuto = styleLayoutGridChar.Auto;
pub const styleLayoutGridCharNone = styleLayoutGridChar.None;
pub const styleLayoutGridChar_Max = styleLayoutGridChar._Max;

pub const styleLayoutGridLine = enum(i32) {
    NotSet = 0,
    Auto = 1,
    None = 2,
    _Max = 2147483647,
};
pub const styleLayoutGridLineNotSet = styleLayoutGridLine.NotSet;
pub const styleLayoutGridLineAuto = styleLayoutGridLine.Auto;
pub const styleLayoutGridLineNone = styleLayoutGridLine.None;
pub const styleLayoutGridLine_Max = styleLayoutGridLine._Max;

pub const styleLayoutGridMode = enum(i32) {
    NotSet = 0,
    Char = 1,
    Line = 2,
    Both = 3,
    None = 4,
    _Max = 2147483647,
};
pub const styleLayoutGridModeNotSet = styleLayoutGridMode.NotSet;
pub const styleLayoutGridModeChar = styleLayoutGridMode.Char;
pub const styleLayoutGridModeLine = styleLayoutGridMode.Line;
pub const styleLayoutGridModeBoth = styleLayoutGridMode.Both;
pub const styleLayoutGridModeNone = styleLayoutGridMode.None;
pub const styleLayoutGridMode_Max = styleLayoutGridMode._Max;

pub const styleLayoutGridType = enum(i32) {
    NotSet = 0,
    Loose = 1,
    Strict = 2,
    Fixed = 3,
    _Max = 2147483647,
};
pub const styleLayoutGridTypeNotSet = styleLayoutGridType.NotSet;
pub const styleLayoutGridTypeLoose = styleLayoutGridType.Loose;
pub const styleLayoutGridTypeStrict = styleLayoutGridType.Strict;
pub const styleLayoutGridTypeFixed = styleLayoutGridType.Fixed;
pub const styleLayoutGridType_Max = styleLayoutGridType._Max;

pub const styleLineBreak = enum(i32) {
    NotSet = 0,
    Normal = 1,
    Strict = 2,
    _Max = 2147483647,
};
pub const styleLineBreakNotSet = styleLineBreak.NotSet;
pub const styleLineBreakNormal = styleLineBreak.Normal;
pub const styleLineBreakStrict = styleLineBreak.Strict;
pub const styleLineBreak_Max = styleLineBreak._Max;

pub const styleWordBreak = enum(i32) {
    NotSet = 0,
    Normal = 1,
    BreakAll = 2,
    KeepAll = 3,
    _Max = 2147483647,
};
pub const styleWordBreakNotSet = styleWordBreak.NotSet;
pub const styleWordBreakNormal = styleWordBreak.Normal;
pub const styleWordBreakBreakAll = styleWordBreak.BreakAll;
pub const styleWordBreakKeepAll = styleWordBreak.KeepAll;
pub const styleWordBreak_Max = styleWordBreak._Max;

pub const styleWordWrap = enum(i32) {
    NotSet = 0,
    Off = 1,
    On = 2,
    _Max = 2147483647,
};
pub const styleWordWrapNotSet = styleWordWrap.NotSet;
pub const styleWordWrapOff = styleWordWrap.Off;
pub const styleWordWrapOn = styleWordWrap.On;
pub const styleWordWrap_Max = styleWordWrap._Max;

pub const styleTextJustify = enum(i32) {
    NotSet = 0,
    InterWord = 1,
    Newspaper = 2,
    Distribute = 3,
    DistributeAllLines = 4,
    InterIdeograph = 5,
    InterCluster = 6,
    Kashida = 7,
    Auto = 8,
    _Max = 2147483647,
};
pub const styleTextJustifyNotSet = styleTextJustify.NotSet;
pub const styleTextJustifyInterWord = styleTextJustify.InterWord;
pub const styleTextJustifyNewspaper = styleTextJustify.Newspaper;
pub const styleTextJustifyDistribute = styleTextJustify.Distribute;
pub const styleTextJustifyDistributeAllLines = styleTextJustify.DistributeAllLines;
pub const styleTextJustifyInterIdeograph = styleTextJustify.InterIdeograph;
pub const styleTextJustifyInterCluster = styleTextJustify.InterCluster;
pub const styleTextJustifyKashida = styleTextJustify.Kashida;
pub const styleTextJustifyAuto = styleTextJustify.Auto;
pub const styleTextJustify_Max = styleTextJustify._Max;

pub const styleTextAlignLast = enum(i32) {
    NotSet = 0,
    Left = 1,
    Center = 2,
    Right = 3,
    Justify = 4,
    Auto = 5,
    _Max = 2147483647,
};
pub const styleTextAlignLastNotSet = styleTextAlignLast.NotSet;
pub const styleTextAlignLastLeft = styleTextAlignLast.Left;
pub const styleTextAlignLastCenter = styleTextAlignLast.Center;
pub const styleTextAlignLastRight = styleTextAlignLast.Right;
pub const styleTextAlignLastJustify = styleTextAlignLast.Justify;
pub const styleTextAlignLastAuto = styleTextAlignLast.Auto;
pub const styleTextAlignLast_Max = styleTextAlignLast._Max;

pub const styleTextJustifyTrim = enum(i32) {
    NotSet = 0,
    None = 1,
    Punctuation = 2,
    PunctAndKana = 3,
    _Max = 2147483647,
};
pub const styleTextJustifyTrimNotSet = styleTextJustifyTrim.NotSet;
pub const styleTextJustifyTrimNone = styleTextJustifyTrim.None;
pub const styleTextJustifyTrimPunctuation = styleTextJustifyTrim.Punctuation;
pub const styleTextJustifyTrimPunctAndKana = styleTextJustifyTrim.PunctAndKana;
pub const styleTextJustifyTrim_Max = styleTextJustifyTrim._Max;

pub const styleAccelerator = enum(i32) {
    False = 0,
    True = 1,
    _Max = 2147483647,
};
pub const styleAcceleratorFalse = styleAccelerator.False;
pub const styleAcceleratorTrue = styleAccelerator.True;
pub const styleAccelerator_Max = styleAccelerator._Max;

pub const styleLayoutFlow = enum(i32) {
    Horizontal = 0,
    VerticalIdeographic = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleLayoutFlowHorizontal = styleLayoutFlow.Horizontal;
pub const styleLayoutFlowVerticalIdeographic = styleLayoutFlow.VerticalIdeographic;
pub const styleLayoutFlowNotSet = styleLayoutFlow.NotSet;
pub const styleLayoutFlow_Max = styleLayoutFlow._Max;

pub const styleBlockProgression = enum(i32) {
    Tb = 0,
    Rl = 1,
    Bt = 2,
    Lr = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleBlockProgressionTb = styleBlockProgression.Tb;
pub const styleBlockProgressionRl = styleBlockProgression.Rl;
pub const styleBlockProgressionBt = styleBlockProgression.Bt;
pub const styleBlockProgressionLr = styleBlockProgression.Lr;
pub const styleBlockProgressionNotSet = styleBlockProgression.NotSet;
pub const styleBlockProgression_Max = styleBlockProgression._Max;

pub const styleWritingMode = enum(i32) {
    Lrtb = 0,
    Tbrl = 1,
    Rltb = 2,
    Btrl = 3,
    NotSet = 4,
    Tblr = 5,
    Btlr = 6,
    Lrbt = 7,
    Rlbt = 8,
    Lr = 9,
    Rl = 10,
    Tb = 11,
    _Max = 2147483647,
};
pub const styleWritingModeLrtb = styleWritingMode.Lrtb;
pub const styleWritingModeTbrl = styleWritingMode.Tbrl;
pub const styleWritingModeRltb = styleWritingMode.Rltb;
pub const styleWritingModeBtrl = styleWritingMode.Btrl;
pub const styleWritingModeNotSet = styleWritingMode.NotSet;
pub const styleWritingModeTblr = styleWritingMode.Tblr;
pub const styleWritingModeBtlr = styleWritingMode.Btlr;
pub const styleWritingModeLrbt = styleWritingMode.Lrbt;
pub const styleWritingModeRlbt = styleWritingMode.Rlbt;
pub const styleWritingModeLr = styleWritingMode.Lr;
pub const styleWritingModeRl = styleWritingMode.Rl;
pub const styleWritingModeTb = styleWritingMode.Tb;
pub const styleWritingMode_Max = styleWritingMode._Max;

pub const styleBool = enum(i32) {
    False = 0,
    True = 1,
    _Max = 2147483647,
};
pub const styleBoolFalse = styleBool.False;
pub const styleBoolTrue = styleBool.True;
pub const styleBool_Max = styleBool._Max;

pub const styleTextUnderlinePosition = enum(i32) {
    Below = 0,
    Above = 1,
    Auto = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleTextUnderlinePositionBelow = styleTextUnderlinePosition.Below;
pub const styleTextUnderlinePositionAbove = styleTextUnderlinePosition.Above;
pub const styleTextUnderlinePositionAuto = styleTextUnderlinePosition.Auto;
pub const styleTextUnderlinePositionNotSet = styleTextUnderlinePosition.NotSet;
pub const styleTextUnderlinePosition_Max = styleTextUnderlinePosition._Max;

pub const styleTextOverflow = enum(i32) {
    Clip = 0,
    Ellipsis = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleTextOverflowClip = styleTextOverflow.Clip;
pub const styleTextOverflowEllipsis = styleTextOverflow.Ellipsis;
pub const styleTextOverflowNotSet = styleTextOverflow.NotSet;
pub const styleTextOverflow_Max = styleTextOverflow._Max;

pub const styleInterpolation = enum(i32) {
    NotSet = 0,
    NN = 1,
    BCH = 2,
    _Max = 2147483647,
};
pub const styleInterpolationNotSet = styleInterpolation.NotSet;
pub const styleInterpolationNN = styleInterpolation.NN;
pub const styleInterpolationBCH = styleInterpolation.BCH;
pub const styleInterpolation_Max = styleInterpolation._Max;

pub const styleBoxSizing = enum(i32) {
    NotSet = 0,
    ContentBox = 1,
    BorderBox = 2,
    _Max = 2147483647,
};
pub const styleBoxSizingNotSet = styleBoxSizing.NotSet;
pub const styleBoxSizingContentBox = styleBoxSizing.ContentBox;
pub const styleBoxSizingBorderBox = styleBoxSizing.BorderBox;
pub const styleBoxSizing_Max = styleBoxSizing._Max;

pub const styleFlex = enum(i32) {
    None = 0,
    NotSet = 1,
    _Max = 2147483647,
};
pub const styleFlexNone = styleFlex.None;
pub const styleFlexNotSet = styleFlex.NotSet;
pub const styleFlex_Max = styleFlex._Max;

pub const styleFlexBasis = enum(i32) {
    Auto = 0,
    NotSet = 1,
    _Max = 2147483647,
};
pub const styleFlexBasisAuto = styleFlexBasis.Auto;
pub const styleFlexBasisNotSet = styleFlexBasis.NotSet;
pub const styleFlexBasis_Max = styleFlexBasis._Max;

pub const styleFlexDirection = enum(i32) {
    Row = 0,
    RowReverse = 1,
    Column = 2,
    ColumnReverse = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleFlexDirectionRow = styleFlexDirection.Row;
pub const styleFlexDirectionRowReverse = styleFlexDirection.RowReverse;
pub const styleFlexDirectionColumn = styleFlexDirection.Column;
pub const styleFlexDirectionColumnReverse = styleFlexDirection.ColumnReverse;
pub const styleFlexDirectionNotSet = styleFlexDirection.NotSet;
pub const styleFlexDirection_Max = styleFlexDirection._Max;

pub const styleWebkitBoxOrient = enum(i32) {
    Horizontal = 0,
    InlineAxis = 1,
    Vertical = 2,
    BlockAxis = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleWebkitBoxOrientHorizontal = styleWebkitBoxOrient.Horizontal;
pub const styleWebkitBoxOrientInlineAxis = styleWebkitBoxOrient.InlineAxis;
pub const styleWebkitBoxOrientVertical = styleWebkitBoxOrient.Vertical;
pub const styleWebkitBoxOrientBlockAxis = styleWebkitBoxOrient.BlockAxis;
pub const styleWebkitBoxOrientNotSet = styleWebkitBoxOrient.NotSet;
pub const styleWebkitBoxOrient_Max = styleWebkitBoxOrient._Max;

pub const styleWebkitBoxDirection = enum(i32) {
    Normal = 0,
    Reverse = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleWebkitBoxDirectionNormal = styleWebkitBoxDirection.Normal;
pub const styleWebkitBoxDirectionReverse = styleWebkitBoxDirection.Reverse;
pub const styleWebkitBoxDirectionNotSet = styleWebkitBoxDirection.NotSet;
pub const styleWebkitBoxDirection_Max = styleWebkitBoxDirection._Max;

pub const styleFlexWrap = enum(i32) {
    Nowrap = 0,
    Wrap = 1,
    WrapReverse = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleFlexWrapNowrap = styleFlexWrap.Nowrap;
pub const styleFlexWrapWrap = styleFlexWrap.Wrap;
pub const styleFlexWrapWrapReverse = styleFlexWrap.WrapReverse;
pub const styleFlexWrapNotSet = styleFlexWrap.NotSet;
pub const styleFlexWrap_Max = styleFlexWrap._Max;

pub const styleAlignItems = enum(i32) {
    FlexStart = 0,
    FlexEnd = 1,
    Center = 2,
    Baseline = 3,
    Stretch = 4,
    NotSet = 5,
    _Max = 2147483647,
};
pub const styleAlignItemsFlexStart = styleAlignItems.FlexStart;
pub const styleAlignItemsFlexEnd = styleAlignItems.FlexEnd;
pub const styleAlignItemsCenter = styleAlignItems.Center;
pub const styleAlignItemsBaseline = styleAlignItems.Baseline;
pub const styleAlignItemsStretch = styleAlignItems.Stretch;
pub const styleAlignItemsNotSet = styleAlignItems.NotSet;
pub const styleAlignItems_Max = styleAlignItems._Max;

pub const styleMsFlexAlign = enum(i32) {
    Start = 0,
    End = 1,
    Center = 2,
    Baseline = 3,
    Stretch = 4,
    NotSet = 5,
    _Max = 2147483647,
};
pub const styleMsFlexAlignStart = styleMsFlexAlign.Start;
pub const styleMsFlexAlignEnd = styleMsFlexAlign.End;
pub const styleMsFlexAlignCenter = styleMsFlexAlign.Center;
pub const styleMsFlexAlignBaseline = styleMsFlexAlign.Baseline;
pub const styleMsFlexAlignStretch = styleMsFlexAlign.Stretch;
pub const styleMsFlexAlignNotSet = styleMsFlexAlign.NotSet;
pub const styleMsFlexAlign_Max = styleMsFlexAlign._Max;

pub const styleMsFlexItemAlign = enum(i32) {
    Start = 0,
    End = 1,
    Center = 2,
    Baseline = 3,
    Stretch = 4,
    Auto = 5,
    NotSet = 6,
    _Max = 2147483647,
};
pub const styleMsFlexItemAlignStart = styleMsFlexItemAlign.Start;
pub const styleMsFlexItemAlignEnd = styleMsFlexItemAlign.End;
pub const styleMsFlexItemAlignCenter = styleMsFlexItemAlign.Center;
pub const styleMsFlexItemAlignBaseline = styleMsFlexItemAlign.Baseline;
pub const styleMsFlexItemAlignStretch = styleMsFlexItemAlign.Stretch;
pub const styleMsFlexItemAlignAuto = styleMsFlexItemAlign.Auto;
pub const styleMsFlexItemAlignNotSet = styleMsFlexItemAlign.NotSet;
pub const styleMsFlexItemAlign_Max = styleMsFlexItemAlign._Max;

pub const styleAlignSelf = enum(i32) {
    FlexStart = 0,
    FlexEnd = 1,
    Center = 2,
    Baseline = 3,
    Stretch = 4,
    Auto = 5,
    NotSet = 6,
    _Max = 2147483647,
};
pub const styleAlignSelfFlexStart = styleAlignSelf.FlexStart;
pub const styleAlignSelfFlexEnd = styleAlignSelf.FlexEnd;
pub const styleAlignSelfCenter = styleAlignSelf.Center;
pub const styleAlignSelfBaseline = styleAlignSelf.Baseline;
pub const styleAlignSelfStretch = styleAlignSelf.Stretch;
pub const styleAlignSelfAuto = styleAlignSelf.Auto;
pub const styleAlignSelfNotSet = styleAlignSelf.NotSet;
pub const styleAlignSelf_Max = styleAlignSelf._Max;

pub const styleJustifyContent = enum(i32) {
    FlexStart = 0,
    FlexEnd = 1,
    Center = 2,
    SpaceBetween = 3,
    SpaceAround = 4,
    NotSet = 5,
    _Max = 2147483647,
};
pub const styleJustifyContentFlexStart = styleJustifyContent.FlexStart;
pub const styleJustifyContentFlexEnd = styleJustifyContent.FlexEnd;
pub const styleJustifyContentCenter = styleJustifyContent.Center;
pub const styleJustifyContentSpaceBetween = styleJustifyContent.SpaceBetween;
pub const styleJustifyContentSpaceAround = styleJustifyContent.SpaceAround;
pub const styleJustifyContentNotSet = styleJustifyContent.NotSet;
pub const styleJustifyContent_Max = styleJustifyContent._Max;

pub const styleMsFlexPack = enum(i32) {
    Start = 0,
    End = 1,
    Center = 2,
    Justify = 3,
    Distribute = 4,
    NotSet = 5,
    _Max = 2147483647,
};
pub const styleMsFlexPackStart = styleMsFlexPack.Start;
pub const styleMsFlexPackEnd = styleMsFlexPack.End;
pub const styleMsFlexPackCenter = styleMsFlexPack.Center;
pub const styleMsFlexPackJustify = styleMsFlexPack.Justify;
pub const styleMsFlexPackDistribute = styleMsFlexPack.Distribute;
pub const styleMsFlexPackNotSet = styleMsFlexPack.NotSet;
pub const styleMsFlexPack_Max = styleMsFlexPack._Max;

pub const styleWebkitBoxPack = enum(i32) {
    Start = 0,
    End = 1,
    Center = 2,
    Justify = 3,
    NotSet = 5,
    _Max = 2147483647,
};
pub const styleWebkitBoxPackStart = styleWebkitBoxPack.Start;
pub const styleWebkitBoxPackEnd = styleWebkitBoxPack.End;
pub const styleWebkitBoxPackCenter = styleWebkitBoxPack.Center;
pub const styleWebkitBoxPackJustify = styleWebkitBoxPack.Justify;
pub const styleWebkitBoxPackNotSet = styleWebkitBoxPack.NotSet;
pub const styleWebkitBoxPack_Max = styleWebkitBoxPack._Max;

pub const styleMsFlexLinePack = enum(i32) {
    Start = 0,
    End = 1,
    Center = 2,
    Justify = 3,
    Distribute = 4,
    Stretch = 5,
    NotSet = 6,
    _Max = 2147483647,
};
pub const styleMsFlexLinePackStart = styleMsFlexLinePack.Start;
pub const styleMsFlexLinePackEnd = styleMsFlexLinePack.End;
pub const styleMsFlexLinePackCenter = styleMsFlexLinePack.Center;
pub const styleMsFlexLinePackJustify = styleMsFlexLinePack.Justify;
pub const styleMsFlexLinePackDistribute = styleMsFlexLinePack.Distribute;
pub const styleMsFlexLinePackStretch = styleMsFlexLinePack.Stretch;
pub const styleMsFlexLinePackNotSet = styleMsFlexLinePack.NotSet;
pub const styleMsFlexLinePack_Max = styleMsFlexLinePack._Max;

pub const styleAlignContent = enum(i32) {
    FlexStart = 0,
    FlexEnd = 1,
    Center = 2,
    SpaceBetween = 3,
    SpaceAround = 4,
    Stretch = 5,
    NotSet = 6,
    _Max = 2147483647,
};
pub const styleAlignContentFlexStart = styleAlignContent.FlexStart;
pub const styleAlignContentFlexEnd = styleAlignContent.FlexEnd;
pub const styleAlignContentCenter = styleAlignContent.Center;
pub const styleAlignContentSpaceBetween = styleAlignContent.SpaceBetween;
pub const styleAlignContentSpaceAround = styleAlignContent.SpaceAround;
pub const styleAlignContentStretch = styleAlignContent.Stretch;
pub const styleAlignContentNotSet = styleAlignContent.NotSet;
pub const styleAlignContent_Max = styleAlignContent._Max;

pub const styleColumnFill = enum(i32) {
    Auto = 0,
    Balance = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleColumnFillAuto = styleColumnFill.Auto;
pub const styleColumnFillBalance = styleColumnFill.Balance;
pub const styleColumnFillNotSet = styleColumnFill.NotSet;
pub const styleColumnFill_Max = styleColumnFill._Max;

pub const styleColumnSpan = enum(i32) {
    None = 0,
    All = 1,
    One = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleColumnSpanNone = styleColumnSpan.None;
pub const styleColumnSpanAll = styleColumnSpan.All;
pub const styleColumnSpanOne = styleColumnSpan.One;
pub const styleColumnSpanNotSet = styleColumnSpan.NotSet;
pub const styleColumnSpan_Max = styleColumnSpan._Max;

pub const styleBreak = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Always = 2,
    Avoid = 3,
    Left = 4,
    Right = 5,
    Page = 6,
    Column = 7,
    AvoidPage = 8,
    AvoidColumn = 9,
    _Max = 2147483647,
};
pub const styleBreakNotSet = styleBreak.NotSet;
pub const styleBreakAuto = styleBreak.Auto;
pub const styleBreakAlways = styleBreak.Always;
pub const styleBreakAvoid = styleBreak.Avoid;
pub const styleBreakLeft = styleBreak.Left;
pub const styleBreakRight = styleBreak.Right;
pub const styleBreakPage = styleBreak.Page;
pub const styleBreakColumn = styleBreak.Column;
pub const styleBreakAvoidPage = styleBreak.AvoidPage;
pub const styleBreakAvoidColumn = styleBreak.AvoidColumn;
pub const styleBreak_Max = styleBreak._Max;

pub const styleBreakInside = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Avoid = 2,
    AvoidPage = 3,
    AvoidColumn = 4,
    _Max = 2147483647,
};
pub const styleBreakInsideNotSet = styleBreakInside.NotSet;
pub const styleBreakInsideAuto = styleBreakInside.Auto;
pub const styleBreakInsideAvoid = styleBreakInside.Avoid;
pub const styleBreakInsideAvoidPage = styleBreakInside.AvoidPage;
pub const styleBreakInsideAvoidColumn = styleBreakInside.AvoidColumn;
pub const styleBreakInside_Max = styleBreakInside._Max;

pub const styleMsScrollChaining = enum(i32) {
    NotSet = 0,
    None = 1,
    Chained = 2,
    _Max = 2147483647,
};
pub const styleMsScrollChainingNotSet = styleMsScrollChaining.NotSet;
pub const styleMsScrollChainingNone = styleMsScrollChaining.None;
pub const styleMsScrollChainingChained = styleMsScrollChaining.Chained;
pub const styleMsScrollChaining_Max = styleMsScrollChaining._Max;

pub const styleMsContentZooming = enum(i32) {
    NotSet = 0,
    None = 1,
    Zoom = 2,
    _Max = 2147483647,
};
pub const styleMsContentZoomingNotSet = styleMsContentZooming.NotSet;
pub const styleMsContentZoomingNone = styleMsContentZooming.None;
pub const styleMsContentZoomingZoom = styleMsContentZooming.Zoom;
pub const styleMsContentZooming_Max = styleMsContentZooming._Max;

pub const styleMsContentZoomSnapType = enum(i32) {
    NotSet = 0,
    None = 1,
    Mandatory = 2,
    Proximity = 3,
    _Max = 2147483647,
};
pub const styleMsContentZoomSnapTypeNotSet = styleMsContentZoomSnapType.NotSet;
pub const styleMsContentZoomSnapTypeNone = styleMsContentZoomSnapType.None;
pub const styleMsContentZoomSnapTypeMandatory = styleMsContentZoomSnapType.Mandatory;
pub const styleMsContentZoomSnapTypeProximity = styleMsContentZoomSnapType.Proximity;
pub const styleMsContentZoomSnapType_Max = styleMsContentZoomSnapType._Max;

pub const styleMsScrollRails = enum(i32) {
    NotSet = 0,
    None = 1,
    Railed = 2,
    _Max = 2147483647,
};
pub const styleMsScrollRailsNotSet = styleMsScrollRails.NotSet;
pub const styleMsScrollRailsNone = styleMsScrollRails.None;
pub const styleMsScrollRailsRailed = styleMsScrollRails.Railed;
pub const styleMsScrollRails_Max = styleMsScrollRails._Max;

pub const styleMsContentZoomChaining = enum(i32) {
    NotSet = 0,
    None = 1,
    Chained = 2,
    _Max = 2147483647,
};
pub const styleMsContentZoomChainingNotSet = styleMsContentZoomChaining.NotSet;
pub const styleMsContentZoomChainingNone = styleMsContentZoomChaining.None;
pub const styleMsContentZoomChainingChained = styleMsContentZoomChaining.Chained;
pub const styleMsContentZoomChaining_Max = styleMsContentZoomChaining._Max;

pub const styleMsScrollSnapType = enum(i32) {
    NotSet = 0,
    None = 1,
    Mandatory = 2,
    Proximity = 3,
    _Max = 2147483647,
};
pub const styleMsScrollSnapTypeNotSet = styleMsScrollSnapType.NotSet;
pub const styleMsScrollSnapTypeNone = styleMsScrollSnapType.None;
pub const styleMsScrollSnapTypeMandatory = styleMsScrollSnapType.Mandatory;
pub const styleMsScrollSnapTypeProximity = styleMsScrollSnapType.Proximity;
pub const styleMsScrollSnapType_Max = styleMsScrollSnapType._Max;

pub const styleGridColumn = enum(i32) {
    NotSet = 0,
    _Max = 2147483647,
};
pub const styleGridColumnNotSet = styleGridColumn.NotSet;
pub const styleGridColumn_Max = styleGridColumn._Max;

pub const styleGridColumnAlign = enum(i32) {
    Center = 0,
    End = 1,
    Start = 2,
    Stretch = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleGridColumnAlignCenter = styleGridColumnAlign.Center;
pub const styleGridColumnAlignEnd = styleGridColumnAlign.End;
pub const styleGridColumnAlignStart = styleGridColumnAlign.Start;
pub const styleGridColumnAlignStretch = styleGridColumnAlign.Stretch;
pub const styleGridColumnAlignNotSet = styleGridColumnAlign.NotSet;
pub const styleGridColumnAlign_Max = styleGridColumnAlign._Max;

pub const styleGridColumnSpan = enum(i32) {
    NotSet = 0,
    _Max = 2147483647,
};
pub const styleGridColumnSpanNotSet = styleGridColumnSpan.NotSet;
pub const styleGridColumnSpan_Max = styleGridColumnSpan._Max;

pub const styleGridRow = enum(i32) {
    NotSet = 0,
    _Max = 2147483647,
};
pub const styleGridRowNotSet = styleGridRow.NotSet;
pub const styleGridRow_Max = styleGridRow._Max;

pub const styleGridRowAlign = enum(i32) {
    Center = 0,
    End = 1,
    Start = 2,
    Stretch = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleGridRowAlignCenter = styleGridRowAlign.Center;
pub const styleGridRowAlignEnd = styleGridRowAlign.End;
pub const styleGridRowAlignStart = styleGridRowAlign.Start;
pub const styleGridRowAlignStretch = styleGridRowAlign.Stretch;
pub const styleGridRowAlignNotSet = styleGridRowAlign.NotSet;
pub const styleGridRowAlign_Max = styleGridRowAlign._Max;

pub const styleGridRowSpan = enum(i32) {
    NotSet = 0,
    _Max = 2147483647,
};
pub const styleGridRowSpanNotSet = styleGridRowSpan.NotSet;
pub const styleGridRowSpan_Max = styleGridRowSpan._Max;

pub const styleWrapThrough = enum(i32) {
    NotSet = 0,
    Wrap = 1,
    None = 2,
    _Max = 2147483647,
};
pub const styleWrapThroughNotSet = styleWrapThrough.NotSet;
pub const styleWrapThroughWrap = styleWrapThrough.Wrap;
pub const styleWrapThroughNone = styleWrapThrough.None;
pub const styleWrapThrough_Max = styleWrapThrough._Max;

pub const styleWrapFlow = enum(i32) {
    NotSet = 0,
    Auto = 1,
    Both = 2,
    Start = 3,
    End = 4,
    Clear = 5,
    Minimum = 6,
    Maximum = 7,
    _Max = 2147483647,
};
pub const styleWrapFlowNotSet = styleWrapFlow.NotSet;
pub const styleWrapFlowAuto = styleWrapFlow.Auto;
pub const styleWrapFlowBoth = styleWrapFlow.Both;
pub const styleWrapFlowStart = styleWrapFlow.Start;
pub const styleWrapFlowEnd = styleWrapFlow.End;
pub const styleWrapFlowClear = styleWrapFlow.Clear;
pub const styleWrapFlowMinimum = styleWrapFlow.Minimum;
pub const styleWrapFlowMaximum = styleWrapFlow.Maximum;
pub const styleWrapFlow_Max = styleWrapFlow._Max;

pub const styleAlignmentBaseline = enum(i32) {
    NotSet = 0,
    AfterEdge = 1,
    Alphabetic = 2,
    Auto = 3,
    Baseline = 4,
    BeforeEdge = 5,
    Central = 6,
    Hanging = 7,
    Mathematical = 8,
    Middle = 9,
    TextAfterEdge = 10,
    TextBeforeEdge = 11,
    Ideographic = 12,
    _Max = 2147483647,
};
pub const styleAlignmentBaselineNotSet = styleAlignmentBaseline.NotSet;
pub const styleAlignmentBaselineAfterEdge = styleAlignmentBaseline.AfterEdge;
pub const styleAlignmentBaselineAlphabetic = styleAlignmentBaseline.Alphabetic;
pub const styleAlignmentBaselineAuto = styleAlignmentBaseline.Auto;
pub const styleAlignmentBaselineBaseline = styleAlignmentBaseline.Baseline;
pub const styleAlignmentBaselineBeforeEdge = styleAlignmentBaseline.BeforeEdge;
pub const styleAlignmentBaselineCentral = styleAlignmentBaseline.Central;
pub const styleAlignmentBaselineHanging = styleAlignmentBaseline.Hanging;
pub const styleAlignmentBaselineMathematical = styleAlignmentBaseline.Mathematical;
pub const styleAlignmentBaselineMiddle = styleAlignmentBaseline.Middle;
pub const styleAlignmentBaselineTextAfterEdge = styleAlignmentBaseline.TextAfterEdge;
pub const styleAlignmentBaselineTextBeforeEdge = styleAlignmentBaseline.TextBeforeEdge;
pub const styleAlignmentBaselineIdeographic = styleAlignmentBaseline.Ideographic;
pub const styleAlignmentBaseline_Max = styleAlignmentBaseline._Max;

pub const styleBaselineShift = enum(i32) {
    Baseline = 0,
    Sub = 1,
    Super = 2,
    _Max = 2147483647,
};
pub const styleBaselineShiftBaseline = styleBaselineShift.Baseline;
pub const styleBaselineShiftSub = styleBaselineShift.Sub;
pub const styleBaselineShiftSuper = styleBaselineShift.Super;
pub const styleBaselineShift_Max = styleBaselineShift._Max;

pub const styleClipRule = enum(i32) {
    NotSet = 0,
    NonZero = 1,
    EvenOdd = 2,
    _Max = 2147483647,
};
pub const styleClipRuleNotSet = styleClipRule.NotSet;
pub const styleClipRuleNonZero = styleClipRule.NonZero;
pub const styleClipRuleEvenOdd = styleClipRule.EvenOdd;
pub const styleClipRule_Max = styleClipRule._Max;

pub const styleDominantBaseline = enum(i32) {
    NotSet = 0,
    Alphabetic = 1,
    Auto = 2,
    Central = 3,
    Hanging = 4,
    Ideographic = 5,
    Mathematical = 6,
    Middle = 7,
    NoChange = 8,
    ResetSize = 9,
    TextAfterEdge = 10,
    TextBeforeEdge = 11,
    UseScript = 12,
    _Max = 2147483647,
};
pub const styleDominantBaselineNotSet = styleDominantBaseline.NotSet;
pub const styleDominantBaselineAlphabetic = styleDominantBaseline.Alphabetic;
pub const styleDominantBaselineAuto = styleDominantBaseline.Auto;
pub const styleDominantBaselineCentral = styleDominantBaseline.Central;
pub const styleDominantBaselineHanging = styleDominantBaseline.Hanging;
pub const styleDominantBaselineIdeographic = styleDominantBaseline.Ideographic;
pub const styleDominantBaselineMathematical = styleDominantBaseline.Mathematical;
pub const styleDominantBaselineMiddle = styleDominantBaseline.Middle;
pub const styleDominantBaselineNoChange = styleDominantBaseline.NoChange;
pub const styleDominantBaselineResetSize = styleDominantBaseline.ResetSize;
pub const styleDominantBaselineTextAfterEdge = styleDominantBaseline.TextAfterEdge;
pub const styleDominantBaselineTextBeforeEdge = styleDominantBaseline.TextBeforeEdge;
pub const styleDominantBaselineUseScript = styleDominantBaseline.UseScript;
pub const styleDominantBaseline_Max = styleDominantBaseline._Max;

pub const styleFillRule = enum(i32) {
    NotSet = 0,
    NonZero = 1,
    EvenOdd = 2,
    _Max = 2147483647,
};
pub const styleFillRuleNotSet = styleFillRule.NotSet;
pub const styleFillRuleNonZero = styleFillRule.NonZero;
pub const styleFillRuleEvenOdd = styleFillRule.EvenOdd;
pub const styleFillRule_Max = styleFillRule._Max;

pub const styleFontStretch = enum(i32) {
    NotSet = 0,
    Wider = 1,
    Narrower = 2,
    UltraCondensed = 3,
    ExtraCondensed = 4,
    Condensed = 5,
    SemiCondensed = 6,
    Normal = 7,
    SemiExpanded = 8,
    Expanded = 9,
    ExtraExpanded = 10,
    UltraExpanded = 11,
    _Max = 2147483647,
};
pub const styleFontStretchNotSet = styleFontStretch.NotSet;
pub const styleFontStretchWider = styleFontStretch.Wider;
pub const styleFontStretchNarrower = styleFontStretch.Narrower;
pub const styleFontStretchUltraCondensed = styleFontStretch.UltraCondensed;
pub const styleFontStretchExtraCondensed = styleFontStretch.ExtraCondensed;
pub const styleFontStretchCondensed = styleFontStretch.Condensed;
pub const styleFontStretchSemiCondensed = styleFontStretch.SemiCondensed;
pub const styleFontStretchNormal = styleFontStretch.Normal;
pub const styleFontStretchSemiExpanded = styleFontStretch.SemiExpanded;
pub const styleFontStretchExpanded = styleFontStretch.Expanded;
pub const styleFontStretchExtraExpanded = styleFontStretch.ExtraExpanded;
pub const styleFontStretchUltraExpanded = styleFontStretch.UltraExpanded;
pub const styleFontStretch_Max = styleFontStretch._Max;

pub const stylePointerEvents = enum(i32) {
    NotSet = 0,
    VisiblePainted = 1,
    VisibleFill = 2,
    VisibleStroke = 3,
    Visible = 4,
    Painted = 5,
    Fill = 6,
    Stroke = 7,
    All = 8,
    None = 9,
    Initial = 10,
    Auto = 11,
    _Max = 2147483647,
};
pub const stylePointerEventsNotSet = stylePointerEvents.NotSet;
pub const stylePointerEventsVisiblePainted = stylePointerEvents.VisiblePainted;
pub const stylePointerEventsVisibleFill = stylePointerEvents.VisibleFill;
pub const stylePointerEventsVisibleStroke = stylePointerEvents.VisibleStroke;
pub const stylePointerEventsVisible = stylePointerEvents.Visible;
pub const stylePointerEventsPainted = stylePointerEvents.Painted;
pub const stylePointerEventsFill = stylePointerEvents.Fill;
pub const stylePointerEventsStroke = stylePointerEvents.Stroke;
pub const stylePointerEventsAll = stylePointerEvents.All;
pub const stylePointerEventsNone = stylePointerEvents.None;
pub const stylePointerEventsInitial = stylePointerEvents.Initial;
pub const stylePointerEventsAuto = stylePointerEvents.Auto;
pub const stylePointerEvents_Max = stylePointerEvents._Max;

pub const styleEnableBackground = enum(i32) {
    NotSet = 0,
    Accumulate = 1,
    New = 2,
    Inherit = 3,
    _Max = 2147483647,
};
pub const styleEnableBackgroundNotSet = styleEnableBackground.NotSet;
pub const styleEnableBackgroundAccumulate = styleEnableBackground.Accumulate;
pub const styleEnableBackgroundNew = styleEnableBackground.New;
pub const styleEnableBackgroundInherit = styleEnableBackground.Inherit;
pub const styleEnableBackground_Max = styleEnableBackground._Max;

pub const styleStrokeLinecap = enum(i32) {
    NotSet = 0,
    Butt = 1,
    Round = 2,
    Square = 3,
    _Max = 2147483647,
};
pub const styleStrokeLinecapNotSet = styleStrokeLinecap.NotSet;
pub const styleStrokeLinecapButt = styleStrokeLinecap.Butt;
pub const styleStrokeLinecapRound = styleStrokeLinecap.Round;
pub const styleStrokeLinecapSquare = styleStrokeLinecap.Square;
pub const styleStrokeLinecap_Max = styleStrokeLinecap._Max;

pub const styleStrokeLinejoin = enum(i32) {
    NotSet = 0,
    Miter = 1,
    Round = 2,
    Bevel = 3,
    _Max = 2147483647,
};
pub const styleStrokeLinejoinNotSet = styleStrokeLinejoin.NotSet;
pub const styleStrokeLinejoinMiter = styleStrokeLinejoin.Miter;
pub const styleStrokeLinejoinRound = styleStrokeLinejoin.Round;
pub const styleStrokeLinejoinBevel = styleStrokeLinejoin.Bevel;
pub const styleStrokeLinejoin_Max = styleStrokeLinejoin._Max;

pub const styleTextAnchor = enum(i32) {
    NotSet = 0,
    Start = 1,
    Middle = 2,
    End = 3,
    _Max = 2147483647,
};
pub const styleTextAnchorNotSet = styleTextAnchor.NotSet;
pub const styleTextAnchorStart = styleTextAnchor.Start;
pub const styleTextAnchorMiddle = styleTextAnchor.Middle;
pub const styleTextAnchorEnd = styleTextAnchor.End;
pub const styleTextAnchor_Max = styleTextAnchor._Max;

pub const styleAttrType = enum(i32) {
    String = 0,
    Color = 1,
    Url = 2,
    Integer = 3,
    Number = 4,
    Length = 5,
    Px = 6,
    Em = 7,
    Ex = 8,
    In = 9,
    Cm = 10,
    Mm = 11,
    Pt = 12,
    Pc = 13,
    Rem = 14,
    Ch = 15,
    Vh = 16,
    Vw = 17,
    Vmin = 18,
    Percentage = 19,
    Angle = 20,
    Deg = 21,
    Rad = 22,
    Grad = 23,
    Time = 24,
    S = 25,
    Ms = 26,
    _Max = 2147483647,
};
pub const styleAttrTypeString = styleAttrType.String;
pub const styleAttrTypeColor = styleAttrType.Color;
pub const styleAttrTypeUrl = styleAttrType.Url;
pub const styleAttrTypeInteger = styleAttrType.Integer;
pub const styleAttrTypeNumber = styleAttrType.Number;
pub const styleAttrTypeLength = styleAttrType.Length;
pub const styleAttrTypePx = styleAttrType.Px;
pub const styleAttrTypeEm = styleAttrType.Em;
pub const styleAttrTypeEx = styleAttrType.Ex;
pub const styleAttrTypeIn = styleAttrType.In;
pub const styleAttrTypeCm = styleAttrType.Cm;
pub const styleAttrTypeMm = styleAttrType.Mm;
pub const styleAttrTypePt = styleAttrType.Pt;
pub const styleAttrTypePc = styleAttrType.Pc;
pub const styleAttrTypeRem = styleAttrType.Rem;
pub const styleAttrTypeCh = styleAttrType.Ch;
pub const styleAttrTypeVh = styleAttrType.Vh;
pub const styleAttrTypeVw = styleAttrType.Vw;
pub const styleAttrTypeVmin = styleAttrType.Vmin;
pub const styleAttrTypePercentage = styleAttrType.Percentage;
pub const styleAttrTypeAngle = styleAttrType.Angle;
pub const styleAttrTypeDeg = styleAttrType.Deg;
pub const styleAttrTypeRad = styleAttrType.Rad;
pub const styleAttrTypeGrad = styleAttrType.Grad;
pub const styleAttrTypeTime = styleAttrType.Time;
pub const styleAttrTypeS = styleAttrType.S;
pub const styleAttrTypeMs = styleAttrType.Ms;
pub const styleAttrType_Max = styleAttrType._Max;

pub const styleInitialColor = enum(i32) {
    NoInitial = 0,
    ColorProperty = 1,
    Transparent = 2,
    Invert = 3,
    _Max = 2147483647,
};
pub const styleInitialColorNoInitial = styleInitialColor.NoInitial;
pub const styleInitialColorColorProperty = styleInitialColor.ColorProperty;
pub const styleInitialColorTransparent = styleInitialColor.Transparent;
pub const styleInitialColorInvert = styleInitialColor.Invert;
pub const styleInitialColor_Max = styleInitialColor._Max;

pub const styleInitialString = enum(i32) {
    NoInitial = 0,
    None = 1,
    Auto = 2,
    Normal = 3,
    _Max = 2147483647,
};
pub const styleInitialStringNoInitial = styleInitialString.NoInitial;
pub const styleInitialStringNone = styleInitialString.None;
pub const styleInitialStringAuto = styleInitialString.Auto;
pub const styleInitialStringNormal = styleInitialString.Normal;
pub const styleInitialString_Max = styleInitialString._Max;

pub const styleTransformOriginX = enum(i32) {
    NotSet = 0,
    Left = 1,
    Center = 2,
    Right = 3,
    _Max = 2147483647,
};
pub const styleTransformOriginXNotSet = styleTransformOriginX.NotSet;
pub const styleTransformOriginXLeft = styleTransformOriginX.Left;
pub const styleTransformOriginXCenter = styleTransformOriginX.Center;
pub const styleTransformOriginXRight = styleTransformOriginX.Right;
pub const styleTransformOriginX_Max = styleTransformOriginX._Max;

pub const styleTransformOriginY = enum(i32) {
    NotSet = 0,
    Top = 1,
    Center = 2,
    Bottom = 3,
    _Max = 2147483647,
};
pub const styleTransformOriginYNotSet = styleTransformOriginY.NotSet;
pub const styleTransformOriginYTop = styleTransformOriginY.Top;
pub const styleTransformOriginYCenter = styleTransformOriginY.Center;
pub const styleTransformOriginYBottom = styleTransformOriginY.Bottom;
pub const styleTransformOriginY_Max = styleTransformOriginY._Max;

pub const stylePerspectiveOriginX = enum(i32) {
    NotSet = 0,
    Left = 1,
    Center = 2,
    Right = 3,
    _Max = 2147483647,
};
pub const stylePerspectiveOriginXNotSet = stylePerspectiveOriginX.NotSet;
pub const stylePerspectiveOriginXLeft = stylePerspectiveOriginX.Left;
pub const stylePerspectiveOriginXCenter = stylePerspectiveOriginX.Center;
pub const stylePerspectiveOriginXRight = stylePerspectiveOriginX.Right;
pub const stylePerspectiveOriginX_Max = stylePerspectiveOriginX._Max;

pub const stylePerspectiveOriginY = enum(i32) {
    NotSet = 0,
    Top = 1,
    Center = 2,
    Bottom = 3,
    _Max = 2147483647,
};
pub const stylePerspectiveOriginYNotSet = stylePerspectiveOriginY.NotSet;
pub const stylePerspectiveOriginYTop = stylePerspectiveOriginY.Top;
pub const stylePerspectiveOriginYCenter = stylePerspectiveOriginY.Center;
pub const stylePerspectiveOriginYBottom = stylePerspectiveOriginY.Bottom;
pub const stylePerspectiveOriginY_Max = stylePerspectiveOriginY._Max;

pub const styleTransformStyle = enum(i32) {
    Flat = 0,
    Preserve3D = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleTransformStyleFlat = styleTransformStyle.Flat;
pub const styleTransformStylePreserve3D = styleTransformStyle.Preserve3D;
pub const styleTransformStyleNotSet = styleTransformStyle.NotSet;
pub const styleTransformStyle_Max = styleTransformStyle._Max;

pub const styleBackfaceVisibility = enum(i32) {
    Visible = 0,
    Hidden = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleBackfaceVisibilityVisible = styleBackfaceVisibility.Visible;
pub const styleBackfaceVisibilityHidden = styleBackfaceVisibility.Hidden;
pub const styleBackfaceVisibilityNotSet = styleBackfaceVisibility.NotSet;
pub const styleBackfaceVisibility_Max = styleBackfaceVisibility._Max;

pub const styleTextSizeAdjust = enum(i32) {
    None = 0,
    Auto = 1,
    _Max = 2147483647,
};
pub const styleTextSizeAdjustNone = styleTextSizeAdjust.None;
pub const styleTextSizeAdjustAuto = styleTextSizeAdjust.Auto;
pub const styleTextSizeAdjust_Max = styleTextSizeAdjust._Max;

pub const styleColorInterpolationFilters = enum(i32) {
    Auto = 0,
    SRgb = 1,
    LinearRgb = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleColorInterpolationFiltersAuto = styleColorInterpolationFilters.Auto;
pub const styleColorInterpolationFiltersSRgb = styleColorInterpolationFilters.SRgb;
pub const styleColorInterpolationFiltersLinearRgb = styleColorInterpolationFilters.LinearRgb;
pub const styleColorInterpolationFiltersNotSet = styleColorInterpolationFilters.NotSet;
pub const styleColorInterpolationFilters_Max = styleColorInterpolationFilters._Max;

pub const styleHyphens = enum(i32) {
    None = 0,
    Manual = 1,
    Auto = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleHyphensNone = styleHyphens.None;
pub const styleHyphensManual = styleHyphens.Manual;
pub const styleHyphensAuto = styleHyphens.Auto;
pub const styleHyphensNotSet = styleHyphens.NotSet;
pub const styleHyphens_Max = styleHyphens._Max;

pub const styleHyphenateLimitLines = enum(i32) {
    NoLimit = 0,
    _Max = 2147483647,
};
pub const styleHyphenateLimitLinesNoLimit = styleHyphenateLimitLines.NoLimit;
pub const styleHyphenateLimitLines_Max = styleHyphenateLimitLines._Max;

pub const styleMsAnimationPlayState = enum(i32) {
    Running = 0,
    Paused = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleMsAnimationPlayStateRunning = styleMsAnimationPlayState.Running;
pub const styleMsAnimationPlayStatePaused = styleMsAnimationPlayState.Paused;
pub const styleMsAnimationPlayStateNotSet = styleMsAnimationPlayState.NotSet;
pub const styleMsAnimationPlayState_Max = styleMsAnimationPlayState._Max;

pub const styleMsAnimationDirection = enum(i32) {
    Normal = 0,
    Alternate = 1,
    Reverse = 2,
    AlternateReverse = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleMsAnimationDirectionNormal = styleMsAnimationDirection.Normal;
pub const styleMsAnimationDirectionAlternate = styleMsAnimationDirection.Alternate;
pub const styleMsAnimationDirectionReverse = styleMsAnimationDirection.Reverse;
pub const styleMsAnimationDirectionAlternateReverse = styleMsAnimationDirection.AlternateReverse;
pub const styleMsAnimationDirectionNotSet = styleMsAnimationDirection.NotSet;
pub const styleMsAnimationDirection_Max = styleMsAnimationDirection._Max;

pub const styleMsAnimationFillMode = enum(i32) {
    None = 0,
    Forwards = 1,
    Backwards = 2,
    Both = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleMsAnimationFillModeNone = styleMsAnimationFillMode.None;
pub const styleMsAnimationFillModeForwards = styleMsAnimationFillMode.Forwards;
pub const styleMsAnimationFillModeBackwards = styleMsAnimationFillMode.Backwards;
pub const styleMsAnimationFillModeBoth = styleMsAnimationFillMode.Both;
pub const styleMsAnimationFillModeNotSet = styleMsAnimationFillMode.NotSet;
pub const styleMsAnimationFillMode_Max = styleMsAnimationFillMode._Max;

pub const styleMsHighContrastAdjust = enum(i32) {
    NotSet = 0,
    Auto = 1,
    None = 2,
    _Max = 2147483647,
};
pub const styleMsHighContrastAdjustNotSet = styleMsHighContrastAdjust.NotSet;
pub const styleMsHighContrastAdjustAuto = styleMsHighContrastAdjust.Auto;
pub const styleMsHighContrastAdjustNone = styleMsHighContrastAdjust.None;
pub const styleMsHighContrastAdjust_Max = styleMsHighContrastAdjust._Max;

pub const styleMsUserSelect = enum(i32) {
    Auto = 0,
    Text = 1,
    Element = 2,
    None = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleMsUserSelectAuto = styleMsUserSelect.Auto;
pub const styleMsUserSelectText = styleMsUserSelect.Text;
pub const styleMsUserSelectElement = styleMsUserSelect.Element;
pub const styleMsUserSelectNone = styleMsUserSelect.None;
pub const styleMsUserSelectNotSet = styleMsUserSelect.NotSet;
pub const styleMsUserSelect_Max = styleMsUserSelect._Max;

pub const styleMsTouchAction = enum(i32) {
    NotSet = -1,
    None = 0,
    Auto = 1,
    Manipulation = 2,
    DoubleTapZoom = 4,
    PanX = 8,
    PanY = 16,
    PinchZoom = 32,
    CrossSlideX = 64,
    CrossSlideY = 128,
    _Max = 2147483647,
};
pub const styleMsTouchActionNotSet = styleMsTouchAction.NotSet;
pub const styleMsTouchActionNone = styleMsTouchAction.None;
pub const styleMsTouchActionAuto = styleMsTouchAction.Auto;
pub const styleMsTouchActionManipulation = styleMsTouchAction.Manipulation;
pub const styleMsTouchActionDoubleTapZoom = styleMsTouchAction.DoubleTapZoom;
pub const styleMsTouchActionPanX = styleMsTouchAction.PanX;
pub const styleMsTouchActionPanY = styleMsTouchAction.PanY;
pub const styleMsTouchActionPinchZoom = styleMsTouchAction.PinchZoom;
pub const styleMsTouchActionCrossSlideX = styleMsTouchAction.CrossSlideX;
pub const styleMsTouchActionCrossSlideY = styleMsTouchAction.CrossSlideY;
pub const styleMsTouchAction_Max = styleMsTouchAction._Max;

pub const styleMsTouchSelect = enum(i32) {
    Grippers = 0,
    None = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleMsTouchSelectGrippers = styleMsTouchSelect.Grippers;
pub const styleMsTouchSelectNone = styleMsTouchSelect.None;
pub const styleMsTouchSelectNotSet = styleMsTouchSelect.NotSet;
pub const styleMsTouchSelect_Max = styleMsTouchSelect._Max;

pub const styleMsScrollTranslation = enum(i32) {
    NotSet = 0,
    None = 1,
    VtoH = 2,
    _Max = 2147483647,
};
pub const styleMsScrollTranslationNotSet = styleMsScrollTranslation.NotSet;
pub const styleMsScrollTranslationNone = styleMsScrollTranslation.None;
pub const styleMsScrollTranslationVtoH = styleMsScrollTranslation.VtoH;
pub const styleMsScrollTranslation_Max = styleMsScrollTranslation._Max;

pub const styleBorderImageRepeat = enum(i32) {
    Stretch = 0,
    Repeat = 1,
    Round = 2,
    Space = 3,
    NotSet = 4,
    _Max = 2147483647,
};
pub const styleBorderImageRepeatStretch = styleBorderImageRepeat.Stretch;
pub const styleBorderImageRepeatRepeat = styleBorderImageRepeat.Repeat;
pub const styleBorderImageRepeatRound = styleBorderImageRepeat.Round;
pub const styleBorderImageRepeatSpace = styleBorderImageRepeat.Space;
pub const styleBorderImageRepeatNotSet = styleBorderImageRepeat.NotSet;
pub const styleBorderImageRepeat_Max = styleBorderImageRepeat._Max;

pub const styleBorderImageSliceFill = enum(i32) {
    NotSet = 0,
    Fill = 1,
    _Max = 2147483647,
};
pub const styleBorderImageSliceFillNotSet = styleBorderImageSliceFill.NotSet;
pub const styleBorderImageSliceFillFill = styleBorderImageSliceFill.Fill;
pub const styleBorderImageSliceFill_Max = styleBorderImageSliceFill._Max;

pub const styleMsImeAlign = enum(i32) {
    Auto = 0,
    After = 1,
    NotSet = 2,
    _Max = 2147483647,
};
pub const styleMsImeAlignAuto = styleMsImeAlign.Auto;
pub const styleMsImeAlignAfter = styleMsImeAlign.After;
pub const styleMsImeAlignNotSet = styleMsImeAlign.NotSet;
pub const styleMsImeAlign_Max = styleMsImeAlign._Max;

pub const styleMsTextCombineHorizontal = enum(i32) {
    None = 0,
    All = 1,
    Digits = 2,
    NotSet = 3,
    _Max = 2147483647,
};
pub const styleMsTextCombineHorizontalNone = styleMsTextCombineHorizontal.None;
pub const styleMsTextCombineHorizontalAll = styleMsTextCombineHorizontal.All;
pub const styleMsTextCombineHorizontalDigits = styleMsTextCombineHorizontal.Digits;
pub const styleMsTextCombineHorizontalNotSet = styleMsTextCombineHorizontal.NotSet;
pub const styleMsTextCombineHorizontal_Max = styleMsTextCombineHorizontal._Max;

pub const styleWebkitAppearance = enum(i32) {
    None = 0,
    CapsLockIndicator = 1,
    Button = 2,
    ButtonBevel = 3,
    Caret = 4,
    Checkbox = 5,
    DefaultButton = 6,
    Listbox = 7,
    Listitem = 8,
    MediaFullscreenButton = 9,
    MediaMuteButton = 10,
    MediaPlayButton = 11,
    MediaSeekBackButton = 12,
    MediaSeekForwardButton = 13,
    MediaSlider = 14,
    MediaSliderthumb = 15,
    Menulist = 16,
    MenulistButton = 17,
    MenulistText = 18,
    MenulistTextfield = 19,
    PushButton = 20,
    Radio = 21,
    Searchfield = 22,
    SearchfieldCancelButton = 23,
    SearchfieldDecoration = 24,
    SearchfieldResultsButton = 25,
    SearchfieldResultsDecoration = 26,
    SliderHorizontal = 27,
    SliderVertical = 28,
    SliderthumbHorizontal = 29,
    SliderthumbVertical = 30,
    SquareButton = 31,
    Textarea = 32,
    Textfield = 33,
    NotSet = 34,
    _Max = 2147483647,
};
pub const styleWebkitAppearanceNone = styleWebkitAppearance.None;
pub const styleWebkitAppearanceCapsLockIndicator = styleWebkitAppearance.CapsLockIndicator;
pub const styleWebkitAppearanceButton = styleWebkitAppearance.Button;
pub const styleWebkitAppearanceButtonBevel = styleWebkitAppearance.ButtonBevel;
pub const styleWebkitAppearanceCaret = styleWebkitAppearance.Caret;
pub const styleWebkitAppearanceCheckbox = styleWebkitAppearance.Checkbox;
pub const styleWebkitAppearanceDefaultButton = styleWebkitAppearance.DefaultButton;
pub const styleWebkitAppearanceListbox = styleWebkitAppearance.Listbox;
pub const styleWebkitAppearanceListitem = styleWebkitAppearance.Listitem;
pub const styleWebkitAppearanceMediaFullscreenButton = styleWebkitAppearance.MediaFullscreenButton;
pub const styleWebkitAppearanceMediaMuteButton = styleWebkitAppearance.MediaMuteButton;
pub const styleWebkitAppearanceMediaPlayButton = styleWebkitAppearance.MediaPlayButton;
pub const styleWebkitAppearanceMediaSeekBackButton = styleWebkitAppearance.MediaSeekBackButton;
pub const styleWebkitAppearanceMediaSeekForwardButton = styleWebkitAppearance.MediaSeekForwardButton;
pub const styleWebkitAppearanceMediaSlider = styleWebkitAppearance.MediaSlider;
pub const styleWebkitAppearanceMediaSliderthumb = styleWebkitAppearance.MediaSliderthumb;
pub const styleWebkitAppearanceMenulist = styleWebkitAppearance.Menulist;
pub const styleWebkitAppearanceMenulistButton = styleWebkitAppearance.MenulistButton;
pub const styleWebkitAppearanceMenulistText = styleWebkitAppearance.MenulistText;
pub const styleWebkitAppearanceMenulistTextfield = styleWebkitAppearance.MenulistTextfield;
pub const styleWebkitAppearancePushButton = styleWebkitAppearance.PushButton;
pub const styleWebkitAppearanceRadio = styleWebkitAppearance.Radio;
pub const styleWebkitAppearanceSearchfield = styleWebkitAppearance.Searchfield;
pub const styleWebkitAppearanceSearchfieldCancelButton = styleWebkitAppearance.SearchfieldCancelButton;
pub const styleWebkitAppearanceSearchfieldDecoration = styleWebkitAppearance.SearchfieldDecoration;
pub const styleWebkitAppearanceSearchfieldResultsButton = styleWebkitAppearance.SearchfieldResultsButton;
pub const styleWebkitAppearanceSearchfieldResultsDecoration = styleWebkitAppearance.SearchfieldResultsDecoration;
pub const styleWebkitAppearanceSliderHorizontal = styleWebkitAppearance.SliderHorizontal;
pub const styleWebkitAppearanceSliderVertical = styleWebkitAppearance.SliderVertical;
pub const styleWebkitAppearanceSliderthumbHorizontal = styleWebkitAppearance.SliderthumbHorizontal;
pub const styleWebkitAppearanceSliderthumbVertical = styleWebkitAppearance.SliderthumbVertical;
pub const styleWebkitAppearanceSquareButton = styleWebkitAppearance.SquareButton;
pub const styleWebkitAppearanceTextarea = styleWebkitAppearance.Textarea;
pub const styleWebkitAppearanceTextfield = styleWebkitAppearance.Textfield;
pub const styleWebkitAppearanceNotSet = styleWebkitAppearance.NotSet;
pub const styleWebkitAppearance_Max = styleWebkitAppearance._Max;

pub const styleViewportSize = enum(i32) {
    Auto = 0,
    DeviceWidth = 1,
    DeviceHeight = 2,
    _Max = 2147483647,
};
pub const styleViewportSizeAuto = styleViewportSize.Auto;
pub const styleViewportSizeDeviceWidth = styleViewportSize.DeviceWidth;
pub const styleViewportSizeDeviceHeight = styleViewportSize.DeviceHeight;
pub const styleViewportSize_Max = styleViewportSize._Max;

pub const styleUserZoom = enum(i32) {
    NotSet = 0,
    Zoom = 1,
    Fixed = 2,
    _Max = 2147483647,
};
pub const styleUserZoomNotSet = styleUserZoom.NotSet;
pub const styleUserZoomZoom = styleUserZoom.Zoom;
pub const styleUserZoomFixed = styleUserZoom.Fixed;
pub const styleUserZoom_Max = styleUserZoom._Max;

pub const styleTextLineThroughStyle = enum(i32) {
    Undefined = 0,
    Single = 1,
    Double = 2,
    _Max = 2147483647,
};
pub const styleTextLineThroughStyleUndefined = styleTextLineThroughStyle.Undefined;
pub const styleTextLineThroughStyleSingle = styleTextLineThroughStyle.Single;
pub const styleTextLineThroughStyleDouble = styleTextLineThroughStyle.Double;
pub const styleTextLineThroughStyle_Max = styleTextLineThroughStyle._Max;

pub const styleTextUnderlineStyle = enum(i32) {
    Undefined = 0,
    Single = 1,
    Double = 2,
    Words = 3,
    Dotted = 4,
    Thick = 5,
    Dash = 6,
    DotDash = 7,
    DotDotDash = 8,
    Wave = 9,
    SingleAccounting = 10,
    DoubleAccounting = 11,
    ThickDash = 12,
    _Max = 2147483647,
};
pub const styleTextUnderlineStyleUndefined = styleTextUnderlineStyle.Undefined;
pub const styleTextUnderlineStyleSingle = styleTextUnderlineStyle.Single;
pub const styleTextUnderlineStyleDouble = styleTextUnderlineStyle.Double;
pub const styleTextUnderlineStyleWords = styleTextUnderlineStyle.Words;
pub const styleTextUnderlineStyleDotted = styleTextUnderlineStyle.Dotted;
pub const styleTextUnderlineStyleThick = styleTextUnderlineStyle.Thick;
pub const styleTextUnderlineStyleDash = styleTextUnderlineStyle.Dash;
pub const styleTextUnderlineStyleDotDash = styleTextUnderlineStyle.DotDash;
pub const styleTextUnderlineStyleDotDotDash = styleTextUnderlineStyle.DotDotDash;
pub const styleTextUnderlineStyleWave = styleTextUnderlineStyle.Wave;
pub const styleTextUnderlineStyleSingleAccounting = styleTextUnderlineStyle.SingleAccounting;
pub const styleTextUnderlineStyleDoubleAccounting = styleTextUnderlineStyle.DoubleAccounting;
pub const styleTextUnderlineStyleThickDash = styleTextUnderlineStyle.ThickDash;
pub const styleTextUnderlineStyle_Max = styleTextUnderlineStyle._Max;

pub const styleTextEffect = enum(i32) {
    None = 0,
    Emboss = 1,
    Engrave = 2,
    Outline = 3,
    _Max = 2147483647,
};
pub const styleTextEffectNone = styleTextEffect.None;
pub const styleTextEffectEmboss = styleTextEffect.Emboss;
pub const styleTextEffectEngrave = styleTextEffect.Engrave;
pub const styleTextEffectOutline = styleTextEffect.Outline;
pub const styleTextEffect_Max = styleTextEffect._Max;

pub const styleDefaultTextSelection = enum(i32) {
    False = 0,
    True = 1,
    _Max = 2147483647,
};
pub const styleDefaultTextSelectionFalse = styleDefaultTextSelection.False;
pub const styleDefaultTextSelectionTrue = styleDefaultTextSelection.True;
pub const styleDefaultTextSelection_Max = styleDefaultTextSelection._Max;

pub const styleTextDecoration = enum(i32) {
    None = 0,
    Underline = 1,
    Overline = 2,
    LineThrough = 3,
    Blink = 4,
    _Max = 2147483647,
};
pub const styleTextDecorationNone = styleTextDecoration.None;
pub const styleTextDecorationUnderline = styleTextDecoration.Underline;
pub const styleTextDecorationOverline = styleTextDecoration.Overline;
pub const styleTextDecorationLineThrough = styleTextDecoration.LineThrough;
pub const styleTextDecorationBlink = styleTextDecoration.Blink;
pub const styleTextDecoration_Max = styleTextDecoration._Max;

pub const textDecoration = enum(i32) {
    None = 0,
    Underline = 1,
    Overline = 2,
    LineThrough = 3,
    Blink = 4,
    _Max = 2147483647,
};
pub const textDecorationNone = textDecoration.None;
pub const textDecorationUnderline = textDecoration.Underline;
pub const textDecorationOverline = textDecoration.Overline;
pub const textDecorationLineThrough = textDecoration.LineThrough;
pub const textDecorationBlink = textDecoration.Blink;
pub const textDecoration_Max = textDecoration._Max;

pub const htmlListType = enum(i32) {
    NotSet = 0,
    LargeAlpha = 1,
    SmallAlpha = 2,
    LargeRoman = 3,
    SmallRoman = 4,
    Numbers = 5,
    Disc = 6,
    Circle = 7,
    Square = 8,
    _Max = 2147483647,
};
pub const htmlListTypeNotSet = htmlListType.NotSet;
pub const htmlListTypeLargeAlpha = htmlListType.LargeAlpha;
pub const htmlListTypeSmallAlpha = htmlListType.SmallAlpha;
pub const htmlListTypeLargeRoman = htmlListType.LargeRoman;
pub const htmlListTypeSmallRoman = htmlListType.SmallRoman;
pub const htmlListTypeNumbers = htmlListType.Numbers;
pub const htmlListTypeDisc = htmlListType.Disc;
pub const htmlListTypeCircle = htmlListType.Circle;
pub const htmlListTypeSquare = htmlListType.Square;
pub const htmlListType_Max = htmlListType._Max;

pub const htmlMethod = enum(i32) {
    NotSet = 0,
    Get = 1,
    Post = 2,
    _Max = 2147483647,
};
pub const htmlMethodNotSet = htmlMethod.NotSet;
pub const htmlMethodGet = htmlMethod.Get;
pub const htmlMethodPost = htmlMethod.Post;
pub const htmlMethod_Max = htmlMethod._Max;

pub const htmlWrap = enum(i32) {
    Off = 1,
    Soft = 2,
    Hard = 3,
    _Max = 2147483647,
};
pub const htmlWrapOff = htmlWrap.Off;
pub const htmlWrapSoft = htmlWrap.Soft;
pub const htmlWrapHard = htmlWrap.Hard;
pub const htmlWrap_Max = htmlWrap._Max;

pub const htmlDir = enum(i32) {
    NotSet = 0,
    LeftToRight = 1,
    RightToLeft = 2,
    _Max = 2147483647,
};
pub const htmlDirNotSet = htmlDir.NotSet;
pub const htmlDirLeftToRight = htmlDir.LeftToRight;
pub const htmlDirRightToLeft = htmlDir.RightToLeft;
pub const htmlDir_Max = htmlDir._Max;

pub const htmlEditable = enum(i32) {
    Inherit = 0,
    True = 1,
    False = 2,
    _Max = 2147483647,
};
pub const htmlEditableInherit = htmlEditable.Inherit;
pub const htmlEditableTrue = htmlEditable.True;
pub const htmlEditableFalse = htmlEditable.False;
pub const htmlEditable_Max = htmlEditable._Max;

pub const htmlInput = enum(i32) {
    NotSet = 0,
    Button = 1,
    Checkbox = 2,
    File = 3,
    Hidden = 4,
    Image = 5,
    Password = 6,
    Radio = 7,
    Reset = 8,
    SelectOne = 9,
    SelectMultiple = 10,
    Submit = 11,
    Text = 12,
    Textarea = 13,
    Richtext = 14,
    Range = 15,
    Url = 16,
    Email = 17,
    Number = 18,
    Tel = 19,
    Search = 20,
    _Max = 2147483647,
};
pub const htmlInputNotSet = htmlInput.NotSet;
pub const htmlInputButton = htmlInput.Button;
pub const htmlInputCheckbox = htmlInput.Checkbox;
pub const htmlInputFile = htmlInput.File;
pub const htmlInputHidden = htmlInput.Hidden;
pub const htmlInputImage = htmlInput.Image;
pub const htmlInputPassword = htmlInput.Password;
pub const htmlInputRadio = htmlInput.Radio;
pub const htmlInputReset = htmlInput.Reset;
pub const htmlInputSelectOne = htmlInput.SelectOne;
pub const htmlInputSelectMultiple = htmlInput.SelectMultiple;
pub const htmlInputSubmit = htmlInput.Submit;
pub const htmlInputText = htmlInput.Text;
pub const htmlInputTextarea = htmlInput.Textarea;
pub const htmlInputRichtext = htmlInput.Richtext;
pub const htmlInputRange = htmlInput.Range;
pub const htmlInputUrl = htmlInput.Url;
pub const htmlInputEmail = htmlInput.Email;
pub const htmlInputNumber = htmlInput.Number;
pub const htmlInputTel = htmlInput.Tel;
pub const htmlInputSearch = htmlInput.Search;
pub const htmlInput_Max = htmlInput._Max;

pub const htmlSpellCheck = enum(i32) {
    NotSet = 0,
    True = 1,
    False = 2,
    Default = 3,
    _Max = 2147483647,
};
pub const htmlSpellCheckNotSet = htmlSpellCheck.NotSet;
pub const htmlSpellCheckTrue = htmlSpellCheck.True;
pub const htmlSpellCheckFalse = htmlSpellCheck.False;
pub const htmlSpellCheckDefault = htmlSpellCheck.Default;
pub const htmlSpellCheck_Max = htmlSpellCheck._Max;

pub const htmlEncoding = enum(i32) {
    URL = 0,
    Multipart = 1,
    Text = 2,
    _Max = 2147483647,
};
pub const htmlEncodingURL = htmlEncoding.URL;
pub const htmlEncodingMultipart = htmlEncoding.Multipart;
pub const htmlEncodingText = htmlEncoding.Text;
pub const htmlEncoding_Max = htmlEncoding._Max;

pub const htmlAdjacency = enum(i32) {
    BeforeBegin = 1,
    AfterBegin = 2,
    BeforeEnd = 3,
    AfterEnd = 4,
    _Max = 2147483647,
};
pub const htmlAdjacencyBeforeBegin = htmlAdjacency.BeforeBegin;
pub const htmlAdjacencyAfterBegin = htmlAdjacency.AfterBegin;
pub const htmlAdjacencyBeforeEnd = htmlAdjacency.BeforeEnd;
pub const htmlAdjacencyAfterEnd = htmlAdjacency.AfterEnd;
pub const htmlAdjacency_Max = htmlAdjacency._Max;

pub const htmlTabIndex = enum(i32) {
    NotSet = -32768,
    _Max = 2147483647,
};
pub const htmlTabIndexNotSet = htmlTabIndex.NotSet;
pub const htmlTabIndex_Max = htmlTabIndex._Max;

pub const htmlComponent = enum(i32) {
    Client = 0,
    SbLeft = 1,
    SbPageLeft = 2,
    SbHThumb = 3,
    SbPageRight = 4,
    SbRight = 5,
    SbUp = 6,
    SbPageUp = 7,
    SbVThumb = 8,
    SbPageDown = 9,
    SbDown = 10,
    SbLeft2 = 11,
    SbPageLeft2 = 12,
    SbRight2 = 13,
    SbPageRight2 = 14,
    SbUp2 = 15,
    SbPageUp2 = 16,
    SbDown2 = 17,
    SbPageDown2 = 18,
    SbTop = 19,
    SbBottom = 20,
    Outside = 21,
    GHTopLeft = 22,
    GHLeft = 23,
    GHTop = 24,
    GHBottomLeft = 25,
    GHTopRight = 26,
    GHBottom = 27,
    GHRight = 28,
    GHBottomRight = 29,
    _Max = 2147483647,
};
pub const htmlComponentClient = htmlComponent.Client;
pub const htmlComponentSbLeft = htmlComponent.SbLeft;
pub const htmlComponentSbPageLeft = htmlComponent.SbPageLeft;
pub const htmlComponentSbHThumb = htmlComponent.SbHThumb;
pub const htmlComponentSbPageRight = htmlComponent.SbPageRight;
pub const htmlComponentSbRight = htmlComponent.SbRight;
pub const htmlComponentSbUp = htmlComponent.SbUp;
pub const htmlComponentSbPageUp = htmlComponent.SbPageUp;
pub const htmlComponentSbVThumb = htmlComponent.SbVThumb;
pub const htmlComponentSbPageDown = htmlComponent.SbPageDown;
pub const htmlComponentSbDown = htmlComponent.SbDown;
pub const htmlComponentSbLeft2 = htmlComponent.SbLeft2;
pub const htmlComponentSbPageLeft2 = htmlComponent.SbPageLeft2;
pub const htmlComponentSbRight2 = htmlComponent.SbRight2;
pub const htmlComponentSbPageRight2 = htmlComponent.SbPageRight2;
pub const htmlComponentSbUp2 = htmlComponent.SbUp2;
pub const htmlComponentSbPageUp2 = htmlComponent.SbPageUp2;
pub const htmlComponentSbDown2 = htmlComponent.SbDown2;
pub const htmlComponentSbPageDown2 = htmlComponent.SbPageDown2;
pub const htmlComponentSbTop = htmlComponent.SbTop;
pub const htmlComponentSbBottom = htmlComponent.SbBottom;
pub const htmlComponentOutside = htmlComponent.Outside;
pub const htmlComponentGHTopLeft = htmlComponent.GHTopLeft;
pub const htmlComponentGHLeft = htmlComponent.GHLeft;
pub const htmlComponentGHTop = htmlComponent.GHTop;
pub const htmlComponentGHBottomLeft = htmlComponent.GHBottomLeft;
pub const htmlComponentGHTopRight = htmlComponent.GHTopRight;
pub const htmlComponentGHBottom = htmlComponent.GHBottom;
pub const htmlComponentGHRight = htmlComponent.GHRight;
pub const htmlComponentGHBottomRight = htmlComponent.GHBottomRight;
pub const htmlComponent_Max = htmlComponent._Max;

pub const htmlApplyLocation = enum(i32) {
    Inside = 0,
    Outside = 1,
    _Max = 2147483647,
};
pub const htmlApplyLocationInside = htmlApplyLocation.Inside;
pub const htmlApplyLocationOutside = htmlApplyLocation.Outside;
pub const htmlApplyLocation_Max = htmlApplyLocation._Max;

pub const htmlGlyphMode = enum(i32) {
    None = 0,
    Begin = 1,
    End = 2,
    Both = 3,
    _Max = 2147483647,
};
pub const htmlGlyphModeNone = htmlGlyphMode.None;
pub const htmlGlyphModeBegin = htmlGlyphMode.Begin;
pub const htmlGlyphModeEnd = htmlGlyphMode.End;
pub const htmlGlyphModeBoth = htmlGlyphMode.Both;
pub const htmlGlyphMode_Max = htmlGlyphMode._Max;

pub const htmlDraggable = enum(i32) {
    Auto = 0,
    True = 1,
    False = 2,
    _Max = 2147483647,
};
pub const htmlDraggableAuto = htmlDraggable.Auto;
pub const htmlDraggableTrue = htmlDraggable.True;
pub const htmlDraggableFalse = htmlDraggable.False;
pub const htmlDraggable_Max = htmlDraggable._Max;

pub const htmlUnit = enum(i32) {
    Character = 1,
    Word = 2,
    Sentence = 3,
    TextEdit = 6,
    _Max = 2147483647,
};
pub const htmlUnitCharacter = htmlUnit.Character;
pub const htmlUnitWord = htmlUnit.Word;
pub const htmlUnitSentence = htmlUnit.Sentence;
pub const htmlUnitTextEdit = htmlUnit.TextEdit;
pub const htmlUnit_Max = htmlUnit._Max;

pub const htmlEndPoints = enum(i32) {
    StartToStart = 1,
    StartToEnd = 2,
    EndToStart = 3,
    EndToEnd = 4,
    _Max = 2147483647,
};
pub const htmlEndPointsStartToStart = htmlEndPoints.StartToStart;
pub const htmlEndPointsStartToEnd = htmlEndPoints.StartToEnd;
pub const htmlEndPointsEndToStart = htmlEndPoints.EndToStart;
pub const htmlEndPointsEndToEnd = htmlEndPoints.EndToEnd;
pub const htmlEndPoints_Max = htmlEndPoints._Max;

pub const htmlDirection = enum(i32) {
    Forward = 99999,
    Backward = -99999,
    _Max = 2147483647,
};
pub const htmlDirectionForward = htmlDirection.Forward;
pub const htmlDirectionBackward = htmlDirection.Backward;
pub const htmlDirection_Max = htmlDirection._Max;

pub const htmlStart = enum(i32) {
    fileopen = 0,
    mouseover = 1,
    _Max = 2147483647,
};
pub const htmlStartfileopen = htmlStart.fileopen;
pub const htmlStartmouseover = htmlStart.mouseover;
pub const htmlStart_Max = htmlStart._Max;

pub const bodyScroll = enum(i32) {
    yes = 1,
    no = 2,
    auto = 4,
    default = 3,
    _Max = 2147483647,
};
pub const bodyScrollyes = bodyScroll.yes;
pub const bodyScrollno = bodyScroll.no;
pub const bodyScrollauto = bodyScroll.auto;
pub const bodyScrolldefault = bodyScroll.default;
pub const bodyScroll_Max = bodyScroll._Max;

pub const htmlSelectType = enum(i32) {
    SelectOne = 1,
    SelectMultiple = 2,
    _Max = 2147483647,
};
pub const htmlSelectTypeSelectOne = htmlSelectType.SelectOne;
pub const htmlSelectTypeSelectMultiple = htmlSelectType.SelectMultiple;
pub const htmlSelectType_Max = htmlSelectType._Max;

pub const htmlSelectExFlag = enum(i32) {
    None = 0,
    HideSelectionInDesign = 1,
    _Max = 2147483647,
};
pub const htmlSelectExFlagNone = htmlSelectExFlag.None;
pub const htmlSelectExFlagHideSelectionInDesign = htmlSelectExFlag.HideSelectionInDesign;
pub const htmlSelectExFlag_Max = htmlSelectExFlag._Max;

pub const htmlSelection = enum(i32) {
    None = 0,
    Text = 1,
    Control = 2,
    Table = 3,
    _Max = 2147483647,
};
pub const htmlSelectionNone = htmlSelection.None;
pub const htmlSelectionText = htmlSelection.Text;
pub const htmlSelectionControl = htmlSelection.Control;
pub const htmlSelectionTable = htmlSelection.Table;
pub const htmlSelection_Max = htmlSelection._Max;

pub const htmlMarqueeBehavior = enum(i32) {
    scroll = 1,
    slide = 2,
    alternate = 3,
    _Max = 2147483647,
};
pub const htmlMarqueeBehaviorscroll = htmlMarqueeBehavior.scroll;
pub const htmlMarqueeBehaviorslide = htmlMarqueeBehavior.slide;
pub const htmlMarqueeBehavioralternate = htmlMarqueeBehavior.alternate;
pub const htmlMarqueeBehavior_Max = htmlMarqueeBehavior._Max;

pub const htmlMarqueeDirection = enum(i32) {
    left = 1,
    right = 3,
    up = 5,
    down = 7,
    _Max = 2147483647,
};
pub const htmlMarqueeDirectionleft = htmlMarqueeDirection.left;
pub const htmlMarqueeDirectionright = htmlMarqueeDirection.right;
pub const htmlMarqueeDirectionup = htmlMarqueeDirection.up;
pub const htmlMarqueeDirectiondown = htmlMarqueeDirection.down;
pub const htmlMarqueeDirection_Max = htmlMarqueeDirection._Max;

pub const htmlPersistState = enum(i32) {
    Normal = 0,
    Favorite = 1,
    History = 2,
    Snapshot = 3,
    UserData = 4,
    _Max = 2147483647,
};
pub const htmlPersistStateNormal = htmlPersistState.Normal;
pub const htmlPersistStateFavorite = htmlPersistState.Favorite;
pub const htmlPersistStateHistory = htmlPersistState.History;
pub const htmlPersistStateSnapshot = htmlPersistState.Snapshot;
pub const htmlPersistStateUserData = htmlPersistState.UserData;
pub const htmlPersistState_Max = htmlPersistState._Max;

pub const htmlDropEffect = enum(i32) {
    Copy = 0,
    Link = 1,
    Move = 2,
    None = 3,
    _Max = 2147483647,
};
pub const htmlDropEffectCopy = htmlDropEffect.Copy;
pub const htmlDropEffectLink = htmlDropEffect.Link;
pub const htmlDropEffectMove = htmlDropEffect.Move;
pub const htmlDropEffectNone = htmlDropEffect.None;
pub const htmlDropEffect_Max = htmlDropEffect._Max;

pub const htmlEffectAllowed = enum(i32) {
    Copy = 0,
    Link = 1,
    Move = 2,
    CopyLink = 3,
    CopyMove = 4,
    LinkMove = 5,
    All = 6,
    None = 7,
    Uninitialized = 8,
    _Max = 2147483647,
};
pub const htmlEffectAllowedCopy = htmlEffectAllowed.Copy;
pub const htmlEffectAllowedLink = htmlEffectAllowed.Link;
pub const htmlEffectAllowedMove = htmlEffectAllowed.Move;
pub const htmlEffectAllowedCopyLink = htmlEffectAllowed.CopyLink;
pub const htmlEffectAllowedCopyMove = htmlEffectAllowed.CopyMove;
pub const htmlEffectAllowedLinkMove = htmlEffectAllowed.LinkMove;
pub const htmlEffectAllowedAll = htmlEffectAllowed.All;
pub const htmlEffectAllowedNone = htmlEffectAllowed.None;
pub const htmlEffectAllowedUninitialized = htmlEffectAllowed.Uninitialized;
pub const htmlEffectAllowed_Max = htmlEffectAllowed._Max;

pub const htmlCompatMode = enum(i32) {
    BackCompat = 0,
    CSS1Compat = 1,
    _Max = 2147483647,
};
pub const htmlCompatModeBackCompat = htmlCompatMode.BackCompat;
pub const htmlCompatModeCSS1Compat = htmlCompatMode.CSS1Compat;
pub const htmlCompatMode_Max = htmlCompatMode._Max;

pub const BoolValue = enum(i32) {
    True = 1,
    False = 0,
    BoolValue_Max = 2147483647,
};
pub const True = BoolValue.True;
pub const False = BoolValue.False;
pub const BoolValue_Max = BoolValue.BoolValue_Max;

pub const htmlCaptionAlign = enum(i32) {
    NotSet = 0,
    Left = 1,
    Center = 2,
    Right = 3,
    Justify = 4,
    Top = 5,
    Bottom = 6,
    _Max = 2147483647,
};
pub const htmlCaptionAlignNotSet = htmlCaptionAlign.NotSet;
pub const htmlCaptionAlignLeft = htmlCaptionAlign.Left;
pub const htmlCaptionAlignCenter = htmlCaptionAlign.Center;
pub const htmlCaptionAlignRight = htmlCaptionAlign.Right;
pub const htmlCaptionAlignJustify = htmlCaptionAlign.Justify;
pub const htmlCaptionAlignTop = htmlCaptionAlign.Top;
pub const htmlCaptionAlignBottom = htmlCaptionAlign.Bottom;
pub const htmlCaptionAlign_Max = htmlCaptionAlign._Max;

pub const htmlCaptionVAlign = enum(i32) {
    NotSet = 0,
    Top = 1,
    Bottom = 2,
    _Max = 2147483647,
};
pub const htmlCaptionVAlignNotSet = htmlCaptionVAlign.NotSet;
pub const htmlCaptionVAlignTop = htmlCaptionVAlign.Top;
pub const htmlCaptionVAlignBottom = htmlCaptionVAlign.Bottom;
pub const htmlCaptionVAlign_Max = htmlCaptionVAlign._Max;

pub const htmlFrame = enum(i32) {
    NotSet = 0,
    void = 1,
    above = 2,
    below = 3,
    hsides = 4,
    lhs = 5,
    rhs = 6,
    vsides = 7,
    box = 8,
    border = 9,
    _Max = 2147483647,
};
pub const htmlFrameNotSet = htmlFrame.NotSet;
pub const htmlFramevoid = htmlFrame.void;
pub const htmlFrameabove = htmlFrame.above;
pub const htmlFramebelow = htmlFrame.below;
pub const htmlFramehsides = htmlFrame.hsides;
pub const htmlFramelhs = htmlFrame.lhs;
pub const htmlFramerhs = htmlFrame.rhs;
pub const htmlFramevsides = htmlFrame.vsides;
pub const htmlFramebox = htmlFrame.box;
pub const htmlFrameborder = htmlFrame.border;
pub const htmlFrame_Max = htmlFrame._Max;

pub const htmlRules = enum(i32) {
    NotSet = 0,
    none = 1,
    groups = 2,
    rows = 3,
    cols = 4,
    all = 5,
    _Max = 2147483647,
};
pub const htmlRulesNotSet = htmlRules.NotSet;
pub const htmlRulesnone = htmlRules.none;
pub const htmlRulesgroups = htmlRules.groups;
pub const htmlRulesrows = htmlRules.rows;
pub const htmlRulescols = htmlRules.cols;
pub const htmlRulesall = htmlRules.all;
pub const htmlRules_Max = htmlRules._Max;

pub const htmlCellAlign = enum(i32) {
    NotSet = 0,
    Left = 1,
    Center = 2,
    Right = 3,
    _Max = 2147483647,
    pub const Middle = .Center;
};
pub const htmlCellAlignNotSet = htmlCellAlign.NotSet;
pub const htmlCellAlignLeft = htmlCellAlign.Left;
pub const htmlCellAlignCenter = htmlCellAlign.Center;
pub const htmlCellAlignRight = htmlCellAlign.Right;
pub const htmlCellAlignMiddle = htmlCellAlign.Center;
pub const htmlCellAlign_Max = htmlCellAlign._Max;

pub const htmlCellVAlign = enum(i32) {
    NotSet = 0,
    Top = 1,
    Middle = 2,
    Bottom = 3,
    Baseline = 4,
    _Max = 2147483647,
    pub const Center = .Middle;
};
pub const htmlCellVAlignNotSet = htmlCellVAlign.NotSet;
pub const htmlCellVAlignTop = htmlCellVAlign.Top;
pub const htmlCellVAlignMiddle = htmlCellVAlign.Middle;
pub const htmlCellVAlignBottom = htmlCellVAlign.Bottom;
pub const htmlCellVAlignBaseline = htmlCellVAlign.Baseline;
pub const htmlCellVAlignCenter = htmlCellVAlign.Middle;
pub const htmlCellVAlign_Max = htmlCellVAlign._Max;

pub const frameScrolling = enum(i32) {
    yes = 1,
    no = 2,
    auto = 4,
    _Max = 2147483647,
};
pub const frameScrollingyes = frameScrolling.yes;
pub const frameScrollingno = frameScrolling.no;
pub const frameScrollingauto = frameScrolling.auto;
pub const frameScrolling_Max = frameScrolling._Max;

pub const sandboxAllow = enum(i32) {
    Scripts = 0,
    SameOrigin = 1,
    TopNavigation = 2,
    Forms = 3,
    Popups = 4,
    _Max = 2147483647,
};
pub const sandboxAllowScripts = sandboxAllow.Scripts;
pub const sandboxAllowSameOrigin = sandboxAllow.SameOrigin;
pub const sandboxAllowTopNavigation = sandboxAllow.TopNavigation;
pub const sandboxAllowForms = sandboxAllow.Forms;
pub const sandboxAllowPopups = sandboxAllow.Popups;
pub const sandboxAllow_Max = sandboxAllow._Max;

pub const svgAngleType = enum(i32) {
    SVG_ANGLETYPE_UNKNOWN = 0,
    SVG_ANGLETYPE_UNSPECIFIED = 1,
    SVG_ANGLETYPE_DEG = 2,
    SVG_ANGLETYPE_RAD = 3,
    SVG_ANGLETYPE_GRAD = 4,
    svgAngleType_Max = 2147483647,
};
pub const SVG_ANGLETYPE_UNKNOWN = svgAngleType.SVG_ANGLETYPE_UNKNOWN;
pub const SVG_ANGLETYPE_UNSPECIFIED = svgAngleType.SVG_ANGLETYPE_UNSPECIFIED;
pub const SVG_ANGLETYPE_DEG = svgAngleType.SVG_ANGLETYPE_DEG;
pub const SVG_ANGLETYPE_RAD = svgAngleType.SVG_ANGLETYPE_RAD;
pub const SVG_ANGLETYPE_GRAD = svgAngleType.SVG_ANGLETYPE_GRAD;
pub const svgAngleType_Max = svgAngleType.svgAngleType_Max;

pub const svgExternalResourcesRequired = enum(i32) {
    False = 0,
    True = 1,
    _Max = 2147483647,
};
pub const svgExternalResourcesRequiredFalse = svgExternalResourcesRequired.False;
pub const svgExternalResourcesRequiredTrue = svgExternalResourcesRequired.True;
pub const svgExternalResourcesRequired_Max = svgExternalResourcesRequired._Max;

pub const svgFocusable = enum(i32) {
    NotSet = 0,
    Auto = 1,
    True = 2,
    False = 3,
    _Max = 2147483647,
};
pub const svgFocusableNotSet = svgFocusable.NotSet;
pub const svgFocusableAuto = svgFocusable.Auto;
pub const svgFocusableTrue = svgFocusable.True;
pub const svgFocusableFalse = svgFocusable.False;
pub const svgFocusable_Max = svgFocusable._Max;

pub const svgLengthType = enum(i32) {
    SVG_LENGTHTYPE_UNKNOWN = 0,
    SVG_LENGTHTYPE_NUMBER = 1,
    SVG_LENGTHTYPE_PERCENTAGE = 2,
    SVG_LENGTHTYPE_EMS = 3,
    SVG_LENGTHTYPE_EXS = 4,
    SVG_LENGTHTYPE_PX = 5,
    SVG_LENGTHTYPE_CM = 6,
    SVG_LENGTHTYPE_MM = 7,
    SVG_LENGTHTYPE_IN = 8,
    SVG_LENGTHTYPE_PT = 9,
    SVG_LENGTHTYPE_PC = 10,
    svgLengthType_Max = 2147483647,
};
pub const SVG_LENGTHTYPE_UNKNOWN = svgLengthType.SVG_LENGTHTYPE_UNKNOWN;
pub const SVG_LENGTHTYPE_NUMBER = svgLengthType.SVG_LENGTHTYPE_NUMBER;
pub const SVG_LENGTHTYPE_PERCENTAGE = svgLengthType.SVG_LENGTHTYPE_PERCENTAGE;
pub const SVG_LENGTHTYPE_EMS = svgLengthType.SVG_LENGTHTYPE_EMS;
pub const SVG_LENGTHTYPE_EXS = svgLengthType.SVG_LENGTHTYPE_EXS;
pub const SVG_LENGTHTYPE_PX = svgLengthType.SVG_LENGTHTYPE_PX;
pub const SVG_LENGTHTYPE_CM = svgLengthType.SVG_LENGTHTYPE_CM;
pub const SVG_LENGTHTYPE_MM = svgLengthType.SVG_LENGTHTYPE_MM;
pub const SVG_LENGTHTYPE_IN = svgLengthType.SVG_LENGTHTYPE_IN;
pub const SVG_LENGTHTYPE_PT = svgLengthType.SVG_LENGTHTYPE_PT;
pub const SVG_LENGTHTYPE_PC = svgLengthType.SVG_LENGTHTYPE_PC;
pub const svgLengthType_Max = svgLengthType.svgLengthType_Max;

pub const svgPathSegType = enum(i32) {
    PATHSEG_UNKNOWN = 0,
    PATHSEG_CLOSEPATH = 1,
    PATHSEG_MOVETO_ABS = 2,
    PATHSEG_MOVETO_REL = 3,
    PATHSEG_LINETO_ABS = 4,
    PATHSEG_LINETO_REL = 5,
    PATHSEG_CURVETO_CUBIC_ABS = 6,
    PATHSEG_CURVETO_CUBIC_REL = 7,
    PATHSEG_CURVETO_QUADRATIC_ABS = 8,
    PATHSEG_CURVETO_QUADRATIC_REL = 9,
    PATHSEG_ARC_ABS = 10,
    PATHSEG_ARC_REL = 11,
    PATHSEG_LINETO_HORIZONTAL_ABS = 12,
    PATHSEG_LINETO_HORIZONTAL_REL = 13,
    PATHSEG_LINETO_VERTICAL_ABS = 14,
    PATHSEG_LINETO_VERTICAL_REL = 15,
    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16,
    PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17,
    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18,
    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19,
    svgPathSegType_Max = 2147483647,
};
pub const PATHSEG_UNKNOWN = svgPathSegType.PATHSEG_UNKNOWN;
pub const PATHSEG_CLOSEPATH = svgPathSegType.PATHSEG_CLOSEPATH;
pub const PATHSEG_MOVETO_ABS = svgPathSegType.PATHSEG_MOVETO_ABS;
pub const PATHSEG_MOVETO_REL = svgPathSegType.PATHSEG_MOVETO_REL;
pub const PATHSEG_LINETO_ABS = svgPathSegType.PATHSEG_LINETO_ABS;
pub const PATHSEG_LINETO_REL = svgPathSegType.PATHSEG_LINETO_REL;
pub const PATHSEG_CURVETO_CUBIC_ABS = svgPathSegType.PATHSEG_CURVETO_CUBIC_ABS;
pub const PATHSEG_CURVETO_CUBIC_REL = svgPathSegType.PATHSEG_CURVETO_CUBIC_REL;
pub const PATHSEG_CURVETO_QUADRATIC_ABS = svgPathSegType.PATHSEG_CURVETO_QUADRATIC_ABS;
pub const PATHSEG_CURVETO_QUADRATIC_REL = svgPathSegType.PATHSEG_CURVETO_QUADRATIC_REL;
pub const PATHSEG_ARC_ABS = svgPathSegType.PATHSEG_ARC_ABS;
pub const PATHSEG_ARC_REL = svgPathSegType.PATHSEG_ARC_REL;
pub const PATHSEG_LINETO_HORIZONTAL_ABS = svgPathSegType.PATHSEG_LINETO_HORIZONTAL_ABS;
pub const PATHSEG_LINETO_HORIZONTAL_REL = svgPathSegType.PATHSEG_LINETO_HORIZONTAL_REL;
pub const PATHSEG_LINETO_VERTICAL_ABS = svgPathSegType.PATHSEG_LINETO_VERTICAL_ABS;
pub const PATHSEG_LINETO_VERTICAL_REL = svgPathSegType.PATHSEG_LINETO_VERTICAL_REL;
pub const PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = svgPathSegType.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
pub const PATHSEG_CURVETO_CUBIC_SMOOTH_REL = svgPathSegType.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
pub const PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = svgPathSegType.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
pub const PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = svgPathSegType.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
pub const svgPathSegType_Max = svgPathSegType.svgPathSegType_Max;

pub const svgTransformType = enum(i32) {
    SVG_TRANSFORM_UNKNOWN = 0,
    SVG_TRANSFORM_MATRIX = 1,
    SVG_TRANSFORM_TRANSLATE = 2,
    SVG_TRANSFORM_SCALE = 3,
    SVG_TRANSFORM_ROTATE = 4,
    SVG_TRANSFORM_SKEWX = 5,
    SVG_TRANSFORM_SKEWY = 6,
    svgTransformType_Max = 2147483647,
};
pub const SVG_TRANSFORM_UNKNOWN = svgTransformType.SVG_TRANSFORM_UNKNOWN;
pub const SVG_TRANSFORM_MATRIX = svgTransformType.SVG_TRANSFORM_MATRIX;
pub const SVG_TRANSFORM_TRANSLATE = svgTransformType.SVG_TRANSFORM_TRANSLATE;
pub const SVG_TRANSFORM_SCALE = svgTransformType.SVG_TRANSFORM_SCALE;
pub const SVG_TRANSFORM_ROTATE = svgTransformType.SVG_TRANSFORM_ROTATE;
pub const SVG_TRANSFORM_SKEWX = svgTransformType.SVG_TRANSFORM_SKEWX;
pub const SVG_TRANSFORM_SKEWY = svgTransformType.SVG_TRANSFORM_SKEWY;
pub const svgTransformType_Max = svgTransformType.svgTransformType_Max;

pub const svgPreserveAspectRatioAlignType = enum(i32) {
    SVG_PRESERVEASPECTRATIO_UNKNOWN = 0,
    SVG_PRESERVEASPECTRATIO_NONE = 1,
    SVG_PRESERVEASPECTRATIO_XMINYMIN = 2,
    SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3,
    SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4,
    SVG_PRESERVEASPECTRATIO_XMINYMID = 5,
    SVG_PRESERVEASPECTRATIO_XMIDYMID = 6,
    SVG_PRESERVEASPECTRATIO_XMAXYMID = 7,
    SVG_PRESERVEASPECTRATIO_XMINYMAX = 8,
    SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9,
    SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10,
    svgPreserveAspectRatioAlignType_Max = 2147483647,
};
pub const SVG_PRESERVEASPECTRATIO_UNKNOWN = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_UNKNOWN;
pub const SVG_PRESERVEASPECTRATIO_NONE = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_NONE;
pub const SVG_PRESERVEASPECTRATIO_XMINYMIN = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMINYMIN;
pub const SVG_PRESERVEASPECTRATIO_XMIDYMIN = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMIDYMIN;
pub const SVG_PRESERVEASPECTRATIO_XMAXYMIN = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMAXYMIN;
pub const SVG_PRESERVEASPECTRATIO_XMINYMID = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMINYMID;
pub const SVG_PRESERVEASPECTRATIO_XMIDYMID = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMIDYMID;
pub const SVG_PRESERVEASPECTRATIO_XMAXYMID = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMAXYMID;
pub const SVG_PRESERVEASPECTRATIO_XMINYMAX = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMINYMAX;
pub const SVG_PRESERVEASPECTRATIO_XMIDYMAX = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMIDYMAX;
pub const SVG_PRESERVEASPECTRATIO_XMAXYMAX = svgPreserveAspectRatioAlignType.SVG_PRESERVEASPECTRATIO_XMAXYMAX;
pub const svgPreserveAspectRatioAlignType_Max = svgPreserveAspectRatioAlignType.svgPreserveAspectRatioAlignType_Max;

pub const svgPreserveAspectMeetOrSliceType = enum(i32) {
    SVG_MEETORSLICE_UNKNOWN = 0,
    SVG_MEETORSLICE_MEET = 1,
    SVG_MEETORSLICE_SLICE = 2,
    svgPreserveAspectMeetOrSliceType_Max = 2147483647,
};
pub const SVG_MEETORSLICE_UNKNOWN = svgPreserveAspectMeetOrSliceType.SVG_MEETORSLICE_UNKNOWN;
pub const SVG_MEETORSLICE_MEET = svgPreserveAspectMeetOrSliceType.SVG_MEETORSLICE_MEET;
pub const SVG_MEETORSLICE_SLICE = svgPreserveAspectMeetOrSliceType.SVG_MEETORSLICE_SLICE;
pub const svgPreserveAspectMeetOrSliceType_Max = svgPreserveAspectMeetOrSliceType.svgPreserveAspectMeetOrSliceType_Max;

pub const svgUnitTypes = enum(i32) {
    SVG_UNITTYPE_UNKNOWN = 0,
    SVG_UNITTYPE_USERSPACEONUSE = 1,
    SVG_UNITTYPE_OBJECTBOUNDINGBOX = 2,
    svgUnitTypes_Max = 2147483647,
};
pub const SVG_UNITTYPE_UNKNOWN = svgUnitTypes.SVG_UNITTYPE_UNKNOWN;
pub const SVG_UNITTYPE_USERSPACEONUSE = svgUnitTypes.SVG_UNITTYPE_USERSPACEONUSE;
pub const SVG_UNITTYPE_OBJECTBOUNDINGBOX = svgUnitTypes.SVG_UNITTYPE_OBJECTBOUNDINGBOX;
pub const svgUnitTypes_Max = svgUnitTypes.svgUnitTypes_Max;

pub const svgSpreadMethod = enum(i32) {
    SVG_SPREADMETHOD_UNKNOWN = 0,
    SVG_SPREADMETHOD_PAD = 1,
    SVG_SPREADMETHOD_REFLECT = 2,
    SVG_SPREADMETHOD_REPEAT = 3,
    svgSpreadMethod_Max = 2147483647,
};
pub const SVG_SPREADMETHOD_UNKNOWN = svgSpreadMethod.SVG_SPREADMETHOD_UNKNOWN;
pub const SVG_SPREADMETHOD_PAD = svgSpreadMethod.SVG_SPREADMETHOD_PAD;
pub const SVG_SPREADMETHOD_REFLECT = svgSpreadMethod.SVG_SPREADMETHOD_REFLECT;
pub const SVG_SPREADMETHOD_REPEAT = svgSpreadMethod.SVG_SPREADMETHOD_REPEAT;
pub const svgSpreadMethod_Max = svgSpreadMethod.svgSpreadMethod_Max;

pub const svgFeblendMode = enum(i32) {
    SVG_FEBLEND_MODE_UNKNOWN = 0,
    SVG_FEBLEND_MODE_NORMAL = 1,
    SVG_FEBLEND_MODE_MULTIPLY = 2,
    SVG_FEBLEND_MODE_SCREEN = 3,
    SVG_FEBLEND_MODE_DARKEN = 4,
    SVG_FEBLEND_MODE_LIGHTEN = 5,
    svgFeblendMode_Max = 2147483647,
};
pub const SVG_FEBLEND_MODE_UNKNOWN = svgFeblendMode.SVG_FEBLEND_MODE_UNKNOWN;
pub const SVG_FEBLEND_MODE_NORMAL = svgFeblendMode.SVG_FEBLEND_MODE_NORMAL;
pub const SVG_FEBLEND_MODE_MULTIPLY = svgFeblendMode.SVG_FEBLEND_MODE_MULTIPLY;
pub const SVG_FEBLEND_MODE_SCREEN = svgFeblendMode.SVG_FEBLEND_MODE_SCREEN;
pub const SVG_FEBLEND_MODE_DARKEN = svgFeblendMode.SVG_FEBLEND_MODE_DARKEN;
pub const SVG_FEBLEND_MODE_LIGHTEN = svgFeblendMode.SVG_FEBLEND_MODE_LIGHTEN;
pub const svgFeblendMode_Max = svgFeblendMode.svgFeblendMode_Max;

pub const svgFecolormatrixType = enum(i32) {
    SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0,
    SVG_FECOLORMATRIX_TYPE_MATRIX = 1,
    SVG_FECOLORMATRIX_TYPE_SATURATE = 2,
    SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3,
    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4,
    svgFecolormatrixType_Max = 2147483647,
};
pub const SVG_FECOLORMATRIX_TYPE_UNKNOWN = svgFecolormatrixType.SVG_FECOLORMATRIX_TYPE_UNKNOWN;
pub const SVG_FECOLORMATRIX_TYPE_MATRIX = svgFecolormatrixType.SVG_FECOLORMATRIX_TYPE_MATRIX;
pub const SVG_FECOLORMATRIX_TYPE_SATURATE = svgFecolormatrixType.SVG_FECOLORMATRIX_TYPE_SATURATE;
pub const SVG_FECOLORMATRIX_TYPE_HUEROTATE = svgFecolormatrixType.SVG_FECOLORMATRIX_TYPE_HUEROTATE;
pub const SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = svgFecolormatrixType.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA;
pub const svgFecolormatrixType_Max = svgFecolormatrixType.svgFecolormatrixType_Max;

pub const svgFecomponenttransferType = enum(i32) {
    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0,
    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1,
    SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2,
    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3,
    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4,
    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5,
    svgFecomponenttransferType_Max = 2147483647,
};
pub const SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = svgFecomponenttransferType.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN;
pub const SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = svgFecomponenttransferType.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY;
pub const SVG_FECOMPONENTTRANSFER_TYPE_TABLE = svgFecomponenttransferType.SVG_FECOMPONENTTRANSFER_TYPE_TABLE;
pub const SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = svgFecomponenttransferType.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE;
pub const SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = svgFecomponenttransferType.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR;
pub const SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = svgFecomponenttransferType.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA;
pub const svgFecomponenttransferType_Max = svgFecomponenttransferType.svgFecomponenttransferType_Max;

pub const svgFecompositeOperator = enum(i32) {
    SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0,
    SVG_FECOMPOSITE_OPERATOR_OVER = 1,
    SVG_FECOMPOSITE_OPERATOR_IN = 2,
    SVG_FECOMPOSITE_OPERATOR_OUT = 3,
    SVG_FECOMPOSITE_OPERATOR_ATOP = 4,
    SVG_FECOMPOSITE_OPERATOR_XOR = 5,
    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6,
    svgFecompositeOperator_Max = 2147483647,
};
pub const SVG_FECOMPOSITE_OPERATOR_UNKNOWN = svgFecompositeOperator.SVG_FECOMPOSITE_OPERATOR_UNKNOWN;
pub const SVG_FECOMPOSITE_OPERATOR_OVER = svgFecompositeOperator.SVG_FECOMPOSITE_OPERATOR_OVER;
pub const SVG_FECOMPOSITE_OPERATOR_IN = svgFecompositeOperator.SVG_FECOMPOSITE_OPERATOR_IN;
pub const SVG_FECOMPOSITE_OPERATOR_OUT = svgFecompositeOperator.SVG_FECOMPOSITE_OPERATOR_OUT;
pub const SVG_FECOMPOSITE_OPERATOR_ATOP = svgFecompositeOperator.SVG_FECOMPOSITE_OPERATOR_ATOP;
pub const SVG_FECOMPOSITE_OPERATOR_XOR = svgFecompositeOperator.SVG_FECOMPOSITE_OPERATOR_XOR;
pub const SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = svgFecompositeOperator.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC;
pub const svgFecompositeOperator_Max = svgFecompositeOperator.svgFecompositeOperator_Max;

pub const svgEdgemode = enum(i32) {
    SVG_EDGEMODE_UNKNOWN = 0,
    SVG_EDGEMODE_DUPLICATE = 1,
    SVG_EDGEMODE_WRAP = 2,
    SVG_EDGEMODE_NONE = 3,
    svgEdgemode_Max = 2147483647,
};
pub const SVG_EDGEMODE_UNKNOWN = svgEdgemode.SVG_EDGEMODE_UNKNOWN;
pub const SVG_EDGEMODE_DUPLICATE = svgEdgemode.SVG_EDGEMODE_DUPLICATE;
pub const SVG_EDGEMODE_WRAP = svgEdgemode.SVG_EDGEMODE_WRAP;
pub const SVG_EDGEMODE_NONE = svgEdgemode.SVG_EDGEMODE_NONE;
pub const svgEdgemode_Max = svgEdgemode.svgEdgemode_Max;

pub const svgPreserveAlpha = enum(i32) {
    SVG_PRESERVEALPHA_FALSE = 0,
    SVG_PRESERVEALPHA_TRUE = 1,
    svgPreserveAlpha_Max = 2147483647,
};
pub const SVG_PRESERVEALPHA_FALSE = svgPreserveAlpha.SVG_PRESERVEALPHA_FALSE;
pub const SVG_PRESERVEALPHA_TRUE = svgPreserveAlpha.SVG_PRESERVEALPHA_TRUE;
pub const svgPreserveAlpha_Max = svgPreserveAlpha.svgPreserveAlpha_Max;

pub const svgChannel = enum(i32) {
    SVG_CHANNEL_UNKNOWN = 0,
    SVG_CHANNEL_R = 1,
    SVG_CHANNEL_G = 2,
    SVG_CHANNEL_B = 3,
    SVG_CHANNEL_A = 4,
    svgChannel_Max = 2147483647,
};
pub const SVG_CHANNEL_UNKNOWN = svgChannel.SVG_CHANNEL_UNKNOWN;
pub const SVG_CHANNEL_R = svgChannel.SVG_CHANNEL_R;
pub const SVG_CHANNEL_G = svgChannel.SVG_CHANNEL_G;
pub const SVG_CHANNEL_B = svgChannel.SVG_CHANNEL_B;
pub const SVG_CHANNEL_A = svgChannel.SVG_CHANNEL_A;
pub const svgChannel_Max = svgChannel.svgChannel_Max;

pub const svgMorphologyOperator = enum(i32) {
    SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0,
    SVG_MORPHOLOGY_OPERATOR_ERODE = 1,
    SVG_MORPHOLOGY_OPERATOR_DILATE = 2,
    svgMorphologyOperator_Max = 2147483647,
};
pub const SVG_MORPHOLOGY_OPERATOR_UNKNOWN = svgMorphologyOperator.SVG_MORPHOLOGY_OPERATOR_UNKNOWN;
pub const SVG_MORPHOLOGY_OPERATOR_ERODE = svgMorphologyOperator.SVG_MORPHOLOGY_OPERATOR_ERODE;
pub const SVG_MORPHOLOGY_OPERATOR_DILATE = svgMorphologyOperator.SVG_MORPHOLOGY_OPERATOR_DILATE;
pub const svgMorphologyOperator_Max = svgMorphologyOperator.svgMorphologyOperator_Max;

pub const svgTurbulenceType = enum(i32) {
    SVG_TURBULENCE_TYPE_UNKNOWN = 0,
    SVG_TURBULENCE_TYPE_FACTALNOISE = 1,
    SVG_TURBULENCE_TYPE_TURBULENCE = 2,
    svgTurbulenceType_Max = 2147483647,
};
pub const SVG_TURBULENCE_TYPE_UNKNOWN = svgTurbulenceType.SVG_TURBULENCE_TYPE_UNKNOWN;
pub const SVG_TURBULENCE_TYPE_FACTALNOISE = svgTurbulenceType.SVG_TURBULENCE_TYPE_FACTALNOISE;
pub const SVG_TURBULENCE_TYPE_TURBULENCE = svgTurbulenceType.SVG_TURBULENCE_TYPE_TURBULENCE;
pub const svgTurbulenceType_Max = svgTurbulenceType.svgTurbulenceType_Max;

pub const svgStitchtype = enum(i32) {
    SVG_STITCHTYPE_UNKNOWN = 0,
    SVG_STITCHTYPE_STITCH = 1,
    SVG_STITCHTYPE_NOSTITCH = 2,
    svgStitchtype_Max = 2147483647,
};
pub const SVG_STITCHTYPE_UNKNOWN = svgStitchtype.SVG_STITCHTYPE_UNKNOWN;
pub const SVG_STITCHTYPE_STITCH = svgStitchtype.SVG_STITCHTYPE_STITCH;
pub const SVG_STITCHTYPE_NOSTITCH = svgStitchtype.SVG_STITCHTYPE_NOSTITCH;
pub const svgStitchtype_Max = svgStitchtype.svgStitchtype_Max;

pub const svgMarkerUnits = enum(i32) {
    SVG_MARKERUNITS_UNKNOWN = 0,
    SVG_MARKERUNITS_USERSPACEONUSE = 1,
    SVG_MARKERUNITS_STROKEWIDTH = 2,
    svgMarkerUnits_Max = 2147483647,
};
pub const SVG_MARKERUNITS_UNKNOWN = svgMarkerUnits.SVG_MARKERUNITS_UNKNOWN;
pub const SVG_MARKERUNITS_USERSPACEONUSE = svgMarkerUnits.SVG_MARKERUNITS_USERSPACEONUSE;
pub const SVG_MARKERUNITS_STROKEWIDTH = svgMarkerUnits.SVG_MARKERUNITS_STROKEWIDTH;
pub const svgMarkerUnits_Max = svgMarkerUnits.svgMarkerUnits_Max;

pub const svgMarkerOrient = enum(i32) {
    SVG_MARKER_ORIENT_UNKNOWN = 0,
    SVG_MARKER_ORIENT_AUTO = 1,
    SVG_MARKER_ORIENT_ANGLE = 2,
    svgMarkerOrient_Max = 2147483647,
};
pub const SVG_MARKER_ORIENT_UNKNOWN = svgMarkerOrient.SVG_MARKER_ORIENT_UNKNOWN;
pub const SVG_MARKER_ORIENT_AUTO = svgMarkerOrient.SVG_MARKER_ORIENT_AUTO;
pub const SVG_MARKER_ORIENT_ANGLE = svgMarkerOrient.SVG_MARKER_ORIENT_ANGLE;
pub const svgMarkerOrient_Max = svgMarkerOrient.svgMarkerOrient_Max;

pub const svgMarkerOrientAttribute = enum(i32) {
    Auto = 0,
    _Max = 2147483647,
};
pub const svgMarkerOrientAttributeAuto = svgMarkerOrientAttribute.Auto;
pub const svgMarkerOrientAttribute_Max = svgMarkerOrientAttribute._Max;

pub const htmlMediaNetworkState = enum(i32) {
    Empty = 0,
    Idle = 1,
    Loading = 2,
    NoSource = 3,
    _Max = 2147483647,
};
pub const htmlMediaNetworkStateEmpty = htmlMediaNetworkState.Empty;
pub const htmlMediaNetworkStateIdle = htmlMediaNetworkState.Idle;
pub const htmlMediaNetworkStateLoading = htmlMediaNetworkState.Loading;
pub const htmlMediaNetworkStateNoSource = htmlMediaNetworkState.NoSource;
pub const htmlMediaNetworkState_Max = htmlMediaNetworkState._Max;

pub const htmlMediaReadyState = enum(i32) {
    HaveNothing = 0,
    HaveMetadata = 1,
    HaveCurrentData = 2,
    HaveFutureData = 3,
    HaveEnoughData = 4,
    _Max = 2147483647,
};
pub const htmlMediaReadyStateHaveNothing = htmlMediaReadyState.HaveNothing;
pub const htmlMediaReadyStateHaveMetadata = htmlMediaReadyState.HaveMetadata;
pub const htmlMediaReadyStateHaveCurrentData = htmlMediaReadyState.HaveCurrentData;
pub const htmlMediaReadyStateHaveFutureData = htmlMediaReadyState.HaveFutureData;
pub const htmlMediaReadyStateHaveEnoughData = htmlMediaReadyState.HaveEnoughData;
pub const htmlMediaReadyState_Max = htmlMediaReadyState._Max;

pub const htmlMediaErr = enum(i32) {
    Aborted = 0,
    Network = 1,
    Decode = 2,
    SrcNotSupported = 3,
    _Max = 2147483647,
};
pub const htmlMediaErrAborted = htmlMediaErr.Aborted;
pub const htmlMediaErrNetwork = htmlMediaErr.Network;
pub const htmlMediaErrDecode = htmlMediaErr.Decode;
pub const htmlMediaErrSrcNotSupported = htmlMediaErr.SrcNotSupported;
pub const htmlMediaErr_Max = htmlMediaErr._Max;

pub const lengthAdjust = enum(i32) {
    LENGTHADJUST_UNKNOWN = 0,
    LENGTHADJUST_SPACING = 1,
    LENGTHADJUST_SPACINGANDGLYPHS = 2,
    lengthAdjust_Max = 2147483647,
};
pub const LENGTHADJUST_UNKNOWN = lengthAdjust.LENGTHADJUST_UNKNOWN;
pub const LENGTHADJUST_SPACING = lengthAdjust.LENGTHADJUST_SPACING;
pub const LENGTHADJUST_SPACINGANDGLYPHS = lengthAdjust.LENGTHADJUST_SPACINGANDGLYPHS;
pub const lengthAdjust_Max = lengthAdjust.lengthAdjust_Max;

pub const textpathMethodtype = enum(i32) {
    TEXTPATH_METHODTYPE_UNKNOWN = 0,
    TEXTPATH_METHODTYPE_ALIGN = 1,
    TEXTPATH_METHODTYPE_STRETCH = 2,
    textpathMethodtype_Max = 2147483647,
};
pub const TEXTPATH_METHODTYPE_UNKNOWN = textpathMethodtype.TEXTPATH_METHODTYPE_UNKNOWN;
pub const TEXTPATH_METHODTYPE_ALIGN = textpathMethodtype.TEXTPATH_METHODTYPE_ALIGN;
pub const TEXTPATH_METHODTYPE_STRETCH = textpathMethodtype.TEXTPATH_METHODTYPE_STRETCH;
pub const textpathMethodtype_Max = textpathMethodtype.textpathMethodtype_Max;

pub const textpathSpacingtype = enum(i32) {
    TEXTPATH_SPACINGTYPE_UNKNOWN = 0,
    TEXTPATH_SPACINGTYPE_AUTO = 1,
    TEXTPATH_SPACINGTYPE_EXACT = 2,
    textpathSpacingtype_Max = 2147483647,
};
pub const TEXTPATH_SPACINGTYPE_UNKNOWN = textpathSpacingtype.TEXTPATH_SPACINGTYPE_UNKNOWN;
pub const TEXTPATH_SPACINGTYPE_AUTO = textpathSpacingtype.TEXTPATH_SPACINGTYPE_AUTO;
pub const TEXTPATH_SPACINGTYPE_EXACT = textpathSpacingtype.TEXTPATH_SPACINGTYPE_EXACT;
pub const textpathSpacingtype_Max = textpathSpacingtype.textpathSpacingtype_Max;

pub const ELEMENT_CORNER = enum(i32) {
    NONE = 0,
    TOP = 1,
    LEFT = 2,
    BOTTOM = 3,
    RIGHT = 4,
    TOPLEFT = 5,
    TOPRIGHT = 6,
    BOTTOMLEFT = 7,
    BOTTOMRIGHT = 8,
    Max = 2147483647,
};
pub const ELEMENT_CORNER_NONE = ELEMENT_CORNER.NONE;
pub const ELEMENT_CORNER_TOP = ELEMENT_CORNER.TOP;
pub const ELEMENT_CORNER_LEFT = ELEMENT_CORNER.LEFT;
pub const ELEMENT_CORNER_BOTTOM = ELEMENT_CORNER.BOTTOM;
pub const ELEMENT_CORNER_RIGHT = ELEMENT_CORNER.RIGHT;
pub const ELEMENT_CORNER_TOPLEFT = ELEMENT_CORNER.TOPLEFT;
pub const ELEMENT_CORNER_TOPRIGHT = ELEMENT_CORNER.TOPRIGHT;
pub const ELEMENT_CORNER_BOTTOMLEFT = ELEMENT_CORNER.BOTTOMLEFT;
pub const ELEMENT_CORNER_BOTTOMRIGHT = ELEMENT_CORNER.BOTTOMRIGHT;
pub const ELEMENT_CORNER_Max = ELEMENT_CORNER.Max;

pub const SECUREURLHOSTVALIDATE_FLAGS = enum(i32) {
    UHV_PROMPTBEFORENO = 1,
    UHV_SILENTYES = 2,
    UHV_UNSECURESOURCE = 4,
    ECUREURLHOSTVALIDATE_FLAGS_Max = 2147483647,
};
pub const SUHV_PROMPTBEFORENO = SECUREURLHOSTVALIDATE_FLAGS.UHV_PROMPTBEFORENO;
pub const SUHV_SILENTYES = SECUREURLHOSTVALIDATE_FLAGS.UHV_SILENTYES;
pub const SUHV_UNSECURESOURCE = SECUREURLHOSTVALIDATE_FLAGS.UHV_UNSECURESOURCE;
pub const SECUREURLHOSTVALIDATE_FLAGS_Max = SECUREURLHOSTVALIDATE_FLAGS.ECUREURLHOSTVALIDATE_FLAGS_Max;

pub const POINTER_GRAVITY = enum(i32) {
    Left = 0,
    Right = 1,
    Max = 2147483647,
};
pub const POINTER_GRAVITY_Left = POINTER_GRAVITY.Left;
pub const POINTER_GRAVITY_Right = POINTER_GRAVITY.Right;
pub const POINTER_GRAVITY_Max = POINTER_GRAVITY.Max;

pub const ELEMENT_ADJACENCY = enum(i32) {
    _ADJ_BeforeBegin = 0,
    _ADJ_AfterBegin = 1,
    _ADJ_BeforeEnd = 2,
    _ADJ_AfterEnd = 3,
    ENT_ADJACENCY_Max = 2147483647,
};
pub const ELEM_ADJ_BeforeBegin = ELEMENT_ADJACENCY._ADJ_BeforeBegin;
pub const ELEM_ADJ_AfterBegin = ELEMENT_ADJACENCY._ADJ_AfterBegin;
pub const ELEM_ADJ_BeforeEnd = ELEMENT_ADJACENCY._ADJ_BeforeEnd;
pub const ELEM_ADJ_AfterEnd = ELEMENT_ADJACENCY._ADJ_AfterEnd;
pub const ELEMENT_ADJACENCY_Max = ELEMENT_ADJACENCY.ENT_ADJACENCY_Max;

pub const MARKUP_CONTEXT_TYPE = enum(i32) {
    CONTEXT_TYPE_None = 0,
    CONTEXT_TYPE_Text = 1,
    CONTEXT_TYPE_EnterScope = 2,
    CONTEXT_TYPE_ExitScope = 3,
    CONTEXT_TYPE_NoScope = 4,
    MARKUP_CONTEXT_TYPE_Max = 2147483647,
};
pub const CONTEXT_TYPE_None = MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_None;
pub const CONTEXT_TYPE_Text = MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_Text;
pub const CONTEXT_TYPE_EnterScope = MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_EnterScope;
pub const CONTEXT_TYPE_ExitScope = MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_ExitScope;
pub const CONTEXT_TYPE_NoScope = MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_NoScope;
pub const MARKUP_CONTEXT_TYPE_Max = MARKUP_CONTEXT_TYPE.MARKUP_CONTEXT_TYPE_Max;

pub const FINDTEXT_FLAGS = enum(i32) {
    BACKWARDS = 1,
    WHOLEWORD = 2,
    MATCHCASE = 4,
    RAW = 131072,
    MATCHREPEATEDWHITESPACE = 262144,
    MATCHDIAC = 536870912,
    MATCHKASHIDA = 1073741824,
    MATCHALEFHAMZA = -2147483648,
    FLAGS_Max = 2147483647,
};
pub const FINDTEXT_BACKWARDS = FINDTEXT_FLAGS.BACKWARDS;
pub const FINDTEXT_WHOLEWORD = FINDTEXT_FLAGS.WHOLEWORD;
pub const FINDTEXT_MATCHCASE = FINDTEXT_FLAGS.MATCHCASE;
pub const FINDTEXT_RAW = FINDTEXT_FLAGS.RAW;
pub const FINDTEXT_MATCHREPEATEDWHITESPACE = FINDTEXT_FLAGS.MATCHREPEATEDWHITESPACE;
pub const FINDTEXT_MATCHDIAC = FINDTEXT_FLAGS.MATCHDIAC;
pub const FINDTEXT_MATCHKASHIDA = FINDTEXT_FLAGS.MATCHKASHIDA;
pub const FINDTEXT_MATCHALEFHAMZA = FINDTEXT_FLAGS.MATCHALEFHAMZA;
pub const FINDTEXT_FLAGS_Max = FINDTEXT_FLAGS.FLAGS_Max;

pub const MOVEUNIT_ACTION = enum(i32) {
    PREVCHAR = 0,
    NEXTCHAR = 1,
    PREVCLUSTERBEGIN = 2,
    NEXTCLUSTERBEGIN = 3,
    PREVCLUSTEREND = 4,
    NEXTCLUSTEREND = 5,
    PREVWORDBEGIN = 6,
    NEXTWORDBEGIN = 7,
    PREVWORDEND = 8,
    NEXTWORDEND = 9,
    PREVPROOFWORD = 10,
    NEXTPROOFWORD = 11,
    NEXTURLBEGIN = 12,
    PREVURLBEGIN = 13,
    NEXTURLEND = 14,
    PREVURLEND = 15,
    PREVSENTENCE = 16,
    NEXTSENTENCE = 17,
    PREVBLOCK = 18,
    NEXTBLOCK = 19,
    ACTION_Max = 2147483647,
};
pub const MOVEUNIT_PREVCHAR = MOVEUNIT_ACTION.PREVCHAR;
pub const MOVEUNIT_NEXTCHAR = MOVEUNIT_ACTION.NEXTCHAR;
pub const MOVEUNIT_PREVCLUSTERBEGIN = MOVEUNIT_ACTION.PREVCLUSTERBEGIN;
pub const MOVEUNIT_NEXTCLUSTERBEGIN = MOVEUNIT_ACTION.NEXTCLUSTERBEGIN;
pub const MOVEUNIT_PREVCLUSTEREND = MOVEUNIT_ACTION.PREVCLUSTEREND;
pub const MOVEUNIT_NEXTCLUSTEREND = MOVEUNIT_ACTION.NEXTCLUSTEREND;
pub const MOVEUNIT_PREVWORDBEGIN = MOVEUNIT_ACTION.PREVWORDBEGIN;
pub const MOVEUNIT_NEXTWORDBEGIN = MOVEUNIT_ACTION.NEXTWORDBEGIN;
pub const MOVEUNIT_PREVWORDEND = MOVEUNIT_ACTION.PREVWORDEND;
pub const MOVEUNIT_NEXTWORDEND = MOVEUNIT_ACTION.NEXTWORDEND;
pub const MOVEUNIT_PREVPROOFWORD = MOVEUNIT_ACTION.PREVPROOFWORD;
pub const MOVEUNIT_NEXTPROOFWORD = MOVEUNIT_ACTION.NEXTPROOFWORD;
pub const MOVEUNIT_NEXTURLBEGIN = MOVEUNIT_ACTION.NEXTURLBEGIN;
pub const MOVEUNIT_PREVURLBEGIN = MOVEUNIT_ACTION.PREVURLBEGIN;
pub const MOVEUNIT_NEXTURLEND = MOVEUNIT_ACTION.NEXTURLEND;
pub const MOVEUNIT_PREVURLEND = MOVEUNIT_ACTION.PREVURLEND;
pub const MOVEUNIT_PREVSENTENCE = MOVEUNIT_ACTION.PREVSENTENCE;
pub const MOVEUNIT_NEXTSENTENCE = MOVEUNIT_ACTION.NEXTSENTENCE;
pub const MOVEUNIT_PREVBLOCK = MOVEUNIT_ACTION.PREVBLOCK;
pub const MOVEUNIT_NEXTBLOCK = MOVEUNIT_ACTION.NEXTBLOCK;
pub const MOVEUNIT_ACTION_Max = MOVEUNIT_ACTION.ACTION_Max;

pub const PARSE_FLAGS = enum(i32) {
    ABSOLUTIFYIE40URLS = 1,
    DISABLEVML = 2,
    FLAGS_Max = 2147483647,
};
pub const PARSE_ABSOLUTIFYIE40URLS = PARSE_FLAGS.ABSOLUTIFYIE40URLS;
pub const PARSE_DISABLEVML = PARSE_FLAGS.DISABLEVML;
pub const PARSE_FLAGS_Max = PARSE_FLAGS.FLAGS_Max;

pub const ELEMENT_TAG_ID = enum(i32) {
    TAGID_NULL = 0,
    TAGID_UNKNOWN = 1,
    TAGID_A = 2,
    TAGID_ACRONYM = 3,
    TAGID_ADDRESS = 4,
    TAGID_APPLET = 5,
    TAGID_AREA = 6,
    TAGID_B = 7,
    TAGID_BASE = 8,
    TAGID_BASEFONT = 9,
    TAGID_BDO = 10,
    TAGID_BGSOUND = 11,
    TAGID_BIG = 12,
    TAGID_BLINK = 13,
    TAGID_BLOCKQUOTE = 14,
    TAGID_BODY = 15,
    TAGID_BR = 16,
    TAGID_BUTTON = 17,
    TAGID_CAPTION = 18,
    TAGID_CENTER = 19,
    TAGID_CITE = 20,
    TAGID_CODE = 21,
    TAGID_COL = 22,
    TAGID_COLGROUP = 23,
    TAGID_COMMENT = 24,
    TAGID_COMMENT_RAW = 25,
    TAGID_DD = 26,
    TAGID_DEL = 27,
    TAGID_DFN = 28,
    TAGID_DIR = 29,
    TAGID_DIV = 30,
    TAGID_DL = 31,
    TAGID_DT = 32,
    TAGID_EM = 33,
    TAGID_EMBED = 34,
    TAGID_FIELDSET = 35,
    TAGID_FONT = 36,
    TAGID_FORM = 37,
    TAGID_FRAME = 38,
    TAGID_FRAMESET = 39,
    TAGID_GENERIC = 40,
    TAGID_H1 = 41,
    TAGID_H2 = 42,
    TAGID_H3 = 43,
    TAGID_H4 = 44,
    TAGID_H5 = 45,
    TAGID_H6 = 46,
    TAGID_HEAD = 47,
    TAGID_HR = 48,
    TAGID_HTML = 49,
    TAGID_I = 50,
    TAGID_IFRAME = 51,
    TAGID_IMG = 52,
    TAGID_INPUT = 53,
    TAGID_INS = 54,
    TAGID_KBD = 55,
    TAGID_LABEL = 56,
    TAGID_LEGEND = 57,
    TAGID_LI = 58,
    TAGID_LINK = 59,
    TAGID_LISTING = 60,
    TAGID_MAP = 61,
    TAGID_MARQUEE = 62,
    TAGID_MENU = 63,
    TAGID_META = 64,
    TAGID_NEXTID = 65,
    TAGID_NOBR = 66,
    TAGID_NOEMBED = 67,
    TAGID_NOFRAMES = 68,
    TAGID_NOSCRIPT = 69,
    TAGID_OBJECT = 70,
    TAGID_OL = 71,
    TAGID_OPTION = 72,
    TAGID_P = 73,
    TAGID_PARAM = 74,
    TAGID_PLAINTEXT = 75,
    TAGID_PRE = 76,
    TAGID_Q = 77,
    TAGID_RP = 78,
    TAGID_RT = 79,
    TAGID_RUBY = 80,
    TAGID_S = 81,
    TAGID_SAMP = 82,
    TAGID_SCRIPT = 83,
    TAGID_SELECT = 84,
    TAGID_SMALL = 85,
    TAGID_SPAN = 86,
    TAGID_STRIKE = 87,
    TAGID_STRONG = 88,
    TAGID_STYLE = 89,
    TAGID_SUB = 90,
    TAGID_SUP = 91,
    TAGID_TABLE = 92,
    TAGID_TBODY = 93,
    TAGID_TC = 94,
    TAGID_TD = 95,
    TAGID_TEXTAREA = 96,
    TAGID_TFOOT = 97,
    TAGID_TH = 98,
    TAGID_THEAD = 99,
    TAGID_TITLE = 100,
    TAGID_TR = 101,
    TAGID_TT = 102,
    TAGID_U = 103,
    TAGID_UL = 104,
    TAGID_VAR = 105,
    TAGID_WBR = 106,
    TAGID_XMP = 107,
    TAGID_ROOT = 108,
    TAGID_OPTGROUP = 109,
    TAGID_ABBR = 110,
    TAGID_SVG_A = 111,
    TAGID_SVG_ALTGLYPH = 112,
    TAGID_SVG_ALTGLYPHDEF = 113,
    TAGID_SVG_ALTGLYPHITEM = 114,
    TAGID_SVG_ANIMATE = 115,
    TAGID_SVG_ANIMATECOLOR = 116,
    TAGID_SVG_ANIMATEMOTION = 117,
    TAGID_SVG_ANIMATETRANSFORM = 118,
    TAGID_SVG_CIRCLE = 119,
    TAGID_SVG_CLIPPATH = 120,
    TAGID_SVG_COLOR_PROFILE = 121,
    TAGID_SVG_CURSOR = 122,
    TAGID_SVG_DEFINITION_SRC = 123,
    TAGID_SVG_DEFS = 124,
    TAGID_SVG_DESC = 125,
    TAGID_SVG_ELLIPSE = 126,
    TAGID_SVG_FEBLEND = 127,
    TAGID_SVG_FECOLORMATRIX = 128,
    TAGID_SVG_FECOMPONENTTRANSFER = 129,
    TAGID_SVG_FECOMPOSITE = 130,
    TAGID_SVG_FECONVOLVEMATRIX = 131,
    TAGID_SVG_FEDIFFUSELIGHTING = 132,
    TAGID_SVG_FEDISPLACEMENTMAP = 133,
    TAGID_SVG_FEDISTANTLIGHT = 134,
    TAGID_SVG_FEFLOOD = 135,
    TAGID_SVG_FEFUNCA = 136,
    TAGID_SVG_FEFUNCB = 137,
    TAGID_SVG_FEFUNCG = 138,
    TAGID_SVG_FEFUNCR = 139,
    TAGID_SVG_FEGAUSSIANBLUR = 140,
    TAGID_SVG_FEIMAGE = 141,
    TAGID_SVG_FEMERGE = 142,
    TAGID_SVG_FEMERGENODE = 143,
    TAGID_SVG_FEMORPHOLOGY = 144,
    TAGID_SVG_FEOFFSET = 145,
    TAGID_SVG_FEPOINTLIGHT = 146,
    TAGID_SVG_FESPECULARLIGHTING = 147,
    TAGID_SVG_FESPOTLIGHT = 148,
    TAGID_SVG_FETILE = 149,
    TAGID_SVG_FETURBULENCE = 150,
    TAGID_SVG_FILTER = 151,
    TAGID_SVG_FONT = 152,
    TAGID_SVG_FONT_FACE = 153,
    TAGID_SVG_FONT_FACE_FORMAT = 154,
    TAGID_SVG_FONT_FACE_NAME = 155,
    TAGID_SVG_FONT_FACE_SRC = 156,
    TAGID_SVG_FONT_FACE_URI = 157,
    TAGID_SVG_FOREIGNOBJECT = 158,
    TAGID_SVG_G = 159,
    TAGID_SVG_GLYPH = 160,
    TAGID_SVG_GLYPHREF = 161,
    TAGID_SVG_HKERN = 162,
    TAGID_SVG_IMAGE = 163,
    TAGID_SVG_LINE = 164,
    TAGID_SVG_LINEARGRADIENT = 165,
    TAGID_SVG_MARKER = 166,
    TAGID_SVG_MASK = 167,
    TAGID_SVG_METADATA = 168,
    TAGID_SVG_MISSING_GLYPH = 169,
    TAGID_SVG_MPATH = 170,
    TAGID_SVG_PATH = 171,
    TAGID_SVG_PATTERN = 172,
    TAGID_SVG_POLYGON = 173,
    TAGID_SVG_POLYLINE = 174,
    TAGID_SVG_RADIALGRADIENT = 175,
    TAGID_SVG_RECT = 176,
    TAGID_SVG_SCRIPT = 177,
    TAGID_SVG_SET = 178,
    TAGID_SVG_STOP = 179,
    TAGID_SVG_STYLE = 180,
    TAGID_SVG_SVG = 181,
    TAGID_SVG_SWITCH = 182,
    TAGID_SVG_SYMBOL = 183,
    TAGID_SVG_TEXT = 184,
    TAGID_SVG_TEXTPATH = 185,
    TAGID_SVG_TITLE = 186,
    TAGID_SVG_TREF = 187,
    TAGID_SVG_TSPAN = 188,
    TAGID_SVG_USE = 189,
    TAGID_SVG_VIEW = 190,
    TAGID_SVG_VKERN = 191,
    TAGID_AUDIO = 192,
    TAGID_SOURCE = 193,
    TAGID_VIDEO = 194,
    TAGID_CANVAS = 195,
    TAGID_DOCTYPE = 196,
    TAGID_KEYGEN = 197,
    TAGID_PROCESSINGINSTRUCTION = 198,
    TAGID_ARTICLE = 199,
    TAGID_ASIDE = 200,
    TAGID_FIGCAPTION = 201,
    TAGID_FIGURE = 202,
    TAGID_FOOTER = 203,
    TAGID_HEADER = 204,
    TAGID_HGROUP = 205,
    TAGID_MARK = 206,
    TAGID_NAV = 207,
    TAGID_SECTION = 208,
    TAGID_PROGRESS = 209,
    TAGID_MATHML_ANNOTATION_XML = 210,
    TAGID_MATHML_MATH = 211,
    TAGID_MATHML_MI = 212,
    TAGID_MATHML_MN = 213,
    TAGID_MATHML_MO = 214,
    TAGID_MATHML_MS = 215,
    TAGID_MATHML_MTEXT = 216,
    TAGID_DATALIST = 217,
    TAGID_TRACK = 218,
    TAGID_ISINDEX = 219,
    TAGID_COMMAND = 220,
    TAGID_DETAILS = 221,
    TAGID_SUMMARY = 222,
    TAGID_X_MS_WEBVIEW = 223,
    TAGID_COUNT = 224,
    TAGID_LAST_PREDEFINED = 10000,
    ELEMENT_TAG_ID_Max = 2147483647,
};
pub const TAGID_NULL = ELEMENT_TAG_ID.TAGID_NULL;
pub const TAGID_UNKNOWN = ELEMENT_TAG_ID.TAGID_UNKNOWN;
pub const TAGID_A = ELEMENT_TAG_ID.TAGID_A;
pub const TAGID_ACRONYM = ELEMENT_TAG_ID.TAGID_ACRONYM;
pub const TAGID_ADDRESS = ELEMENT_TAG_ID.TAGID_ADDRESS;
pub const TAGID_APPLET = ELEMENT_TAG_ID.TAGID_APPLET;
pub const TAGID_AREA = ELEMENT_TAG_ID.TAGID_AREA;
pub const TAGID_B = ELEMENT_TAG_ID.TAGID_B;
pub const TAGID_BASE = ELEMENT_TAG_ID.TAGID_BASE;
pub const TAGID_BASEFONT = ELEMENT_TAG_ID.TAGID_BASEFONT;
pub const TAGID_BDO = ELEMENT_TAG_ID.TAGID_BDO;
pub const TAGID_BGSOUND = ELEMENT_TAG_ID.TAGID_BGSOUND;
pub const TAGID_BIG = ELEMENT_TAG_ID.TAGID_BIG;
pub const TAGID_BLINK = ELEMENT_TAG_ID.TAGID_BLINK;
pub const TAGID_BLOCKQUOTE = ELEMENT_TAG_ID.TAGID_BLOCKQUOTE;
pub const TAGID_BODY = ELEMENT_TAG_ID.TAGID_BODY;
pub const TAGID_BR = ELEMENT_TAG_ID.TAGID_BR;
pub const TAGID_BUTTON = ELEMENT_TAG_ID.TAGID_BUTTON;
pub const TAGID_CAPTION = ELEMENT_TAG_ID.TAGID_CAPTION;
pub const TAGID_CENTER = ELEMENT_TAG_ID.TAGID_CENTER;
pub const TAGID_CITE = ELEMENT_TAG_ID.TAGID_CITE;
pub const TAGID_CODE = ELEMENT_TAG_ID.TAGID_CODE;
pub const TAGID_COL = ELEMENT_TAG_ID.TAGID_COL;
pub const TAGID_COLGROUP = ELEMENT_TAG_ID.TAGID_COLGROUP;
pub const TAGID_COMMENT = ELEMENT_TAG_ID.TAGID_COMMENT;
pub const TAGID_COMMENT_RAW = ELEMENT_TAG_ID.TAGID_COMMENT_RAW;
pub const TAGID_DD = ELEMENT_TAG_ID.TAGID_DD;
pub const TAGID_DEL = ELEMENT_TAG_ID.TAGID_DEL;
pub const TAGID_DFN = ELEMENT_TAG_ID.TAGID_DFN;
pub const TAGID_DIR = ELEMENT_TAG_ID.TAGID_DIR;
pub const TAGID_DIV = ELEMENT_TAG_ID.TAGID_DIV;
pub const TAGID_DL = ELEMENT_TAG_ID.TAGID_DL;
pub const TAGID_DT = ELEMENT_TAG_ID.TAGID_DT;
pub const TAGID_EM = ELEMENT_TAG_ID.TAGID_EM;
pub const TAGID_EMBED = ELEMENT_TAG_ID.TAGID_EMBED;
pub const TAGID_FIELDSET = ELEMENT_TAG_ID.TAGID_FIELDSET;
pub const TAGID_FONT = ELEMENT_TAG_ID.TAGID_FONT;
pub const TAGID_FORM = ELEMENT_TAG_ID.TAGID_FORM;
pub const TAGID_FRAME = ELEMENT_TAG_ID.TAGID_FRAME;
pub const TAGID_FRAMESET = ELEMENT_TAG_ID.TAGID_FRAMESET;
pub const TAGID_GENERIC = ELEMENT_TAG_ID.TAGID_GENERIC;
pub const TAGID_H1 = ELEMENT_TAG_ID.TAGID_H1;
pub const TAGID_H2 = ELEMENT_TAG_ID.TAGID_H2;
pub const TAGID_H3 = ELEMENT_TAG_ID.TAGID_H3;
pub const TAGID_H4 = ELEMENT_TAG_ID.TAGID_H4;
pub const TAGID_H5 = ELEMENT_TAG_ID.TAGID_H5;
pub const TAGID_H6 = ELEMENT_TAG_ID.TAGID_H6;
pub const TAGID_HEAD = ELEMENT_TAG_ID.TAGID_HEAD;
pub const TAGID_HR = ELEMENT_TAG_ID.TAGID_HR;
pub const TAGID_HTML = ELEMENT_TAG_ID.TAGID_HTML;
pub const TAGID_I = ELEMENT_TAG_ID.TAGID_I;
pub const TAGID_IFRAME = ELEMENT_TAG_ID.TAGID_IFRAME;
pub const TAGID_IMG = ELEMENT_TAG_ID.TAGID_IMG;
pub const TAGID_INPUT = ELEMENT_TAG_ID.TAGID_INPUT;
pub const TAGID_INS = ELEMENT_TAG_ID.TAGID_INS;
pub const TAGID_KBD = ELEMENT_TAG_ID.TAGID_KBD;
pub const TAGID_LABEL = ELEMENT_TAG_ID.TAGID_LABEL;
pub const TAGID_LEGEND = ELEMENT_TAG_ID.TAGID_LEGEND;
pub const TAGID_LI = ELEMENT_TAG_ID.TAGID_LI;
pub const TAGID_LINK = ELEMENT_TAG_ID.TAGID_LINK;
pub const TAGID_LISTING = ELEMENT_TAG_ID.TAGID_LISTING;
pub const TAGID_MAP = ELEMENT_TAG_ID.TAGID_MAP;
pub const TAGID_MARQUEE = ELEMENT_TAG_ID.TAGID_MARQUEE;
pub const TAGID_MENU = ELEMENT_TAG_ID.TAGID_MENU;
pub const TAGID_META = ELEMENT_TAG_ID.TAGID_META;
pub const TAGID_NEXTID = ELEMENT_TAG_ID.TAGID_NEXTID;
pub const TAGID_NOBR = ELEMENT_TAG_ID.TAGID_NOBR;
pub const TAGID_NOEMBED = ELEMENT_TAG_ID.TAGID_NOEMBED;
pub const TAGID_NOFRAMES = ELEMENT_TAG_ID.TAGID_NOFRAMES;
pub const TAGID_NOSCRIPT = ELEMENT_TAG_ID.TAGID_NOSCRIPT;
pub const TAGID_OBJECT = ELEMENT_TAG_ID.TAGID_OBJECT;
pub const TAGID_OL = ELEMENT_TAG_ID.TAGID_OL;
pub const TAGID_OPTION = ELEMENT_TAG_ID.TAGID_OPTION;
pub const TAGID_P = ELEMENT_TAG_ID.TAGID_P;
pub const TAGID_PARAM = ELEMENT_TAG_ID.TAGID_PARAM;
pub const TAGID_PLAINTEXT = ELEMENT_TAG_ID.TAGID_PLAINTEXT;
pub const TAGID_PRE = ELEMENT_TAG_ID.TAGID_PRE;
pub const TAGID_Q = ELEMENT_TAG_ID.TAGID_Q;
pub const TAGID_RP = ELEMENT_TAG_ID.TAGID_RP;
pub const TAGID_RT = ELEMENT_TAG_ID.TAGID_RT;
pub const TAGID_RUBY = ELEMENT_TAG_ID.TAGID_RUBY;
pub const TAGID_S = ELEMENT_TAG_ID.TAGID_S;
pub const TAGID_SAMP = ELEMENT_TAG_ID.TAGID_SAMP;
pub const TAGID_SCRIPT = ELEMENT_TAG_ID.TAGID_SCRIPT;
pub const TAGID_SELECT = ELEMENT_TAG_ID.TAGID_SELECT;
pub const TAGID_SMALL = ELEMENT_TAG_ID.TAGID_SMALL;
pub const TAGID_SPAN = ELEMENT_TAG_ID.TAGID_SPAN;
pub const TAGID_STRIKE = ELEMENT_TAG_ID.TAGID_STRIKE;
pub const TAGID_STRONG = ELEMENT_TAG_ID.TAGID_STRONG;
pub const TAGID_STYLE = ELEMENT_TAG_ID.TAGID_STYLE;
pub const TAGID_SUB = ELEMENT_TAG_ID.TAGID_SUB;
pub const TAGID_SUP = ELEMENT_TAG_ID.TAGID_SUP;
pub const TAGID_TABLE = ELEMENT_TAG_ID.TAGID_TABLE;
pub const TAGID_TBODY = ELEMENT_TAG_ID.TAGID_TBODY;
pub const TAGID_TC = ELEMENT_TAG_ID.TAGID_TC;
pub const TAGID_TD = ELEMENT_TAG_ID.TAGID_TD;
pub const TAGID_TEXTAREA = ELEMENT_TAG_ID.TAGID_TEXTAREA;
pub const TAGID_TFOOT = ELEMENT_TAG_ID.TAGID_TFOOT;
pub const TAGID_TH = ELEMENT_TAG_ID.TAGID_TH;
pub const TAGID_THEAD = ELEMENT_TAG_ID.TAGID_THEAD;
pub const TAGID_TITLE = ELEMENT_TAG_ID.TAGID_TITLE;
pub const TAGID_TR = ELEMENT_TAG_ID.TAGID_TR;
pub const TAGID_TT = ELEMENT_TAG_ID.TAGID_TT;
pub const TAGID_U = ELEMENT_TAG_ID.TAGID_U;
pub const TAGID_UL = ELEMENT_TAG_ID.TAGID_UL;
pub const TAGID_VAR = ELEMENT_TAG_ID.TAGID_VAR;
pub const TAGID_WBR = ELEMENT_TAG_ID.TAGID_WBR;
pub const TAGID_XMP = ELEMENT_TAG_ID.TAGID_XMP;
pub const TAGID_ROOT = ELEMENT_TAG_ID.TAGID_ROOT;
pub const TAGID_OPTGROUP = ELEMENT_TAG_ID.TAGID_OPTGROUP;
pub const TAGID_ABBR = ELEMENT_TAG_ID.TAGID_ABBR;
pub const TAGID_SVG_A = ELEMENT_TAG_ID.TAGID_SVG_A;
pub const TAGID_SVG_ALTGLYPH = ELEMENT_TAG_ID.TAGID_SVG_ALTGLYPH;
pub const TAGID_SVG_ALTGLYPHDEF = ELEMENT_TAG_ID.TAGID_SVG_ALTGLYPHDEF;
pub const TAGID_SVG_ALTGLYPHITEM = ELEMENT_TAG_ID.TAGID_SVG_ALTGLYPHITEM;
pub const TAGID_SVG_ANIMATE = ELEMENT_TAG_ID.TAGID_SVG_ANIMATE;
pub const TAGID_SVG_ANIMATECOLOR = ELEMENT_TAG_ID.TAGID_SVG_ANIMATECOLOR;
pub const TAGID_SVG_ANIMATEMOTION = ELEMENT_TAG_ID.TAGID_SVG_ANIMATEMOTION;
pub const TAGID_SVG_ANIMATETRANSFORM = ELEMENT_TAG_ID.TAGID_SVG_ANIMATETRANSFORM;
pub const TAGID_SVG_CIRCLE = ELEMENT_TAG_ID.TAGID_SVG_CIRCLE;
pub const TAGID_SVG_CLIPPATH = ELEMENT_TAG_ID.TAGID_SVG_CLIPPATH;
pub const TAGID_SVG_COLOR_PROFILE = ELEMENT_TAG_ID.TAGID_SVG_COLOR_PROFILE;
pub const TAGID_SVG_CURSOR = ELEMENT_TAG_ID.TAGID_SVG_CURSOR;
pub const TAGID_SVG_DEFINITION_SRC = ELEMENT_TAG_ID.TAGID_SVG_DEFINITION_SRC;
pub const TAGID_SVG_DEFS = ELEMENT_TAG_ID.TAGID_SVG_DEFS;
pub const TAGID_SVG_DESC = ELEMENT_TAG_ID.TAGID_SVG_DESC;
pub const TAGID_SVG_ELLIPSE = ELEMENT_TAG_ID.TAGID_SVG_ELLIPSE;
pub const TAGID_SVG_FEBLEND = ELEMENT_TAG_ID.TAGID_SVG_FEBLEND;
pub const TAGID_SVG_FECOLORMATRIX = ELEMENT_TAG_ID.TAGID_SVG_FECOLORMATRIX;
pub const TAGID_SVG_FECOMPONENTTRANSFER = ELEMENT_TAG_ID.TAGID_SVG_FECOMPONENTTRANSFER;
pub const TAGID_SVG_FECOMPOSITE = ELEMENT_TAG_ID.TAGID_SVG_FECOMPOSITE;
pub const TAGID_SVG_FECONVOLVEMATRIX = ELEMENT_TAG_ID.TAGID_SVG_FECONVOLVEMATRIX;
pub const TAGID_SVG_FEDIFFUSELIGHTING = ELEMENT_TAG_ID.TAGID_SVG_FEDIFFUSELIGHTING;
pub const TAGID_SVG_FEDISPLACEMENTMAP = ELEMENT_TAG_ID.TAGID_SVG_FEDISPLACEMENTMAP;
pub const TAGID_SVG_FEDISTANTLIGHT = ELEMENT_TAG_ID.TAGID_SVG_FEDISTANTLIGHT;
pub const TAGID_SVG_FEFLOOD = ELEMENT_TAG_ID.TAGID_SVG_FEFLOOD;
pub const TAGID_SVG_FEFUNCA = ELEMENT_TAG_ID.TAGID_SVG_FEFUNCA;
pub const TAGID_SVG_FEFUNCB = ELEMENT_TAG_ID.TAGID_SVG_FEFUNCB;
pub const TAGID_SVG_FEFUNCG = ELEMENT_TAG_ID.TAGID_SVG_FEFUNCG;
pub const TAGID_SVG_FEFUNCR = ELEMENT_TAG_ID.TAGID_SVG_FEFUNCR;
pub const TAGID_SVG_FEGAUSSIANBLUR = ELEMENT_TAG_ID.TAGID_SVG_FEGAUSSIANBLUR;
pub const TAGID_SVG_FEIMAGE = ELEMENT_TAG_ID.TAGID_SVG_FEIMAGE;
pub const TAGID_SVG_FEMERGE = ELEMENT_TAG_ID.TAGID_SVG_FEMERGE;
pub const TAGID_SVG_FEMERGENODE = ELEMENT_TAG_ID.TAGID_SVG_FEMERGENODE;
pub const TAGID_SVG_FEMORPHOLOGY = ELEMENT_TAG_ID.TAGID_SVG_FEMORPHOLOGY;
pub const TAGID_SVG_FEOFFSET = ELEMENT_TAG_ID.TAGID_SVG_FEOFFSET;
pub const TAGID_SVG_FEPOINTLIGHT = ELEMENT_TAG_ID.TAGID_SVG_FEPOINTLIGHT;
pub const TAGID_SVG_FESPECULARLIGHTING = ELEMENT_TAG_ID.TAGID_SVG_FESPECULARLIGHTING;
pub const TAGID_SVG_FESPOTLIGHT = ELEMENT_TAG_ID.TAGID_SVG_FESPOTLIGHT;
pub const TAGID_SVG_FETILE = ELEMENT_TAG_ID.TAGID_SVG_FETILE;
pub const TAGID_SVG_FETURBULENCE = ELEMENT_TAG_ID.TAGID_SVG_FETURBULENCE;
pub const TAGID_SVG_FILTER = ELEMENT_TAG_ID.TAGID_SVG_FILTER;
pub const TAGID_SVG_FONT = ELEMENT_TAG_ID.TAGID_SVG_FONT;
pub const TAGID_SVG_FONT_FACE = ELEMENT_TAG_ID.TAGID_SVG_FONT_FACE;
pub const TAGID_SVG_FONT_FACE_FORMAT = ELEMENT_TAG_ID.TAGID_SVG_FONT_FACE_FORMAT;
pub const TAGID_SVG_FONT_FACE_NAME = ELEMENT_TAG_ID.TAGID_SVG_FONT_FACE_NAME;
pub const TAGID_SVG_FONT_FACE_SRC = ELEMENT_TAG_ID.TAGID_SVG_FONT_FACE_SRC;
pub const TAGID_SVG_FONT_FACE_URI = ELEMENT_TAG_ID.TAGID_SVG_FONT_FACE_URI;
pub const TAGID_SVG_FOREIGNOBJECT = ELEMENT_TAG_ID.TAGID_SVG_FOREIGNOBJECT;
pub const TAGID_SVG_G = ELEMENT_TAG_ID.TAGID_SVG_G;
pub const TAGID_SVG_GLYPH = ELEMENT_TAG_ID.TAGID_SVG_GLYPH;
pub const TAGID_SVG_GLYPHREF = ELEMENT_TAG_ID.TAGID_SVG_GLYPHREF;
pub const TAGID_SVG_HKERN = ELEMENT_TAG_ID.TAGID_SVG_HKERN;
pub const TAGID_SVG_IMAGE = ELEMENT_TAG_ID.TAGID_SVG_IMAGE;
pub const TAGID_SVG_LINE = ELEMENT_TAG_ID.TAGID_SVG_LINE;
pub const TAGID_SVG_LINEARGRADIENT = ELEMENT_TAG_ID.TAGID_SVG_LINEARGRADIENT;
pub const TAGID_SVG_MARKER = ELEMENT_TAG_ID.TAGID_SVG_MARKER;
pub const TAGID_SVG_MASK = ELEMENT_TAG_ID.TAGID_SVG_MASK;
pub const TAGID_SVG_METADATA = ELEMENT_TAG_ID.TAGID_SVG_METADATA;
pub const TAGID_SVG_MISSING_GLYPH = ELEMENT_TAG_ID.TAGID_SVG_MISSING_GLYPH;
pub const TAGID_SVG_MPATH = ELEMENT_TAG_ID.TAGID_SVG_MPATH;
pub const TAGID_SVG_PATH = ELEMENT_TAG_ID.TAGID_SVG_PATH;
pub const TAGID_SVG_PATTERN = ELEMENT_TAG_ID.TAGID_SVG_PATTERN;
pub const TAGID_SVG_POLYGON = ELEMENT_TAG_ID.TAGID_SVG_POLYGON;
pub const TAGID_SVG_POLYLINE = ELEMENT_TAG_ID.TAGID_SVG_POLYLINE;
pub const TAGID_SVG_RADIALGRADIENT = ELEMENT_TAG_ID.TAGID_SVG_RADIALGRADIENT;
pub const TAGID_SVG_RECT = ELEMENT_TAG_ID.TAGID_SVG_RECT;
pub const TAGID_SVG_SCRIPT = ELEMENT_TAG_ID.TAGID_SVG_SCRIPT;
pub const TAGID_SVG_SET = ELEMENT_TAG_ID.TAGID_SVG_SET;
pub const TAGID_SVG_STOP = ELEMENT_TAG_ID.TAGID_SVG_STOP;
pub const TAGID_SVG_STYLE = ELEMENT_TAG_ID.TAGID_SVG_STYLE;
pub const TAGID_SVG_SVG = ELEMENT_TAG_ID.TAGID_SVG_SVG;
pub const TAGID_SVG_SWITCH = ELEMENT_TAG_ID.TAGID_SVG_SWITCH;
pub const TAGID_SVG_SYMBOL = ELEMENT_TAG_ID.TAGID_SVG_SYMBOL;
pub const TAGID_SVG_TEXT = ELEMENT_TAG_ID.TAGID_SVG_TEXT;
pub const TAGID_SVG_TEXTPATH = ELEMENT_TAG_ID.TAGID_SVG_TEXTPATH;
pub const TAGID_SVG_TITLE = ELEMENT_TAG_ID.TAGID_SVG_TITLE;
pub const TAGID_SVG_TREF = ELEMENT_TAG_ID.TAGID_SVG_TREF;
pub const TAGID_SVG_TSPAN = ELEMENT_TAG_ID.TAGID_SVG_TSPAN;
pub const TAGID_SVG_USE = ELEMENT_TAG_ID.TAGID_SVG_USE;
pub const TAGID_SVG_VIEW = ELEMENT_TAG_ID.TAGID_SVG_VIEW;
pub const TAGID_SVG_VKERN = ELEMENT_TAG_ID.TAGID_SVG_VKERN;
pub const TAGID_AUDIO = ELEMENT_TAG_ID.TAGID_AUDIO;
pub const TAGID_SOURCE = ELEMENT_TAG_ID.TAGID_SOURCE;
pub const TAGID_VIDEO = ELEMENT_TAG_ID.TAGID_VIDEO;
pub const TAGID_CANVAS = ELEMENT_TAG_ID.TAGID_CANVAS;
pub const TAGID_DOCTYPE = ELEMENT_TAG_ID.TAGID_DOCTYPE;
pub const TAGID_KEYGEN = ELEMENT_TAG_ID.TAGID_KEYGEN;
pub const TAGID_PROCESSINGINSTRUCTION = ELEMENT_TAG_ID.TAGID_PROCESSINGINSTRUCTION;
pub const TAGID_ARTICLE = ELEMENT_TAG_ID.TAGID_ARTICLE;
pub const TAGID_ASIDE = ELEMENT_TAG_ID.TAGID_ASIDE;
pub const TAGID_FIGCAPTION = ELEMENT_TAG_ID.TAGID_FIGCAPTION;
pub const TAGID_FIGURE = ELEMENT_TAG_ID.TAGID_FIGURE;
pub const TAGID_FOOTER = ELEMENT_TAG_ID.TAGID_FOOTER;
pub const TAGID_HEADER = ELEMENT_TAG_ID.TAGID_HEADER;
pub const TAGID_HGROUP = ELEMENT_TAG_ID.TAGID_HGROUP;
pub const TAGID_MARK = ELEMENT_TAG_ID.TAGID_MARK;
pub const TAGID_NAV = ELEMENT_TAG_ID.TAGID_NAV;
pub const TAGID_SECTION = ELEMENT_TAG_ID.TAGID_SECTION;
pub const TAGID_PROGRESS = ELEMENT_TAG_ID.TAGID_PROGRESS;
pub const TAGID_MATHML_ANNOTATION_XML = ELEMENT_TAG_ID.TAGID_MATHML_ANNOTATION_XML;
pub const TAGID_MATHML_MATH = ELEMENT_TAG_ID.TAGID_MATHML_MATH;
pub const TAGID_MATHML_MI = ELEMENT_TAG_ID.TAGID_MATHML_MI;
pub const TAGID_MATHML_MN = ELEMENT_TAG_ID.TAGID_MATHML_MN;
pub const TAGID_MATHML_MO = ELEMENT_TAG_ID.TAGID_MATHML_MO;
pub const TAGID_MATHML_MS = ELEMENT_TAG_ID.TAGID_MATHML_MS;
pub const TAGID_MATHML_MTEXT = ELEMENT_TAG_ID.TAGID_MATHML_MTEXT;
pub const TAGID_DATALIST = ELEMENT_TAG_ID.TAGID_DATALIST;
pub const TAGID_TRACK = ELEMENT_TAG_ID.TAGID_TRACK;
pub const TAGID_ISINDEX = ELEMENT_TAG_ID.TAGID_ISINDEX;
pub const TAGID_COMMAND = ELEMENT_TAG_ID.TAGID_COMMAND;
pub const TAGID_DETAILS = ELEMENT_TAG_ID.TAGID_DETAILS;
pub const TAGID_SUMMARY = ELEMENT_TAG_ID.TAGID_SUMMARY;
pub const TAGID_X_MS_WEBVIEW = ELEMENT_TAG_ID.TAGID_X_MS_WEBVIEW;
pub const TAGID_COUNT = ELEMENT_TAG_ID.TAGID_COUNT;
pub const TAGID_LAST_PREDEFINED = ELEMENT_TAG_ID.TAGID_LAST_PREDEFINED;
pub const ELEMENT_TAG_ID_Max = ELEMENT_TAG_ID.ELEMENT_TAG_ID_Max;

pub const SELECTION_TYPE = enum(i32) {
    None = 0,
    Caret = 1,
    Text = 2,
    Control = 3,
    Max = 2147483647,
};
pub const SELECTION_TYPE_None = SELECTION_TYPE.None;
pub const SELECTION_TYPE_Caret = SELECTION_TYPE.Caret;
pub const SELECTION_TYPE_Text = SELECTION_TYPE.Text;
pub const SELECTION_TYPE_Control = SELECTION_TYPE.Control;
pub const SELECTION_TYPE_Max = SELECTION_TYPE.Max;

pub const SAVE_SEGMENTS_FLAGS = enum(i32) {
    NoIE4SelectionCompat = 1,
    FLAGS_Max = 2147483647,
};
pub const SAVE_SEGMENTS_NoIE4SelectionCompat = SAVE_SEGMENTS_FLAGS.NoIE4SelectionCompat;
pub const SAVE_SEGMENTS_FLAGS_Max = SAVE_SEGMENTS_FLAGS.FLAGS_Max;

pub const CARET_DIRECTION = enum(i32) {
    INDETERMINATE = 0,
    SAME = 1,
    BACKWARD = 2,
    FORWARD = 3,
    Max = 2147483647,
};
pub const CARET_DIRECTION_INDETERMINATE = CARET_DIRECTION.INDETERMINATE;
pub const CARET_DIRECTION_SAME = CARET_DIRECTION.SAME;
pub const CARET_DIRECTION_BACKWARD = CARET_DIRECTION.BACKWARD;
pub const CARET_DIRECTION_FORWARD = CARET_DIRECTION.FORWARD;
pub const CARET_DIRECTION_Max = CARET_DIRECTION.Max;

pub const LINE_DIRECTION = enum(i32) {
    RightToLeft = 1,
    LeftToRight = 2,
    Max = 2147483647,
};
pub const LINE_DIRECTION_RightToLeft = LINE_DIRECTION.RightToLeft;
pub const LINE_DIRECTION_LeftToRight = LINE_DIRECTION.LeftToRight;
pub const LINE_DIRECTION_Max = LINE_DIRECTION.Max;

pub const HT_OPTIONS = enum(i32) {
    _AllowAfterEOL = 1,
    IONS_Max = 2147483647,
};
pub const HT_OPT_AllowAfterEOL = HT_OPTIONS._AllowAfterEOL;
pub const HT_OPTIONS_Max = HT_OPTIONS.IONS_Max;

pub const HT_RESULTS = enum(i32) {
    Glyph = 1,
    Max = 2147483647,
};
pub const HT_RESULTS_Glyph = HT_RESULTS.Glyph;
pub const HT_RESULTS_Max = HT_RESULTS.Max;

pub const DISPLAY_MOVEUNIT = enum(i32) {
    PreviousLine = 1,
    NextLine = 2,
    CurrentLineStart = 3,
    CurrentLineEnd = 4,
    TopOfWindow = 5,
    BottomOfWindow = 6,
    Max = 2147483647,
};
pub const DISPLAY_MOVEUNIT_PreviousLine = DISPLAY_MOVEUNIT.PreviousLine;
pub const DISPLAY_MOVEUNIT_NextLine = DISPLAY_MOVEUNIT.NextLine;
pub const DISPLAY_MOVEUNIT_CurrentLineStart = DISPLAY_MOVEUNIT.CurrentLineStart;
pub const DISPLAY_MOVEUNIT_CurrentLineEnd = DISPLAY_MOVEUNIT.CurrentLineEnd;
pub const DISPLAY_MOVEUNIT_TopOfWindow = DISPLAY_MOVEUNIT.TopOfWindow;
pub const DISPLAY_MOVEUNIT_BottomOfWindow = DISPLAY_MOVEUNIT.BottomOfWindow;
pub const DISPLAY_MOVEUNIT_Max = DISPLAY_MOVEUNIT.Max;

pub const DISPLAY_GRAVITY = enum(i32) {
    PreviousLine = 1,
    NextLine = 2,
    Max = 2147483647,
};
pub const DISPLAY_GRAVITY_PreviousLine = DISPLAY_GRAVITY.PreviousLine;
pub const DISPLAY_GRAVITY_NextLine = DISPLAY_GRAVITY.NextLine;
pub const DISPLAY_GRAVITY_Max = DISPLAY_GRAVITY.Max;

pub const DISPLAY_BREAK = enum(i32) {
    None = 0,
    Block = 1,
    Break = 2,
    Max = 2147483647,
};
pub const DISPLAY_BREAK_None = DISPLAY_BREAK.None;
pub const DISPLAY_BREAK_Block = DISPLAY_BREAK.Block;
pub const DISPLAY_BREAK_Break = DISPLAY_BREAK.Break;
pub const DISPLAY_BREAK_Max = DISPLAY_BREAK.Max;

pub const COORD_SYSTEM = enum(i32) {
    GLOBAL = 0,
    PARENT = 1,
    CONTAINER = 2,
    CONTENT = 3,
    FRAME = 4,
    CLIENT = 5,
    Max = 2147483647,
};
pub const COORD_SYSTEM_GLOBAL = COORD_SYSTEM.GLOBAL;
pub const COORD_SYSTEM_PARENT = COORD_SYSTEM.PARENT;
pub const COORD_SYSTEM_CONTAINER = COORD_SYSTEM.CONTAINER;
pub const COORD_SYSTEM_CONTENT = COORD_SYSTEM.CONTENT;
pub const COORD_SYSTEM_FRAME = COORD_SYSTEM.FRAME;
pub const COORD_SYSTEM_CLIENT = COORD_SYSTEM.CLIENT;
pub const COORD_SYSTEM_Max = COORD_SYSTEM.Max;

pub const DEV_CONSOLE_MESSAGE_LEVEL = enum(i32) {
    CML_INFORMATIONAL = 0,
    CML_WARNING = 1,
    CML_ERROR = 2,
    EV_CONSOLE_MESSAGE_LEVEL_Max = 2147483647,
};
pub const DCML_INFORMATIONAL = DEV_CONSOLE_MESSAGE_LEVEL.CML_INFORMATIONAL;
pub const DCML_WARNING = DEV_CONSOLE_MESSAGE_LEVEL.CML_WARNING;
pub const DCML_ERROR = DEV_CONSOLE_MESSAGE_LEVEL.CML_ERROR;
pub const DEV_CONSOLE_MESSAGE_LEVEL_Max = DEV_CONSOLE_MESSAGE_LEVEL.EV_CONSOLE_MESSAGE_LEVEL_Max;

pub const DOM_EVENT_PHASE = enum(i32) {
    EP_CAPTURING_PHASE = 1,
    EP_AT_TARGET = 2,
    EP_BUBBLING_PHASE = 3,
    OM_EVENT_PHASE_Max = 2147483647,
};
pub const DEP_CAPTURING_PHASE = DOM_EVENT_PHASE.EP_CAPTURING_PHASE;
pub const DEP_AT_TARGET = DOM_EVENT_PHASE.EP_AT_TARGET;
pub const DEP_BUBBLING_PHASE = DOM_EVENT_PHASE.EP_BUBBLING_PHASE;
pub const DOM_EVENT_PHASE_Max = DOM_EVENT_PHASE.OM_EVENT_PHASE_Max;

pub const SCRIPT_TIMER_TYPE = enum(i32) {
    TT_TIMEOUT = 0,
    TT_INTERVAL = 1,
    TT_IMMEDIATE = 2,
    TT_ANIMATION_FRAME = 3,
    CRIPT_TIMER_TYPE_Max = 2147483647,
};
pub const STT_TIMEOUT = SCRIPT_TIMER_TYPE.TT_TIMEOUT;
pub const STT_INTERVAL = SCRIPT_TIMER_TYPE.TT_INTERVAL;
pub const STT_IMMEDIATE = SCRIPT_TIMER_TYPE.TT_IMMEDIATE;
pub const STT_ANIMATION_FRAME = SCRIPT_TIMER_TYPE.TT_ANIMATION_FRAME;
pub const SCRIPT_TIMER_TYPE_Max = SCRIPT_TIMER_TYPE.CRIPT_TIMER_TYPE_Max;

pub const HTML_PAINTER = enum(i32) {
    PAINTER_OPAQUE = 1,
    PAINTER_TRANSPARENT = 2,
    PAINTER_ALPHA = 4,
    PAINTER_COMPLEX = 8,
    PAINTER_OVERLAY = 16,
    PAINTER_HITTEST = 32,
    PAINTER_SURFACE = 256,
    PAINTER_3DSURFACE = 512,
    PAINTER_NOBAND = 1024,
    PAINTER_NODC = 4096,
    PAINTER_NOPHYSICALCLIP = 8192,
    PAINTER_NOSAVEDC = 16384,
    PAINTER_SUPPORTS_XFORM = 32768,
    PAINTER_EXPAND = 65536,
    PAINTER_NOSCROLLBITS = 131072,
    _PAINTER_Max = 2147483647,
};
pub const HTMLPAINTER_OPAQUE = HTML_PAINTER.PAINTER_OPAQUE;
pub const HTMLPAINTER_TRANSPARENT = HTML_PAINTER.PAINTER_TRANSPARENT;
pub const HTMLPAINTER_ALPHA = HTML_PAINTER.PAINTER_ALPHA;
pub const HTMLPAINTER_COMPLEX = HTML_PAINTER.PAINTER_COMPLEX;
pub const HTMLPAINTER_OVERLAY = HTML_PAINTER.PAINTER_OVERLAY;
pub const HTMLPAINTER_HITTEST = HTML_PAINTER.PAINTER_HITTEST;
pub const HTMLPAINTER_SURFACE = HTML_PAINTER.PAINTER_SURFACE;
pub const HTMLPAINTER_3DSURFACE = HTML_PAINTER.PAINTER_3DSURFACE;
pub const HTMLPAINTER_NOBAND = HTML_PAINTER.PAINTER_NOBAND;
pub const HTMLPAINTER_NODC = HTML_PAINTER.PAINTER_NODC;
pub const HTMLPAINTER_NOPHYSICALCLIP = HTML_PAINTER.PAINTER_NOPHYSICALCLIP;
pub const HTMLPAINTER_NOSAVEDC = HTML_PAINTER.PAINTER_NOSAVEDC;
pub const HTMLPAINTER_SUPPORTS_XFORM = HTML_PAINTER.PAINTER_SUPPORTS_XFORM;
pub const HTMLPAINTER_EXPAND = HTML_PAINTER.PAINTER_EXPAND;
pub const HTMLPAINTER_NOSCROLLBITS = HTML_PAINTER.PAINTER_NOSCROLLBITS;
pub const HTML_PAINTER_Max = HTML_PAINTER._PAINTER_Max;

pub const HTML_PAINT_ZORDER = enum(i32) {
    PAINT_ZORDER_NONE = 0,
    PAINT_ZORDER_REPLACE_ALL = 1,
    PAINT_ZORDER_REPLACE_CONTENT = 2,
    PAINT_ZORDER_REPLACE_BACKGROUND = 3,
    PAINT_ZORDER_BELOW_CONTENT = 4,
    PAINT_ZORDER_BELOW_FLOW = 5,
    PAINT_ZORDER_ABOVE_FLOW = 6,
    PAINT_ZORDER_ABOVE_CONTENT = 7,
    PAINT_ZORDER_WINDOW_TOP = 8,
    _PAINT_ZORDER_Max = 2147483647,
};
pub const HTMLPAINT_ZORDER_NONE = HTML_PAINT_ZORDER.PAINT_ZORDER_NONE;
pub const HTMLPAINT_ZORDER_REPLACE_ALL = HTML_PAINT_ZORDER.PAINT_ZORDER_REPLACE_ALL;
pub const HTMLPAINT_ZORDER_REPLACE_CONTENT = HTML_PAINT_ZORDER.PAINT_ZORDER_REPLACE_CONTENT;
pub const HTMLPAINT_ZORDER_REPLACE_BACKGROUND = HTML_PAINT_ZORDER.PAINT_ZORDER_REPLACE_BACKGROUND;
pub const HTMLPAINT_ZORDER_BELOW_CONTENT = HTML_PAINT_ZORDER.PAINT_ZORDER_BELOW_CONTENT;
pub const HTMLPAINT_ZORDER_BELOW_FLOW = HTML_PAINT_ZORDER.PAINT_ZORDER_BELOW_FLOW;
pub const HTMLPAINT_ZORDER_ABOVE_FLOW = HTML_PAINT_ZORDER.PAINT_ZORDER_ABOVE_FLOW;
pub const HTMLPAINT_ZORDER_ABOVE_CONTENT = HTML_PAINT_ZORDER.PAINT_ZORDER_ABOVE_CONTENT;
pub const HTMLPAINT_ZORDER_WINDOW_TOP = HTML_PAINT_ZORDER.PAINT_ZORDER_WINDOW_TOP;
pub const HTML_PAINT_ZORDER_Max = HTML_PAINT_ZORDER._PAINT_ZORDER_Max;

pub const HTML_PAINT_DRAW_FLAGS = enum(i32) {
    PAINT_DRAW_UPDATEREGION = 1,
    PAINT_DRAW_USE_XFORM = 2,
    _PAINT_DRAW_FLAGS_Max = 2147483647,
};
pub const HTMLPAINT_DRAW_UPDATEREGION = HTML_PAINT_DRAW_FLAGS.PAINT_DRAW_UPDATEREGION;
pub const HTMLPAINT_DRAW_USE_XFORM = HTML_PAINT_DRAW_FLAGS.PAINT_DRAW_USE_XFORM;
pub const HTML_PAINT_DRAW_FLAGS_Max = HTML_PAINT_DRAW_FLAGS._PAINT_DRAW_FLAGS_Max;

pub const HTML_PAINT_EVENT_FLAGS = enum(i32) {
    PAINT_EVENT_TARGET = 1,
    PAINT_EVENT_SETCURSOR = 2,
    _PAINT_EVENT_FLAGS_Max = 2147483647,
};
pub const HTMLPAINT_EVENT_TARGET = HTML_PAINT_EVENT_FLAGS.PAINT_EVENT_TARGET;
pub const HTMLPAINT_EVENT_SETCURSOR = HTML_PAINT_EVENT_FLAGS.PAINT_EVENT_SETCURSOR;
pub const HTML_PAINT_EVENT_FLAGS_Max = HTML_PAINT_EVENT_FLAGS._PAINT_EVENT_FLAGS_Max;

pub const HTML_PAINT_DRAW_INFO_FLAGS = enum(i32) {
    PAINT_DRAWINFO_VIEWPORT = 1,
    PAINT_DRAWINFO_UPDATEREGION = 2,
    PAINT_DRAWINFO_XFORM = 4,
    _PAINT_DRAW_INFO_FLAGS_Max = 2147483647,
};
pub const HTMLPAINT_DRAWINFO_VIEWPORT = HTML_PAINT_DRAW_INFO_FLAGS.PAINT_DRAWINFO_VIEWPORT;
pub const HTMLPAINT_DRAWINFO_UPDATEREGION = HTML_PAINT_DRAW_INFO_FLAGS.PAINT_DRAWINFO_UPDATEREGION;
pub const HTMLPAINT_DRAWINFO_XFORM = HTML_PAINT_DRAW_INFO_FLAGS.PAINT_DRAWINFO_XFORM;
pub const HTML_PAINT_DRAW_INFO_FLAGS_Max = HTML_PAINT_DRAW_INFO_FLAGS._PAINT_DRAW_INFO_FLAGS_Max;

pub const HTML_PAINTER_INFO = extern struct {
    lFlags: i32,
    lZOrder: i32,
    iidDrawObject: Guid,
    rcExpand: RECT,
};

pub const HTML_PAINT_XFORM = extern struct {
    eM11: f32,
    eM12: f32,
    eM21: f32,
    eM22: f32,
    eDx: f32,
    eDy: f32,
};

pub const HTML_PAINT_DRAW_INFO = extern struct {
    rcViewport: RECT,
    hrgnUpdate: ?HRGN,
    xform: HTML_PAINT_XFORM,
};

pub const HTMLDlgFlag = enum(i32) {
    No = 0,
    Yes = 1,
    NotSet = -1,
    _Max = 2147483647,
    pub const Off = .No;
    pub const @"0" = .No;
    pub const On = .Yes;
    pub const @"1" = .Yes;
};
pub const HTMLDlgFlagNo = HTMLDlgFlag.No;
pub const HTMLDlgFlagOff = HTMLDlgFlag.No;
pub const HTMLDlgFlag0 = HTMLDlgFlag.No;
pub const HTMLDlgFlagYes = HTMLDlgFlag.Yes;
pub const HTMLDlgFlagOn = HTMLDlgFlag.Yes;
pub const HTMLDlgFlag1 = HTMLDlgFlag.Yes;
pub const HTMLDlgFlagNotSet = HTMLDlgFlag.NotSet;
pub const HTMLDlgFlag_Max = HTMLDlgFlag._Max;

pub const HTMLDlgBorder = enum(i32) {
    Thin = 0,
    Thick = 262144,
    _Max = 2147483647,
};
pub const HTMLDlgBorderThin = HTMLDlgBorder.Thin;
pub const HTMLDlgBorderThick = HTMLDlgBorder.Thick;
pub const HTMLDlgBorder_Max = HTMLDlgBorder._Max;

pub const HTMLDlgEdge = enum(i32) {
    Sunken = 0,
    Raised = 16,
    _Max = 2147483647,
};
pub const HTMLDlgEdgeSunken = HTMLDlgEdge.Sunken;
pub const HTMLDlgEdgeRaised = HTMLDlgEdge.Raised;
pub const HTMLDlgEdge_Max = HTMLDlgEdge._Max;

pub const HTMLDlgCenter = enum(i32) {
    No = 0,
    Yes = 1,
    Desktop = 2,
    _Max = 2147483647,
    pub const Off = .No;
    pub const @"0" = .No;
    pub const On = .Yes;
    pub const @"1" = .Yes;
    pub const Parent = .Yes;
};
pub const HTMLDlgCenterNo = HTMLDlgCenter.No;
pub const HTMLDlgCenterOff = HTMLDlgCenter.No;
pub const HTMLDlgCenter0 = HTMLDlgCenter.No;
pub const HTMLDlgCenterYes = HTMLDlgCenter.Yes;
pub const HTMLDlgCenterOn = HTMLDlgCenter.Yes;
pub const HTMLDlgCenter1 = HTMLDlgCenter.Yes;
pub const HTMLDlgCenterParent = HTMLDlgCenter.Yes;
pub const HTMLDlgCenterDesktop = HTMLDlgCenter.Desktop;
pub const HTMLDlgCenter_Max = HTMLDlgCenter._Max;

pub const HTMLAppFlag = enum(i32) {
    No = 0,
    Yes = 1,
    _Max = 2147483647,
    pub const Off = .No;
    pub const @"0" = .No;
    pub const On = .Yes;
    pub const @"1" = .Yes;
};
pub const HTMLAppFlagNo = HTMLAppFlag.No;
pub const HTMLAppFlagOff = HTMLAppFlag.No;
pub const HTMLAppFlag0 = HTMLAppFlag.No;
pub const HTMLAppFlagYes = HTMLAppFlag.Yes;
pub const HTMLAppFlagOn = HTMLAppFlag.Yes;
pub const HTMLAppFlag1 = HTMLAppFlag.Yes;
pub const HTMLAppFlag_Max = HTMLAppFlag._Max;

pub const HTMLMinimizeFlag = enum(i32) {
    No = 0,
    Yes = 131072,
    _Max = 2147483647,
};
pub const HTMLMinimizeFlagNo = HTMLMinimizeFlag.No;
pub const HTMLMinimizeFlagYes = HTMLMinimizeFlag.Yes;
pub const HTMLMinimizeFlag_Max = HTMLMinimizeFlag._Max;

pub const HTMLMaximizeFlag = enum(i32) {
    No = 0,
    Yes = 65536,
    _Max = 2147483647,
};
pub const HTMLMaximizeFlagNo = HTMLMaximizeFlag.No;
pub const HTMLMaximizeFlagYes = HTMLMaximizeFlag.Yes;
pub const HTMLMaximizeFlag_Max = HTMLMaximizeFlag._Max;

pub const HTMLCaptionFlag = enum(i32) {
    No = 0,
    Yes = 12582912,
    _Max = 2147483647,
};
pub const HTMLCaptionFlagNo = HTMLCaptionFlag.No;
pub const HTMLCaptionFlagYes = HTMLCaptionFlag.Yes;
pub const HTMLCaptionFlag_Max = HTMLCaptionFlag._Max;

pub const HTMLSysMenuFlag = enum(i32) {
    No = 0,
    Yes = 524288,
    _Max = 2147483647,
};
pub const HTMLSysMenuFlagNo = HTMLSysMenuFlag.No;
pub const HTMLSysMenuFlagYes = HTMLSysMenuFlag.Yes;
pub const HTMLSysMenuFlag_Max = HTMLSysMenuFlag._Max;

pub const HTMLBorder = enum(i32) {
    None = 0,
    Thick = 262144,
    Dialog = 4194304,
    Thin = 8388608,
    _Max = 2147483647,
};
pub const HTMLBorderNone = HTMLBorder.None;
pub const HTMLBorderThick = HTMLBorder.Thick;
pub const HTMLBorderDialog = HTMLBorder.Dialog;
pub const HTMLBorderThin = HTMLBorder.Thin;
pub const HTMLBorder_Max = HTMLBorder._Max;

pub const HTMLBorderStyle = enum(i32) {
    Normal = 0,
    Raised = 256,
    Sunken = 512,
    combined = 768,
    Static = 131072,
    _Max = 2147483647,
};
pub const HTMLBorderStyleNormal = HTMLBorderStyle.Normal;
pub const HTMLBorderStyleRaised = HTMLBorderStyle.Raised;
pub const HTMLBorderStyleSunken = HTMLBorderStyle.Sunken;
pub const HTMLBorderStylecombined = HTMLBorderStyle.combined;
pub const HTMLBorderStyleStatic = HTMLBorderStyle.Static;
pub const HTMLBorderStyle_Max = HTMLBorderStyle._Max;

pub const HTMLWindowState = enum(i32) {
    Normal = 1,
    Maximize = 3,
    Minimize = 6,
    _Max = 2147483647,
};
pub const HTMLWindowStateNormal = HTMLWindowState.Normal;
pub const HTMLWindowStateMaximize = HTMLWindowState.Maximize;
pub const HTMLWindowStateMinimize = HTMLWindowState.Minimize;
pub const HTMLWindowState_Max = HTMLWindowState._Max;

pub const BEHAVIOR_EVENT = enum(i32) {
    EVENT_FIRST = 0,
    EVENT_DOCUMENTREADY = 1,
    EVENT_APPLYSTYLE = 2,
    EVENT_DOCUMENTCONTEXTCHANGE = 3,
    EVENT_CONTENTSAVE = 4,
    _EVENT_Max = 2147483647,
    pub const EVENT_CONTENTREADY = .EVENT_FIRST;
    pub const EVENT_LAST = .EVENT_CONTENTSAVE;
};
pub const BEHAVIOREVENT_FIRST = BEHAVIOR_EVENT.EVENT_FIRST;
pub const BEHAVIOREVENT_CONTENTREADY = BEHAVIOR_EVENT.EVENT_FIRST;
pub const BEHAVIOREVENT_DOCUMENTREADY = BEHAVIOR_EVENT.EVENT_DOCUMENTREADY;
pub const BEHAVIOREVENT_APPLYSTYLE = BEHAVIOR_EVENT.EVENT_APPLYSTYLE;
pub const BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = BEHAVIOR_EVENT.EVENT_DOCUMENTCONTEXTCHANGE;
pub const BEHAVIOREVENT_CONTENTSAVE = BEHAVIOR_EVENT.EVENT_CONTENTSAVE;
pub const BEHAVIOREVENT_LAST = BEHAVIOR_EVENT.EVENT_CONTENTSAVE;
pub const BEHAVIOR_EVENT_Max = BEHAVIOR_EVENT._EVENT_Max;

pub const BEHAVIOR_EVENT_FLAGS = enum(i32) {
    EVENTFLAGS_BUBBLE = 1,
    EVENTFLAGS_STANDARDADDITIVE = 2,
    _EVENT_FLAGS_Max = 2147483647,
};
pub const BEHAVIOREVENTFLAGS_BUBBLE = BEHAVIOR_EVENT_FLAGS.EVENTFLAGS_BUBBLE;
pub const BEHAVIOREVENTFLAGS_STANDARDADDITIVE = BEHAVIOR_EVENT_FLAGS.EVENTFLAGS_STANDARDADDITIVE;
pub const BEHAVIOR_EVENT_FLAGS_Max = BEHAVIOR_EVENT_FLAGS._EVENT_FLAGS_Max;

pub const BEHAVIOR_RENDER_INFO = enum(i32) {
    RENDERINFO_BEFOREBACKGROUND = 1,
    RENDERINFO_AFTERBACKGROUND = 2,
    RENDERINFO_BEFORECONTENT = 4,
    RENDERINFO_AFTERCONTENT = 8,
    RENDERINFO_AFTERFOREGROUND = 32,
    RENDERINFO_ABOVECONTENT = 40,
    RENDERINFO_ALLLAYERS = 255,
    RENDERINFO_DISABLEBACKGROUND = 256,
    RENDERINFO_DISABLENEGATIVEZ = 512,
    RENDERINFO_DISABLECONTENT = 1024,
    RENDERINFO_DISABLEPOSITIVEZ = 2048,
    RENDERINFO_DISABLEALLLAYERS = 3840,
    RENDERINFO_HITTESTING = 4096,
    RENDERINFO_SURFACE = 1048576,
    RENDERINFO_3DSURFACE = 2097152,
    _RENDER_INFO_Max = 2147483647,
};
pub const BEHAVIORRENDERINFO_BEFOREBACKGROUND = BEHAVIOR_RENDER_INFO.RENDERINFO_BEFOREBACKGROUND;
pub const BEHAVIORRENDERINFO_AFTERBACKGROUND = BEHAVIOR_RENDER_INFO.RENDERINFO_AFTERBACKGROUND;
pub const BEHAVIORRENDERINFO_BEFORECONTENT = BEHAVIOR_RENDER_INFO.RENDERINFO_BEFORECONTENT;
pub const BEHAVIORRENDERINFO_AFTERCONTENT = BEHAVIOR_RENDER_INFO.RENDERINFO_AFTERCONTENT;
pub const BEHAVIORRENDERINFO_AFTERFOREGROUND = BEHAVIOR_RENDER_INFO.RENDERINFO_AFTERFOREGROUND;
pub const BEHAVIORRENDERINFO_ABOVECONTENT = BEHAVIOR_RENDER_INFO.RENDERINFO_ABOVECONTENT;
pub const BEHAVIORRENDERINFO_ALLLAYERS = BEHAVIOR_RENDER_INFO.RENDERINFO_ALLLAYERS;
pub const BEHAVIORRENDERINFO_DISABLEBACKGROUND = BEHAVIOR_RENDER_INFO.RENDERINFO_DISABLEBACKGROUND;
pub const BEHAVIORRENDERINFO_DISABLENEGATIVEZ = BEHAVIOR_RENDER_INFO.RENDERINFO_DISABLENEGATIVEZ;
pub const BEHAVIORRENDERINFO_DISABLECONTENT = BEHAVIOR_RENDER_INFO.RENDERINFO_DISABLECONTENT;
pub const BEHAVIORRENDERINFO_DISABLEPOSITIVEZ = BEHAVIOR_RENDER_INFO.RENDERINFO_DISABLEPOSITIVEZ;
pub const BEHAVIORRENDERINFO_DISABLEALLLAYERS = BEHAVIOR_RENDER_INFO.RENDERINFO_DISABLEALLLAYERS;
pub const BEHAVIORRENDERINFO_HITTESTING = BEHAVIOR_RENDER_INFO.RENDERINFO_HITTESTING;
pub const BEHAVIORRENDERINFO_SURFACE = BEHAVIOR_RENDER_INFO.RENDERINFO_SURFACE;
pub const BEHAVIORRENDERINFO_3DSURFACE = BEHAVIOR_RENDER_INFO.RENDERINFO_3DSURFACE;
pub const BEHAVIOR_RENDER_INFO_Max = BEHAVIOR_RENDER_INFO._RENDER_INFO_Max;

pub const BEHAVIOR_RELATION = enum(i32) {
    FIRSTRELATION = 0,
    PARENT = 1,
    CHILD = 2,
    SIBLING = 3,
    RELATION_Max = 2147483647,
    pub const SAMEELEMENT = .FIRSTRELATION;
    pub const LASTRELATION = .SIBLING;
};
pub const BEHAVIOR_FIRSTRELATION = BEHAVIOR_RELATION.FIRSTRELATION;
pub const BEHAVIOR_SAMEELEMENT = BEHAVIOR_RELATION.FIRSTRELATION;
pub const BEHAVIOR_PARENT = BEHAVIOR_RELATION.PARENT;
pub const BEHAVIOR_CHILD = BEHAVIOR_RELATION.CHILD;
pub const BEHAVIOR_SIBLING = BEHAVIOR_RELATION.SIBLING;
pub const BEHAVIOR_LASTRELATION = BEHAVIOR_RELATION.SIBLING;
pub const BEHAVIOR_RELATION_Max = BEHAVIOR_RELATION.RELATION_Max;

pub const BEHAVIOR_LAYOUT_INFO = enum(i32) {
    LAYOUTINFO_FULLDELEGATION = 1,
    LAYOUTINFO_MODIFYNATURAL = 2,
    LAYOUTINFO_MAPSIZE = 4,
    _LAYOUT_INFO_Max = 2147483647,
};
pub const BEHAVIORLAYOUTINFO_FULLDELEGATION = BEHAVIOR_LAYOUT_INFO.LAYOUTINFO_FULLDELEGATION;
pub const BEHAVIORLAYOUTINFO_MODIFYNATURAL = BEHAVIOR_LAYOUT_INFO.LAYOUTINFO_MODIFYNATURAL;
pub const BEHAVIORLAYOUTINFO_MAPSIZE = BEHAVIOR_LAYOUT_INFO.LAYOUTINFO_MAPSIZE;
pub const BEHAVIOR_LAYOUT_INFO_Max = BEHAVIOR_LAYOUT_INFO._LAYOUT_INFO_Max;

pub const BEHAVIOR_LAYOUT_MODE = enum(i32) {
    LAYOUTMODE_NATURAL = 1,
    LAYOUTMODE_MINWIDTH = 2,
    LAYOUTMODE_MAXWIDTH = 4,
    LAYOUTMODE_MEDIA_RESOLUTION = 16384,
    LAYOUTMODE_FINAL_PERCENT = 32768,
    _LAYOUT_MODE_Max = 2147483647,
};
pub const BEHAVIORLAYOUTMODE_NATURAL = BEHAVIOR_LAYOUT_MODE.LAYOUTMODE_NATURAL;
pub const BEHAVIORLAYOUTMODE_MINWIDTH = BEHAVIOR_LAYOUT_MODE.LAYOUTMODE_MINWIDTH;
pub const BEHAVIORLAYOUTMODE_MAXWIDTH = BEHAVIOR_LAYOUT_MODE.LAYOUTMODE_MAXWIDTH;
pub const BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = BEHAVIOR_LAYOUT_MODE.LAYOUTMODE_MEDIA_RESOLUTION;
pub const BEHAVIORLAYOUTMODE_FINAL_PERCENT = BEHAVIOR_LAYOUT_MODE.LAYOUTMODE_FINAL_PERCENT;
pub const BEHAVIOR_LAYOUT_MODE_Max = BEHAVIOR_LAYOUT_MODE._LAYOUT_MODE_Max;

pub const ELEMENTDESCRIPTOR_FLAGS = enum(i32) {
    FLAGS_LITERAL = 1,
    FLAGS_NESTED_LITERAL = 2,
    _FLAGS_Max = 2147483647,
};
pub const ELEMENTDESCRIPTORFLAGS_LITERAL = ELEMENTDESCRIPTOR_FLAGS.FLAGS_LITERAL;
pub const ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = ELEMENTDESCRIPTOR_FLAGS.FLAGS_NESTED_LITERAL;
pub const ELEMENTDESCRIPTOR_FLAGS_Max = ELEMENTDESCRIPTOR_FLAGS._FLAGS_Max;

pub const ELEMENTNAMESPACE_FLAGS = enum(i32) {
    FLAGS_ALLOWANYTAG = 1,
    FLAGS_QUERYFORUNKNOWNTAGS = 2,
    _FLAGS_Max = 2147483647,
};
pub const ELEMENTNAMESPACEFLAGS_ALLOWANYTAG = ELEMENTNAMESPACE_FLAGS.FLAGS_ALLOWANYTAG;
pub const ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = ELEMENTNAMESPACE_FLAGS.FLAGS_QUERYFORUNKNOWNTAGS;
pub const ELEMENTNAMESPACE_FLAGS_Max = ELEMENTNAMESPACE_FLAGS._FLAGS_Max;

pub const VIEW_OBJECT_ALPHA_MODE = enum(i32) {
    IGNORE = 0,
    PREMULTIPLIED = 1,
    Max = 2147483647,
};
pub const VIEW_OBJECT_ALPHA_MODE_IGNORE = VIEW_OBJECT_ALPHA_MODE.IGNORE;
pub const VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED = VIEW_OBJECT_ALPHA_MODE.PREMULTIPLIED;
pub const VIEW_OBJECT_ALPHA_MODE_Max = VIEW_OBJECT_ALPHA_MODE.Max;

pub const VIEW_OBJECT_COMPOSITION_MODE = enum(i32) {
    LEGACY = 0,
    SURFACEPRESENTER = 1,
    Max = 2147483647,
};
pub const VIEW_OBJECT_COMPOSITION_MODE_LEGACY = VIEW_OBJECT_COMPOSITION_MODE.LEGACY;
pub const VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER = VIEW_OBJECT_COMPOSITION_MODE.SURFACEPRESENTER;
pub const VIEW_OBJECT_COMPOSITION_MODE_Max = VIEW_OBJECT_COMPOSITION_MODE.Max;

const IID_IHTMLEventObj_Value = Guid.initString("3050f32d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEventObj = &IID_IHTMLEventObj_Value;
pub const IHTMLEventObj = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_srcElement: *const fn(
            self: *const IHTMLEventObj,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_altKey: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ctrlKey: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shiftKey: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_returnValue: *const fn(
            self: *const IHTMLEventObj,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_returnValue: *const fn(
            self: *const IHTMLEventObj,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cancelBubble: *const fn(
            self: *const IHTMLEventObj,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cancelBubble: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fromElement: *const fn(
            self: *const IHTMLEventObj,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_toElement: *const fn(
            self: *const IHTMLEventObj,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_keyCode: *const fn(
            self: *const IHTMLEventObj,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_keyCode: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_button: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLEventObj,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_qualifier: *const fn(
            self: *const IHTMLEventObj,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_reason: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientX: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientY: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetX: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetY: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenX: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenY: *const fn(
            self: *const IHTMLEventObj,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_srcFilter: *const fn(
            self: *const IHTMLEventObj,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_srcElement(self: *const IHTMLEventObj, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_srcElement(self, p);
    }
    pub fn get_altKey(self: *const IHTMLEventObj, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_altKey(self, p);
    }
    pub fn get_ctrlKey(self: *const IHTMLEventObj, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ctrlKey(self, p);
    }
    pub fn get_shiftKey(self: *const IHTMLEventObj, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_shiftKey(self, p);
    }
    pub fn put_returnValue(self: *const IHTMLEventObj, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_returnValue(self, v);
    }
    pub fn get_returnValue(self: *const IHTMLEventObj, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_returnValue(self, p);
    }
    pub fn put_cancelBubble(self: *const IHTMLEventObj, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_cancelBubble(self, v);
    }
    pub fn get_cancelBubble(self: *const IHTMLEventObj, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_cancelBubble(self, p);
    }
    pub fn get_fromElement(self: *const IHTMLEventObj, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_fromElement(self, p);
    }
    pub fn get_toElement(self: *const IHTMLEventObj, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_toElement(self, p);
    }
    pub fn put_keyCode(self: *const IHTMLEventObj, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_keyCode(self, v);
    }
    pub fn get_keyCode(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_keyCode(self, p);
    }
    pub fn get_button(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_button(self, p);
    }
    pub fn get_type(self: *const IHTMLEventObj, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn get_qualifier(self: *const IHTMLEventObj, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_qualifier(self, p);
    }
    pub fn get_reason(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_reason(self, p);
    }
    pub fn get_x(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn get_y(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn get_clientX(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientX(self, p);
    }
    pub fn get_clientY(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientY(self, p);
    }
    pub fn get_offsetX(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetX(self, p);
    }
    pub fn get_offsetY(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetY(self, p);
    }
    pub fn get_screenX(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenX(self, p);
    }
    pub fn get_screenY(self: *const IHTMLEventObj, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenY(self, p);
    }
    pub fn get_srcFilter(self: *const IHTMLEventObj, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_srcFilter(self, p);
    }
};

const IID_IElementBehaviorSite_Value = Guid.initString("3050f427-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorSite = &IID_IElementBehaviorSite_Value;
pub const IElementBehaviorSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetElement: *const fn(
            self: *const IElementBehaviorSite,
            ppElement: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        RegisterNotification: *const fn(
            self: *const IElementBehaviorSite,
            lEvent: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetElement(self: *const IElementBehaviorSite, ppElement: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.GetElement(self, ppElement);
    }
    pub fn RegisterNotification(self: *const IElementBehaviorSite, lEvent: i32) callconv(.@"inline") HRESULT {
        return self.vtable.RegisterNotification(self, lEvent);
    }
};

const IID_IElementBehavior_Value = Guid.initString("3050f425-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehavior = &IID_IElementBehavior_Value;
pub const IElementBehavior = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn(
            self: *const IElementBehavior,
            pBehaviorSite: ?*IElementBehaviorSite,
        ) callconv(.winapi) HRESULT,
        Notify: *const fn(
            self: *const IElementBehavior,
            lEvent: i32,
            pVar: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        Detach: *const fn(
            self: *const IElementBehavior,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Init(self: *const IElementBehavior, pBehaviorSite: ?*IElementBehaviorSite) callconv(.@"inline") HRESULT {
        return self.vtable.Init(self, pBehaviorSite);
    }
    pub fn Notify(self: *const IElementBehavior, lEvent: i32, pVar: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.Notify(self, lEvent, pVar);
    }
    pub fn Detach(self: *const IElementBehavior) callconv(.@"inline") HRESULT {
        return self.vtable.Detach(self);
    }
};

const IID_IElementBehaviorFactory_Value = Guid.initString("3050f429-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorFactory = &IID_IElementBehaviorFactory_Value;
pub const IElementBehaviorFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindBehavior: *const fn(
            self: *const IElementBehaviorFactory,
            bstrBehavior: ?BSTR,
            bstrBehaviorUrl: ?BSTR,
            pSite: ?*IElementBehaviorSite,
            ppBehavior: ?*?*IElementBehavior,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FindBehavior(self: *const IElementBehaviorFactory, bstrBehavior: ?BSTR, bstrBehaviorUrl: ?BSTR, pSite: ?*IElementBehaviorSite, ppBehavior: ?*?*IElementBehavior) callconv(.@"inline") HRESULT {
        return self.vtable.FindBehavior(self, bstrBehavior, bstrBehaviorUrl, pSite, ppBehavior);
    }
};

const IID_IElementBehaviorSiteOM_Value = Guid.initString("3050f489-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorSiteOM = &IID_IElementBehaviorSiteOM_Value;
pub const IElementBehaviorSiteOM = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterEvent: *const fn(
            self: *const IElementBehaviorSiteOM,
            pchEvent: ?PWSTR,
            lFlags: i32,
            plCookie: ?*i32,
        ) callconv(.winapi) HRESULT,
        GetEventCookie: *const fn(
            self: *const IElementBehaviorSiteOM,
            pchEvent: ?PWSTR,
            plCookie: ?*i32,
        ) callconv(.winapi) HRESULT,
        FireEvent: *const fn(
            self: *const IElementBehaviorSiteOM,
            lCookie: i32,
            pEventObject: ?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
        CreateEventObject: *const fn(
            self: *const IElementBehaviorSiteOM,
            ppEventObject: ?*?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
        RegisterName: *const fn(
            self: *const IElementBehaviorSiteOM,
            pchName: ?PWSTR,
        ) callconv(.winapi) HRESULT,
        RegisterUrn: *const fn(
            self: *const IElementBehaviorSiteOM,
            pchUrn: ?PWSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RegisterEvent(self: *const IElementBehaviorSiteOM, pchEvent: ?PWSTR, lFlags: i32, plCookie: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.RegisterEvent(self, pchEvent, lFlags, plCookie);
    }
    pub fn GetEventCookie(self: *const IElementBehaviorSiteOM, pchEvent: ?PWSTR, plCookie: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetEventCookie(self, pchEvent, plCookie);
    }
    pub fn FireEvent(self: *const IElementBehaviorSiteOM, lCookie: i32, pEventObject: ?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.FireEvent(self, lCookie, pEventObject);
    }
    pub fn CreateEventObject(self: *const IElementBehaviorSiteOM, ppEventObject: ?*?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.CreateEventObject(self, ppEventObject);
    }
    pub fn RegisterName(self: *const IElementBehaviorSiteOM, pchName: ?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.RegisterName(self, pchName);
    }
    pub fn RegisterUrn(self: *const IElementBehaviorSiteOM, pchUrn: ?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.RegisterUrn(self, pchUrn);
    }
};

const IID_IElementBehaviorRender_Value = Guid.initString("3050f4aa-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorRender = &IID_IElementBehaviorRender_Value;
pub const IElementBehaviorRender = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Draw: *const fn(
            self: *const IElementBehaviorRender,
            hdc: ?HDC,
            lLayer: i32,
            pRect: ?*RECT,
            pReserved: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        GetRenderInfo: *const fn(
            self: *const IElementBehaviorRender,
            plRenderInfo: ?*i32,
        ) callconv(.winapi) HRESULT,
        HitTestPoint: *const fn(
            self: *const IElementBehaviorRender,
            pPoint: ?*POINT,
            pReserved: ?*IUnknown,
            pbHit: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Draw(self: *const IElementBehaviorRender, hdc: ?HDC, lLayer: i32, pRect: ?*RECT, pReserved: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.Draw(self, hdc, lLayer, pRect, pReserved);
    }
    pub fn GetRenderInfo(self: *const IElementBehaviorRender, plRenderInfo: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetRenderInfo(self, plRenderInfo);
    }
    pub fn HitTestPoint(self: *const IElementBehaviorRender, pPoint: ?*POINT, pReserved: ?*IUnknown, pbHit: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.HitTestPoint(self, pPoint, pReserved, pbHit);
    }
};

const IID_IElementBehaviorSiteRender_Value = Guid.initString("3050f4a7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorSiteRender = &IID_IElementBehaviorSiteRender_Value;
pub const IElementBehaviorSiteRender = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Invalidate: *const fn(
            self: *const IElementBehaviorSiteRender,
            pRect: ?*RECT,
        ) callconv(.winapi) HRESULT,
        InvalidateRenderInfo: *const fn(
            self: *const IElementBehaviorSiteRender,
        ) callconv(.winapi) HRESULT,
        InvalidateStyle: *const fn(
            self: *const IElementBehaviorSiteRender,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Invalidate(self: *const IElementBehaviorSiteRender, pRect: ?*RECT) callconv(.@"inline") HRESULT {
        return self.vtable.Invalidate(self, pRect);
    }
    pub fn InvalidateRenderInfo(self: *const IElementBehaviorSiteRender) callconv(.@"inline") HRESULT {
        return self.vtable.InvalidateRenderInfo(self);
    }
    pub fn InvalidateStyle(self: *const IElementBehaviorSiteRender) callconv(.@"inline") HRESULT {
        return self.vtable.InvalidateStyle(self);
    }
};

const IID_IDOMEvent_Value = Guid.initString("305104ba-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMEvent = &IID_IDOMEvent_Value;
pub const IDOMEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bubbles: *const fn(
            self: *const IDOMEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cancelable: *const fn(
            self: *const IDOMEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentTarget: *const fn(
            self: *const IDOMEvent,
            p: ?*?*IEventTarget,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultPrevented: *const fn(
            self: *const IDOMEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_eventPhase: *const fn(
            self: *const IDOMEvent,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const IDOMEvent,
            p: ?*?*IEventTarget,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_timeStamp: *const fn(
            self: *const IDOMEvent,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IDOMEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        initEvent: *const fn(
            self: *const IDOMEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
        ) callconv(.winapi) HRESULT,
        preventDefault: *const fn(
            self: *const IDOMEvent,
        ) callconv(.winapi) HRESULT,
        stopPropagation: *const fn(
            self: *const IDOMEvent,
        ) callconv(.winapi) HRESULT,
        stopImmediatePropagation: *const fn(
            self: *const IDOMEvent,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isTrusted: *const fn(
            self: *const IDOMEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cancelBubble: *const fn(
            self: *const IDOMEvent,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cancelBubble: *const fn(
            self: *const IDOMEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_srcElement: *const fn(
            self: *const IDOMEvent,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_bubbles(self: *const IDOMEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_bubbles(self, p);
    }
    pub fn get_cancelable(self: *const IDOMEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_cancelable(self, p);
    }
    pub fn get_currentTarget(self: *const IDOMEvent, p: ?*?*IEventTarget) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentTarget(self, p);
    }
    pub fn get_defaultPrevented(self: *const IDOMEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultPrevented(self, p);
    }
    pub fn get_eventPhase(self: *const IDOMEvent, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_eventPhase(self, p);
    }
    pub fn get_target(self: *const IDOMEvent, p: ?*?*IEventTarget) callconv(.@"inline") HRESULT {
        return self.vtable.get_target(self, p);
    }
    pub fn get_timeStamp(self: *const IDOMEvent, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_timeStamp(self, p);
    }
    pub fn get_type(self: *const IDOMEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn initEvent(self: *const IDOMEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16) callconv(.@"inline") HRESULT {
        return self.vtable.initEvent(self, eventType, canBubble, cancelable);
    }
    pub fn preventDefault(self: *const IDOMEvent) callconv(.@"inline") HRESULT {
        return self.vtable.preventDefault(self);
    }
    pub fn stopPropagation(self: *const IDOMEvent) callconv(.@"inline") HRESULT {
        return self.vtable.stopPropagation(self);
    }
    pub fn stopImmediatePropagation(self: *const IDOMEvent) callconv(.@"inline") HRESULT {
        return self.vtable.stopImmediatePropagation(self);
    }
    pub fn get_isTrusted(self: *const IDOMEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isTrusted(self, p);
    }
    pub fn put_cancelBubble(self: *const IDOMEvent, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_cancelBubble(self, v);
    }
    pub fn get_cancelBubble(self: *const IDOMEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_cancelBubble(self, p);
    }
    pub fn get_srcElement(self: *const IDOMEvent, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_srcElement(self, p);
    }
};

const IID_IHTMLDOMConstructor_Value = Guid.initString("3051049b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMConstructor = &IID_IHTMLDOMConstructor_Value;
pub const IHTMLDOMConstructor = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_constructor: *const fn(
            self: *const IHTMLDOMConstructor,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        LookupGetter: *const fn(
            self: *const IHTMLDOMConstructor,
            propname: ?BSTR,
            ppDispHandler: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        LookupSetter: *const fn(
            self: *const IHTMLDOMConstructor,
            propname: ?BSTR,
            ppDispHandler: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        DefineGetter: *const fn(
            self: *const IHTMLDOMConstructor,
            propname: ?BSTR,
            pdispHandler: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        DefineSetter: *const fn(
            self: *const IHTMLDOMConstructor,
            propname: ?BSTR,
            pdispHandler: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_constructor(self: *const IHTMLDOMConstructor, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_constructor(self, p);
    }
    pub fn LookupGetter(self: *const IHTMLDOMConstructor, propname: ?BSTR, ppDispHandler: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.LookupGetter(self, propname, ppDispHandler);
    }
    pub fn LookupSetter(self: *const IHTMLDOMConstructor, propname: ?BSTR, ppDispHandler: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.LookupSetter(self, propname, ppDispHandler);
    }
    pub fn DefineGetter(self: *const IHTMLDOMConstructor, propname: ?BSTR, pdispHandler: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.DefineGetter(self, propname, pdispHandler);
    }
    pub fn DefineSetter(self: *const IHTMLDOMConstructor, propname: ?BSTR, pdispHandler: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.DefineSetter(self, propname, pdispHandler);
    }
};

const IID_IHTMLStyleSheetRule_Value = Guid.initString("3050f357-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetRule = &IID_IHTMLStyleSheetRule_Value;
pub const IHTMLStyleSheetRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectorText: *const fn(
            self: *const IHTMLStyleSheetRule,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectorText: *const fn(
            self: *const IHTMLStyleSheetRule,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_style: *const fn(
            self: *const IHTMLStyleSheetRule,
            p: ?*?*IHTMLRuleStyle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readOnly: *const fn(
            self: *const IHTMLStyleSheetRule,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_selectorText(self: *const IHTMLStyleSheetRule, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectorText(self, v);
    }
    pub fn get_selectorText(self: *const IHTMLStyleSheetRule, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectorText(self, p);
    }
    pub fn get_style(self: *const IHTMLStyleSheetRule, p: ?*?*IHTMLRuleStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_style(self, p);
    }
    pub fn get_readOnly(self: *const IHTMLStyleSheetRule, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_readOnly(self, p);
    }
};

const IID_IHTMLCSSStyleDeclaration_Value = Guid.initString("30510740-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCSSStyleDeclaration = &IID_IHTMLCSSStyleDeclaration_Value;
pub const IHTMLCSSStyleDeclaration = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentRule: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getPropertyValue: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            bstrPropertyName: ?BSTR,
            pbstrPropertyValue: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        getPropertyPriority: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            bstrPropertyName: ?BSTR,
            pbstrPropertyPriority: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        removeProperty: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            bstrPropertyName: ?BSTR,
            pbstrPropertyValue: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        setProperty: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            bstrPropertyName: ?BSTR,
            pvarPropertyValue: ?*VARIANT,
            pvarPropertyPriority: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            index: i32,
            pbstrPropertyName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontFamily: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontFamily: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontVariant: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontVariant: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontWeight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontWeight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontSize: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontSize: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_font: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_font: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_color: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_color: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_background: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_background: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundRepeat: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundRepeat: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundAttachment: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundAttachment: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPositionX: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPositionX: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPositionY: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPositionY: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordSpacing: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordSpacing: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_letterSpacing: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_letterSpacing: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecoration: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecoration: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_verticalAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_verticalAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textTransform: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textTransform: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textIndent: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textIndent: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineHeight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineHeight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginTop: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginTop: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginRight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginRight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginBottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginBottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginLeft: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginLeft: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_margin: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_margin: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingTop: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingTop: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingRight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingRight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingBottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingBottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingLeft: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingLeft: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_padding: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_padding: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTop: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTop: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeft: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeft: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_styleFloat: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleFloat: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clear: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clear: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_display: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_display: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_visibility: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_visibility: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyleType: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyleType: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStylePosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStylePosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyleImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyleImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_whiteSpace: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_whiteSpace: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_top: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_top: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_left: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_left: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_zIndex: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zIndex: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflow: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflow: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakBefore: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakBefore: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakAfter: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakAfter: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cssText: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssText: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cursor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cursor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clip: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clip: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_filter: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filter: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tableLayout: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tableLayout: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderCollapse: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderCollapse: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_direction: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_direction: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_behavior: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_behavior: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_position: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_position: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_unicodeBidi: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unicodeBidi: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_right: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_right: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_imeMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyPosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyPosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyOverhang: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyOverhang: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridChar: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridChar: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridLine: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridLine: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridType: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridType: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGrid: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGrid: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAutospace: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAutospace: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordBreak: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordBreak: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineBreak: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineBreak: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textJustify: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textJustify: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textJustifyTrim: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textJustifyTrim: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textKashida: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textKashida: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflowX: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflowX: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflowY: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflowY: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_accelerator: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accelerator: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutFlow: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutFlow: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_zoom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zoom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordWrap: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordWrap: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textUnderlinePosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textUnderlinePosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarBaseColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarBaseColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarFaceColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarFaceColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbar3dLightColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbar3dLightColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarShadowColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarShadowColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarHighlightColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarHighlightColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarDarkShadowColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarDarkShadowColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarArrowColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarArrowColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarTrackColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarTrackColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_writingMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_writingMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAlignLast: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlignLast: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textKashidaSpace: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textKashidaSpace: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textOverflow: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textOverflow: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_minHeight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minHeight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msInterpolationMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msInterpolationMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxHeight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxHeight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_minWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_content: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_content: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_captionSide: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_captionSide: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_counterIncrement: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_counterIncrement: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_counterReset: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_counterReset: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outline: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outline: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_boxSizing: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boxSizing: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderSpacing: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderSpacing: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_orphans: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_orphans: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_widows: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_widows: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakInside: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakInside: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_emptyCells: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_emptyCells: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msBlockProgression: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msBlockProgression: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_quotes: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_quotes: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alignmentBaseline: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alignmentBaseline: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baselineShift: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baselineShift: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dominantBaseline: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dominantBaseline: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontSizeAdjust: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontSizeAdjust: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontStretch: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontStretch: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_opacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_opacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clipPath: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipPath: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clipRule: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipRule: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fill: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fill: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fillOpacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fillOpacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fillRule: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fillRule: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_kerning: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_kerning: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marker: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marker: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_markerEnd: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_markerEnd: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_markerMid: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_markerMid: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_markerStart: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_markerStart: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_mask: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mask: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pointerEvents: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pointerEvents: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_stopColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stopColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_stopOpacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stopOpacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_stroke: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stroke: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_strokeDasharray: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strokeDasharray: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_strokeDashoffset: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strokeDashoffset: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_strokeLinecap: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strokeLinecap: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_strokeLinejoin: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strokeLinejoin: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_strokeMiterlimit: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strokeMiterlimit: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_strokeOpacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strokeOpacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_strokeWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strokeWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAnchor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAnchor: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_glyphOrientationHorizontal: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_glyphOrientationHorizontal: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_glyphOrientationVertical: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_glyphOrientationVertical: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopLeftRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopLeftRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopRightRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopRightRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomRightRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomRightRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomLeftRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomLeftRadius: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clipTop: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipTop: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clipRight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipRight: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipBottom: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clipLeft: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipLeft: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cssFloat: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssFloat: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundClip: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundClip: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundSize: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundSize: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_boxShadow: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boxShadow: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTransform: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTransform: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTransformOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTransformOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLCSSStyleDeclaration, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get_parentRule(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentRule(self, p);
    }
    pub fn getPropertyValue(self: *const IHTMLCSSStyleDeclaration, bstrPropertyName: ?BSTR, pbstrPropertyValue: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getPropertyValue(self, bstrPropertyName, pbstrPropertyValue);
    }
    pub fn getPropertyPriority(self: *const IHTMLCSSStyleDeclaration, bstrPropertyName: ?BSTR, pbstrPropertyPriority: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getPropertyPriority(self, bstrPropertyName, pbstrPropertyPriority);
    }
    pub fn removeProperty(self: *const IHTMLCSSStyleDeclaration, bstrPropertyName: ?BSTR, pbstrPropertyValue: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.removeProperty(self, bstrPropertyName, pbstrPropertyValue);
    }
    pub fn setProperty(self: *const IHTMLCSSStyleDeclaration, bstrPropertyName: ?BSTR, pvarPropertyValue: ?*VARIANT, pvarPropertyPriority: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.setProperty(self, bstrPropertyName, pvarPropertyValue, pvarPropertyPriority);
    }
    pub fn item(self: *const IHTMLCSSStyleDeclaration, index: i32, pbstrPropertyName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, pbstrPropertyName);
    }
    pub fn put_fontFamily(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontFamily(self, v);
    }
    pub fn get_fontFamily(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontFamily(self, p);
    }
    pub fn put_fontStyle(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontStyle(self, v);
    }
    pub fn get_fontStyle(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontStyle(self, p);
    }
    pub fn put_fontVariant(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontVariant(self, v);
    }
    pub fn get_fontVariant(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontVariant(self, p);
    }
    pub fn put_fontWeight(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontWeight(self, v);
    }
    pub fn get_fontWeight(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontWeight(self, p);
    }
    pub fn put_fontSize(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontSize(self, v);
    }
    pub fn get_fontSize(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontSize(self, p);
    }
    pub fn put_font(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_font(self, v);
    }
    pub fn get_font(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_font(self, p);
    }
    pub fn put_color(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_color(self, v);
    }
    pub fn get_color(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_color(self, p);
    }
    pub fn put_background(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_background(self, v);
    }
    pub fn get_background(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_background(self, p);
    }
    pub fn put_backgroundColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundColor(self, v);
    }
    pub fn get_backgroundColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundColor(self, p);
    }
    pub fn put_backgroundImage(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundImage(self, v);
    }
    pub fn get_backgroundImage(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundImage(self, p);
    }
    pub fn put_backgroundRepeat(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundRepeat(self, v);
    }
    pub fn get_backgroundRepeat(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundRepeat(self, p);
    }
    pub fn put_backgroundAttachment(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundAttachment(self, v);
    }
    pub fn get_backgroundAttachment(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundAttachment(self, p);
    }
    pub fn put_backgroundPosition(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPosition(self, v);
    }
    pub fn get_backgroundPosition(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPosition(self, p);
    }
    pub fn put_backgroundPositionX(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPositionX(self, v);
    }
    pub fn get_backgroundPositionX(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPositionX(self, p);
    }
    pub fn put_backgroundPositionY(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPositionY(self, v);
    }
    pub fn get_backgroundPositionY(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPositionY(self, p);
    }
    pub fn put_wordSpacing(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordSpacing(self, v);
    }
    pub fn get_wordSpacing(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordSpacing(self, p);
    }
    pub fn put_letterSpacing(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_letterSpacing(self, v);
    }
    pub fn get_letterSpacing(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_letterSpacing(self, p);
    }
    pub fn put_textDecoration(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecoration(self, v);
    }
    pub fn get_textDecoration(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecoration(self, p);
    }
    pub fn put_verticalAlign(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_verticalAlign(self, v);
    }
    pub fn get_verticalAlign(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_verticalAlign(self, p);
    }
    pub fn put_textTransform(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textTransform(self, v);
    }
    pub fn get_textTransform(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textTransform(self, p);
    }
    pub fn put_textAlign(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAlign(self, v);
    }
    pub fn get_textAlign(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlign(self, p);
    }
    pub fn put_textIndent(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textIndent(self, v);
    }
    pub fn get_textIndent(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textIndent(self, p);
    }
    pub fn put_lineHeight(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineHeight(self, v);
    }
    pub fn get_lineHeight(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineHeight(self, p);
    }
    pub fn put_marginTop(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginTop(self, v);
    }
    pub fn get_marginTop(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginTop(self, p);
    }
    pub fn put_marginRight(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginRight(self, v);
    }
    pub fn get_marginRight(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginRight(self, p);
    }
    pub fn put_marginBottom(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginBottom(self, v);
    }
    pub fn get_marginBottom(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginBottom(self, p);
    }
    pub fn put_marginLeft(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginLeft(self, v);
    }
    pub fn get_marginLeft(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginLeft(self, p);
    }
    pub fn put_margin(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_margin(self, v);
    }
    pub fn get_margin(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_margin(self, p);
    }
    pub fn put_paddingTop(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingTop(self, v);
    }
    pub fn get_paddingTop(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingTop(self, p);
    }
    pub fn put_paddingRight(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingRight(self, v);
    }
    pub fn get_paddingRight(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingRight(self, p);
    }
    pub fn put_paddingBottom(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingBottom(self, v);
    }
    pub fn get_paddingBottom(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingBottom(self, p);
    }
    pub fn put_paddingLeft(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingLeft(self, v);
    }
    pub fn get_paddingLeft(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingLeft(self, p);
    }
    pub fn put_padding(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_padding(self, v);
    }
    pub fn get_padding(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_padding(self, p);
    }
    pub fn put_border(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_borderTop(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTop(self, v);
    }
    pub fn get_borderTop(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTop(self, p);
    }
    pub fn put_borderRight(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRight(self, v);
    }
    pub fn get_borderRight(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRight(self, p);
    }
    pub fn put_borderBottom(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottom(self, v);
    }
    pub fn get_borderBottom(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottom(self, p);
    }
    pub fn put_borderLeft(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeft(self, v);
    }
    pub fn get_borderLeft(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeft(self, p);
    }
    pub fn put_borderColor(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColor(self, v);
    }
    pub fn get_borderColor(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
    pub fn put_borderTopColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopColor(self, v);
    }
    pub fn get_borderTopColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopColor(self, p);
    }
    pub fn put_borderRightColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightColor(self, v);
    }
    pub fn get_borderRightColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightColor(self, p);
    }
    pub fn put_borderBottomColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomColor(self, v);
    }
    pub fn get_borderBottomColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomColor(self, p);
    }
    pub fn put_borderLeftColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftColor(self, v);
    }
    pub fn get_borderLeftColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftColor(self, p);
    }
    pub fn put_borderWidth(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderWidth(self, v);
    }
    pub fn get_borderWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderWidth(self, p);
    }
    pub fn put_borderTopWidth(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopWidth(self, v);
    }
    pub fn get_borderTopWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopWidth(self, p);
    }
    pub fn put_borderRightWidth(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightWidth(self, v);
    }
    pub fn get_borderRightWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightWidth(self, p);
    }
    pub fn put_borderBottomWidth(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomWidth(self, v);
    }
    pub fn get_borderBottomWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomWidth(self, p);
    }
    pub fn put_borderLeftWidth(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftWidth(self, v);
    }
    pub fn get_borderLeftWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftWidth(self, p);
    }
    pub fn put_borderStyle(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderStyle(self, v);
    }
    pub fn get_borderStyle(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderStyle(self, p);
    }
    pub fn put_borderTopStyle(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopStyle(self, v);
    }
    pub fn get_borderTopStyle(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopStyle(self, p);
    }
    pub fn put_borderRightStyle(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightStyle(self, v);
    }
    pub fn get_borderRightStyle(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightStyle(self, p);
    }
    pub fn put_borderBottomStyle(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomStyle(self, v);
    }
    pub fn get_borderBottomStyle(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomStyle(self, p);
    }
    pub fn put_borderLeftStyle(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftStyle(self, v);
    }
    pub fn get_borderLeftStyle(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftStyle(self, p);
    }
    pub fn put_width(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_styleFloat(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_styleFloat(self, v);
    }
    pub fn get_styleFloat(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleFloat(self, p);
    }
    pub fn put_clear(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clear(self, v);
    }
    pub fn get_clear(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clear(self, p);
    }
    pub fn put_display(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_display(self, v);
    }
    pub fn get_display(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_display(self, p);
    }
    pub fn put_visibility(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_visibility(self, v);
    }
    pub fn get_visibility(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_visibility(self, p);
    }
    pub fn put_listStyleType(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyleType(self, v);
    }
    pub fn get_listStyleType(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyleType(self, p);
    }
    pub fn put_listStylePosition(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStylePosition(self, v);
    }
    pub fn get_listStylePosition(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStylePosition(self, p);
    }
    pub fn put_listStyleImage(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyleImage(self, v);
    }
    pub fn get_listStyleImage(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyleImage(self, p);
    }
    pub fn put_listStyle(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyle(self, v);
    }
    pub fn get_listStyle(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyle(self, p);
    }
    pub fn put_whiteSpace(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_whiteSpace(self, v);
    }
    pub fn get_whiteSpace(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_whiteSpace(self, p);
    }
    pub fn put_top(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_top(self, v);
    }
    pub fn get_top(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_top(self, p);
    }
    pub fn put_left(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_left(self, v);
    }
    pub fn get_left(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_left(self, p);
    }
    pub fn put_zIndex(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_zIndex(self, v);
    }
    pub fn get_zIndex(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_zIndex(self, p);
    }
    pub fn put_overflow(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflow(self, v);
    }
    pub fn get_overflow(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflow(self, p);
    }
    pub fn put_pageBreakBefore(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakBefore(self, v);
    }
    pub fn get_pageBreakBefore(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakBefore(self, p);
    }
    pub fn put_pageBreakAfter(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakAfter(self, v);
    }
    pub fn get_pageBreakAfter(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakAfter(self, p);
    }
    pub fn put_cssText(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cssText(self, v);
    }
    pub fn get_cssText(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssText(self, p);
    }
    pub fn put_cursor(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cursor(self, v);
    }
    pub fn get_cursor(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cursor(self, p);
    }
    pub fn put_clip(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clip(self, v);
    }
    pub fn get_clip(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clip(self, p);
    }
    pub fn put_filter(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_filter(self, v);
    }
    pub fn get_filter(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_filter(self, p);
    }
    pub fn put_tableLayout(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_tableLayout(self, v);
    }
    pub fn get_tableLayout(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_tableLayout(self, p);
    }
    pub fn put_borderCollapse(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderCollapse(self, v);
    }
    pub fn get_borderCollapse(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderCollapse(self, p);
    }
    pub fn put_direction(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_direction(self, v);
    }
    pub fn get_direction(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_direction(self, p);
    }
    pub fn put_behavior(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_behavior(self, v);
    }
    pub fn get_behavior(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_behavior(self, p);
    }
    pub fn put_position(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_position(self, v);
    }
    pub fn get_position(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_position(self, p);
    }
    pub fn put_unicodeBidi(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_unicodeBidi(self, v);
    }
    pub fn get_unicodeBidi(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_unicodeBidi(self, p);
    }
    pub fn put_bottom(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bottom(self, v);
    }
    pub fn get_bottom(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bottom(self, p);
    }
    pub fn put_right(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_right(self, v);
    }
    pub fn get_right(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_right(self, p);
    }
    pub fn put_imeMode(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_imeMode(self, v);
    }
    pub fn get_imeMode(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeMode(self, p);
    }
    pub fn put_rubyAlign(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyAlign(self, v);
    }
    pub fn get_rubyAlign(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyAlign(self, p);
    }
    pub fn put_rubyPosition(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyPosition(self, v);
    }
    pub fn get_rubyPosition(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyPosition(self, p);
    }
    pub fn put_rubyOverhang(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyOverhang(self, v);
    }
    pub fn get_rubyOverhang(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyOverhang(self, p);
    }
    pub fn put_layoutGridChar(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridChar(self, v);
    }
    pub fn get_layoutGridChar(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridChar(self, p);
    }
    pub fn put_layoutGridLine(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridLine(self, v);
    }
    pub fn get_layoutGridLine(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridLine(self, p);
    }
    pub fn put_layoutGridMode(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridMode(self, v);
    }
    pub fn get_layoutGridMode(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridMode(self, p);
    }
    pub fn put_layoutGridType(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridType(self, v);
    }
    pub fn get_layoutGridType(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridType(self, p);
    }
    pub fn put_layoutGrid(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGrid(self, v);
    }
    pub fn get_layoutGrid(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGrid(self, p);
    }
    pub fn put_textAutospace(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAutospace(self, v);
    }
    pub fn get_textAutospace(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAutospace(self, p);
    }
    pub fn put_wordBreak(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordBreak(self, v);
    }
    pub fn get_wordBreak(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordBreak(self, p);
    }
    pub fn put_lineBreak(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineBreak(self, v);
    }
    pub fn get_lineBreak(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineBreak(self, p);
    }
    pub fn put_textJustify(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textJustify(self, v);
    }
    pub fn get_textJustify(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textJustify(self, p);
    }
    pub fn put_textJustifyTrim(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textJustifyTrim(self, v);
    }
    pub fn get_textJustifyTrim(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textJustifyTrim(self, p);
    }
    pub fn put_textKashida(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textKashida(self, v);
    }
    pub fn get_textKashida(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textKashida(self, p);
    }
    pub fn put_overflowX(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflowX(self, v);
    }
    pub fn get_overflowX(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflowX(self, p);
    }
    pub fn put_overflowY(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflowY(self, v);
    }
    pub fn get_overflowY(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflowY(self, p);
    }
    pub fn put_accelerator(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_accelerator(self, v);
    }
    pub fn get_accelerator(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accelerator(self, p);
    }
    pub fn put_layoutFlow(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutFlow(self, v);
    }
    pub fn get_layoutFlow(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutFlow(self, p);
    }
    pub fn put_zoom(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_zoom(self, v);
    }
    pub fn get_zoom(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_zoom(self, p);
    }
    pub fn put_wordWrap(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordWrap(self, v);
    }
    pub fn get_wordWrap(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordWrap(self, p);
    }
    pub fn put_textUnderlinePosition(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textUnderlinePosition(self, v);
    }
    pub fn get_textUnderlinePosition(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textUnderlinePosition(self, p);
    }
    pub fn put_scrollbarBaseColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarBaseColor(self, v);
    }
    pub fn get_scrollbarBaseColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarBaseColor(self, p);
    }
    pub fn put_scrollbarFaceColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarFaceColor(self, v);
    }
    pub fn get_scrollbarFaceColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarFaceColor(self, p);
    }
    pub fn put_scrollbar3dLightColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbar3dLightColor(self, v);
    }
    pub fn get_scrollbar3dLightColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbar3dLightColor(self, p);
    }
    pub fn put_scrollbarShadowColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarShadowColor(self, v);
    }
    pub fn get_scrollbarShadowColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarShadowColor(self, p);
    }
    pub fn put_scrollbarHighlightColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarHighlightColor(self, v);
    }
    pub fn get_scrollbarHighlightColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarHighlightColor(self, p);
    }
    pub fn put_scrollbarDarkShadowColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarDarkShadowColor(self, v);
    }
    pub fn get_scrollbarDarkShadowColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarDarkShadowColor(self, p);
    }
    pub fn put_scrollbarArrowColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarArrowColor(self, v);
    }
    pub fn get_scrollbarArrowColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarArrowColor(self, p);
    }
    pub fn put_scrollbarTrackColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarTrackColor(self, v);
    }
    pub fn get_scrollbarTrackColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarTrackColor(self, p);
    }
    pub fn put_writingMode(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_writingMode(self, v);
    }
    pub fn get_writingMode(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_writingMode(self, p);
    }
    pub fn put_textAlignLast(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAlignLast(self, v);
    }
    pub fn get_textAlignLast(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlignLast(self, p);
    }
    pub fn put_textKashidaSpace(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textKashidaSpace(self, v);
    }
    pub fn get_textKashidaSpace(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textKashidaSpace(self, p);
    }
    pub fn put_textOverflow(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textOverflow(self, v);
    }
    pub fn get_textOverflow(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textOverflow(self, p);
    }
    pub fn put_minHeight(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_minHeight(self, v);
    }
    pub fn get_minHeight(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_minHeight(self, p);
    }
    pub fn put_msInterpolationMode(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msInterpolationMode(self, v);
    }
    pub fn get_msInterpolationMode(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msInterpolationMode(self, p);
    }
    pub fn put_maxHeight(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxHeight(self, v);
    }
    pub fn get_maxHeight(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxHeight(self, p);
    }
    pub fn put_minWidth(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_minWidth(self, v);
    }
    pub fn get_minWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_minWidth(self, p);
    }
    pub fn put_maxWidth(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxWidth(self, v);
    }
    pub fn get_maxWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxWidth(self, p);
    }
    pub fn put_content(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_content(self, v);
    }
    pub fn get_content(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_content(self, p);
    }
    pub fn put_captionSide(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_captionSide(self, v);
    }
    pub fn get_captionSide(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_captionSide(self, p);
    }
    pub fn put_counterIncrement(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_counterIncrement(self, v);
    }
    pub fn get_counterIncrement(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_counterIncrement(self, p);
    }
    pub fn put_counterReset(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_counterReset(self, v);
    }
    pub fn get_counterReset(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_counterReset(self, p);
    }
    pub fn put_outline(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_outline(self, v);
    }
    pub fn get_outline(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outline(self, p);
    }
    pub fn put_outlineWidth(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineWidth(self, v);
    }
    pub fn get_outlineWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineWidth(self, p);
    }
    pub fn put_outlineStyle(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineStyle(self, v);
    }
    pub fn get_outlineStyle(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineStyle(self, p);
    }
    pub fn put_outlineColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineColor(self, v);
    }
    pub fn get_outlineColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineColor(self, p);
    }
    pub fn put_boxSizing(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_boxSizing(self, v);
    }
    pub fn get_boxSizing(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_boxSizing(self, p);
    }
    pub fn put_borderSpacing(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderSpacing(self, v);
    }
    pub fn get_borderSpacing(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderSpacing(self, p);
    }
    pub fn put_orphans(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_orphans(self, v);
    }
    pub fn get_orphans(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_orphans(self, p);
    }
    pub fn put_widows(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_widows(self, v);
    }
    pub fn get_widows(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_widows(self, p);
    }
    pub fn put_pageBreakInside(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakInside(self, v);
    }
    pub fn get_pageBreakInside(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakInside(self, p);
    }
    pub fn put_emptyCells(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_emptyCells(self, v);
    }
    pub fn get_emptyCells(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_emptyCells(self, p);
    }
    pub fn put_msBlockProgression(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msBlockProgression(self, v);
    }
    pub fn get_msBlockProgression(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msBlockProgression(self, p);
    }
    pub fn put_quotes(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_quotes(self, v);
    }
    pub fn get_quotes(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_quotes(self, p);
    }
    pub fn put_alignmentBaseline(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alignmentBaseline(self, v);
    }
    pub fn get_alignmentBaseline(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alignmentBaseline(self, p);
    }
    pub fn put_baselineShift(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_baselineShift(self, v);
    }
    pub fn get_baselineShift(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_baselineShift(self, p);
    }
    pub fn put_dominantBaseline(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dominantBaseline(self, v);
    }
    pub fn get_dominantBaseline(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dominantBaseline(self, p);
    }
    pub fn put_fontSizeAdjust(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontSizeAdjust(self, v);
    }
    pub fn get_fontSizeAdjust(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontSizeAdjust(self, p);
    }
    pub fn put_fontStretch(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontStretch(self, v);
    }
    pub fn get_fontStretch(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontStretch(self, p);
    }
    pub fn put_opacity(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_opacity(self, v);
    }
    pub fn get_opacity(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_opacity(self, p);
    }
    pub fn put_clipPath(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clipPath(self, v);
    }
    pub fn get_clipPath(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipPath(self, p);
    }
    pub fn put_clipRule(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clipRule(self, v);
    }
    pub fn get_clipRule(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipRule(self, p);
    }
    pub fn put_fill(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fill(self, v);
    }
    pub fn get_fill(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fill(self, p);
    }
    pub fn put_fillOpacity(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_fillOpacity(self, v);
    }
    pub fn get_fillOpacity(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fillOpacity(self, p);
    }
    pub fn put_fillRule(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fillRule(self, v);
    }
    pub fn get_fillRule(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fillRule(self, p);
    }
    pub fn put_kerning(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_kerning(self, v);
    }
    pub fn get_kerning(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_kerning(self, p);
    }
    pub fn put_marker(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_marker(self, v);
    }
    pub fn get_marker(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_marker(self, p);
    }
    pub fn put_markerEnd(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_markerEnd(self, v);
    }
    pub fn get_markerEnd(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_markerEnd(self, p);
    }
    pub fn put_markerMid(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_markerMid(self, v);
    }
    pub fn get_markerMid(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_markerMid(self, p);
    }
    pub fn put_markerStart(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_markerStart(self, v);
    }
    pub fn get_markerStart(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_markerStart(self, p);
    }
    pub fn put_mask(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_mask(self, v);
    }
    pub fn get_mask(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_mask(self, p);
    }
    pub fn put_pointerEvents(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pointerEvents(self, v);
    }
    pub fn get_pointerEvents(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pointerEvents(self, p);
    }
    pub fn put_stopColor(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_stopColor(self, v);
    }
    pub fn get_stopColor(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_stopColor(self, p);
    }
    pub fn put_stopOpacity(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_stopOpacity(self, v);
    }
    pub fn get_stopOpacity(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_stopOpacity(self, p);
    }
    pub fn put_stroke(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_stroke(self, v);
    }
    pub fn get_stroke(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_stroke(self, p);
    }
    pub fn put_strokeDasharray(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_strokeDasharray(self, v);
    }
    pub fn get_strokeDasharray(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_strokeDasharray(self, p);
    }
    pub fn put_strokeDashoffset(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_strokeDashoffset(self, v);
    }
    pub fn get_strokeDashoffset(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_strokeDashoffset(self, p);
    }
    pub fn put_strokeLinecap(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_strokeLinecap(self, v);
    }
    pub fn get_strokeLinecap(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_strokeLinecap(self, p);
    }
    pub fn put_strokeLinejoin(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_strokeLinejoin(self, v);
    }
    pub fn get_strokeLinejoin(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_strokeLinejoin(self, p);
    }
    pub fn put_strokeMiterlimit(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_strokeMiterlimit(self, v);
    }
    pub fn get_strokeMiterlimit(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_strokeMiterlimit(self, p);
    }
    pub fn put_strokeOpacity(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_strokeOpacity(self, v);
    }
    pub fn get_strokeOpacity(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_strokeOpacity(self, p);
    }
    pub fn put_strokeWidth(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_strokeWidth(self, v);
    }
    pub fn get_strokeWidth(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_strokeWidth(self, p);
    }
    pub fn put_textAnchor(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAnchor(self, v);
    }
    pub fn get_textAnchor(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAnchor(self, p);
    }
    pub fn put_glyphOrientationHorizontal(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_glyphOrientationHorizontal(self, v);
    }
    pub fn get_glyphOrientationHorizontal(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_glyphOrientationHorizontal(self, p);
    }
    pub fn put_glyphOrientationVertical(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_glyphOrientationVertical(self, v);
    }
    pub fn get_glyphOrientationVertical(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_glyphOrientationVertical(self, p);
    }
    pub fn put_borderRadius(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRadius(self, v);
    }
    pub fn get_borderRadius(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRadius(self, p);
    }
    pub fn put_borderTopLeftRadius(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopLeftRadius(self, v);
    }
    pub fn get_borderTopLeftRadius(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopLeftRadius(self, p);
    }
    pub fn put_borderTopRightRadius(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopRightRadius(self, v);
    }
    pub fn get_borderTopRightRadius(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopRightRadius(self, p);
    }
    pub fn put_borderBottomRightRadius(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomRightRadius(self, v);
    }
    pub fn get_borderBottomRightRadius(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomRightRadius(self, p);
    }
    pub fn put_borderBottomLeftRadius(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomLeftRadius(self, v);
    }
    pub fn get_borderBottomLeftRadius(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomLeftRadius(self, p);
    }
    pub fn put_clipTop(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_clipTop(self, v);
    }
    pub fn get_clipTop(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipTop(self, p);
    }
    pub fn put_clipRight(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_clipRight(self, v);
    }
    pub fn get_clipRight(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipRight(self, p);
    }
    pub fn get_clipBottom(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipBottom(self, p);
    }
    pub fn put_clipLeft(self: *const IHTMLCSSStyleDeclaration, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_clipLeft(self, v);
    }
    pub fn get_clipLeft(self: *const IHTMLCSSStyleDeclaration, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipLeft(self, p);
    }
    pub fn put_cssFloat(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cssFloat(self, v);
    }
    pub fn get_cssFloat(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssFloat(self, p);
    }
    pub fn put_backgroundClip(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundClip(self, v);
    }
    pub fn get_backgroundClip(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundClip(self, p);
    }
    pub fn put_backgroundOrigin(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundOrigin(self, v);
    }
    pub fn get_backgroundOrigin(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundOrigin(self, p);
    }
    pub fn put_backgroundSize(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundSize(self, v);
    }
    pub fn get_backgroundSize(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundSize(self, p);
    }
    pub fn put_boxShadow(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_boxShadow(self, v);
    }
    pub fn get_boxShadow(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_boxShadow(self, p);
    }
    pub fn put_msTransform(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTransform(self, v);
    }
    pub fn get_msTransform(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTransform(self, p);
    }
    pub fn put_msTransformOrigin(self: *const IHTMLCSSStyleDeclaration, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTransformOrigin(self, v);
    }
    pub fn get_msTransformOrigin(self: *const IHTMLCSSStyleDeclaration, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTransformOrigin(self, p);
    }
};

const IID_IHTMLCSSStyleDeclaration2_Value = Guid.initString("305107d1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCSSStyleDeclaration2 = &IID_IHTMLCSSStyleDeclaration2_Value;
pub const IHTMLCSSStyleDeclaration2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollChaining: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollChaining: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msContentZooming: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msContentZooming: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msContentZoomSnapType: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msContentZoomSnapType: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollRails: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollRails: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msContentZoomChaining: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msContentZoomChaining: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollSnapType: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollSnapType: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msContentZoomLimit: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msContentZoomLimit: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msContentZoomSnap: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msContentZoomSnap: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msContentZoomSnapPoints: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msContentZoomSnapPoints: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msContentZoomLimitMin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msContentZoomLimitMin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msContentZoomLimitMax: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msContentZoomLimitMax: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollSnapX: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollSnapX: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollSnapY: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollSnapY: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollSnapPointsX: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollSnapPointsX: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollSnapPointsY: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollSnapPointsY: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msGridColumn: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msGridColumn: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msGridColumnAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msGridColumnAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msGridColumns: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msGridColumns: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msGridColumnSpan: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msGridColumnSpan: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msGridRow: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msGridRow: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msGridRowAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msGridRowAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msGridRows: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msGridRows: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msGridRowSpan: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msGridRowSpan: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msWrapThrough: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msWrapThrough: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msWrapMargin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msWrapMargin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msWrapFlow: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msWrapFlow: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimationName: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimationName: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimationDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimationDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimationTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimationTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimationDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimationDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimationDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimationDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimationPlayState: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimationPlayState: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimationIterationCount: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimationIterationCount: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimation: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimation: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msAnimationFillMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msAnimationFillMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_colorInterpolationFilters: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_colorInterpolationFilters: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnCount: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnCount: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnGap: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnGap: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnFill: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnFill: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnSpan: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnSpan: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columns: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columns: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnRule: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnRule: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnRuleColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnRuleColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnRuleStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnRuleStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_columnRuleWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnRuleWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_breakBefore: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_breakBefore: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_breakAfter: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_breakAfter: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_breakInside: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_breakInside: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_floodColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_floodColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_floodOpacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_floodOpacity: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lightingColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lightingColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollLimitXMin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollLimitXMin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollLimitYMin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollLimitYMin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollLimitXMax: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollLimitXMax: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollLimitYMax: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollLimitYMax: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollLimit: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollLimit: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textShadow: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textShadow: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlowFrom: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlowFrom: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlowInto: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlowInto: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msHyphens: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msHyphens: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msHyphenateLimitZone: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msHyphenateLimitZone: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msHyphenateLimitChars: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msHyphenateLimitChars: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msHyphenateLimitLines: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msHyphenateLimitLines: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msHighContrastAdjust: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msHighContrastAdjust: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enableBackground: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enableBackground: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFontFeatureSettings: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFontFeatureSettings: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msUserSelect: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msUserSelect: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msOverflowStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msOverflowStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTransformStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTransformStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msBackfaceVisibility: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msBackfaceVisibility: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msPerspective: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msPerspective: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msPerspectiveOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msPerspectiveOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTransitionProperty: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTransitionProperty: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTransitionDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTransitionDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTransitionTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTransitionTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTransitionDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTransitionDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTransition: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTransition: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTouchAction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTouchAction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msScrollTranslation: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msScrollTranslation: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlex: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlex: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexPositive: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexPositive: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexNegative: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexNegative: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexPreferredSize: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexPreferredSize: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexFlow: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexFlow: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexWrap: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexWrap: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexItemAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexItemAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexPack: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexPack: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexLinePack: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexLinePack: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msFlexOrder: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFlexOrder: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTouchSelect: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTouchSelect: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_transform: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transform: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_transformOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transformOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_transformStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transformStyle: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backfaceVisibility: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backfaceVisibility: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_perspective: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_perspective: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_perspectiveOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_perspectiveOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_transitionProperty: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transitionProperty: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_transitionDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transitionDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_transitionTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transitionTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_transitionDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transitionDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_transition: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transition: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontFeatureSettings: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontFeatureSettings: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animationName: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationName: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animationDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animationTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animationDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animationDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animationPlayState: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationPlayState: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animationIterationCount: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationIterationCount: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animation: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animation: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animationFillMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationFillMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_msScrollChaining(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollChaining(self, v);
    }
    pub fn get_msScrollChaining(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollChaining(self, p);
    }
    pub fn put_msContentZooming(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msContentZooming(self, v);
    }
    pub fn get_msContentZooming(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msContentZooming(self, p);
    }
    pub fn put_msContentZoomSnapType(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msContentZoomSnapType(self, v);
    }
    pub fn get_msContentZoomSnapType(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msContentZoomSnapType(self, p);
    }
    pub fn put_msScrollRails(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollRails(self, v);
    }
    pub fn get_msScrollRails(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollRails(self, p);
    }
    pub fn put_msContentZoomChaining(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msContentZoomChaining(self, v);
    }
    pub fn get_msContentZoomChaining(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msContentZoomChaining(self, p);
    }
    pub fn put_msScrollSnapType(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollSnapType(self, v);
    }
    pub fn get_msScrollSnapType(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollSnapType(self, p);
    }
    pub fn put_msContentZoomLimit(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msContentZoomLimit(self, v);
    }
    pub fn get_msContentZoomLimit(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msContentZoomLimit(self, p);
    }
    pub fn put_msContentZoomSnap(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msContentZoomSnap(self, v);
    }
    pub fn get_msContentZoomSnap(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msContentZoomSnap(self, p);
    }
    pub fn put_msContentZoomSnapPoints(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msContentZoomSnapPoints(self, v);
    }
    pub fn get_msContentZoomSnapPoints(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msContentZoomSnapPoints(self, p);
    }
    pub fn put_msContentZoomLimitMin(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msContentZoomLimitMin(self, v);
    }
    pub fn get_msContentZoomLimitMin(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msContentZoomLimitMin(self, p);
    }
    pub fn put_msContentZoomLimitMax(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msContentZoomLimitMax(self, v);
    }
    pub fn get_msContentZoomLimitMax(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msContentZoomLimitMax(self, p);
    }
    pub fn put_msScrollSnapX(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollSnapX(self, v);
    }
    pub fn get_msScrollSnapX(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollSnapX(self, p);
    }
    pub fn put_msScrollSnapY(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollSnapY(self, v);
    }
    pub fn get_msScrollSnapY(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollSnapY(self, p);
    }
    pub fn put_msScrollSnapPointsX(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollSnapPointsX(self, v);
    }
    pub fn get_msScrollSnapPointsX(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollSnapPointsX(self, p);
    }
    pub fn put_msScrollSnapPointsY(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollSnapPointsY(self, v);
    }
    pub fn get_msScrollSnapPointsY(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollSnapPointsY(self, p);
    }
    pub fn put_msGridColumn(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msGridColumn(self, v);
    }
    pub fn get_msGridColumn(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msGridColumn(self, p);
    }
    pub fn put_msGridColumnAlign(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msGridColumnAlign(self, v);
    }
    pub fn get_msGridColumnAlign(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msGridColumnAlign(self, p);
    }
    pub fn put_msGridColumns(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msGridColumns(self, v);
    }
    pub fn get_msGridColumns(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msGridColumns(self, p);
    }
    pub fn put_msGridColumnSpan(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msGridColumnSpan(self, v);
    }
    pub fn get_msGridColumnSpan(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msGridColumnSpan(self, p);
    }
    pub fn put_msGridRow(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msGridRow(self, v);
    }
    pub fn get_msGridRow(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msGridRow(self, p);
    }
    pub fn put_msGridRowAlign(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msGridRowAlign(self, v);
    }
    pub fn get_msGridRowAlign(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msGridRowAlign(self, p);
    }
    pub fn put_msGridRows(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msGridRows(self, v);
    }
    pub fn get_msGridRows(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msGridRows(self, p);
    }
    pub fn put_msGridRowSpan(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msGridRowSpan(self, v);
    }
    pub fn get_msGridRowSpan(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msGridRowSpan(self, p);
    }
    pub fn put_msWrapThrough(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msWrapThrough(self, v);
    }
    pub fn get_msWrapThrough(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msWrapThrough(self, p);
    }
    pub fn put_msWrapMargin(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msWrapMargin(self, v);
    }
    pub fn get_msWrapMargin(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msWrapMargin(self, p);
    }
    pub fn put_msWrapFlow(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msWrapFlow(self, v);
    }
    pub fn get_msWrapFlow(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msWrapFlow(self, p);
    }
    pub fn put_msAnimationName(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimationName(self, v);
    }
    pub fn get_msAnimationName(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimationName(self, p);
    }
    pub fn put_msAnimationDuration(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimationDuration(self, v);
    }
    pub fn get_msAnimationDuration(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimationDuration(self, p);
    }
    pub fn put_msAnimationTimingFunction(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimationTimingFunction(self, v);
    }
    pub fn get_msAnimationTimingFunction(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimationTimingFunction(self, p);
    }
    pub fn put_msAnimationDelay(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimationDelay(self, v);
    }
    pub fn get_msAnimationDelay(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimationDelay(self, p);
    }
    pub fn put_msAnimationDirection(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimationDirection(self, v);
    }
    pub fn get_msAnimationDirection(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimationDirection(self, p);
    }
    pub fn put_msAnimationPlayState(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimationPlayState(self, v);
    }
    pub fn get_msAnimationPlayState(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimationPlayState(self, p);
    }
    pub fn put_msAnimationIterationCount(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimationIterationCount(self, v);
    }
    pub fn get_msAnimationIterationCount(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimationIterationCount(self, p);
    }
    pub fn put_msAnimation(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimation(self, v);
    }
    pub fn get_msAnimation(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimation(self, p);
    }
    pub fn put_msAnimationFillMode(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msAnimationFillMode(self, v);
    }
    pub fn get_msAnimationFillMode(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msAnimationFillMode(self, p);
    }
    pub fn put_colorInterpolationFilters(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_colorInterpolationFilters(self, v);
    }
    pub fn get_colorInterpolationFilters(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_colorInterpolationFilters(self, p);
    }
    pub fn put_columnCount(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnCount(self, v);
    }
    pub fn get_columnCount(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnCount(self, p);
    }
    pub fn put_columnWidth(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnWidth(self, v);
    }
    pub fn get_columnWidth(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnWidth(self, p);
    }
    pub fn put_columnGap(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnGap(self, v);
    }
    pub fn get_columnGap(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnGap(self, p);
    }
    pub fn put_columnFill(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnFill(self, v);
    }
    pub fn get_columnFill(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnFill(self, p);
    }
    pub fn put_columnSpan(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnSpan(self, v);
    }
    pub fn get_columnSpan(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnSpan(self, p);
    }
    pub fn put_columns(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_columns(self, v);
    }
    pub fn get_columns(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_columns(self, p);
    }
    pub fn put_columnRule(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnRule(self, v);
    }
    pub fn get_columnRule(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnRule(self, p);
    }
    pub fn put_columnRuleColor(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnRuleColor(self, v);
    }
    pub fn get_columnRuleColor(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnRuleColor(self, p);
    }
    pub fn put_columnRuleStyle(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnRuleStyle(self, v);
    }
    pub fn get_columnRuleStyle(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnRuleStyle(self, p);
    }
    pub fn put_columnRuleWidth(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_columnRuleWidth(self, v);
    }
    pub fn get_columnRuleWidth(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_columnRuleWidth(self, p);
    }
    pub fn put_breakBefore(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_breakBefore(self, v);
    }
    pub fn get_breakBefore(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_breakBefore(self, p);
    }
    pub fn put_breakAfter(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_breakAfter(self, v);
    }
    pub fn get_breakAfter(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_breakAfter(self, p);
    }
    pub fn put_breakInside(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_breakInside(self, v);
    }
    pub fn get_breakInside(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_breakInside(self, p);
    }
    pub fn put_floodColor(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_floodColor(self, v);
    }
    pub fn get_floodColor(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_floodColor(self, p);
    }
    pub fn put_floodOpacity(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_floodOpacity(self, v);
    }
    pub fn get_floodOpacity(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_floodOpacity(self, p);
    }
    pub fn put_lightingColor(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_lightingColor(self, v);
    }
    pub fn get_lightingColor(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_lightingColor(self, p);
    }
    pub fn put_msScrollLimitXMin(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollLimitXMin(self, v);
    }
    pub fn get_msScrollLimitXMin(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollLimitXMin(self, p);
    }
    pub fn put_msScrollLimitYMin(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollLimitYMin(self, v);
    }
    pub fn get_msScrollLimitYMin(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollLimitYMin(self, p);
    }
    pub fn put_msScrollLimitXMax(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollLimitXMax(self, v);
    }
    pub fn get_msScrollLimitXMax(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollLimitXMax(self, p);
    }
    pub fn put_msScrollLimitYMax(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollLimitYMax(self, v);
    }
    pub fn get_msScrollLimitYMax(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollLimitYMax(self, p);
    }
    pub fn put_msScrollLimit(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollLimit(self, v);
    }
    pub fn get_msScrollLimit(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollLimit(self, p);
    }
    pub fn put_textShadow(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textShadow(self, v);
    }
    pub fn get_textShadow(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textShadow(self, p);
    }
    pub fn put_msFlowFrom(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlowFrom(self, v);
    }
    pub fn get_msFlowFrom(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlowFrom(self, p);
    }
    pub fn put_msFlowInto(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlowInto(self, v);
    }
    pub fn get_msFlowInto(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlowInto(self, p);
    }
    pub fn put_msHyphens(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msHyphens(self, v);
    }
    pub fn get_msHyphens(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msHyphens(self, p);
    }
    pub fn put_msHyphenateLimitZone(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msHyphenateLimitZone(self, v);
    }
    pub fn get_msHyphenateLimitZone(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msHyphenateLimitZone(self, p);
    }
    pub fn put_msHyphenateLimitChars(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msHyphenateLimitChars(self, v);
    }
    pub fn get_msHyphenateLimitChars(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msHyphenateLimitChars(self, p);
    }
    pub fn put_msHyphenateLimitLines(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msHyphenateLimitLines(self, v);
    }
    pub fn get_msHyphenateLimitLines(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msHyphenateLimitLines(self, p);
    }
    pub fn put_msHighContrastAdjust(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msHighContrastAdjust(self, v);
    }
    pub fn get_msHighContrastAdjust(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msHighContrastAdjust(self, p);
    }
    pub fn put_enableBackground(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_enableBackground(self, v);
    }
    pub fn get_enableBackground(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_enableBackground(self, p);
    }
    pub fn put_msFontFeatureSettings(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFontFeatureSettings(self, v);
    }
    pub fn get_msFontFeatureSettings(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFontFeatureSettings(self, p);
    }
    pub fn put_msUserSelect(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msUserSelect(self, v);
    }
    pub fn get_msUserSelect(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msUserSelect(self, p);
    }
    pub fn put_msOverflowStyle(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msOverflowStyle(self, v);
    }
    pub fn get_msOverflowStyle(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msOverflowStyle(self, p);
    }
    pub fn put_msTransformStyle(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTransformStyle(self, v);
    }
    pub fn get_msTransformStyle(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTransformStyle(self, p);
    }
    pub fn put_msBackfaceVisibility(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msBackfaceVisibility(self, v);
    }
    pub fn get_msBackfaceVisibility(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msBackfaceVisibility(self, p);
    }
    pub fn put_msPerspective(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msPerspective(self, v);
    }
    pub fn get_msPerspective(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msPerspective(self, p);
    }
    pub fn put_msPerspectiveOrigin(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msPerspectiveOrigin(self, v);
    }
    pub fn get_msPerspectiveOrigin(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msPerspectiveOrigin(self, p);
    }
    pub fn put_msTransitionProperty(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTransitionProperty(self, v);
    }
    pub fn get_msTransitionProperty(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTransitionProperty(self, p);
    }
    pub fn put_msTransitionDuration(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTransitionDuration(self, v);
    }
    pub fn get_msTransitionDuration(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTransitionDuration(self, p);
    }
    pub fn put_msTransitionTimingFunction(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTransitionTimingFunction(self, v);
    }
    pub fn get_msTransitionTimingFunction(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTransitionTimingFunction(self, p);
    }
    pub fn put_msTransitionDelay(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTransitionDelay(self, v);
    }
    pub fn get_msTransitionDelay(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTransitionDelay(self, p);
    }
    pub fn put_msTransition(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTransition(self, v);
    }
    pub fn get_msTransition(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTransition(self, p);
    }
    pub fn put_msTouchAction(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTouchAction(self, v);
    }
    pub fn get_msTouchAction(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTouchAction(self, p);
    }
    pub fn put_msScrollTranslation(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msScrollTranslation(self, v);
    }
    pub fn get_msScrollTranslation(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msScrollTranslation(self, p);
    }
    pub fn put_msFlex(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlex(self, v);
    }
    pub fn get_msFlex(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlex(self, p);
    }
    pub fn put_msFlexPositive(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexPositive(self, v);
    }
    pub fn get_msFlexPositive(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexPositive(self, p);
    }
    pub fn put_msFlexNegative(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexNegative(self, v);
    }
    pub fn get_msFlexNegative(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexNegative(self, p);
    }
    pub fn put_msFlexPreferredSize(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexPreferredSize(self, v);
    }
    pub fn get_msFlexPreferredSize(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexPreferredSize(self, p);
    }
    pub fn put_msFlexFlow(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexFlow(self, v);
    }
    pub fn get_msFlexFlow(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexFlow(self, p);
    }
    pub fn put_msFlexDirection(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexDirection(self, v);
    }
    pub fn get_msFlexDirection(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexDirection(self, p);
    }
    pub fn put_msFlexWrap(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexWrap(self, v);
    }
    pub fn get_msFlexWrap(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexWrap(self, p);
    }
    pub fn put_msFlexAlign(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexAlign(self, v);
    }
    pub fn get_msFlexAlign(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexAlign(self, p);
    }
    pub fn put_msFlexItemAlign(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexItemAlign(self, v);
    }
    pub fn get_msFlexItemAlign(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexItemAlign(self, p);
    }
    pub fn put_msFlexPack(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexPack(self, v);
    }
    pub fn get_msFlexPack(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexPack(self, p);
    }
    pub fn put_msFlexLinePack(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexLinePack(self, v);
    }
    pub fn get_msFlexLinePack(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexLinePack(self, p);
    }
    pub fn put_msFlexOrder(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msFlexOrder(self, v);
    }
    pub fn get_msFlexOrder(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFlexOrder(self, p);
    }
    pub fn put_msTouchSelect(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTouchSelect(self, v);
    }
    pub fn get_msTouchSelect(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTouchSelect(self, p);
    }
    pub fn put_transform(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_transform(self, v);
    }
    pub fn get_transform(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_transform(self, p);
    }
    pub fn put_transformOrigin(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_transformOrigin(self, v);
    }
    pub fn get_transformOrigin(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_transformOrigin(self, p);
    }
    pub fn put_transformStyle(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_transformStyle(self, v);
    }
    pub fn get_transformStyle(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_transformStyle(self, p);
    }
    pub fn put_backfaceVisibility(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backfaceVisibility(self, v);
    }
    pub fn get_backfaceVisibility(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backfaceVisibility(self, p);
    }
    pub fn put_perspective(self: *const IHTMLCSSStyleDeclaration2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_perspective(self, v);
    }
    pub fn get_perspective(self: *const IHTMLCSSStyleDeclaration2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_perspective(self, p);
    }
    pub fn put_perspectiveOrigin(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_perspectiveOrigin(self, v);
    }
    pub fn get_perspectiveOrigin(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_perspectiveOrigin(self, p);
    }
    pub fn put_transitionProperty(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_transitionProperty(self, v);
    }
    pub fn get_transitionProperty(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_transitionProperty(self, p);
    }
    pub fn put_transitionDuration(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_transitionDuration(self, v);
    }
    pub fn get_transitionDuration(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_transitionDuration(self, p);
    }
    pub fn put_transitionTimingFunction(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_transitionTimingFunction(self, v);
    }
    pub fn get_transitionTimingFunction(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_transitionTimingFunction(self, p);
    }
    pub fn put_transitionDelay(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_transitionDelay(self, v);
    }
    pub fn get_transitionDelay(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_transitionDelay(self, p);
    }
    pub fn put_transition(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_transition(self, v);
    }
    pub fn get_transition(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_transition(self, p);
    }
    pub fn put_fontFeatureSettings(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontFeatureSettings(self, v);
    }
    pub fn get_fontFeatureSettings(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontFeatureSettings(self, p);
    }
    pub fn put_animationName(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animationName(self, v);
    }
    pub fn get_animationName(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationName(self, p);
    }
    pub fn put_animationDuration(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animationDuration(self, v);
    }
    pub fn get_animationDuration(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationDuration(self, p);
    }
    pub fn put_animationTimingFunction(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animationTimingFunction(self, v);
    }
    pub fn get_animationTimingFunction(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationTimingFunction(self, p);
    }
    pub fn put_animationDelay(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animationDelay(self, v);
    }
    pub fn get_animationDelay(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationDelay(self, p);
    }
    pub fn put_animationDirection(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animationDirection(self, v);
    }
    pub fn get_animationDirection(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationDirection(self, p);
    }
    pub fn put_animationPlayState(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animationPlayState(self, v);
    }
    pub fn get_animationPlayState(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationPlayState(self, p);
    }
    pub fn put_animationIterationCount(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animationIterationCount(self, v);
    }
    pub fn get_animationIterationCount(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationIterationCount(self, p);
    }
    pub fn put_animation(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animation(self, v);
    }
    pub fn get_animation(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animation(self, p);
    }
    pub fn put_animationFillMode(self: *const IHTMLCSSStyleDeclaration2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_animationFillMode(self, v);
    }
    pub fn get_animationFillMode(self: *const IHTMLCSSStyleDeclaration2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationFillMode(self, p);
    }
};

const IID_IHTMLCSSStyleDeclaration3_Value = Guid.initString("3051085c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCSSStyleDeclaration3 = &IID_IHTMLCSSStyleDeclaration3_Value;
pub const IHTMLCSSStyleDeclaration3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_flex: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_flex: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_flexDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_flexDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_flexWrap: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_flexWrap: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_flexFlow: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_flexFlow: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_flexGrow: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_flexGrow: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_flexShrink: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_flexShrink: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_flexBasis: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_flexBasis: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_justifyContent: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_justifyContent: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alignItems: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alignItems: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alignSelf: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alignSelf: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alignContent: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alignContent: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderImageSource: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderImageSource: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderImageSlice: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderImageSlice: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderImageWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderImageWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderImageOutset: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderImageOutset: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderImageRepeat: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderImageRepeat: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msImeAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msImeAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTextCombineHorizontal: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTextCombineHorizontal: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_touchAction: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_touchAction: *const fn(
            self: *const IHTMLCSSStyleDeclaration3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_flex(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_flex(self, v);
    }
    pub fn get_flex(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_flex(self, p);
    }
    pub fn put_flexDirection(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_flexDirection(self, v);
    }
    pub fn get_flexDirection(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_flexDirection(self, p);
    }
    pub fn put_flexWrap(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_flexWrap(self, v);
    }
    pub fn get_flexWrap(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_flexWrap(self, p);
    }
    pub fn put_flexFlow(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_flexFlow(self, v);
    }
    pub fn get_flexFlow(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_flexFlow(self, p);
    }
    pub fn put_flexGrow(self: *const IHTMLCSSStyleDeclaration3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_flexGrow(self, v);
    }
    pub fn get_flexGrow(self: *const IHTMLCSSStyleDeclaration3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_flexGrow(self, p);
    }
    pub fn put_flexShrink(self: *const IHTMLCSSStyleDeclaration3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_flexShrink(self, v);
    }
    pub fn get_flexShrink(self: *const IHTMLCSSStyleDeclaration3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_flexShrink(self, p);
    }
    pub fn put_flexBasis(self: *const IHTMLCSSStyleDeclaration3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_flexBasis(self, v);
    }
    pub fn get_flexBasis(self: *const IHTMLCSSStyleDeclaration3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_flexBasis(self, p);
    }
    pub fn put_justifyContent(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_justifyContent(self, v);
    }
    pub fn get_justifyContent(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_justifyContent(self, p);
    }
    pub fn put_alignItems(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alignItems(self, v);
    }
    pub fn get_alignItems(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alignItems(self, p);
    }
    pub fn put_alignSelf(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alignSelf(self, v);
    }
    pub fn get_alignSelf(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alignSelf(self, p);
    }
    pub fn put_alignContent(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alignContent(self, v);
    }
    pub fn get_alignContent(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alignContent(self, p);
    }
    pub fn put_borderImage(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderImage(self, v);
    }
    pub fn get_borderImage(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderImage(self, p);
    }
    pub fn put_borderImageSource(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderImageSource(self, v);
    }
    pub fn get_borderImageSource(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderImageSource(self, p);
    }
    pub fn put_borderImageSlice(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderImageSlice(self, v);
    }
    pub fn get_borderImageSlice(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderImageSlice(self, p);
    }
    pub fn put_borderImageWidth(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderImageWidth(self, v);
    }
    pub fn get_borderImageWidth(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderImageWidth(self, p);
    }
    pub fn put_borderImageOutset(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderImageOutset(self, v);
    }
    pub fn get_borderImageOutset(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderImageOutset(self, p);
    }
    pub fn put_borderImageRepeat(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderImageRepeat(self, v);
    }
    pub fn get_borderImageRepeat(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderImageRepeat(self, p);
    }
    pub fn put_msImeAlign(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msImeAlign(self, v);
    }
    pub fn get_msImeAlign(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msImeAlign(self, p);
    }
    pub fn put_msTextCombineHorizontal(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTextCombineHorizontal(self, v);
    }
    pub fn get_msTextCombineHorizontal(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTextCombineHorizontal(self, p);
    }
    pub fn put_touchAction(self: *const IHTMLCSSStyleDeclaration3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_touchAction(self, v);
    }
    pub fn get_touchAction(self: *const IHTMLCSSStyleDeclaration3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_touchAction(self, p);
    }
};

const IID_IHTMLCSSStyleDeclaration4_Value = Guid.initString("d6100f3b-27c8-4132-afea-f0e4b1e00060");
pub const IID_IHTMLCSSStyleDeclaration4 = &IID_IHTMLCSSStyleDeclaration4_Value;
pub const IHTMLCSSStyleDeclaration4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAppearance: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAppearance: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitUserSelect: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitUserSelect: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBoxAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBoxAlign: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBoxOrdinalGroup: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBoxOrdinalGroup: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBoxPack: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBoxPack: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBoxFlex: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBoxFlex: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBoxOrient: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBoxOrient: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBoxDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBoxDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitTransform: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitTransform: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundSize: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundSize: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackfaceVisibility: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackfaceVisibility: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimation: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimation: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitTransition: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitTransition: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimationName: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimationName: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimationDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimationDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimationTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimationTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimationDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimationDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimationIterationCount: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimationIterationCount: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimationDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimationDirection: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimationPlayState: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimationPlayState: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitTransitionProperty: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitTransitionProperty: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitTransitionDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitTransitionDuration: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitTransitionTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitTransitionTimingFunction: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitTransitionDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitTransitionDelay: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundAttachment: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundAttachment: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundColor: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundClip: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundClip: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundRepeat: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundRepeat: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundPosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundPosition: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundPositionX: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundPositionX: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackgroundPositionY: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackgroundPositionY: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBackground: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBackground: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitTransformOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitTransformOrigin: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msTextSizeAdjust: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msTextSizeAdjust: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitTextSizeAdjust: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitTextSizeAdjust: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBorderImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBorderImage: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBorderImageSource: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBorderImageSource: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBorderImageSlice: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBorderImageSlice: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBorderImageWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBorderImageWidth: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBorderImageOutset: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBorderImageOutset: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBorderImageRepeat: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBorderImageRepeat: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitBoxSizing: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitBoxSizing: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_webkitAnimationFillMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_webkitAnimationFillMode: *const fn(
            self: *const IHTMLCSSStyleDeclaration4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_webkitAppearance(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAppearance(self, v);
    }
    pub fn get_webkitAppearance(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAppearance(self, p);
    }
    pub fn put_webkitUserSelect(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitUserSelect(self, v);
    }
    pub fn get_webkitUserSelect(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitUserSelect(self, p);
    }
    pub fn put_webkitBoxAlign(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBoxAlign(self, v);
    }
    pub fn get_webkitBoxAlign(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBoxAlign(self, p);
    }
    pub fn put_webkitBoxOrdinalGroup(self: *const IHTMLCSSStyleDeclaration4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBoxOrdinalGroup(self, v);
    }
    pub fn get_webkitBoxOrdinalGroup(self: *const IHTMLCSSStyleDeclaration4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBoxOrdinalGroup(self, p);
    }
    pub fn put_webkitBoxPack(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBoxPack(self, v);
    }
    pub fn get_webkitBoxPack(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBoxPack(self, p);
    }
    pub fn put_webkitBoxFlex(self: *const IHTMLCSSStyleDeclaration4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBoxFlex(self, v);
    }
    pub fn get_webkitBoxFlex(self: *const IHTMLCSSStyleDeclaration4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBoxFlex(self, p);
    }
    pub fn put_webkitBoxOrient(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBoxOrient(self, v);
    }
    pub fn get_webkitBoxOrient(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBoxOrient(self, p);
    }
    pub fn put_webkitBoxDirection(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBoxDirection(self, v);
    }
    pub fn get_webkitBoxDirection(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBoxDirection(self, p);
    }
    pub fn put_webkitTransform(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitTransform(self, v);
    }
    pub fn get_webkitTransform(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitTransform(self, p);
    }
    pub fn put_webkitBackgroundSize(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundSize(self, v);
    }
    pub fn get_webkitBackgroundSize(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundSize(self, p);
    }
    pub fn put_webkitBackfaceVisibility(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackfaceVisibility(self, v);
    }
    pub fn get_webkitBackfaceVisibility(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackfaceVisibility(self, p);
    }
    pub fn put_webkitAnimation(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimation(self, v);
    }
    pub fn get_webkitAnimation(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimation(self, p);
    }
    pub fn put_webkitTransition(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitTransition(self, v);
    }
    pub fn get_webkitTransition(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitTransition(self, p);
    }
    pub fn put_webkitAnimationName(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimationName(self, v);
    }
    pub fn get_webkitAnimationName(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimationName(self, p);
    }
    pub fn put_webkitAnimationDuration(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimationDuration(self, v);
    }
    pub fn get_webkitAnimationDuration(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimationDuration(self, p);
    }
    pub fn put_webkitAnimationTimingFunction(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimationTimingFunction(self, v);
    }
    pub fn get_webkitAnimationTimingFunction(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimationTimingFunction(self, p);
    }
    pub fn put_webkitAnimationDelay(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimationDelay(self, v);
    }
    pub fn get_webkitAnimationDelay(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimationDelay(self, p);
    }
    pub fn put_webkitAnimationIterationCount(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimationIterationCount(self, v);
    }
    pub fn get_webkitAnimationIterationCount(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimationIterationCount(self, p);
    }
    pub fn put_webkitAnimationDirection(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimationDirection(self, v);
    }
    pub fn get_webkitAnimationDirection(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimationDirection(self, p);
    }
    pub fn put_webkitAnimationPlayState(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimationPlayState(self, v);
    }
    pub fn get_webkitAnimationPlayState(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimationPlayState(self, p);
    }
    pub fn put_webkitTransitionProperty(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitTransitionProperty(self, v);
    }
    pub fn get_webkitTransitionProperty(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitTransitionProperty(self, p);
    }
    pub fn put_webkitTransitionDuration(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitTransitionDuration(self, v);
    }
    pub fn get_webkitTransitionDuration(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitTransitionDuration(self, p);
    }
    pub fn put_webkitTransitionTimingFunction(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitTransitionTimingFunction(self, v);
    }
    pub fn get_webkitTransitionTimingFunction(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitTransitionTimingFunction(self, p);
    }
    pub fn put_webkitTransitionDelay(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitTransitionDelay(self, v);
    }
    pub fn get_webkitTransitionDelay(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitTransitionDelay(self, p);
    }
    pub fn put_webkitBackgroundAttachment(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundAttachment(self, v);
    }
    pub fn get_webkitBackgroundAttachment(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundAttachment(self, p);
    }
    pub fn put_webkitBackgroundColor(self: *const IHTMLCSSStyleDeclaration4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundColor(self, v);
    }
    pub fn get_webkitBackgroundColor(self: *const IHTMLCSSStyleDeclaration4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundColor(self, p);
    }
    pub fn put_webkitBackgroundClip(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundClip(self, v);
    }
    pub fn get_webkitBackgroundClip(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundClip(self, p);
    }
    pub fn put_webkitBackgroundImage(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundImage(self, v);
    }
    pub fn get_webkitBackgroundImage(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundImage(self, p);
    }
    pub fn put_webkitBackgroundRepeat(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundRepeat(self, v);
    }
    pub fn get_webkitBackgroundRepeat(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundRepeat(self, p);
    }
    pub fn put_webkitBackgroundOrigin(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundOrigin(self, v);
    }
    pub fn get_webkitBackgroundOrigin(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundOrigin(self, p);
    }
    pub fn put_webkitBackgroundPosition(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundPosition(self, v);
    }
    pub fn get_webkitBackgroundPosition(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundPosition(self, p);
    }
    pub fn put_webkitBackgroundPositionX(self: *const IHTMLCSSStyleDeclaration4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundPositionX(self, v);
    }
    pub fn get_webkitBackgroundPositionX(self: *const IHTMLCSSStyleDeclaration4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundPositionX(self, p);
    }
    pub fn put_webkitBackgroundPositionY(self: *const IHTMLCSSStyleDeclaration4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackgroundPositionY(self, v);
    }
    pub fn get_webkitBackgroundPositionY(self: *const IHTMLCSSStyleDeclaration4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackgroundPositionY(self, p);
    }
    pub fn put_webkitBackground(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBackground(self, v);
    }
    pub fn get_webkitBackground(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBackground(self, p);
    }
    pub fn put_webkitTransformOrigin(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitTransformOrigin(self, v);
    }
    pub fn get_webkitTransformOrigin(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitTransformOrigin(self, p);
    }
    pub fn put_msTextSizeAdjust(self: *const IHTMLCSSStyleDeclaration4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_msTextSizeAdjust(self, v);
    }
    pub fn get_msTextSizeAdjust(self: *const IHTMLCSSStyleDeclaration4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_msTextSizeAdjust(self, p);
    }
    pub fn put_webkitTextSizeAdjust(self: *const IHTMLCSSStyleDeclaration4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitTextSizeAdjust(self, v);
    }
    pub fn get_webkitTextSizeAdjust(self: *const IHTMLCSSStyleDeclaration4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitTextSizeAdjust(self, p);
    }
    pub fn put_webkitBorderImage(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBorderImage(self, v);
    }
    pub fn get_webkitBorderImage(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBorderImage(self, p);
    }
    pub fn put_webkitBorderImageSource(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBorderImageSource(self, v);
    }
    pub fn get_webkitBorderImageSource(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBorderImageSource(self, p);
    }
    pub fn put_webkitBorderImageSlice(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBorderImageSlice(self, v);
    }
    pub fn get_webkitBorderImageSlice(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBorderImageSlice(self, p);
    }
    pub fn put_webkitBorderImageWidth(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBorderImageWidth(self, v);
    }
    pub fn get_webkitBorderImageWidth(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBorderImageWidth(self, p);
    }
    pub fn put_webkitBorderImageOutset(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBorderImageOutset(self, v);
    }
    pub fn get_webkitBorderImageOutset(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBorderImageOutset(self, p);
    }
    pub fn put_webkitBorderImageRepeat(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBorderImageRepeat(self, v);
    }
    pub fn get_webkitBorderImageRepeat(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBorderImageRepeat(self, p);
    }
    pub fn put_webkitBoxSizing(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitBoxSizing(self, v);
    }
    pub fn get_webkitBoxSizing(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitBoxSizing(self, p);
    }
    pub fn put_webkitAnimationFillMode(self: *const IHTMLCSSStyleDeclaration4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_webkitAnimationFillMode(self, v);
    }
    pub fn get_webkitAnimationFillMode(self: *const IHTMLCSSStyleDeclaration4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_webkitAnimationFillMode(self, p);
    }
};

const IID_IHTMLStyleEnabled_Value = Guid.initString("305104c2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleEnabled = &IID_IHTMLStyleEnabled_Value;
pub const IHTMLStyleEnabled = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        msGetPropertyEnabled: *const fn(
            self: *const IHTMLStyleEnabled,
            name: ?BSTR,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        msPutPropertyEnabled: *const fn(
            self: *const IHTMLStyleEnabled,
            name: ?BSTR,
            b: i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn msGetPropertyEnabled(self: *const IHTMLStyleEnabled, name: ?BSTR, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.msGetPropertyEnabled(self, name, p);
    }
    pub fn msPutPropertyEnabled(self: *const IHTMLStyleEnabled, name: ?BSTR, b: i16) callconv(.@"inline") HRESULT {
        return self.vtable.msPutPropertyEnabled(self, name, b);
    }
};

const IID_DispHTMLCSSStyleDeclaration_Value = Guid.initString("3059009a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCSSStyleDeclaration = &IID_DispHTMLCSSStyleDeclaration_Value;
pub const DispHTMLCSSStyleDeclaration = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyle_Value = Guid.initString("3050f25e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyle = &IID_IHTMLStyle_Value;
pub const IHTMLStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontFamily: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontFamily: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontStyle: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontStyle: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontVariant: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontVariant: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontWeight: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontWeight: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontSize: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontSize: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_font: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_font: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_color: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_color: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_background: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_background: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundColor: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundColor: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundImage: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundImage: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundRepeat: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundRepeat: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundAttachment: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundAttachment: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPosition: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPosition: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPositionX: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPositionX: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPositionY: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPositionY: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordSpacing: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordSpacing: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_letterSpacing: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_letterSpacing: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecoration: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecoration: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationNone: *const fn(
            self: *const IHTMLStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationNone: *const fn(
            self: *const IHTMLStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationUnderline: *const fn(
            self: *const IHTMLStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationUnderline: *const fn(
            self: *const IHTMLStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationOverline: *const fn(
            self: *const IHTMLStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationOverline: *const fn(
            self: *const IHTMLStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationLineThrough: *const fn(
            self: *const IHTMLStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationLineThrough: *const fn(
            self: *const IHTMLStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationBlink: *const fn(
            self: *const IHTMLStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationBlink: *const fn(
            self: *const IHTMLStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_verticalAlign: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_verticalAlign: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textTransform: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textTransform: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAlign: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlign: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textIndent: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textIndent: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineHeight: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineHeight: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginTop: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginTop: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginRight: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginRight: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginBottom: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginBottom: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginLeft: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginLeft: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_margin: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_margin: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingTop: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingTop: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingRight: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingRight: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingBottom: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingBottom: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingLeft: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingLeft: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_padding: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_padding: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTop: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTop: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRight: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRight: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottom: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottom: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeft: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeft: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColor: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopColor: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopColor: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightColor: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightColor: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomColor: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomColor: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftColor: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftColor: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderWidth: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderWidth: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopWidth: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopWidth: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightWidth: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightWidth: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomWidth: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomWidth: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftWidth: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftWidth: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderStyle: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderStyle: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopStyle: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopStyle: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightStyle: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightStyle: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomStyle: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomStyle: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftStyle: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftStyle: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_styleFloat: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleFloat: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clear: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clear: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_display: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_display: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_visibility: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_visibility: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyleType: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyleType: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStylePosition: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStylePosition: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyleImage: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyleImage: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyle: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyle: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_whiteSpace: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_whiteSpace: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_top: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_top: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_left: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_left: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_position: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_zIndex: *const fn(
            self: *const IHTMLStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zIndex: *const fn(
            self: *const IHTMLStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflow: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflow: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakBefore: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakBefore: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakAfter: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakAfter: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cssText: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssText: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelTop: *const fn(
            self: *const IHTMLStyle,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelTop: *const fn(
            self: *const IHTMLStyle,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelLeft: *const fn(
            self: *const IHTMLStyle,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelLeft: *const fn(
            self: *const IHTMLStyle,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelWidth: *const fn(
            self: *const IHTMLStyle,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelWidth: *const fn(
            self: *const IHTMLStyle,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelHeight: *const fn(
            self: *const IHTMLStyle,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelHeight: *const fn(
            self: *const IHTMLStyle,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_posTop: *const fn(
            self: *const IHTMLStyle,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_posTop: *const fn(
            self: *const IHTMLStyle,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_posLeft: *const fn(
            self: *const IHTMLStyle,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_posLeft: *const fn(
            self: *const IHTMLStyle,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_posWidth: *const fn(
            self: *const IHTMLStyle,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_posWidth: *const fn(
            self: *const IHTMLStyle,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_posHeight: *const fn(
            self: *const IHTMLStyle,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_posHeight: *const fn(
            self: *const IHTMLStyle,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cursor: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cursor: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clip: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clip: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_filter: *const fn(
            self: *const IHTMLStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filter: *const fn(
            self: *const IHTMLStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        setAttribute: *const fn(
            self: *const IHTMLStyle,
            strAttributeName: ?BSTR,
            AttributeValue: VARIANT,
            lFlags: i32,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLStyle,
            strAttributeName: ?BSTR,
            lFlags: i32,
            AttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttribute: *const fn(
            self: *const IHTMLStyle,
            strAttributeName: ?BSTR,
            lFlags: i32,
            pfSuccess: ?*i16,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLStyle,
            String: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_fontFamily(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontFamily(self, v);
    }
    pub fn get_fontFamily(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontFamily(self, p);
    }
    pub fn put_fontStyle(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontStyle(self, v);
    }
    pub fn get_fontStyle(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontStyle(self, p);
    }
    pub fn put_fontVariant(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontVariant(self, v);
    }
    pub fn get_fontVariant(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontVariant(self, p);
    }
    pub fn put_fontWeight(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontWeight(self, v);
    }
    pub fn get_fontWeight(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontWeight(self, p);
    }
    pub fn put_fontSize(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontSize(self, v);
    }
    pub fn get_fontSize(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontSize(self, p);
    }
    pub fn put_font(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_font(self, v);
    }
    pub fn get_font(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_font(self, p);
    }
    pub fn put_color(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_color(self, v);
    }
    pub fn get_color(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_color(self, p);
    }
    pub fn put_background(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_background(self, v);
    }
    pub fn get_background(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_background(self, p);
    }
    pub fn put_backgroundColor(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundColor(self, v);
    }
    pub fn get_backgroundColor(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundColor(self, p);
    }
    pub fn put_backgroundImage(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundImage(self, v);
    }
    pub fn get_backgroundImage(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundImage(self, p);
    }
    pub fn put_backgroundRepeat(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundRepeat(self, v);
    }
    pub fn get_backgroundRepeat(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundRepeat(self, p);
    }
    pub fn put_backgroundAttachment(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundAttachment(self, v);
    }
    pub fn get_backgroundAttachment(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundAttachment(self, p);
    }
    pub fn put_backgroundPosition(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPosition(self, v);
    }
    pub fn get_backgroundPosition(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPosition(self, p);
    }
    pub fn put_backgroundPositionX(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPositionX(self, v);
    }
    pub fn get_backgroundPositionX(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPositionX(self, p);
    }
    pub fn put_backgroundPositionY(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPositionY(self, v);
    }
    pub fn get_backgroundPositionY(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPositionY(self, p);
    }
    pub fn put_wordSpacing(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordSpacing(self, v);
    }
    pub fn get_wordSpacing(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordSpacing(self, p);
    }
    pub fn put_letterSpacing(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_letterSpacing(self, v);
    }
    pub fn get_letterSpacing(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_letterSpacing(self, p);
    }
    pub fn put_textDecoration(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecoration(self, v);
    }
    pub fn get_textDecoration(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecoration(self, p);
    }
    pub fn put_textDecorationNone(self: *const IHTMLStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationNone(self, v);
    }
    pub fn get_textDecorationNone(self: *const IHTMLStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationNone(self, p);
    }
    pub fn put_textDecorationUnderline(self: *const IHTMLStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationUnderline(self, v);
    }
    pub fn get_textDecorationUnderline(self: *const IHTMLStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationUnderline(self, p);
    }
    pub fn put_textDecorationOverline(self: *const IHTMLStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationOverline(self, v);
    }
    pub fn get_textDecorationOverline(self: *const IHTMLStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationOverline(self, p);
    }
    pub fn put_textDecorationLineThrough(self: *const IHTMLStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationLineThrough(self, v);
    }
    pub fn get_textDecorationLineThrough(self: *const IHTMLStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationLineThrough(self, p);
    }
    pub fn put_textDecorationBlink(self: *const IHTMLStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationBlink(self, v);
    }
    pub fn get_textDecorationBlink(self: *const IHTMLStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationBlink(self, p);
    }
    pub fn put_verticalAlign(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_verticalAlign(self, v);
    }
    pub fn get_verticalAlign(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_verticalAlign(self, p);
    }
    pub fn put_textTransform(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textTransform(self, v);
    }
    pub fn get_textTransform(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textTransform(self, p);
    }
    pub fn put_textAlign(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAlign(self, v);
    }
    pub fn get_textAlign(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlign(self, p);
    }
    pub fn put_textIndent(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textIndent(self, v);
    }
    pub fn get_textIndent(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textIndent(self, p);
    }
    pub fn put_lineHeight(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineHeight(self, v);
    }
    pub fn get_lineHeight(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineHeight(self, p);
    }
    pub fn put_marginTop(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginTop(self, v);
    }
    pub fn get_marginTop(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginTop(self, p);
    }
    pub fn put_marginRight(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginRight(self, v);
    }
    pub fn get_marginRight(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginRight(self, p);
    }
    pub fn put_marginBottom(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginBottom(self, v);
    }
    pub fn get_marginBottom(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginBottom(self, p);
    }
    pub fn put_marginLeft(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginLeft(self, v);
    }
    pub fn get_marginLeft(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginLeft(self, p);
    }
    pub fn put_margin(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_margin(self, v);
    }
    pub fn get_margin(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_margin(self, p);
    }
    pub fn put_paddingTop(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingTop(self, v);
    }
    pub fn get_paddingTop(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingTop(self, p);
    }
    pub fn put_paddingRight(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingRight(self, v);
    }
    pub fn get_paddingRight(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingRight(self, p);
    }
    pub fn put_paddingBottom(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingBottom(self, v);
    }
    pub fn get_paddingBottom(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingBottom(self, p);
    }
    pub fn put_paddingLeft(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingLeft(self, v);
    }
    pub fn get_paddingLeft(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingLeft(self, p);
    }
    pub fn put_padding(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_padding(self, v);
    }
    pub fn get_padding(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_padding(self, p);
    }
    pub fn put_border(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_borderTop(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTop(self, v);
    }
    pub fn get_borderTop(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTop(self, p);
    }
    pub fn put_borderRight(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRight(self, v);
    }
    pub fn get_borderRight(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRight(self, p);
    }
    pub fn put_borderBottom(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottom(self, v);
    }
    pub fn get_borderBottom(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottom(self, p);
    }
    pub fn put_borderLeft(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeft(self, v);
    }
    pub fn get_borderLeft(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeft(self, p);
    }
    pub fn put_borderColor(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColor(self, v);
    }
    pub fn get_borderColor(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
    pub fn put_borderTopColor(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopColor(self, v);
    }
    pub fn get_borderTopColor(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopColor(self, p);
    }
    pub fn put_borderRightColor(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightColor(self, v);
    }
    pub fn get_borderRightColor(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightColor(self, p);
    }
    pub fn put_borderBottomColor(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomColor(self, v);
    }
    pub fn get_borderBottomColor(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomColor(self, p);
    }
    pub fn put_borderLeftColor(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftColor(self, v);
    }
    pub fn get_borderLeftColor(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftColor(self, p);
    }
    pub fn put_borderWidth(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderWidth(self, v);
    }
    pub fn get_borderWidth(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderWidth(self, p);
    }
    pub fn put_borderTopWidth(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopWidth(self, v);
    }
    pub fn get_borderTopWidth(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopWidth(self, p);
    }
    pub fn put_borderRightWidth(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightWidth(self, v);
    }
    pub fn get_borderRightWidth(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightWidth(self, p);
    }
    pub fn put_borderBottomWidth(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomWidth(self, v);
    }
    pub fn get_borderBottomWidth(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomWidth(self, p);
    }
    pub fn put_borderLeftWidth(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftWidth(self, v);
    }
    pub fn get_borderLeftWidth(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftWidth(self, p);
    }
    pub fn put_borderStyle(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderStyle(self, v);
    }
    pub fn get_borderStyle(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderStyle(self, p);
    }
    pub fn put_borderTopStyle(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopStyle(self, v);
    }
    pub fn get_borderTopStyle(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopStyle(self, p);
    }
    pub fn put_borderRightStyle(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightStyle(self, v);
    }
    pub fn get_borderRightStyle(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightStyle(self, p);
    }
    pub fn put_borderBottomStyle(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomStyle(self, v);
    }
    pub fn get_borderBottomStyle(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomStyle(self, p);
    }
    pub fn put_borderLeftStyle(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftStyle(self, v);
    }
    pub fn get_borderLeftStyle(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftStyle(self, p);
    }
    pub fn put_width(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_styleFloat(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_styleFloat(self, v);
    }
    pub fn get_styleFloat(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleFloat(self, p);
    }
    pub fn put_clear(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clear(self, v);
    }
    pub fn get_clear(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clear(self, p);
    }
    pub fn put_display(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_display(self, v);
    }
    pub fn get_display(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_display(self, p);
    }
    pub fn put_visibility(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_visibility(self, v);
    }
    pub fn get_visibility(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_visibility(self, p);
    }
    pub fn put_listStyleType(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyleType(self, v);
    }
    pub fn get_listStyleType(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyleType(self, p);
    }
    pub fn put_listStylePosition(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStylePosition(self, v);
    }
    pub fn get_listStylePosition(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStylePosition(self, p);
    }
    pub fn put_listStyleImage(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyleImage(self, v);
    }
    pub fn get_listStyleImage(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyleImage(self, p);
    }
    pub fn put_listStyle(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyle(self, v);
    }
    pub fn get_listStyle(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyle(self, p);
    }
    pub fn put_whiteSpace(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_whiteSpace(self, v);
    }
    pub fn get_whiteSpace(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_whiteSpace(self, p);
    }
    pub fn put_top(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_top(self, v);
    }
    pub fn get_top(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_top(self, p);
    }
    pub fn put_left(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_left(self, v);
    }
    pub fn get_left(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_left(self, p);
    }
    pub fn get_position(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_position(self, p);
    }
    pub fn put_zIndex(self: *const IHTMLStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_zIndex(self, v);
    }
    pub fn get_zIndex(self: *const IHTMLStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_zIndex(self, p);
    }
    pub fn put_overflow(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflow(self, v);
    }
    pub fn get_overflow(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflow(self, p);
    }
    pub fn put_pageBreakBefore(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakBefore(self, v);
    }
    pub fn get_pageBreakBefore(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakBefore(self, p);
    }
    pub fn put_pageBreakAfter(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakAfter(self, v);
    }
    pub fn get_pageBreakAfter(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakAfter(self, p);
    }
    pub fn put_cssText(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cssText(self, v);
    }
    pub fn get_cssText(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssText(self, p);
    }
    pub fn put_pixelTop(self: *const IHTMLStyle, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelTop(self, v);
    }
    pub fn get_pixelTop(self: *const IHTMLStyle, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelTop(self, p);
    }
    pub fn put_pixelLeft(self: *const IHTMLStyle, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelLeft(self, v);
    }
    pub fn get_pixelLeft(self: *const IHTMLStyle, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelLeft(self, p);
    }
    pub fn put_pixelWidth(self: *const IHTMLStyle, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelWidth(self, v);
    }
    pub fn get_pixelWidth(self: *const IHTMLStyle, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelWidth(self, p);
    }
    pub fn put_pixelHeight(self: *const IHTMLStyle, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelHeight(self, v);
    }
    pub fn get_pixelHeight(self: *const IHTMLStyle, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelHeight(self, p);
    }
    pub fn put_posTop(self: *const IHTMLStyle, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_posTop(self, v);
    }
    pub fn get_posTop(self: *const IHTMLStyle, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_posTop(self, p);
    }
    pub fn put_posLeft(self: *const IHTMLStyle, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_posLeft(self, v);
    }
    pub fn get_posLeft(self: *const IHTMLStyle, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_posLeft(self, p);
    }
    pub fn put_posWidth(self: *const IHTMLStyle, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_posWidth(self, v);
    }
    pub fn get_posWidth(self: *const IHTMLStyle, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_posWidth(self, p);
    }
    pub fn put_posHeight(self: *const IHTMLStyle, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_posHeight(self, v);
    }
    pub fn get_posHeight(self: *const IHTMLStyle, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_posHeight(self, p);
    }
    pub fn put_cursor(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cursor(self, v);
    }
    pub fn get_cursor(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cursor(self, p);
    }
    pub fn put_clip(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clip(self, v);
    }
    pub fn get_clip(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clip(self, p);
    }
    pub fn put_filter(self: *const IHTMLStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_filter(self, v);
    }
    pub fn get_filter(self: *const IHTMLStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_filter(self, p);
    }
    pub fn setAttribute(self: *const IHTMLStyle, strAttributeName: ?BSTR, AttributeValue: VARIANT, lFlags: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, strAttributeName, AttributeValue, lFlags);
    }
    pub fn getAttribute(self: *const IHTMLStyle, strAttributeName: ?BSTR, lFlags: i32, AttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, strAttributeName, lFlags, AttributeValue);
    }
    pub fn removeAttribute(self: *const IHTMLStyle, strAttributeName: ?BSTR, lFlags: i32, pfSuccess: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttribute(self, strAttributeName, lFlags, pfSuccess);
    }
    pub fn toString(self: *const IHTMLStyle, String: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, String);
    }
};

const IID_IHTMLStyle2_Value = Guid.initString("3050f4a2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyle2 = &IID_IHTMLStyle2_Value;
pub const IHTMLStyle2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tableLayout: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tableLayout: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderCollapse: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderCollapse: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_direction: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_direction: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_behavior: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_behavior: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        setExpression: *const fn(
            self: *const IHTMLStyle2,
            propname: ?BSTR,
            expression: ?BSTR,
            language: ?BSTR,
        ) callconv(.winapi) HRESULT,
        getExpression: *const fn(
            self: *const IHTMLStyle2,
            propname: ?BSTR,
            expression: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        removeExpression: *const fn(
            self: *const IHTMLStyle2,
            propname: ?BSTR,
            pfSuccess: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_position: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_position: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_unicodeBidi: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unicodeBidi: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bottom: *const fn(
            self: *const IHTMLStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bottom: *const fn(
            self: *const IHTMLStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_right: *const fn(
            self: *const IHTMLStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_right: *const fn(
            self: *const IHTMLStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelBottom: *const fn(
            self: *const IHTMLStyle2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelBottom: *const fn(
            self: *const IHTMLStyle2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelRight: *const fn(
            self: *const IHTMLStyle2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelRight: *const fn(
            self: *const IHTMLStyle2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_posBottom: *const fn(
            self: *const IHTMLStyle2,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_posBottom: *const fn(
            self: *const IHTMLStyle2,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_posRight: *const fn(
            self: *const IHTMLStyle2,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_posRight: *const fn(
            self: *const IHTMLStyle2,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_imeMode: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeMode: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyAlign: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyAlign: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyPosition: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyPosition: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyOverhang: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyOverhang: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridChar: *const fn(
            self: *const IHTMLStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridChar: *const fn(
            self: *const IHTMLStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridLine: *const fn(
            self: *const IHTMLStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridLine: *const fn(
            self: *const IHTMLStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridMode: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridMode: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridType: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridType: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGrid: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGrid: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordBreak: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordBreak: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineBreak: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineBreak: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textJustify: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textJustify: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textJustifyTrim: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textJustifyTrim: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textKashida: *const fn(
            self: *const IHTMLStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textKashida: *const fn(
            self: *const IHTMLStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAutospace: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAutospace: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflowX: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflowX: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflowY: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflowY: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_accelerator: *const fn(
            self: *const IHTMLStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accelerator: *const fn(
            self: *const IHTMLStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_tableLayout(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_tableLayout(self, v);
    }
    pub fn get_tableLayout(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_tableLayout(self, p);
    }
    pub fn put_borderCollapse(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderCollapse(self, v);
    }
    pub fn get_borderCollapse(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderCollapse(self, p);
    }
    pub fn put_direction(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_direction(self, v);
    }
    pub fn get_direction(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_direction(self, p);
    }
    pub fn put_behavior(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_behavior(self, v);
    }
    pub fn get_behavior(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_behavior(self, p);
    }
    pub fn setExpression(self: *const IHTMLStyle2, propname: ?BSTR, expression: ?BSTR, language: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.setExpression(self, propname, expression, language);
    }
    pub fn getExpression(self: *const IHTMLStyle2, propname: ?BSTR, expression: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getExpression(self, propname, expression);
    }
    pub fn removeExpression(self: *const IHTMLStyle2, propname: ?BSTR, pfSuccess: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeExpression(self, propname, pfSuccess);
    }
    pub fn put_position(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_position(self, v);
    }
    pub fn get_position(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_position(self, p);
    }
    pub fn put_unicodeBidi(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_unicodeBidi(self, v);
    }
    pub fn get_unicodeBidi(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_unicodeBidi(self, p);
    }
    pub fn put_bottom(self: *const IHTMLStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bottom(self, v);
    }
    pub fn get_bottom(self: *const IHTMLStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bottom(self, p);
    }
    pub fn put_right(self: *const IHTMLStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_right(self, v);
    }
    pub fn get_right(self: *const IHTMLStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_right(self, p);
    }
    pub fn put_pixelBottom(self: *const IHTMLStyle2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelBottom(self, v);
    }
    pub fn get_pixelBottom(self: *const IHTMLStyle2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelBottom(self, p);
    }
    pub fn put_pixelRight(self: *const IHTMLStyle2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelRight(self, v);
    }
    pub fn get_pixelRight(self: *const IHTMLStyle2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelRight(self, p);
    }
    pub fn put_posBottom(self: *const IHTMLStyle2, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_posBottom(self, v);
    }
    pub fn get_posBottom(self: *const IHTMLStyle2, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_posBottom(self, p);
    }
    pub fn put_posRight(self: *const IHTMLStyle2, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_posRight(self, v);
    }
    pub fn get_posRight(self: *const IHTMLStyle2, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_posRight(self, p);
    }
    pub fn put_imeMode(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_imeMode(self, v);
    }
    pub fn get_imeMode(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeMode(self, p);
    }
    pub fn put_rubyAlign(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyAlign(self, v);
    }
    pub fn get_rubyAlign(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyAlign(self, p);
    }
    pub fn put_rubyPosition(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyPosition(self, v);
    }
    pub fn get_rubyPosition(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyPosition(self, p);
    }
    pub fn put_rubyOverhang(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyOverhang(self, v);
    }
    pub fn get_rubyOverhang(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyOverhang(self, p);
    }
    pub fn put_layoutGridChar(self: *const IHTMLStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridChar(self, v);
    }
    pub fn get_layoutGridChar(self: *const IHTMLStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridChar(self, p);
    }
    pub fn put_layoutGridLine(self: *const IHTMLStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridLine(self, v);
    }
    pub fn get_layoutGridLine(self: *const IHTMLStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridLine(self, p);
    }
    pub fn put_layoutGridMode(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridMode(self, v);
    }
    pub fn get_layoutGridMode(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridMode(self, p);
    }
    pub fn put_layoutGridType(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridType(self, v);
    }
    pub fn get_layoutGridType(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridType(self, p);
    }
    pub fn put_layoutGrid(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGrid(self, v);
    }
    pub fn get_layoutGrid(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGrid(self, p);
    }
    pub fn put_wordBreak(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordBreak(self, v);
    }
    pub fn get_wordBreak(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordBreak(self, p);
    }
    pub fn put_lineBreak(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineBreak(self, v);
    }
    pub fn get_lineBreak(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineBreak(self, p);
    }
    pub fn put_textJustify(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textJustify(self, v);
    }
    pub fn get_textJustify(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textJustify(self, p);
    }
    pub fn put_textJustifyTrim(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textJustifyTrim(self, v);
    }
    pub fn get_textJustifyTrim(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textJustifyTrim(self, p);
    }
    pub fn put_textKashida(self: *const IHTMLStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textKashida(self, v);
    }
    pub fn get_textKashida(self: *const IHTMLStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textKashida(self, p);
    }
    pub fn put_textAutospace(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAutospace(self, v);
    }
    pub fn get_textAutospace(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAutospace(self, p);
    }
    pub fn put_overflowX(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflowX(self, v);
    }
    pub fn get_overflowX(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflowX(self, p);
    }
    pub fn put_overflowY(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflowY(self, v);
    }
    pub fn get_overflowY(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflowY(self, p);
    }
    pub fn put_accelerator(self: *const IHTMLStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_accelerator(self, v);
    }
    pub fn get_accelerator(self: *const IHTMLStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accelerator(self, p);
    }
};

const IID_IHTMLStyle3_Value = Guid.initString("3050f656-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyle3 = &IID_IHTMLStyle3_Value;
pub const IHTMLStyle3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutFlow: *const fn(
            self: *const IHTMLStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutFlow: *const fn(
            self: *const IHTMLStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_zoom: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zoom: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordWrap: *const fn(
            self: *const IHTMLStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordWrap: *const fn(
            self: *const IHTMLStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textUnderlinePosition: *const fn(
            self: *const IHTMLStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textUnderlinePosition: *const fn(
            self: *const IHTMLStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarBaseColor: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarBaseColor: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarFaceColor: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarFaceColor: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbar3dLightColor: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbar3dLightColor: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarShadowColor: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarShadowColor: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarHighlightColor: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarHighlightColor: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarDarkShadowColor: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarDarkShadowColor: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarArrowColor: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarArrowColor: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarTrackColor: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarTrackColor: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_writingMode: *const fn(
            self: *const IHTMLStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_writingMode: *const fn(
            self: *const IHTMLStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAlignLast: *const fn(
            self: *const IHTMLStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlignLast: *const fn(
            self: *const IHTMLStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textKashidaSpace: *const fn(
            self: *const IHTMLStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textKashidaSpace: *const fn(
            self: *const IHTMLStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_layoutFlow(self: *const IHTMLStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutFlow(self, v);
    }
    pub fn get_layoutFlow(self: *const IHTMLStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutFlow(self, p);
    }
    pub fn put_zoom(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_zoom(self, v);
    }
    pub fn get_zoom(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_zoom(self, p);
    }
    pub fn put_wordWrap(self: *const IHTMLStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordWrap(self, v);
    }
    pub fn get_wordWrap(self: *const IHTMLStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordWrap(self, p);
    }
    pub fn put_textUnderlinePosition(self: *const IHTMLStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textUnderlinePosition(self, v);
    }
    pub fn get_textUnderlinePosition(self: *const IHTMLStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textUnderlinePosition(self, p);
    }
    pub fn put_scrollbarBaseColor(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarBaseColor(self, v);
    }
    pub fn get_scrollbarBaseColor(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarBaseColor(self, p);
    }
    pub fn put_scrollbarFaceColor(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarFaceColor(self, v);
    }
    pub fn get_scrollbarFaceColor(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarFaceColor(self, p);
    }
    pub fn put_scrollbar3dLightColor(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbar3dLightColor(self, v);
    }
    pub fn get_scrollbar3dLightColor(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbar3dLightColor(self, p);
    }
    pub fn put_scrollbarShadowColor(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarShadowColor(self, v);
    }
    pub fn get_scrollbarShadowColor(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarShadowColor(self, p);
    }
    pub fn put_scrollbarHighlightColor(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarHighlightColor(self, v);
    }
    pub fn get_scrollbarHighlightColor(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarHighlightColor(self, p);
    }
    pub fn put_scrollbarDarkShadowColor(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarDarkShadowColor(self, v);
    }
    pub fn get_scrollbarDarkShadowColor(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarDarkShadowColor(self, p);
    }
    pub fn put_scrollbarArrowColor(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarArrowColor(self, v);
    }
    pub fn get_scrollbarArrowColor(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarArrowColor(self, p);
    }
    pub fn put_scrollbarTrackColor(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarTrackColor(self, v);
    }
    pub fn get_scrollbarTrackColor(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarTrackColor(self, p);
    }
    pub fn put_writingMode(self: *const IHTMLStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_writingMode(self, v);
    }
    pub fn get_writingMode(self: *const IHTMLStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_writingMode(self, p);
    }
    pub fn put_textAlignLast(self: *const IHTMLStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAlignLast(self, v);
    }
    pub fn get_textAlignLast(self: *const IHTMLStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlignLast(self, p);
    }
    pub fn put_textKashidaSpace(self: *const IHTMLStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textKashidaSpace(self, v);
    }
    pub fn get_textKashidaSpace(self: *const IHTMLStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textKashidaSpace(self, p);
    }
};

const IID_IHTMLStyle4_Value = Guid.initString("3050f816-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyle4 = &IID_IHTMLStyle4_Value;
pub const IHTMLStyle4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textOverflow: *const fn(
            self: *const IHTMLStyle4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textOverflow: *const fn(
            self: *const IHTMLStyle4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_minHeight: *const fn(
            self: *const IHTMLStyle4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minHeight: *const fn(
            self: *const IHTMLStyle4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_textOverflow(self: *const IHTMLStyle4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textOverflow(self, v);
    }
    pub fn get_textOverflow(self: *const IHTMLStyle4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textOverflow(self, p);
    }
    pub fn put_minHeight(self: *const IHTMLStyle4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_minHeight(self, v);
    }
    pub fn get_minHeight(self: *const IHTMLStyle4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_minHeight(self, p);
    }
};

const IID_IHTMLStyle5_Value = Guid.initString("3050f33a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyle5 = &IID_IHTMLStyle5_Value;
pub const IHTMLStyle5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msInterpolationMode: *const fn(
            self: *const IHTMLStyle5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msInterpolationMode: *const fn(
            self: *const IHTMLStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxHeight: *const fn(
            self: *const IHTMLStyle5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxHeight: *const fn(
            self: *const IHTMLStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_minWidth: *const fn(
            self: *const IHTMLStyle5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minWidth: *const fn(
            self: *const IHTMLStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxWidth: *const fn(
            self: *const IHTMLStyle5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxWidth: *const fn(
            self: *const IHTMLStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_msInterpolationMode(self: *const IHTMLStyle5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msInterpolationMode(self, v);
    }
    pub fn get_msInterpolationMode(self: *const IHTMLStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msInterpolationMode(self, p);
    }
    pub fn put_maxHeight(self: *const IHTMLStyle5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxHeight(self, v);
    }
    pub fn get_maxHeight(self: *const IHTMLStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxHeight(self, p);
    }
    pub fn put_minWidth(self: *const IHTMLStyle5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_minWidth(self, v);
    }
    pub fn get_minWidth(self: *const IHTMLStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_minWidth(self, p);
    }
    pub fn put_maxWidth(self: *const IHTMLStyle5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxWidth(self, v);
    }
    pub fn get_maxWidth(self: *const IHTMLStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxWidth(self, p);
    }
};

const IID_IHTMLStyle6_Value = Guid.initString("30510480-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyle6 = &IID_IHTMLStyle6_Value;
pub const IHTMLStyle6 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_content: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_content: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_captionSide: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_captionSide: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_counterIncrement: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_counterIncrement: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_counterReset: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_counterReset: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outline: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outline: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineWidth: *const fn(
            self: *const IHTMLStyle6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineWidth: *const fn(
            self: *const IHTMLStyle6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineStyle: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineStyle: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineColor: *const fn(
            self: *const IHTMLStyle6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineColor: *const fn(
            self: *const IHTMLStyle6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_boxSizing: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boxSizing: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderSpacing: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderSpacing: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_orphans: *const fn(
            self: *const IHTMLStyle6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_orphans: *const fn(
            self: *const IHTMLStyle6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_widows: *const fn(
            self: *const IHTMLStyle6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_widows: *const fn(
            self: *const IHTMLStyle6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakInside: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakInside: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_emptyCells: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_emptyCells: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msBlockProgression: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msBlockProgression: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_quotes: *const fn(
            self: *const IHTMLStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_quotes: *const fn(
            self: *const IHTMLStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_content(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_content(self, v);
    }
    pub fn get_content(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_content(self, p);
    }
    pub fn put_captionSide(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_captionSide(self, v);
    }
    pub fn get_captionSide(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_captionSide(self, p);
    }
    pub fn put_counterIncrement(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_counterIncrement(self, v);
    }
    pub fn get_counterIncrement(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_counterIncrement(self, p);
    }
    pub fn put_counterReset(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_counterReset(self, v);
    }
    pub fn get_counterReset(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_counterReset(self, p);
    }
    pub fn put_outline(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_outline(self, v);
    }
    pub fn get_outline(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outline(self, p);
    }
    pub fn put_outlineWidth(self: *const IHTMLStyle6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineWidth(self, v);
    }
    pub fn get_outlineWidth(self: *const IHTMLStyle6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineWidth(self, p);
    }
    pub fn put_outlineStyle(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineStyle(self, v);
    }
    pub fn get_outlineStyle(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineStyle(self, p);
    }
    pub fn put_outlineColor(self: *const IHTMLStyle6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineColor(self, v);
    }
    pub fn get_outlineColor(self: *const IHTMLStyle6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineColor(self, p);
    }
    pub fn put_boxSizing(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_boxSizing(self, v);
    }
    pub fn get_boxSizing(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_boxSizing(self, p);
    }
    pub fn put_borderSpacing(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderSpacing(self, v);
    }
    pub fn get_borderSpacing(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderSpacing(self, p);
    }
    pub fn put_orphans(self: *const IHTMLStyle6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_orphans(self, v);
    }
    pub fn get_orphans(self: *const IHTMLStyle6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_orphans(self, p);
    }
    pub fn put_widows(self: *const IHTMLStyle6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_widows(self, v);
    }
    pub fn get_widows(self: *const IHTMLStyle6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_widows(self, p);
    }
    pub fn put_pageBreakInside(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakInside(self, v);
    }
    pub fn get_pageBreakInside(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakInside(self, p);
    }
    pub fn put_emptyCells(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_emptyCells(self, v);
    }
    pub fn get_emptyCells(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_emptyCells(self, p);
    }
    pub fn put_msBlockProgression(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msBlockProgression(self, v);
    }
    pub fn get_msBlockProgression(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msBlockProgression(self, p);
    }
    pub fn put_quotes(self: *const IHTMLStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_quotes(self, v);
    }
    pub fn get_quotes(self: *const IHTMLStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_quotes(self, p);
    }
};

const IID_IHTMLRuleStyle_Value = Guid.initString("3050f3cf-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRuleStyle = &IID_IHTMLRuleStyle_Value;
pub const IHTMLRuleStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontFamily: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontFamily: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontStyle: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontStyle: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontVariant: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontVariant: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontWeight: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontWeight: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontSize: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontSize: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_font: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_font: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_color: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_color: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_background: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_background: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundColor: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundColor: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundImage: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundImage: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundRepeat: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundRepeat: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundAttachment: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundAttachment: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPosition: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPosition: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPositionX: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPositionX: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_backgroundPositionY: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPositionY: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordSpacing: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordSpacing: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_letterSpacing: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_letterSpacing: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecoration: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecoration: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationNone: *const fn(
            self: *const IHTMLRuleStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationNone: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationUnderline: *const fn(
            self: *const IHTMLRuleStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationUnderline: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationOverline: *const fn(
            self: *const IHTMLRuleStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationOverline: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationLineThrough: *const fn(
            self: *const IHTMLRuleStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationLineThrough: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationBlink: *const fn(
            self: *const IHTMLRuleStyle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationBlink: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_verticalAlign: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_verticalAlign: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textTransform: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textTransform: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAlign: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlign: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textIndent: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textIndent: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineHeight: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineHeight: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginTop: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginTop: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginRight: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginRight: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginBottom: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginBottom: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginLeft: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginLeft: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_margin: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_margin: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingTop: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingTop: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingRight: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingRight: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingBottom: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingBottom: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_paddingLeft: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingLeft: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_padding: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_padding: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTop: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTop: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRight: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRight: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottom: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottom: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeft: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeft: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColor: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopColor: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopColor: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightColor: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightColor: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomColor: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomColor: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftColor: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftColor: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderWidth: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderWidth: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopWidth: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopWidth: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightWidth: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightWidth: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomWidth: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomWidth: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftWidth: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftWidth: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderStyle: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderStyle: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderTopStyle: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopStyle: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderRightStyle: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightStyle: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderBottomStyle: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomStyle: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderLeftStyle: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftStyle: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_styleFloat: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleFloat: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clear: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clear: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_display: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_display: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_visibility: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_visibility: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyleType: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyleType: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStylePosition: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStylePosition: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyleImage: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyleImage: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_listStyle: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyle: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_whiteSpace: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_whiteSpace: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_top: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_top: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_left: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_left: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_position: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_zIndex: *const fn(
            self: *const IHTMLRuleStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zIndex: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflow: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflow: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakBefore: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakBefore: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakAfter: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakAfter: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cssText: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssText: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cursor: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cursor: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clip: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clip: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_filter: *const fn(
            self: *const IHTMLRuleStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filter: *const fn(
            self: *const IHTMLRuleStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        setAttribute: *const fn(
            self: *const IHTMLRuleStyle,
            strAttributeName: ?BSTR,
            AttributeValue: VARIANT,
            lFlags: i32,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLRuleStyle,
            strAttributeName: ?BSTR,
            lFlags: i32,
            AttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttribute: *const fn(
            self: *const IHTMLRuleStyle,
            strAttributeName: ?BSTR,
            lFlags: i32,
            pfSuccess: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_fontFamily(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontFamily(self, v);
    }
    pub fn get_fontFamily(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontFamily(self, p);
    }
    pub fn put_fontStyle(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontStyle(self, v);
    }
    pub fn get_fontStyle(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontStyle(self, p);
    }
    pub fn put_fontVariant(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontVariant(self, v);
    }
    pub fn get_fontVariant(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontVariant(self, p);
    }
    pub fn put_fontWeight(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontWeight(self, v);
    }
    pub fn get_fontWeight(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontWeight(self, p);
    }
    pub fn put_fontSize(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontSize(self, v);
    }
    pub fn get_fontSize(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontSize(self, p);
    }
    pub fn put_font(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_font(self, v);
    }
    pub fn get_font(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_font(self, p);
    }
    pub fn put_color(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_color(self, v);
    }
    pub fn get_color(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_color(self, p);
    }
    pub fn put_background(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_background(self, v);
    }
    pub fn get_background(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_background(self, p);
    }
    pub fn put_backgroundColor(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundColor(self, v);
    }
    pub fn get_backgroundColor(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundColor(self, p);
    }
    pub fn put_backgroundImage(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundImage(self, v);
    }
    pub fn get_backgroundImage(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundImage(self, p);
    }
    pub fn put_backgroundRepeat(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundRepeat(self, v);
    }
    pub fn get_backgroundRepeat(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundRepeat(self, p);
    }
    pub fn put_backgroundAttachment(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundAttachment(self, v);
    }
    pub fn get_backgroundAttachment(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundAttachment(self, p);
    }
    pub fn put_backgroundPosition(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPosition(self, v);
    }
    pub fn get_backgroundPosition(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPosition(self, p);
    }
    pub fn put_backgroundPositionX(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPositionX(self, v);
    }
    pub fn get_backgroundPositionX(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPositionX(self, p);
    }
    pub fn put_backgroundPositionY(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_backgroundPositionY(self, v);
    }
    pub fn get_backgroundPositionY(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPositionY(self, p);
    }
    pub fn put_wordSpacing(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordSpacing(self, v);
    }
    pub fn get_wordSpacing(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordSpacing(self, p);
    }
    pub fn put_letterSpacing(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_letterSpacing(self, v);
    }
    pub fn get_letterSpacing(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_letterSpacing(self, p);
    }
    pub fn put_textDecoration(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecoration(self, v);
    }
    pub fn get_textDecoration(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecoration(self, p);
    }
    pub fn put_textDecorationNone(self: *const IHTMLRuleStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationNone(self, v);
    }
    pub fn get_textDecorationNone(self: *const IHTMLRuleStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationNone(self, p);
    }
    pub fn put_textDecorationUnderline(self: *const IHTMLRuleStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationUnderline(self, v);
    }
    pub fn get_textDecorationUnderline(self: *const IHTMLRuleStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationUnderline(self, p);
    }
    pub fn put_textDecorationOverline(self: *const IHTMLRuleStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationOverline(self, v);
    }
    pub fn get_textDecorationOverline(self: *const IHTMLRuleStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationOverline(self, p);
    }
    pub fn put_textDecorationLineThrough(self: *const IHTMLRuleStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationLineThrough(self, v);
    }
    pub fn get_textDecorationLineThrough(self: *const IHTMLRuleStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationLineThrough(self, p);
    }
    pub fn put_textDecorationBlink(self: *const IHTMLRuleStyle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationBlink(self, v);
    }
    pub fn get_textDecorationBlink(self: *const IHTMLRuleStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationBlink(self, p);
    }
    pub fn put_verticalAlign(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_verticalAlign(self, v);
    }
    pub fn get_verticalAlign(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_verticalAlign(self, p);
    }
    pub fn put_textTransform(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textTransform(self, v);
    }
    pub fn get_textTransform(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textTransform(self, p);
    }
    pub fn put_textAlign(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAlign(self, v);
    }
    pub fn get_textAlign(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlign(self, p);
    }
    pub fn put_textIndent(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textIndent(self, v);
    }
    pub fn get_textIndent(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textIndent(self, p);
    }
    pub fn put_lineHeight(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineHeight(self, v);
    }
    pub fn get_lineHeight(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineHeight(self, p);
    }
    pub fn put_marginTop(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginTop(self, v);
    }
    pub fn get_marginTop(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginTop(self, p);
    }
    pub fn put_marginRight(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginRight(self, v);
    }
    pub fn get_marginRight(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginRight(self, p);
    }
    pub fn put_marginBottom(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginBottom(self, v);
    }
    pub fn get_marginBottom(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginBottom(self, p);
    }
    pub fn put_marginLeft(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginLeft(self, v);
    }
    pub fn get_marginLeft(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginLeft(self, p);
    }
    pub fn put_margin(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_margin(self, v);
    }
    pub fn get_margin(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_margin(self, p);
    }
    pub fn put_paddingTop(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingTop(self, v);
    }
    pub fn get_paddingTop(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingTop(self, p);
    }
    pub fn put_paddingRight(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingRight(self, v);
    }
    pub fn get_paddingRight(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingRight(self, p);
    }
    pub fn put_paddingBottom(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingBottom(self, v);
    }
    pub fn get_paddingBottom(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingBottom(self, p);
    }
    pub fn put_paddingLeft(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_paddingLeft(self, v);
    }
    pub fn get_paddingLeft(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingLeft(self, p);
    }
    pub fn put_padding(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_padding(self, v);
    }
    pub fn get_padding(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_padding(self, p);
    }
    pub fn put_border(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_borderTop(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTop(self, v);
    }
    pub fn get_borderTop(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTop(self, p);
    }
    pub fn put_borderRight(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRight(self, v);
    }
    pub fn get_borderRight(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRight(self, p);
    }
    pub fn put_borderBottom(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottom(self, v);
    }
    pub fn get_borderBottom(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottom(self, p);
    }
    pub fn put_borderLeft(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeft(self, v);
    }
    pub fn get_borderLeft(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeft(self, p);
    }
    pub fn put_borderColor(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColor(self, v);
    }
    pub fn get_borderColor(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
    pub fn put_borderTopColor(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopColor(self, v);
    }
    pub fn get_borderTopColor(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopColor(self, p);
    }
    pub fn put_borderRightColor(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightColor(self, v);
    }
    pub fn get_borderRightColor(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightColor(self, p);
    }
    pub fn put_borderBottomColor(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomColor(self, v);
    }
    pub fn get_borderBottomColor(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomColor(self, p);
    }
    pub fn put_borderLeftColor(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftColor(self, v);
    }
    pub fn get_borderLeftColor(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftColor(self, p);
    }
    pub fn put_borderWidth(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderWidth(self, v);
    }
    pub fn get_borderWidth(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderWidth(self, p);
    }
    pub fn put_borderTopWidth(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopWidth(self, v);
    }
    pub fn get_borderTopWidth(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopWidth(self, p);
    }
    pub fn put_borderRightWidth(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightWidth(self, v);
    }
    pub fn get_borderRightWidth(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightWidth(self, p);
    }
    pub fn put_borderBottomWidth(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomWidth(self, v);
    }
    pub fn get_borderBottomWidth(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomWidth(self, p);
    }
    pub fn put_borderLeftWidth(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftWidth(self, v);
    }
    pub fn get_borderLeftWidth(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftWidth(self, p);
    }
    pub fn put_borderStyle(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderStyle(self, v);
    }
    pub fn get_borderStyle(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderStyle(self, p);
    }
    pub fn put_borderTopStyle(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderTopStyle(self, v);
    }
    pub fn get_borderTopStyle(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopStyle(self, p);
    }
    pub fn put_borderRightStyle(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderRightStyle(self, v);
    }
    pub fn get_borderRightStyle(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightStyle(self, p);
    }
    pub fn put_borderBottomStyle(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderBottomStyle(self, v);
    }
    pub fn get_borderBottomStyle(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomStyle(self, p);
    }
    pub fn put_borderLeftStyle(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderLeftStyle(self, v);
    }
    pub fn get_borderLeftStyle(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftStyle(self, p);
    }
    pub fn put_width(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_styleFloat(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_styleFloat(self, v);
    }
    pub fn get_styleFloat(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleFloat(self, p);
    }
    pub fn put_clear(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clear(self, v);
    }
    pub fn get_clear(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clear(self, p);
    }
    pub fn put_display(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_display(self, v);
    }
    pub fn get_display(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_display(self, p);
    }
    pub fn put_visibility(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_visibility(self, v);
    }
    pub fn get_visibility(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_visibility(self, p);
    }
    pub fn put_listStyleType(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyleType(self, v);
    }
    pub fn get_listStyleType(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyleType(self, p);
    }
    pub fn put_listStylePosition(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStylePosition(self, v);
    }
    pub fn get_listStylePosition(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStylePosition(self, p);
    }
    pub fn put_listStyleImage(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyleImage(self, v);
    }
    pub fn get_listStyleImage(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyleImage(self, p);
    }
    pub fn put_listStyle(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_listStyle(self, v);
    }
    pub fn get_listStyle(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyle(self, p);
    }
    pub fn put_whiteSpace(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_whiteSpace(self, v);
    }
    pub fn get_whiteSpace(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_whiteSpace(self, p);
    }
    pub fn put_top(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_top(self, v);
    }
    pub fn get_top(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_top(self, p);
    }
    pub fn put_left(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_left(self, v);
    }
    pub fn get_left(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_left(self, p);
    }
    pub fn get_position(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_position(self, p);
    }
    pub fn put_zIndex(self: *const IHTMLRuleStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_zIndex(self, v);
    }
    pub fn get_zIndex(self: *const IHTMLRuleStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_zIndex(self, p);
    }
    pub fn put_overflow(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflow(self, v);
    }
    pub fn get_overflow(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflow(self, p);
    }
    pub fn put_pageBreakBefore(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakBefore(self, v);
    }
    pub fn get_pageBreakBefore(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakBefore(self, p);
    }
    pub fn put_pageBreakAfter(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakAfter(self, v);
    }
    pub fn get_pageBreakAfter(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakAfter(self, p);
    }
    pub fn put_cssText(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cssText(self, v);
    }
    pub fn get_cssText(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssText(self, p);
    }
    pub fn put_cursor(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cursor(self, v);
    }
    pub fn get_cursor(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cursor(self, p);
    }
    pub fn put_clip(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clip(self, v);
    }
    pub fn get_clip(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clip(self, p);
    }
    pub fn put_filter(self: *const IHTMLRuleStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_filter(self, v);
    }
    pub fn get_filter(self: *const IHTMLRuleStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_filter(self, p);
    }
    pub fn setAttribute(self: *const IHTMLRuleStyle, strAttributeName: ?BSTR, AttributeValue: VARIANT, lFlags: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, strAttributeName, AttributeValue, lFlags);
    }
    pub fn getAttribute(self: *const IHTMLRuleStyle, strAttributeName: ?BSTR, lFlags: i32, AttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, strAttributeName, lFlags, AttributeValue);
    }
    pub fn removeAttribute(self: *const IHTMLRuleStyle, strAttributeName: ?BSTR, lFlags: i32, pfSuccess: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttribute(self, strAttributeName, lFlags, pfSuccess);
    }
};

const IID_IHTMLRuleStyle2_Value = Guid.initString("3050f4ac-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRuleStyle2 = &IID_IHTMLRuleStyle2_Value;
pub const IHTMLRuleStyle2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tableLayout: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tableLayout: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderCollapse: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderCollapse: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_direction: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_direction: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_behavior: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_behavior: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_position: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_position: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_unicodeBidi: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unicodeBidi: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bottom: *const fn(
            self: *const IHTMLRuleStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bottom: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_right: *const fn(
            self: *const IHTMLRuleStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_right: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelBottom: *const fn(
            self: *const IHTMLRuleStyle2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelBottom: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelRight: *const fn(
            self: *const IHTMLRuleStyle2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelRight: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_posBottom: *const fn(
            self: *const IHTMLRuleStyle2,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_posBottom: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_posRight: *const fn(
            self: *const IHTMLRuleStyle2,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_posRight: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_imeMode: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeMode: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyAlign: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyAlign: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyPosition: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyPosition: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rubyOverhang: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyOverhang: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridChar: *const fn(
            self: *const IHTMLRuleStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridChar: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridLine: *const fn(
            self: *const IHTMLRuleStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridLine: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridMode: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridMode: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGridType: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridType: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutGrid: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGrid: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAutospace: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAutospace: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordBreak: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordBreak: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineBreak: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineBreak: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textJustify: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textJustify: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textJustifyTrim: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textJustifyTrim: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textKashida: *const fn(
            self: *const IHTMLRuleStyle2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textKashida: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflowX: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflowX: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_overflowY: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflowY: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_accelerator: *const fn(
            self: *const IHTMLRuleStyle2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accelerator: *const fn(
            self: *const IHTMLRuleStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_tableLayout(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_tableLayout(self, v);
    }
    pub fn get_tableLayout(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_tableLayout(self, p);
    }
    pub fn put_borderCollapse(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderCollapse(self, v);
    }
    pub fn get_borderCollapse(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderCollapse(self, p);
    }
    pub fn put_direction(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_direction(self, v);
    }
    pub fn get_direction(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_direction(self, p);
    }
    pub fn put_behavior(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_behavior(self, v);
    }
    pub fn get_behavior(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_behavior(self, p);
    }
    pub fn put_position(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_position(self, v);
    }
    pub fn get_position(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_position(self, p);
    }
    pub fn put_unicodeBidi(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_unicodeBidi(self, v);
    }
    pub fn get_unicodeBidi(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_unicodeBidi(self, p);
    }
    pub fn put_bottom(self: *const IHTMLRuleStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bottom(self, v);
    }
    pub fn get_bottom(self: *const IHTMLRuleStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bottom(self, p);
    }
    pub fn put_right(self: *const IHTMLRuleStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_right(self, v);
    }
    pub fn get_right(self: *const IHTMLRuleStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_right(self, p);
    }
    pub fn put_pixelBottom(self: *const IHTMLRuleStyle2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelBottom(self, v);
    }
    pub fn get_pixelBottom(self: *const IHTMLRuleStyle2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelBottom(self, p);
    }
    pub fn put_pixelRight(self: *const IHTMLRuleStyle2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelRight(self, v);
    }
    pub fn get_pixelRight(self: *const IHTMLRuleStyle2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelRight(self, p);
    }
    pub fn put_posBottom(self: *const IHTMLRuleStyle2, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_posBottom(self, v);
    }
    pub fn get_posBottom(self: *const IHTMLRuleStyle2, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_posBottom(self, p);
    }
    pub fn put_posRight(self: *const IHTMLRuleStyle2, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_posRight(self, v);
    }
    pub fn get_posRight(self: *const IHTMLRuleStyle2, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_posRight(self, p);
    }
    pub fn put_imeMode(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_imeMode(self, v);
    }
    pub fn get_imeMode(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeMode(self, p);
    }
    pub fn put_rubyAlign(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyAlign(self, v);
    }
    pub fn get_rubyAlign(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyAlign(self, p);
    }
    pub fn put_rubyPosition(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyPosition(self, v);
    }
    pub fn get_rubyPosition(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyPosition(self, p);
    }
    pub fn put_rubyOverhang(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rubyOverhang(self, v);
    }
    pub fn get_rubyOverhang(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyOverhang(self, p);
    }
    pub fn put_layoutGridChar(self: *const IHTMLRuleStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridChar(self, v);
    }
    pub fn get_layoutGridChar(self: *const IHTMLRuleStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridChar(self, p);
    }
    pub fn put_layoutGridLine(self: *const IHTMLRuleStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridLine(self, v);
    }
    pub fn get_layoutGridLine(self: *const IHTMLRuleStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridLine(self, p);
    }
    pub fn put_layoutGridMode(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridMode(self, v);
    }
    pub fn get_layoutGridMode(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridMode(self, p);
    }
    pub fn put_layoutGridType(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGridType(self, v);
    }
    pub fn get_layoutGridType(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridType(self, p);
    }
    pub fn put_layoutGrid(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutGrid(self, v);
    }
    pub fn get_layoutGrid(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGrid(self, p);
    }
    pub fn put_textAutospace(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAutospace(self, v);
    }
    pub fn get_textAutospace(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAutospace(self, p);
    }
    pub fn put_wordBreak(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordBreak(self, v);
    }
    pub fn get_wordBreak(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordBreak(self, p);
    }
    pub fn put_lineBreak(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineBreak(self, v);
    }
    pub fn get_lineBreak(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineBreak(self, p);
    }
    pub fn put_textJustify(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textJustify(self, v);
    }
    pub fn get_textJustify(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textJustify(self, p);
    }
    pub fn put_textJustifyTrim(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textJustifyTrim(self, v);
    }
    pub fn get_textJustifyTrim(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textJustifyTrim(self, p);
    }
    pub fn put_textKashida(self: *const IHTMLRuleStyle2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textKashida(self, v);
    }
    pub fn get_textKashida(self: *const IHTMLRuleStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textKashida(self, p);
    }
    pub fn put_overflowX(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflowX(self, v);
    }
    pub fn get_overflowX(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflowX(self, p);
    }
    pub fn put_overflowY(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_overflowY(self, v);
    }
    pub fn get_overflowY(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflowY(self, p);
    }
    pub fn put_accelerator(self: *const IHTMLRuleStyle2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_accelerator(self, v);
    }
    pub fn get_accelerator(self: *const IHTMLRuleStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accelerator(self, p);
    }
};

const IID_IHTMLRuleStyle3_Value = Guid.initString("3050f657-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRuleStyle3 = &IID_IHTMLRuleStyle3_Value;
pub const IHTMLRuleStyle3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_layoutFlow: *const fn(
            self: *const IHTMLRuleStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutFlow: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_zoom: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zoom: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wordWrap: *const fn(
            self: *const IHTMLRuleStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordWrap: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textUnderlinePosition: *const fn(
            self: *const IHTMLRuleStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textUnderlinePosition: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarBaseColor: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarBaseColor: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarFaceColor: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarFaceColor: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbar3dLightColor: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbar3dLightColor: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarShadowColor: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarShadowColor: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarHighlightColor: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarHighlightColor: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarDarkShadowColor: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarDarkShadowColor: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarArrowColor: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarArrowColor: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbarTrackColor: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarTrackColor: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_writingMode: *const fn(
            self: *const IHTMLRuleStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_writingMode: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAlignLast: *const fn(
            self: *const IHTMLRuleStyle3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlignLast: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textKashidaSpace: *const fn(
            self: *const IHTMLRuleStyle3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textKashidaSpace: *const fn(
            self: *const IHTMLRuleStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_layoutFlow(self: *const IHTMLRuleStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_layoutFlow(self, v);
    }
    pub fn get_layoutFlow(self: *const IHTMLRuleStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutFlow(self, p);
    }
    pub fn put_zoom(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_zoom(self, v);
    }
    pub fn get_zoom(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_zoom(self, p);
    }
    pub fn put_wordWrap(self: *const IHTMLRuleStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_wordWrap(self, v);
    }
    pub fn get_wordWrap(self: *const IHTMLRuleStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordWrap(self, p);
    }
    pub fn put_textUnderlinePosition(self: *const IHTMLRuleStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textUnderlinePosition(self, v);
    }
    pub fn get_textUnderlinePosition(self: *const IHTMLRuleStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textUnderlinePosition(self, p);
    }
    pub fn put_scrollbarBaseColor(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarBaseColor(self, v);
    }
    pub fn get_scrollbarBaseColor(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarBaseColor(self, p);
    }
    pub fn put_scrollbarFaceColor(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarFaceColor(self, v);
    }
    pub fn get_scrollbarFaceColor(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarFaceColor(self, p);
    }
    pub fn put_scrollbar3dLightColor(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbar3dLightColor(self, v);
    }
    pub fn get_scrollbar3dLightColor(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbar3dLightColor(self, p);
    }
    pub fn put_scrollbarShadowColor(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarShadowColor(self, v);
    }
    pub fn get_scrollbarShadowColor(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarShadowColor(self, p);
    }
    pub fn put_scrollbarHighlightColor(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarHighlightColor(self, v);
    }
    pub fn get_scrollbarHighlightColor(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarHighlightColor(self, p);
    }
    pub fn put_scrollbarDarkShadowColor(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarDarkShadowColor(self, v);
    }
    pub fn get_scrollbarDarkShadowColor(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarDarkShadowColor(self, p);
    }
    pub fn put_scrollbarArrowColor(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarArrowColor(self, v);
    }
    pub fn get_scrollbarArrowColor(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarArrowColor(self, p);
    }
    pub fn put_scrollbarTrackColor(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbarTrackColor(self, v);
    }
    pub fn get_scrollbarTrackColor(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarTrackColor(self, p);
    }
    pub fn put_writingMode(self: *const IHTMLRuleStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_writingMode(self, v);
    }
    pub fn get_writingMode(self: *const IHTMLRuleStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_writingMode(self, p);
    }
    pub fn put_textAlignLast(self: *const IHTMLRuleStyle3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAlignLast(self, v);
    }
    pub fn get_textAlignLast(self: *const IHTMLRuleStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlignLast(self, p);
    }
    pub fn put_textKashidaSpace(self: *const IHTMLRuleStyle3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textKashidaSpace(self, v);
    }
    pub fn get_textKashidaSpace(self: *const IHTMLRuleStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textKashidaSpace(self, p);
    }
};

const IID_IHTMLRuleStyle4_Value = Guid.initString("3050f817-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRuleStyle4 = &IID_IHTMLRuleStyle4_Value;
pub const IHTMLRuleStyle4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textOverflow: *const fn(
            self: *const IHTMLRuleStyle4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textOverflow: *const fn(
            self: *const IHTMLRuleStyle4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_minHeight: *const fn(
            self: *const IHTMLRuleStyle4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minHeight: *const fn(
            self: *const IHTMLRuleStyle4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_textOverflow(self: *const IHTMLRuleStyle4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textOverflow(self, v);
    }
    pub fn get_textOverflow(self: *const IHTMLRuleStyle4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textOverflow(self, p);
    }
    pub fn put_minHeight(self: *const IHTMLRuleStyle4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_minHeight(self, v);
    }
    pub fn get_minHeight(self: *const IHTMLRuleStyle4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_minHeight(self, p);
    }
};

const IID_IHTMLRuleStyle5_Value = Guid.initString("3050f335-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRuleStyle5 = &IID_IHTMLRuleStyle5_Value;
pub const IHTMLRuleStyle5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msInterpolationMode: *const fn(
            self: *const IHTMLRuleStyle5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msInterpolationMode: *const fn(
            self: *const IHTMLRuleStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxHeight: *const fn(
            self: *const IHTMLRuleStyle5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxHeight: *const fn(
            self: *const IHTMLRuleStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_minWidth: *const fn(
            self: *const IHTMLRuleStyle5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minWidth: *const fn(
            self: *const IHTMLRuleStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxWidth: *const fn(
            self: *const IHTMLRuleStyle5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxWidth: *const fn(
            self: *const IHTMLRuleStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_msInterpolationMode(self: *const IHTMLRuleStyle5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msInterpolationMode(self, v);
    }
    pub fn get_msInterpolationMode(self: *const IHTMLRuleStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msInterpolationMode(self, p);
    }
    pub fn put_maxHeight(self: *const IHTMLRuleStyle5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxHeight(self, v);
    }
    pub fn get_maxHeight(self: *const IHTMLRuleStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxHeight(self, p);
    }
    pub fn put_minWidth(self: *const IHTMLRuleStyle5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_minWidth(self, v);
    }
    pub fn get_minWidth(self: *const IHTMLRuleStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_minWidth(self, p);
    }
    pub fn put_maxWidth(self: *const IHTMLRuleStyle5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxWidth(self, v);
    }
    pub fn get_maxWidth(self: *const IHTMLRuleStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxWidth(self, p);
    }
};

const IID_IHTMLRuleStyle6_Value = Guid.initString("30510471-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRuleStyle6 = &IID_IHTMLRuleStyle6_Value;
pub const IHTMLRuleStyle6 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_content: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_content: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_captionSide: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_captionSide: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_counterIncrement: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_counterIncrement: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_counterReset: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_counterReset: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outline: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outline: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineWidth: *const fn(
            self: *const IHTMLRuleStyle6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineWidth: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineStyle: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineStyle: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outlineColor: *const fn(
            self: *const IHTMLRuleStyle6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineColor: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_boxSizing: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boxSizing: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderSpacing: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderSpacing: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_orphans: *const fn(
            self: *const IHTMLRuleStyle6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_orphans: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_widows: *const fn(
            self: *const IHTMLRuleStyle6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_widows: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageBreakInside: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakInside: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_emptyCells: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_emptyCells: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msBlockProgression: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msBlockProgression: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_quotes: *const fn(
            self: *const IHTMLRuleStyle6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_quotes: *const fn(
            self: *const IHTMLRuleStyle6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_content(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_content(self, v);
    }
    pub fn get_content(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_content(self, p);
    }
    pub fn put_captionSide(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_captionSide(self, v);
    }
    pub fn get_captionSide(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_captionSide(self, p);
    }
    pub fn put_counterIncrement(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_counterIncrement(self, v);
    }
    pub fn get_counterIncrement(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_counterIncrement(self, p);
    }
    pub fn put_counterReset(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_counterReset(self, v);
    }
    pub fn get_counterReset(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_counterReset(self, p);
    }
    pub fn put_outline(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_outline(self, v);
    }
    pub fn get_outline(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outline(self, p);
    }
    pub fn put_outlineWidth(self: *const IHTMLRuleStyle6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineWidth(self, v);
    }
    pub fn get_outlineWidth(self: *const IHTMLRuleStyle6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineWidth(self, p);
    }
    pub fn put_outlineStyle(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineStyle(self, v);
    }
    pub fn get_outlineStyle(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineStyle(self, p);
    }
    pub fn put_outlineColor(self: *const IHTMLRuleStyle6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_outlineColor(self, v);
    }
    pub fn get_outlineColor(self: *const IHTMLRuleStyle6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineColor(self, p);
    }
    pub fn put_boxSizing(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_boxSizing(self, v);
    }
    pub fn get_boxSizing(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_boxSizing(self, p);
    }
    pub fn put_borderSpacing(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderSpacing(self, v);
    }
    pub fn get_borderSpacing(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderSpacing(self, p);
    }
    pub fn put_orphans(self: *const IHTMLRuleStyle6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_orphans(self, v);
    }
    pub fn get_orphans(self: *const IHTMLRuleStyle6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_orphans(self, p);
    }
    pub fn put_widows(self: *const IHTMLRuleStyle6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_widows(self, v);
    }
    pub fn get_widows(self: *const IHTMLRuleStyle6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_widows(self, p);
    }
    pub fn put_pageBreakInside(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageBreakInside(self, v);
    }
    pub fn get_pageBreakInside(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakInside(self, p);
    }
    pub fn put_emptyCells(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_emptyCells(self, v);
    }
    pub fn get_emptyCells(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_emptyCells(self, p);
    }
    pub fn put_msBlockProgression(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_msBlockProgression(self, v);
    }
    pub fn get_msBlockProgression(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msBlockProgression(self, p);
    }
    pub fn put_quotes(self: *const IHTMLRuleStyle6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_quotes(self, v);
    }
    pub fn get_quotes(self: *const IHTMLRuleStyle6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_quotes(self, p);
    }
};

const IID_DispHTMLStyle_Value = Guid.initString("3050f55a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyle = &IID_DispHTMLStyle_Value;
pub const DispHTMLStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLRuleStyle_Value = Guid.initString("3050f55c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLRuleStyle = &IID_DispHTMLRuleStyle_Value;
pub const DispHTMLRuleStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleSheetRulesCollection_Value = Guid.initString("3050f2e5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetRulesCollection = &IID_IHTMLStyleSheetRulesCollection_Value;
pub const IHTMLStyleSheetRulesCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLStyleSheetRulesCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLStyleSheetRulesCollection,
            index: i32,
            ppHTMLStyleSheetRule: ?*?*IHTMLStyleSheetRule,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLStyleSheetRulesCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLStyleSheetRulesCollection, index: i32, ppHTMLStyleSheetRule: ?*?*IHTMLStyleSheetRule) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppHTMLStyleSheetRule);
    }
};

const IID_IHTMLStyleSheet_Value = Guid.initString("3050f2e3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheet = &IID_IHTMLStyleSheet_Value;
pub const IHTMLStyleSheet = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_title: *const fn(
            self: *const IHTMLStyleSheet,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_title: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentStyleSheet: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?*IHTMLStyleSheet,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_owningElement: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLStyleSheet,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readOnly: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imports: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?*IHTMLStyleSheetsCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLStyleSheet,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_id: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        addImport: *const fn(
            self: *const IHTMLStyleSheet,
            bstrURL: ?BSTR,
            lIndex: i32,
            plIndex: ?*i32,
        ) callconv(.winapi) HRESULT,
        addRule: *const fn(
            self: *const IHTMLStyleSheet,
            bstrSelector: ?BSTR,
            bstrStyle: ?BSTR,
            lIndex: i32,
            plNewIndex: ?*i32,
        ) callconv(.winapi) HRESULT,
        removeImport: *const fn(
            self: *const IHTMLStyleSheet,
            lIndex: i32,
        ) callconv(.winapi) HRESULT,
        removeRule: *const fn(
            self: *const IHTMLStyleSheet,
            lIndex: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_media: *const fn(
            self: *const IHTMLStyleSheet,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cssText: *const fn(
            self: *const IHTMLStyleSheet,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssText: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rules: *const fn(
            self: *const IHTMLStyleSheet,
            p: ?*?*IHTMLStyleSheetRulesCollection,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_title(self: *const IHTMLStyleSheet, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_title(self, v);
    }
    pub fn get_title(self: *const IHTMLStyleSheet, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_title(self, p);
    }
    pub fn get_parentStyleSheet(self: *const IHTMLStyleSheet, p: ?*?*IHTMLStyleSheet) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentStyleSheet(self, p);
    }
    pub fn get_owningElement(self: *const IHTMLStyleSheet, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_owningElement(self, p);
    }
    pub fn put_disabled(self: *const IHTMLStyleSheet, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLStyleSheet, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_readOnly(self: *const IHTMLStyleSheet, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_readOnly(self, p);
    }
    pub fn get_imports(self: *const IHTMLStyleSheet, p: ?*?*IHTMLStyleSheetsCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_imports(self, p);
    }
    pub fn put_href(self: *const IHTMLStyleSheet, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLStyleSheet, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn get_type(self: *const IHTMLStyleSheet, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn get_id(self: *const IHTMLStyleSheet, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_id(self, p);
    }
    pub fn addImport(self: *const IHTMLStyleSheet, bstrURL: ?BSTR, lIndex: i32, plIndex: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.addImport(self, bstrURL, lIndex, plIndex);
    }
    pub fn addRule(self: *const IHTMLStyleSheet, bstrSelector: ?BSTR, bstrStyle: ?BSTR, lIndex: i32, plNewIndex: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.addRule(self, bstrSelector, bstrStyle, lIndex, plNewIndex);
    }
    pub fn removeImport(self: *const IHTMLStyleSheet, lIndex: i32) callconv(.@"inline") HRESULT {
        return self.vtable.removeImport(self, lIndex);
    }
    pub fn removeRule(self: *const IHTMLStyleSheet, lIndex: i32) callconv(.@"inline") HRESULT {
        return self.vtable.removeRule(self, lIndex);
    }
    pub fn put_media(self: *const IHTMLStyleSheet, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_media(self, v);
    }
    pub fn get_media(self: *const IHTMLStyleSheet, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
    pub fn put_cssText(self: *const IHTMLStyleSheet, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cssText(self, v);
    }
    pub fn get_cssText(self: *const IHTMLStyleSheet, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssText(self, p);
    }
    pub fn get_rules(self: *const IHTMLStyleSheet, p: ?*?*IHTMLStyleSheetRulesCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_rules(self, p);
    }
};

const IID_IHTMLCSSRule_Value = Guid.initString("305106e9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCSSRule = &IID_IHTMLCSSRule_Value;
pub const IHTMLCSSRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLCSSRule,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cssText: *const fn(
            self: *const IHTMLCSSRule,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssText: *const fn(
            self: *const IHTMLCSSRule,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentRule: *const fn(
            self: *const IHTMLCSSRule,
            p: ?*?*IHTMLCSSRule,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentStyleSheet: *const fn(
            self: *const IHTMLCSSRule,
            p: ?*?*IHTMLStyleSheet,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLCSSRule, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_cssText(self: *const IHTMLCSSRule, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cssText(self, v);
    }
    pub fn get_cssText(self: *const IHTMLCSSRule, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssText(self, p);
    }
    pub fn get_parentRule(self: *const IHTMLCSSRule, p: ?*?*IHTMLCSSRule) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentRule(self, p);
    }
    pub fn get_parentStyleSheet(self: *const IHTMLCSSRule, p: ?*?*IHTMLStyleSheet) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentStyleSheet(self, p);
    }
};

const IID_IHTMLCSSImportRule_Value = Guid.initString("305106ea-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCSSImportRule = &IID_IHTMLCSSImportRule_Value;
pub const IHTMLCSSImportRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLCSSImportRule,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_media: *const fn(
            self: *const IHTMLCSSImportRule,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const IHTMLCSSImportRule,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleSheet: *const fn(
            self: *const IHTMLCSSImportRule,
            p: ?*?*IHTMLStyleSheet,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_href(self: *const IHTMLCSSImportRule, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn put_media(self: *const IHTMLCSSImportRule, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_media(self, v);
    }
    pub fn get_media(self: *const IHTMLCSSImportRule, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
    pub fn get_styleSheet(self: *const IHTMLCSSImportRule, p: ?*?*IHTMLStyleSheet) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleSheet(self, p);
    }
};

const IID_IHTMLCSSMediaRule_Value = Guid.initString("305106eb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCSSMediaRule = &IID_IHTMLCSSMediaRule_Value;
pub const IHTMLCSSMediaRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_media: *const fn(
            self: *const IHTMLCSSMediaRule,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const IHTMLCSSMediaRule,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssRules: *const fn(
            self: *const IHTMLCSSMediaRule,
            p: ?*?*IHTMLStyleSheetRulesCollection,
        ) callconv(.winapi) HRESULT,
        insertRule: *const fn(
            self: *const IHTMLCSSMediaRule,
            bstrRule: ?BSTR,
            lIndex: i32,
            plNewIndex: ?*i32,
        ) callconv(.winapi) HRESULT,
        deleteRule: *const fn(
            self: *const IHTMLCSSMediaRule,
            lIndex: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_media(self: *const IHTMLCSSMediaRule, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_media(self, v);
    }
    pub fn get_media(self: *const IHTMLCSSMediaRule, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
    pub fn get_cssRules(self: *const IHTMLCSSMediaRule, p: ?*?*IHTMLStyleSheetRulesCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssRules(self, p);
    }
    pub fn insertRule(self: *const IHTMLCSSMediaRule, bstrRule: ?BSTR, lIndex: i32, plNewIndex: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.insertRule(self, bstrRule, lIndex, plNewIndex);
    }
    pub fn deleteRule(self: *const IHTMLCSSMediaRule, lIndex: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteRule(self, lIndex);
    }
};

const IID_IHTMLCSSMediaList_Value = Guid.initString("30510731-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCSSMediaList = &IID_IHTMLCSSMediaList_Value;
pub const IHTMLCSSMediaList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_mediaText: *const fn(
            self: *const IHTMLCSSMediaList,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mediaText: *const fn(
            self: *const IHTMLCSSMediaList,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLCSSMediaList,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLCSSMediaList,
            index: i32,
            pbstrMedium: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        appendMedium: *const fn(
            self: *const IHTMLCSSMediaList,
            bstrMedium: ?BSTR,
        ) callconv(.winapi) HRESULT,
        deleteMedium: *const fn(
            self: *const IHTMLCSSMediaList,
            bstrMedium: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_mediaText(self: *const IHTMLCSSMediaList, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_mediaText(self, v);
    }
    pub fn get_mediaText(self: *const IHTMLCSSMediaList, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_mediaText(self, p);
    }
    pub fn get_length(self: *const IHTMLCSSMediaList, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLCSSMediaList, index: i32, pbstrMedium: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, pbstrMedium);
    }
    pub fn appendMedium(self: *const IHTMLCSSMediaList, bstrMedium: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.appendMedium(self, bstrMedium);
    }
    pub fn deleteMedium(self: *const IHTMLCSSMediaList, bstrMedium: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.deleteMedium(self, bstrMedium);
    }
};

const IID_IHTMLCSSNamespaceRule_Value = Guid.initString("305106ee-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCSSNamespaceRule = &IID_IHTMLCSSNamespaceRule_Value;
pub const IHTMLCSSNamespaceRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaceURI: *const fn(
            self: *const IHTMLCSSNamespaceRule,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_prefix: *const fn(
            self: *const IHTMLCSSNamespaceRule,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_namespaceURI(self: *const IHTMLCSSNamespaceRule, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_namespaceURI(self, p);
    }
    pub fn get_prefix(self: *const IHTMLCSSNamespaceRule, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_prefix(self, p);
    }
};

const IID_IHTMLMSCSSKeyframeRule_Value = Guid.initString("3051080c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMSCSSKeyframeRule = &IID_IHTMLMSCSSKeyframeRule_Value;
pub const IHTMLMSCSSKeyframeRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_keyText: *const fn(
            self: *const IHTMLMSCSSKeyframeRule,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_keyText: *const fn(
            self: *const IHTMLMSCSSKeyframeRule,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_style: *const fn(
            self: *const IHTMLMSCSSKeyframeRule,
            p: ?*?*IHTMLRuleStyle,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_keyText(self: *const IHTMLMSCSSKeyframeRule, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_keyText(self, v);
    }
    pub fn get_keyText(self: *const IHTMLMSCSSKeyframeRule, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_keyText(self, p);
    }
    pub fn get_style(self: *const IHTMLMSCSSKeyframeRule, p: ?*?*IHTMLRuleStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_style(self, p);
    }
};

const IID_IHTMLMSCSSKeyframesRule_Value = Guid.initString("3051080d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMSCSSKeyframesRule = &IID_IHTMLMSCSSKeyframesRule_Value;
pub const IHTMLMSCSSKeyframesRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLMSCSSKeyframesRule,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLMSCSSKeyframesRule,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssRules: *const fn(
            self: *const IHTMLMSCSSKeyframesRule,
            p: ?*?*IHTMLStyleSheetRulesCollection,
        ) callconv(.winapi) HRESULT,
        appendRule: *const fn(
            self: *const IHTMLMSCSSKeyframesRule,
            bstrRule: ?BSTR,
        ) callconv(.winapi) HRESULT,
        deleteRule: *const fn(
            self: *const IHTMLMSCSSKeyframesRule,
            bstrKey: ?BSTR,
        ) callconv(.winapi) HRESULT,
        findRule: *const fn(
            self: *const IHTMLMSCSSKeyframesRule,
            bstrKey: ?BSTR,
            ppMSKeyframeRule: ?*?*IHTMLMSCSSKeyframeRule,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_name(self: *const IHTMLMSCSSKeyframesRule, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLMSCSSKeyframesRule, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn get_cssRules(self: *const IHTMLMSCSSKeyframesRule, p: ?*?*IHTMLStyleSheetRulesCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssRules(self, p);
    }
    pub fn appendRule(self: *const IHTMLMSCSSKeyframesRule, bstrRule: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.appendRule(self, bstrRule);
    }
    pub fn deleteRule(self: *const IHTMLMSCSSKeyframesRule, bstrKey: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.deleteRule(self, bstrKey);
    }
    pub fn findRule(self: *const IHTMLMSCSSKeyframesRule, bstrKey: ?BSTR, ppMSKeyframeRule: ?*?*IHTMLMSCSSKeyframeRule) callconv(.@"inline") HRESULT {
        return self.vtable.findRule(self, bstrKey, ppMSKeyframeRule);
    }
};

const IID_DispHTMLCSSRule_Value = Guid.initString("3059007d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCSSRule = &IID_DispHTMLCSSRule_Value;
pub const DispHTMLCSSRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLCSSImportRule_Value = Guid.initString("3059007e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCSSImportRule = &IID_DispHTMLCSSImportRule_Value;
pub const DispHTMLCSSImportRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLCSSMediaRule_Value = Guid.initString("3059007f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCSSMediaRule = &IID_DispHTMLCSSMediaRule_Value;
pub const DispHTMLCSSMediaRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLCSSMediaList_Value = Guid.initString("30590097-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCSSMediaList = &IID_DispHTMLCSSMediaList_Value;
pub const DispHTMLCSSMediaList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLCSSNamespaceRule_Value = Guid.initString("30590080-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCSSNamespaceRule = &IID_DispHTMLCSSNamespaceRule_Value;
pub const DispHTMLCSSNamespaceRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLMSCSSKeyframeRule_Value = Guid.initString("305900de-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLMSCSSKeyframeRule = &IID_DispHTMLMSCSSKeyframeRule_Value;
pub const DispHTMLMSCSSKeyframeRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLMSCSSKeyframesRule_Value = Guid.initString("305900df-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLMSCSSKeyframesRule = &IID_DispHTMLMSCSSKeyframesRule_Value;
pub const DispHTMLMSCSSKeyframesRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLRenderStyle_Value = Guid.initString("3050f6ae-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRenderStyle = &IID_IHTMLRenderStyle_Value;
pub const IHTMLRenderStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textLineThroughStyle: *const fn(
            self: *const IHTMLRenderStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textLineThroughStyle: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textUnderlineStyle: *const fn(
            self: *const IHTMLRenderStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textUnderlineStyle: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textEffect: *const fn(
            self: *const IHTMLRenderStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textEffect: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textColor: *const fn(
            self: *const IHTMLRenderStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textColor: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textBackgroundColor: *const fn(
            self: *const IHTMLRenderStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textBackgroundColor: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecorationColor: *const fn(
            self: *const IHTMLRenderStyle,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecorationColor: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_renderingPriority: *const fn(
            self: *const IHTMLRenderStyle,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_renderingPriority: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultTextSelection: *const fn(
            self: *const IHTMLRenderStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultTextSelection: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textDecoration: *const fn(
            self: *const IHTMLRenderStyle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecoration: *const fn(
            self: *const IHTMLRenderStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_textLineThroughStyle(self: *const IHTMLRenderStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textLineThroughStyle(self, v);
    }
    pub fn get_textLineThroughStyle(self: *const IHTMLRenderStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textLineThroughStyle(self, p);
    }
    pub fn put_textUnderlineStyle(self: *const IHTMLRenderStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textUnderlineStyle(self, v);
    }
    pub fn get_textUnderlineStyle(self: *const IHTMLRenderStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textUnderlineStyle(self, p);
    }
    pub fn put_textEffect(self: *const IHTMLRenderStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textEffect(self, v);
    }
    pub fn get_textEffect(self: *const IHTMLRenderStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textEffect(self, p);
    }
    pub fn put_textColor(self: *const IHTMLRenderStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textColor(self, v);
    }
    pub fn get_textColor(self: *const IHTMLRenderStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textColor(self, p);
    }
    pub fn put_textBackgroundColor(self: *const IHTMLRenderStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textBackgroundColor(self, v);
    }
    pub fn get_textBackgroundColor(self: *const IHTMLRenderStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textBackgroundColor(self, p);
    }
    pub fn put_textDecorationColor(self: *const IHTMLRenderStyle, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecorationColor(self, v);
    }
    pub fn get_textDecorationColor(self: *const IHTMLRenderStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecorationColor(self, p);
    }
    pub fn put_renderingPriority(self: *const IHTMLRenderStyle, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_renderingPriority(self, v);
    }
    pub fn get_renderingPriority(self: *const IHTMLRenderStyle, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_renderingPriority(self, p);
    }
    pub fn put_defaultTextSelection(self: *const IHTMLRenderStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultTextSelection(self, v);
    }
    pub fn get_defaultTextSelection(self: *const IHTMLRenderStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultTextSelection(self, p);
    }
    pub fn put_textDecoration(self: *const IHTMLRenderStyle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textDecoration(self, v);
    }
    pub fn get_textDecoration(self: *const IHTMLRenderStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecoration(self, p);
    }
};

const IID_DispHTMLRenderStyle_Value = Guid.initString("3050f58b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLRenderStyle = &IID_DispHTMLRenderStyle_Value;
pub const DispHTMLRenderStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLCurrentStyle_Value = Guid.initString("3050f3db-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCurrentStyle = &IID_IHTMLCurrentStyle_Value;
pub const IHTMLCurrentStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_position: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleFloat: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_color: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundColor: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontFamily: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontStyle: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontVariant: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontWeight: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontSize: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundImage: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPositionX: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundPositionY: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundRepeat: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftColor: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopColor: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightColor: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomColor: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopStyle: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightStyle: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomStyle: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftStyle: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderTopWidth: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderRightWidth: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderBottomWidth: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderLeftWidth: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_left: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_top: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingLeft: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingTop: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingRight: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paddingBottom: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlign: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDecoration: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_display: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_visibility: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zIndex: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_letterSpacing: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineHeight: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textIndent: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_verticalAlign: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundAttachment: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginTop: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginRight: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginBottom: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginLeft: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clear: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyleType: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStylePosition: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_listStyleImage: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipTop: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipRight: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipBottom: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipLeft: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflow: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakBefore: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakAfter: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cursor: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tableLayout: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderCollapse: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_direction: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_behavior: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLCurrentStyle,
            strAttributeName: ?BSTR,
            lFlags: i32,
            AttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unicodeBidi: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_right: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bottom: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeMode: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyAlign: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyPosition: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rubyOverhang: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAutospace: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineBreak: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordBreak: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textJustify: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textJustifyTrim: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textKashida: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_blockDirection: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridChar: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridLine: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridMode: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutGridType: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderStyle: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderWidth: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_padding: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_margin: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accelerator: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflowX: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overflowY: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textTransform: *const fn(
            self: *const IHTMLCurrentStyle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_position(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_position(self, p);
    }
    pub fn get_styleFloat(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleFloat(self, p);
    }
    pub fn get_color(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_color(self, p);
    }
    pub fn get_backgroundColor(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundColor(self, p);
    }
    pub fn get_fontFamily(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontFamily(self, p);
    }
    pub fn get_fontStyle(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontStyle(self, p);
    }
    pub fn get_fontVariant(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontVariant(self, p);
    }
    pub fn get_fontWeight(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontWeight(self, p);
    }
    pub fn get_fontSize(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontSize(self, p);
    }
    pub fn get_backgroundImage(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundImage(self, p);
    }
    pub fn get_backgroundPositionX(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPositionX(self, p);
    }
    pub fn get_backgroundPositionY(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundPositionY(self, p);
    }
    pub fn get_backgroundRepeat(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundRepeat(self, p);
    }
    pub fn get_borderLeftColor(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftColor(self, p);
    }
    pub fn get_borderTopColor(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopColor(self, p);
    }
    pub fn get_borderRightColor(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightColor(self, p);
    }
    pub fn get_borderBottomColor(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomColor(self, p);
    }
    pub fn get_borderTopStyle(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopStyle(self, p);
    }
    pub fn get_borderRightStyle(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightStyle(self, p);
    }
    pub fn get_borderBottomStyle(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomStyle(self, p);
    }
    pub fn get_borderLeftStyle(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftStyle(self, p);
    }
    pub fn get_borderTopWidth(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderTopWidth(self, p);
    }
    pub fn get_borderRightWidth(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderRightWidth(self, p);
    }
    pub fn get_borderBottomWidth(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderBottomWidth(self, p);
    }
    pub fn get_borderLeftWidth(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderLeftWidth(self, p);
    }
    pub fn get_left(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_left(self, p);
    }
    pub fn get_top(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_top(self, p);
    }
    pub fn get_width(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn get_height(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn get_paddingLeft(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingLeft(self, p);
    }
    pub fn get_paddingTop(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingTop(self, p);
    }
    pub fn get_paddingRight(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingRight(self, p);
    }
    pub fn get_paddingBottom(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_paddingBottom(self, p);
    }
    pub fn get_textAlign(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlign(self, p);
    }
    pub fn get_textDecoration(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDecoration(self, p);
    }
    pub fn get_display(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_display(self, p);
    }
    pub fn get_visibility(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_visibility(self, p);
    }
    pub fn get_zIndex(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_zIndex(self, p);
    }
    pub fn get_letterSpacing(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_letterSpacing(self, p);
    }
    pub fn get_lineHeight(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineHeight(self, p);
    }
    pub fn get_textIndent(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textIndent(self, p);
    }
    pub fn get_verticalAlign(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_verticalAlign(self, p);
    }
    pub fn get_backgroundAttachment(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundAttachment(self, p);
    }
    pub fn get_marginTop(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginTop(self, p);
    }
    pub fn get_marginRight(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginRight(self, p);
    }
    pub fn get_marginBottom(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginBottom(self, p);
    }
    pub fn get_marginLeft(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginLeft(self, p);
    }
    pub fn get_clear(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clear(self, p);
    }
    pub fn get_listStyleType(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyleType(self, p);
    }
    pub fn get_listStylePosition(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStylePosition(self, p);
    }
    pub fn get_listStyleImage(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_listStyleImage(self, p);
    }
    pub fn get_clipTop(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipTop(self, p);
    }
    pub fn get_clipRight(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipRight(self, p);
    }
    pub fn get_clipBottom(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipBottom(self, p);
    }
    pub fn get_clipLeft(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipLeft(self, p);
    }
    pub fn get_overflow(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflow(self, p);
    }
    pub fn get_pageBreakBefore(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakBefore(self, p);
    }
    pub fn get_pageBreakAfter(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakAfter(self, p);
    }
    pub fn get_cursor(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cursor(self, p);
    }
    pub fn get_tableLayout(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_tableLayout(self, p);
    }
    pub fn get_borderCollapse(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderCollapse(self, p);
    }
    pub fn get_direction(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_direction(self, p);
    }
    pub fn get_behavior(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_behavior(self, p);
    }
    pub fn getAttribute(self: *const IHTMLCurrentStyle, strAttributeName: ?BSTR, lFlags: i32, AttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, strAttributeName, lFlags, AttributeValue);
    }
    pub fn get_unicodeBidi(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_unicodeBidi(self, p);
    }
    pub fn get_right(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_right(self, p);
    }
    pub fn get_bottom(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bottom(self, p);
    }
    pub fn get_imeMode(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeMode(self, p);
    }
    pub fn get_rubyAlign(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyAlign(self, p);
    }
    pub fn get_rubyPosition(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyPosition(self, p);
    }
    pub fn get_rubyOverhang(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rubyOverhang(self, p);
    }
    pub fn get_textAutospace(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAutospace(self, p);
    }
    pub fn get_lineBreak(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineBreak(self, p);
    }
    pub fn get_wordBreak(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordBreak(self, p);
    }
    pub fn get_textJustify(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textJustify(self, p);
    }
    pub fn get_textJustifyTrim(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textJustifyTrim(self, p);
    }
    pub fn get_textKashida(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textKashida(self, p);
    }
    pub fn get_blockDirection(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_blockDirection(self, p);
    }
    pub fn get_layoutGridChar(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridChar(self, p);
    }
    pub fn get_layoutGridLine(self: *const IHTMLCurrentStyle, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridLine(self, p);
    }
    pub fn get_layoutGridMode(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridMode(self, p);
    }
    pub fn get_layoutGridType(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutGridType(self, p);
    }
    pub fn get_borderStyle(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderStyle(self, p);
    }
    pub fn get_borderColor(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
    pub fn get_borderWidth(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderWidth(self, p);
    }
    pub fn get_padding(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_padding(self, p);
    }
    pub fn get_margin(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_margin(self, p);
    }
    pub fn get_accelerator(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accelerator(self, p);
    }
    pub fn get_overflowX(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflowX(self, p);
    }
    pub fn get_overflowY(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_overflowY(self, p);
    }
    pub fn get_textTransform(self: *const IHTMLCurrentStyle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textTransform(self, p);
    }
};

const IID_IHTMLCurrentStyle2_Value = Guid.initString("3050f658-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCurrentStyle2 = &IID_IHTMLCurrentStyle2_Value;
pub const IHTMLCurrentStyle2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layoutFlow: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordWrap: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textUnderlinePosition: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hasLayout: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarBaseColor: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarFaceColor: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbar3dLightColor: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarShadowColor: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarHighlightColor: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarDarkShadowColor: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarArrowColor: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbarTrackColor: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_writingMode: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zoom: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filter: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlignLast: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textKashidaSpace: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isBlock: *const fn(
            self: *const IHTMLCurrentStyle2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_layoutFlow(self: *const IHTMLCurrentStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_layoutFlow(self, p);
    }
    pub fn get_wordWrap(self: *const IHTMLCurrentStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordWrap(self, p);
    }
    pub fn get_textUnderlinePosition(self: *const IHTMLCurrentStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textUnderlinePosition(self, p);
    }
    pub fn get_hasLayout(self: *const IHTMLCurrentStyle2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_hasLayout(self, p);
    }
    pub fn get_scrollbarBaseColor(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarBaseColor(self, p);
    }
    pub fn get_scrollbarFaceColor(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarFaceColor(self, p);
    }
    pub fn get_scrollbar3dLightColor(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbar3dLightColor(self, p);
    }
    pub fn get_scrollbarShadowColor(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarShadowColor(self, p);
    }
    pub fn get_scrollbarHighlightColor(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarHighlightColor(self, p);
    }
    pub fn get_scrollbarDarkShadowColor(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarDarkShadowColor(self, p);
    }
    pub fn get_scrollbarArrowColor(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarArrowColor(self, p);
    }
    pub fn get_scrollbarTrackColor(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbarTrackColor(self, p);
    }
    pub fn get_writingMode(self: *const IHTMLCurrentStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_writingMode(self, p);
    }
    pub fn get_zoom(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_zoom(self, p);
    }
    pub fn get_filter(self: *const IHTMLCurrentStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_filter(self, p);
    }
    pub fn get_textAlignLast(self: *const IHTMLCurrentStyle2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlignLast(self, p);
    }
    pub fn get_textKashidaSpace(self: *const IHTMLCurrentStyle2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textKashidaSpace(self, p);
    }
    pub fn get_isBlock(self: *const IHTMLCurrentStyle2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isBlock(self, p);
    }
};

const IID_IHTMLCurrentStyle3_Value = Guid.initString("3050f818-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCurrentStyle3 = &IID_IHTMLCurrentStyle3_Value;
pub const IHTMLCurrentStyle3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textOverflow: *const fn(
            self: *const IHTMLCurrentStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minHeight: *const fn(
            self: *const IHTMLCurrentStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wordSpacing: *const fn(
            self: *const IHTMLCurrentStyle3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_whiteSpace: *const fn(
            self: *const IHTMLCurrentStyle3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_textOverflow(self: *const IHTMLCurrentStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textOverflow(self, p);
    }
    pub fn get_minHeight(self: *const IHTMLCurrentStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_minHeight(self, p);
    }
    pub fn get_wordSpacing(self: *const IHTMLCurrentStyle3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_wordSpacing(self, p);
    }
    pub fn get_whiteSpace(self: *const IHTMLCurrentStyle3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_whiteSpace(self, p);
    }
};

const IID_IHTMLCurrentStyle4_Value = Guid.initString("3050f33b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCurrentStyle4 = &IID_IHTMLCurrentStyle4_Value;
pub const IHTMLCurrentStyle4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msInterpolationMode: *const fn(
            self: *const IHTMLCurrentStyle4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxHeight: *const fn(
            self: *const IHTMLCurrentStyle4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minWidth: *const fn(
            self: *const IHTMLCurrentStyle4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxWidth: *const fn(
            self: *const IHTMLCurrentStyle4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_msInterpolationMode(self: *const IHTMLCurrentStyle4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msInterpolationMode(self, p);
    }
    pub fn get_maxHeight(self: *const IHTMLCurrentStyle4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxHeight(self, p);
    }
    pub fn get_minWidth(self: *const IHTMLCurrentStyle4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_minWidth(self, p);
    }
    pub fn get_maxWidth(self: *const IHTMLCurrentStyle4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxWidth(self, p);
    }
};

const IID_IHTMLCurrentStyle5_Value = Guid.initString("30510481-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCurrentStyle5 = &IID_IHTMLCurrentStyle5_Value;
pub const IHTMLCurrentStyle5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_captionSide: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outline: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineWidth: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineStyle: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outlineColor: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boxSizing: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderSpacing: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_orphans: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_widows: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageBreakInside: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_emptyCells: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msBlockProgression: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_quotes: *const fn(
            self: *const IHTMLCurrentStyle5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_captionSide(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_captionSide(self, p);
    }
    pub fn get_outline(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outline(self, p);
    }
    pub fn get_outlineWidth(self: *const IHTMLCurrentStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineWidth(self, p);
    }
    pub fn get_outlineStyle(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineStyle(self, p);
    }
    pub fn get_outlineColor(self: *const IHTMLCurrentStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_outlineColor(self, p);
    }
    pub fn get_boxSizing(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_boxSizing(self, p);
    }
    pub fn get_borderSpacing(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderSpacing(self, p);
    }
    pub fn get_orphans(self: *const IHTMLCurrentStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_orphans(self, p);
    }
    pub fn get_widows(self: *const IHTMLCurrentStyle5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_widows(self, p);
    }
    pub fn get_pageBreakInside(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageBreakInside(self, p);
    }
    pub fn get_emptyCells(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_emptyCells(self, p);
    }
    pub fn get_msBlockProgression(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msBlockProgression(self, p);
    }
    pub fn get_quotes(self: *const IHTMLCurrentStyle5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_quotes(self, p);
    }
};

const IID_DispHTMLCurrentStyle_Value = Guid.initString("3050f557-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCurrentStyle = &IID_DispHTMLCurrentStyle_Value;
pub const DispHTMLCurrentStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLElement_Value = Guid.initString("3050f1ff-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElement = &IID_IHTMLElement_Value;
pub const IHTMLElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        setAttribute: *const fn(
            self: *const IHTMLElement,
            strAttributeName: ?BSTR,
            AttributeValue: VARIANT,
            lFlags: i32,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLElement,
            strAttributeName: ?BSTR,
            lFlags: i32,
            AttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttribute: *const fn(
            self: *const IHTMLElement,
            strAttributeName: ?BSTR,
            lFlags: i32,
            pfSuccess: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_className: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_className: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_id: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_id: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagName: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentElement: *const fn(
            self: *const IHTMLElement,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_style: *const fn(
            self: *const IHTMLElement,
            p: ?*?*IHTMLStyle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onhelp: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onhelp: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onclick: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onclick: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondblclick: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondblclick: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeydown: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeydown: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeyup: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeyup: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeypress: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeypress: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseout: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseout: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseover: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseover: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousemove: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousemove: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousedown: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousedown: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseup: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseup: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_document: *const fn(
            self: *const IHTMLElement,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_title: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_title: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_language: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_language: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselectstart: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselectstart: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        scrollIntoView: *const fn(
            self: *const IHTMLElement,
            varargStart: VARIANT,
        ) callconv(.winapi) HRESULT,
        contains: *const fn(
            self: *const IHTMLElement,
            pChild: ?*IHTMLElement,
            pfResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sourceIndex: *const fn(
            self: *const IHTMLElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_recordNumber: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lang: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lang: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetLeft: *const fn(
            self: *const IHTMLElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetTop: *const fn(
            self: *const IHTMLElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetWidth: *const fn(
            self: *const IHTMLElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetHeight: *const fn(
            self: *const IHTMLElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetParent: *const fn(
            self: *const IHTMLElement,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_innerHTML: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_innerHTML: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_innerText: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_innerText: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outerHTML: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outerHTML: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_outerText: *const fn(
            self: *const IHTMLElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outerText: *const fn(
            self: *const IHTMLElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        insertAdjacentHTML: *const fn(
            self: *const IHTMLElement,
            where: ?BSTR,
            html: ?BSTR,
        ) callconv(.winapi) HRESULT,
        insertAdjacentText: *const fn(
            self: *const IHTMLElement,
            where: ?BSTR,
            text: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentTextEdit: *const fn(
            self: *const IHTMLElement,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isTextEdit: *const fn(
            self: *const IHTMLElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        click: *const fn(
            self: *const IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filters: *const fn(
            self: *const IHTMLElement,
            p: ?*?*IHTMLFiltersCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragstart: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragstart: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLElement,
            String: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeupdate: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeupdate: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onafterupdate: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onafterupdate: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerrorupdate: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerrorupdate: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onrowexit: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onrowexit: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onrowenter: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onrowenter: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondatasetchanged: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondatasetchanged: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondataavailable: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondataavailable: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondatasetcomplete: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondatasetcomplete: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfilterchange: *const fn(
            self: *const IHTMLElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfilterchange: *const fn(
            self: *const IHTMLElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_children: *const fn(
            self: *const IHTMLElement,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_all: *const fn(
            self: *const IHTMLElement,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn setAttribute(self: *const IHTMLElement, strAttributeName: ?BSTR, AttributeValue: VARIANT, lFlags: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, strAttributeName, AttributeValue, lFlags);
    }
    pub fn getAttribute(self: *const IHTMLElement, strAttributeName: ?BSTR, lFlags: i32, AttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, strAttributeName, lFlags, AttributeValue);
    }
    pub fn removeAttribute(self: *const IHTMLElement, strAttributeName: ?BSTR, lFlags: i32, pfSuccess: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttribute(self, strAttributeName, lFlags, pfSuccess);
    }
    pub fn put_className(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_className(self, v);
    }
    pub fn get_className(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_className(self, p);
    }
    pub fn put_id(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_id(self, v);
    }
    pub fn get_id(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_id(self, p);
    }
    pub fn get_tagName(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_tagName(self, p);
    }
    pub fn get_parentElement(self: *const IHTMLElement, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentElement(self, p);
    }
    pub fn get_style(self: *const IHTMLElement, p: ?*?*IHTMLStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_style(self, p);
    }
    pub fn put_onhelp(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onhelp(self, v);
    }
    pub fn get_onhelp(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onhelp(self, p);
    }
    pub fn put_onclick(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onclick(self, v);
    }
    pub fn get_onclick(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onclick(self, p);
    }
    pub fn put_ondblclick(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondblclick(self, v);
    }
    pub fn get_ondblclick(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondblclick(self, p);
    }
    pub fn put_onkeydown(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeydown(self, v);
    }
    pub fn get_onkeydown(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeydown(self, p);
    }
    pub fn put_onkeyup(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeyup(self, v);
    }
    pub fn get_onkeyup(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeyup(self, p);
    }
    pub fn put_onkeypress(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeypress(self, v);
    }
    pub fn get_onkeypress(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeypress(self, p);
    }
    pub fn put_onmouseout(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseout(self, v);
    }
    pub fn get_onmouseout(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseout(self, p);
    }
    pub fn put_onmouseover(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseover(self, v);
    }
    pub fn get_onmouseover(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseover(self, p);
    }
    pub fn put_onmousemove(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousemove(self, v);
    }
    pub fn get_onmousemove(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousemove(self, p);
    }
    pub fn put_onmousedown(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousedown(self, v);
    }
    pub fn get_onmousedown(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousedown(self, p);
    }
    pub fn put_onmouseup(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseup(self, v);
    }
    pub fn get_onmouseup(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseup(self, p);
    }
    pub fn get_document(self: *const IHTMLElement, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_document(self, p);
    }
    pub fn put_title(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_title(self, v);
    }
    pub fn get_title(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_title(self, p);
    }
    pub fn put_language(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_language(self, v);
    }
    pub fn get_language(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_language(self, p);
    }
    pub fn put_onselectstart(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselectstart(self, v);
    }
    pub fn get_onselectstart(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselectstart(self, p);
    }
    pub fn scrollIntoView(self: *const IHTMLElement, varargStart: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.scrollIntoView(self, varargStart);
    }
    pub fn contains(self: *const IHTMLElement, pChild: ?*IHTMLElement, pfResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.contains(self, pChild, pfResult);
    }
    pub fn get_sourceIndex(self: *const IHTMLElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_sourceIndex(self, p);
    }
    pub fn get_recordNumber(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_recordNumber(self, p);
    }
    pub fn put_lang(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lang(self, v);
    }
    pub fn get_lang(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lang(self, p);
    }
    pub fn get_offsetLeft(self: *const IHTMLElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetLeft(self, p);
    }
    pub fn get_offsetTop(self: *const IHTMLElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetTop(self, p);
    }
    pub fn get_offsetWidth(self: *const IHTMLElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetWidth(self, p);
    }
    pub fn get_offsetHeight(self: *const IHTMLElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetHeight(self, p);
    }
    pub fn get_offsetParent(self: *const IHTMLElement, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetParent(self, p);
    }
    pub fn put_innerHTML(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_innerHTML(self, v);
    }
    pub fn get_innerHTML(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_innerHTML(self, p);
    }
    pub fn put_innerText(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_innerText(self, v);
    }
    pub fn get_innerText(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_innerText(self, p);
    }
    pub fn put_outerHTML(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_outerHTML(self, v);
    }
    pub fn get_outerHTML(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outerHTML(self, p);
    }
    pub fn put_outerText(self: *const IHTMLElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_outerText(self, v);
    }
    pub fn get_outerText(self: *const IHTMLElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_outerText(self, p);
    }
    pub fn insertAdjacentHTML(self: *const IHTMLElement, where: ?BSTR, html: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.insertAdjacentHTML(self, where, html);
    }
    pub fn insertAdjacentText(self: *const IHTMLElement, where: ?BSTR, text: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.insertAdjacentText(self, where, text);
    }
    pub fn get_parentTextEdit(self: *const IHTMLElement, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentTextEdit(self, p);
    }
    pub fn get_isTextEdit(self: *const IHTMLElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isTextEdit(self, p);
    }
    pub fn click(self: *const IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.click(self);
    }
    pub fn get_filters(self: *const IHTMLElement, p: ?*?*IHTMLFiltersCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_filters(self, p);
    }
    pub fn put_ondragstart(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragstart(self, v);
    }
    pub fn get_ondragstart(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragstart(self, p);
    }
    pub fn toString(self: *const IHTMLElement, String: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, String);
    }
    pub fn put_onbeforeupdate(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeupdate(self, v);
    }
    pub fn get_onbeforeupdate(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeupdate(self, p);
    }
    pub fn put_onafterupdate(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onafterupdate(self, v);
    }
    pub fn get_onafterupdate(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onafterupdate(self, p);
    }
    pub fn put_onerrorupdate(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerrorupdate(self, v);
    }
    pub fn get_onerrorupdate(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerrorupdate(self, p);
    }
    pub fn put_onrowexit(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onrowexit(self, v);
    }
    pub fn get_onrowexit(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onrowexit(self, p);
    }
    pub fn put_onrowenter(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onrowenter(self, v);
    }
    pub fn get_onrowenter(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onrowenter(self, p);
    }
    pub fn put_ondatasetchanged(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondatasetchanged(self, v);
    }
    pub fn get_ondatasetchanged(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondatasetchanged(self, p);
    }
    pub fn put_ondataavailable(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondataavailable(self, v);
    }
    pub fn get_ondataavailable(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondataavailable(self, p);
    }
    pub fn put_ondatasetcomplete(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondatasetcomplete(self, v);
    }
    pub fn get_ondatasetcomplete(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondatasetcomplete(self, p);
    }
    pub fn put_onfilterchange(self: *const IHTMLElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfilterchange(self, v);
    }
    pub fn get_onfilterchange(self: *const IHTMLElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfilterchange(self, p);
    }
    pub fn get_children(self: *const IHTMLElement, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_children(self, p);
    }
    pub fn get_all(self: *const IHTMLElement, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_all(self, p);
    }
};

const IID_IHTMLRect_Value = Guid.initString("3050f4a3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRect = &IID_IHTMLRect_Value;
pub const IHTMLRect = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_left: *const fn(
            self: *const IHTMLRect,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_left: *const fn(
            self: *const IHTMLRect,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_top: *const fn(
            self: *const IHTMLRect,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_top: *const fn(
            self: *const IHTMLRect,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_right: *const fn(
            self: *const IHTMLRect,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_right: *const fn(
            self: *const IHTMLRect,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bottom: *const fn(
            self: *const IHTMLRect,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bottom: *const fn(
            self: *const IHTMLRect,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_left(self: *const IHTMLRect, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_left(self, v);
    }
    pub fn get_left(self: *const IHTMLRect, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_left(self, p);
    }
    pub fn put_top(self: *const IHTMLRect, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_top(self, v);
    }
    pub fn get_top(self: *const IHTMLRect, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_top(self, p);
    }
    pub fn put_right(self: *const IHTMLRect, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_right(self, v);
    }
    pub fn get_right(self: *const IHTMLRect, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_right(self, p);
    }
    pub fn put_bottom(self: *const IHTMLRect, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_bottom(self, v);
    }
    pub fn get_bottom(self: *const IHTMLRect, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_bottom(self, p);
    }
};

const IID_IHTMLRect2_Value = Guid.initString("3051076c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRect2 = &IID_IHTMLRect2_Value;
pub const IHTMLRect2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLRect2,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLRect2,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_width(self: *const IHTMLRect2, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn get_height(self: *const IHTMLRect2, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
};

const IID_IHTMLRectCollection_Value = Guid.initString("3050f4a4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLRectCollection = &IID_IHTMLRectCollection_Value;
pub const IHTMLRectCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLRectCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLRectCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLRectCollection,
            pvarIndex: ?*VARIANT,
            pvarResult: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLRectCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLRectCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLRectCollection, pvarIndex: ?*VARIANT, pvarResult: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, pvarIndex, pvarResult);
    }
};

const IID_IHTMLElementCollection_Value = Guid.initString("3050f21f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElementCollection = &IID_IHTMLElementCollection_Value;
pub const IHTMLElementCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        toString: *const fn(
            self: *const IHTMLElementCollection,
            String: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_length: *const fn(
            self: *const IHTMLElementCollection,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLElementCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLElementCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLElementCollection,
            name: VARIANT,
            index: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        tags: *const fn(
            self: *const IHTMLElementCollection,
            tagName: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn toString(self: *const IHTMLElementCollection, String: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, String);
    }
    pub fn put_length(self: *const IHTMLElementCollection, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_length(self, v);
    }
    pub fn get_length(self: *const IHTMLElementCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLElementCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLElementCollection, name: VARIANT, index: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, name, index, pdisp);
    }
    pub fn tags(self: *const IHTMLElementCollection, tagName: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.tags(self, tagName, pdisp);
    }
};

const IID_IHTMLElement2_Value = Guid.initString("3050f434-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElement2 = &IID_IHTMLElement2_Value;
pub const IHTMLElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scopeName: *const fn(
            self: *const IHTMLElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        setCapture: *const fn(
            self: *const IHTMLElement2,
            containerCapture: i16,
        ) callconv(.winapi) HRESULT,
        releaseCapture: *const fn(
            self: *const IHTMLElement2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onlosecapture: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onlosecapture: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        componentFromPoint: *const fn(
            self: *const IHTMLElement2,
            x: i32,
            y: i32,
            component: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        doScroll: *const fn(
            self: *const IHTMLElement2,
            component: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onscroll: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onscroll: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondrag: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondrag: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragend: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragend: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragenter: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragenter: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragover: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragover: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragleave: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragleave: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondrop: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondrop: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforecut: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforecut: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncut: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncut: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforecopy: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforecopy: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncopy: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncopy: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforepaste: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforepaste: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpaste: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpaste: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentStyle: *const fn(
            self: *const IHTMLElement2,
            p: ?*?*IHTMLCurrentStyle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpropertychange: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpropertychange: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getClientRects: *const fn(
            self: *const IHTMLElement2,
            pRectCol: ?*?*IHTMLRectCollection,
        ) callconv(.winapi) HRESULT,
        getBoundingClientRect: *const fn(
            self: *const IHTMLElement2,
            pRect: ?*?*IHTMLRect,
        ) callconv(.winapi) HRESULT,
        setExpression: *const fn(
            self: *const IHTMLElement2,
            propname: ?BSTR,
            expression: ?BSTR,
            language: ?BSTR,
        ) callconv(.winapi) HRESULT,
        getExpression: *const fn(
            self: *const IHTMLElement2,
            propname: ?BSTR,
            expression: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        removeExpression: *const fn(
            self: *const IHTMLElement2,
            propname: ?BSTR,
            pfSuccess: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tabIndex: *const fn(
            self: *const IHTMLElement2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tabIndex: *const fn(
            self: *const IHTMLElement2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        focus: *const fn(
            self: *const IHTMLElement2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_accessKey: *const fn(
            self: *const IHTMLElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accessKey: *const fn(
            self: *const IHTMLElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onblur: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onblur: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocus: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocus: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onresize: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onresize: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        blur: *const fn(
            self: *const IHTMLElement2,
        ) callconv(.winapi) HRESULT,
        addFilter: *const fn(
            self: *const IHTMLElement2,
            pUnk: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        removeFilter: *const fn(
            self: *const IHTMLElement2,
            pUnk: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientHeight: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientWidth: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientTop: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientLeft: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        attachEvent: *const fn(
            self: *const IHTMLElement2,
            event: ?BSTR,
            pDisp: ?*IDispatch,
            pfResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        detachEvent: *const fn(
            self: *const IHTMLElement2,
            event: ?BSTR,
            pDisp: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onrowsdelete: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onrowsdelete: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onrowsinserted: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onrowsinserted: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncellchange: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncellchange: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dir: *const fn(
            self: *const IHTMLElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dir: *const fn(
            self: *const IHTMLElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        createControlRange: *const fn(
            self: *const IHTMLElement2,
            range: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollHeight: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollWidth: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollTop: *const fn(
            self: *const IHTMLElement2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollTop: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollLeft: *const fn(
            self: *const IHTMLElement2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollLeft: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        clearAttributes: *const fn(
            self: *const IHTMLElement2,
        ) callconv(.winapi) HRESULT,
        mergeAttributes: *const fn(
            self: *const IHTMLElement2,
            mergeThis: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncontextmenu: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncontextmenu: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        insertAdjacentElement: *const fn(
            self: *const IHTMLElement2,
            where: ?BSTR,
            insertedElement: ?*IHTMLElement,
            inserted: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        applyElement: *const fn(
            self: *const IHTMLElement2,
            apply: ?*IHTMLElement,
            where: ?BSTR,
            applied: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        getAdjacentText: *const fn(
            self: *const IHTMLElement2,
            where: ?BSTR,
            text: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        replaceAdjacentText: *const fn(
            self: *const IHTMLElement2,
            where: ?BSTR,
            newText: ?BSTR,
            oldText: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_canHaveChildren: *const fn(
            self: *const IHTMLElement2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        addBehavior: *const fn(
            self: *const IHTMLElement2,
            bstrUrl: ?BSTR,
            pvarFactory: ?*VARIANT,
            pCookie: ?*i32,
        ) callconv(.winapi) HRESULT,
        removeBehavior: *const fn(
            self: *const IHTMLElement2,
            cookie: i32,
            pfResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_runtimeStyle: *const fn(
            self: *const IHTMLElement2,
            p: ?*?*IHTMLStyle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_behaviorUrns: *const fn(
            self: *const IHTMLElement2,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tagUrn: *const fn(
            self: *const IHTMLElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagUrn: *const fn(
            self: *const IHTMLElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeeditfocus: *const fn(
            self: *const IHTMLElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeeditfocus: *const fn(
            self: *const IHTMLElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyStateValue: *const fn(
            self: *const IHTMLElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        getElementsByTagName: *const fn(
            self: *const IHTMLElement2,
            v: ?BSTR,
            pelColl: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_scopeName(self: *const IHTMLElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_scopeName(self, p);
    }
    pub fn setCapture(self: *const IHTMLElement2, containerCapture: i16) callconv(.@"inline") HRESULT {
        return self.vtable.setCapture(self, containerCapture);
    }
    pub fn releaseCapture(self: *const IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.releaseCapture(self);
    }
    pub fn put_onlosecapture(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onlosecapture(self, v);
    }
    pub fn get_onlosecapture(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onlosecapture(self, p);
    }
    pub fn componentFromPoint(self: *const IHTMLElement2, x: i32, y: i32, component: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.componentFromPoint(self, x, y, component);
    }
    pub fn doScroll(self: *const IHTMLElement2, component: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.doScroll(self, component);
    }
    pub fn put_onscroll(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onscroll(self, v);
    }
    pub fn get_onscroll(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onscroll(self, p);
    }
    pub fn put_ondrag(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondrag(self, v);
    }
    pub fn get_ondrag(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondrag(self, p);
    }
    pub fn put_ondragend(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragend(self, v);
    }
    pub fn get_ondragend(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragend(self, p);
    }
    pub fn put_ondragenter(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragenter(self, v);
    }
    pub fn get_ondragenter(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragenter(self, p);
    }
    pub fn put_ondragover(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragover(self, v);
    }
    pub fn get_ondragover(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragover(self, p);
    }
    pub fn put_ondragleave(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragleave(self, v);
    }
    pub fn get_ondragleave(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragleave(self, p);
    }
    pub fn put_ondrop(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondrop(self, v);
    }
    pub fn get_ondrop(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondrop(self, p);
    }
    pub fn put_onbeforecut(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforecut(self, v);
    }
    pub fn get_onbeforecut(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforecut(self, p);
    }
    pub fn put_oncut(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncut(self, v);
    }
    pub fn get_oncut(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncut(self, p);
    }
    pub fn put_onbeforecopy(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforecopy(self, v);
    }
    pub fn get_onbeforecopy(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforecopy(self, p);
    }
    pub fn put_oncopy(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncopy(self, v);
    }
    pub fn get_oncopy(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncopy(self, p);
    }
    pub fn put_onbeforepaste(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforepaste(self, v);
    }
    pub fn get_onbeforepaste(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforepaste(self, p);
    }
    pub fn put_onpaste(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpaste(self, v);
    }
    pub fn get_onpaste(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpaste(self, p);
    }
    pub fn get_currentStyle(self: *const IHTMLElement2, p: ?*?*IHTMLCurrentStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentStyle(self, p);
    }
    pub fn put_onpropertychange(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpropertychange(self, v);
    }
    pub fn get_onpropertychange(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpropertychange(self, p);
    }
    pub fn getClientRects(self: *const IHTMLElement2, pRectCol: ?*?*IHTMLRectCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getClientRects(self, pRectCol);
    }
    pub fn getBoundingClientRect(self: *const IHTMLElement2, pRect: ?*?*IHTMLRect) callconv(.@"inline") HRESULT {
        return self.vtable.getBoundingClientRect(self, pRect);
    }
    pub fn setExpression(self: *const IHTMLElement2, propname: ?BSTR, expression: ?BSTR, language: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.setExpression(self, propname, expression, language);
    }
    pub fn getExpression(self: *const IHTMLElement2, propname: ?BSTR, expression: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getExpression(self, propname, expression);
    }
    pub fn removeExpression(self: *const IHTMLElement2, propname: ?BSTR, pfSuccess: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeExpression(self, propname, pfSuccess);
    }
    pub fn put_tabIndex(self: *const IHTMLElement2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_tabIndex(self, v);
    }
    pub fn get_tabIndex(self: *const IHTMLElement2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_tabIndex(self, p);
    }
    pub fn focus(self: *const IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.focus(self);
    }
    pub fn put_accessKey(self: *const IHTMLElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_accessKey(self, v);
    }
    pub fn get_accessKey(self: *const IHTMLElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accessKey(self, p);
    }
    pub fn put_onblur(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onblur(self, v);
    }
    pub fn get_onblur(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onblur(self, p);
    }
    pub fn put_onfocus(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocus(self, v);
    }
    pub fn get_onfocus(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocus(self, p);
    }
    pub fn put_onresize(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onresize(self, v);
    }
    pub fn get_onresize(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onresize(self, p);
    }
    pub fn blur(self: *const IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.blur(self);
    }
    pub fn addFilter(self: *const IHTMLElement2, pUnk: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.addFilter(self, pUnk);
    }
    pub fn removeFilter(self: *const IHTMLElement2, pUnk: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.removeFilter(self, pUnk);
    }
    pub fn get_clientHeight(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientHeight(self, p);
    }
    pub fn get_clientWidth(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientWidth(self, p);
    }
    pub fn get_clientTop(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientTop(self, p);
    }
    pub fn get_clientLeft(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientLeft(self, p);
    }
    pub fn attachEvent(self: *const IHTMLElement2, event: ?BSTR, pDisp: ?*IDispatch, pfResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.attachEvent(self, event, pDisp, pfResult);
    }
    pub fn detachEvent(self: *const IHTMLElement2, event: ?BSTR, pDisp: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.detachEvent(self, event, pDisp);
    }
    pub fn get_readyState(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn put_onrowsdelete(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onrowsdelete(self, v);
    }
    pub fn get_onrowsdelete(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onrowsdelete(self, p);
    }
    pub fn put_onrowsinserted(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onrowsinserted(self, v);
    }
    pub fn get_onrowsinserted(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onrowsinserted(self, p);
    }
    pub fn put_oncellchange(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncellchange(self, v);
    }
    pub fn get_oncellchange(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncellchange(self, p);
    }
    pub fn put_dir(self: *const IHTMLElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dir(self, v);
    }
    pub fn get_dir(self: *const IHTMLElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dir(self, p);
    }
    pub fn createControlRange(self: *const IHTMLElement2, range: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.createControlRange(self, range);
    }
    pub fn get_scrollHeight(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollHeight(self, p);
    }
    pub fn get_scrollWidth(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollWidth(self, p);
    }
    pub fn put_scrollTop(self: *const IHTMLElement2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollTop(self, v);
    }
    pub fn get_scrollTop(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollTop(self, p);
    }
    pub fn put_scrollLeft(self: *const IHTMLElement2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollLeft(self, v);
    }
    pub fn get_scrollLeft(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollLeft(self, p);
    }
    pub fn clearAttributes(self: *const IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.clearAttributes(self);
    }
    pub fn mergeAttributes(self: *const IHTMLElement2, mergeThis: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.mergeAttributes(self, mergeThis);
    }
    pub fn put_oncontextmenu(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncontextmenu(self, v);
    }
    pub fn get_oncontextmenu(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncontextmenu(self, p);
    }
    pub fn insertAdjacentElement(self: *const IHTMLElement2, where: ?BSTR, insertedElement: ?*IHTMLElement, inserted: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.insertAdjacentElement(self, where, insertedElement, inserted);
    }
    pub fn applyElement(self: *const IHTMLElement2, apply: ?*IHTMLElement, where: ?BSTR, applied: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.applyElement(self, apply, where, applied);
    }
    pub fn getAdjacentText(self: *const IHTMLElement2, where: ?BSTR, text: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getAdjacentText(self, where, text);
    }
    pub fn replaceAdjacentText(self: *const IHTMLElement2, where: ?BSTR, newText: ?BSTR, oldText: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.replaceAdjacentText(self, where, newText, oldText);
    }
    pub fn get_canHaveChildren(self: *const IHTMLElement2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_canHaveChildren(self, p);
    }
    pub fn addBehavior(self: *const IHTMLElement2, bstrUrl: ?BSTR, pvarFactory: ?*VARIANT, pCookie: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.addBehavior(self, bstrUrl, pvarFactory, pCookie);
    }
    pub fn removeBehavior(self: *const IHTMLElement2, cookie: i32, pfResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeBehavior(self, cookie, pfResult);
    }
    pub fn get_runtimeStyle(self: *const IHTMLElement2, p: ?*?*IHTMLStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_runtimeStyle(self, p);
    }
    pub fn get_behaviorUrns(self: *const IHTMLElement2, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_behaviorUrns(self, p);
    }
    pub fn put_tagUrn(self: *const IHTMLElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_tagUrn(self, v);
    }
    pub fn get_tagUrn(self: *const IHTMLElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_tagUrn(self, p);
    }
    pub fn put_onbeforeeditfocus(self: *const IHTMLElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeeditfocus(self, v);
    }
    pub fn get_onbeforeeditfocus(self: *const IHTMLElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeeditfocus(self, p);
    }
    pub fn get_readyStateValue(self: *const IHTMLElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyStateValue(self, p);
    }
    pub fn getElementsByTagName(self: *const IHTMLElement2, v: ?BSTR, pelColl: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getElementsByTagName(self, v, pelColl);
    }
};

const IID_IHTMLAttributeCollection3_Value = Guid.initString("30510469-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAttributeCollection3 = &IID_IHTMLAttributeCollection3_Value;
pub const IHTMLAttributeCollection3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getNamedItem: *const fn(
            self: *const IHTMLAttributeCollection3,
            bstrName: ?BSTR,
            ppNodeOut: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        setNamedItem: *const fn(
            self: *const IHTMLAttributeCollection3,
            pNodeIn: ?*IHTMLDOMAttribute,
            ppNodeOut: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        removeNamedItem: *const fn(
            self: *const IHTMLAttributeCollection3,
            bstrName: ?BSTR,
            ppNodeOut: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLAttributeCollection3,
            index: i32,
            ppNodeOut: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLAttributeCollection3,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getNamedItem(self: *const IHTMLAttributeCollection3, bstrName: ?BSTR, ppNodeOut: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.getNamedItem(self, bstrName, ppNodeOut);
    }
    pub fn setNamedItem(self: *const IHTMLAttributeCollection3, pNodeIn: ?*IHTMLDOMAttribute, ppNodeOut: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.setNamedItem(self, pNodeIn, ppNodeOut);
    }
    pub fn removeNamedItem(self: *const IHTMLAttributeCollection3, bstrName: ?BSTR, ppNodeOut: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.removeNamedItem(self, bstrName, ppNodeOut);
    }
    pub fn item(self: *const IHTMLAttributeCollection3, index: i32, ppNodeOut: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppNodeOut);
    }
    pub fn get_length(self: *const IHTMLAttributeCollection3, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
};

const IID_IDOMDocumentType_Value = Guid.initString("30510738-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMDocumentType = &IID_IDOMDocumentType_Value;
pub const IDOMDocumentType = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IDOMDocumentType,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_entities: *const fn(
            self: *const IDOMDocumentType,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_notations: *const fn(
            self: *const IDOMDocumentType,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicId: *const fn(
            self: *const IDOMDocumentType,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemId: *const fn(
            self: *const IDOMDocumentType,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_internalSubset: *const fn(
            self: *const IDOMDocumentType,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_name(self: *const IDOMDocumentType, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn get_entities(self: *const IDOMDocumentType, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_entities(self, p);
    }
    pub fn get_notations(self: *const IDOMDocumentType, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_notations(self, p);
    }
    pub fn get_publicId(self: *const IDOMDocumentType, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_publicId(self, p);
    }
    pub fn get_systemId(self: *const IDOMDocumentType, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_systemId(self, p);
    }
    pub fn get_internalSubset(self: *const IDOMDocumentType, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_internalSubset(self, p);
    }
};

const IID_IHTMLDocument7_Value = Guid.initString("305104b8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDocument7 = &IID_IHTMLDocument7_Value;
pub const IHTMLDocument7 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultView: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        createCDATASection: *const fn(
            self: *const IHTMLDocument7,
            text: ?BSTR,
            newCDATASectionNode: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        getSelection: *const fn(
            self: *const IHTMLDocument7,
            ppIHTMLSelection: ?*?*IHTMLSelection,
        ) callconv(.winapi) HRESULT,
        getElementsByTagNameNS: *const fn(
            self: *const IHTMLDocument7,
            pvarNS: ?*VARIANT,
            bstrLocalName: ?BSTR,
            pelColl: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        createElementNS: *const fn(
            self: *const IHTMLDocument7,
            pvarNS: ?*VARIANT,
            bstrTag: ?BSTR,
            newElem: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        createAttributeNS: *const fn(
            self: *const IHTMLDocument7,
            pvarNS: ?*VARIANT,
            bstrAttrName: ?BSTR,
            ppAttribute: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsthumbnailclick: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsthumbnailclick: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_characterSet: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        createElement: *const fn(
            self: *const IHTMLDocument7,
            bstrTag: ?BSTR,
            newElem: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        createAttribute: *const fn(
            self: *const IHTMLDocument7,
            bstrAttrName: ?BSTR,
            ppAttribute: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        getElementsByClassName: *const fn(
            self: *const IHTMLDocument7,
            v: ?BSTR,
            pel: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        createProcessingInstruction: *const fn(
            self: *const IHTMLDocument7,
            bstrTarget: ?BSTR,
            bstrData: ?BSTR,
            newProcessingInstruction: ?*?*IDOMProcessingInstruction,
        ) callconv(.winapi) HRESULT,
        adoptNode: *const fn(
            self: *const IHTMLDocument7,
            pNodeSource: ?*IHTMLDOMNode,
            ppNodeDest: ?*?*IHTMLDOMNode3,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmssitemodejumplistitemremoved: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmssitemodejumplistitemremoved: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_all: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_inputEncoding: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xmlEncoding: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_xmlStandalone: *const fn(
            self: *const IHTMLDocument7,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xmlStandalone: *const fn(
            self: *const IHTMLDocument7,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_xmlVersion: *const fn(
            self: *const IHTMLDocument7,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xmlVersion: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        hasAttributes: *const fn(
            self: *const IHTMLDocument7,
            pfHasAttributes: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onabort: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onabort: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onblur: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onblur: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncanplay: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncanplay: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncanplaythrough: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncanplaythrough: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondrag: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondrag: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragend: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragend: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragenter: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragenter: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragleave: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragleave: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragover: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragover: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondrop: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondrop: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondurationchange: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondurationchange: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onemptied: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onemptied: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onended: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onended: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocus: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocus: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oninput: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oninput: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadeddata: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadeddata: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadedmetadata: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadedmetadata: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadstart: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadstart: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpause: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpause: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onplay: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onplay: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onplaying: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onplaying: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onprogress: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onprogress: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onratechange: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onratechange: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreset: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreset: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onscroll: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onscroll: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onseeked: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onseeked: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onseeking: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onseeking: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselect: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselect: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstalled: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstalled: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onsubmit: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onsubmit: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onsuspend: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onsuspend: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ontimeupdate: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ontimeupdate: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onvolumechange: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onvolumechange: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onwaiting: *const fn(
            self: *const IHTMLDocument7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onwaiting: *const fn(
            self: *const IHTMLDocument7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        normalize: *const fn(
            self: *const IHTMLDocument7,
        ) callconv(.winapi) HRESULT,
        importNode: *const fn(
            self: *const IHTMLDocument7,
            pNodeSource: ?*IHTMLDOMNode,
            fDeep: i16,
            ppNodeDest: ?*?*IHTMLDOMNode3,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentWindow: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        putref_body: *const fn(
            self: *const IHTMLDocument7,
            v: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_body: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_head: *const fn(
            self: *const IHTMLDocument7,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_defaultView(self: *const IHTMLDocument7, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultView(self, p);
    }
    pub fn createCDATASection(self: *const IHTMLDocument7, text: ?BSTR, newCDATASectionNode: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.createCDATASection(self, text, newCDATASectionNode);
    }
    pub fn getSelection(self: *const IHTMLDocument7, ppIHTMLSelection: ?*?*IHTMLSelection) callconv(.@"inline") HRESULT {
        return self.vtable.getSelection(self, ppIHTMLSelection);
    }
    pub fn getElementsByTagNameNS(self: *const IHTMLDocument7, pvarNS: ?*VARIANT, bstrLocalName: ?BSTR, pelColl: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getElementsByTagNameNS(self, pvarNS, bstrLocalName, pelColl);
    }
    pub fn createElementNS(self: *const IHTMLDocument7, pvarNS: ?*VARIANT, bstrTag: ?BSTR, newElem: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.createElementNS(self, pvarNS, bstrTag, newElem);
    }
    pub fn createAttributeNS(self: *const IHTMLDocument7, pvarNS: ?*VARIANT, bstrAttrName: ?BSTR, ppAttribute: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.createAttributeNS(self, pvarNS, bstrAttrName, ppAttribute);
    }
    pub fn put_onmsthumbnailclick(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsthumbnailclick(self, v);
    }
    pub fn get_onmsthumbnailclick(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsthumbnailclick(self, p);
    }
    pub fn get_characterSet(self: *const IHTMLDocument7, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_characterSet(self, p);
    }
    pub fn createElement(self: *const IHTMLDocument7, bstrTag: ?BSTR, newElem: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.createElement(self, bstrTag, newElem);
    }
    pub fn createAttribute(self: *const IHTMLDocument7, bstrAttrName: ?BSTR, ppAttribute: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.createAttribute(self, bstrAttrName, ppAttribute);
    }
    pub fn getElementsByClassName(self: *const IHTMLDocument7, v: ?BSTR, pel: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getElementsByClassName(self, v, pel);
    }
    pub fn createProcessingInstruction(self: *const IHTMLDocument7, bstrTarget: ?BSTR, bstrData: ?BSTR, newProcessingInstruction: ?*?*IDOMProcessingInstruction) callconv(.@"inline") HRESULT {
        return self.vtable.createProcessingInstruction(self, bstrTarget, bstrData, newProcessingInstruction);
    }
    pub fn adoptNode(self: *const IHTMLDocument7, pNodeSource: ?*IHTMLDOMNode, ppNodeDest: ?*?*IHTMLDOMNode3) callconv(.@"inline") HRESULT {
        return self.vtable.adoptNode(self, pNodeSource, ppNodeDest);
    }
    pub fn put_onmssitemodejumplistitemremoved(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmssitemodejumplistitemremoved(self, v);
    }
    pub fn get_onmssitemodejumplistitemremoved(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmssitemodejumplistitemremoved(self, p);
    }
    pub fn get_all(self: *const IHTMLDocument7, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_all(self, p);
    }
    pub fn get_inputEncoding(self: *const IHTMLDocument7, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_inputEncoding(self, p);
    }
    pub fn get_xmlEncoding(self: *const IHTMLDocument7, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_xmlEncoding(self, p);
    }
    pub fn put_xmlStandalone(self: *const IHTMLDocument7, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_xmlStandalone(self, v);
    }
    pub fn get_xmlStandalone(self: *const IHTMLDocument7, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_xmlStandalone(self, p);
    }
    pub fn put_xmlVersion(self: *const IHTMLDocument7, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_xmlVersion(self, v);
    }
    pub fn get_xmlVersion(self: *const IHTMLDocument7, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_xmlVersion(self, p);
    }
    pub fn hasAttributes(self: *const IHTMLDocument7, pfHasAttributes: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasAttributes(self, pfHasAttributes);
    }
    pub fn put_onabort(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onabort(self, v);
    }
    pub fn get_onabort(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onabort(self, p);
    }
    pub fn put_onblur(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onblur(self, v);
    }
    pub fn get_onblur(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onblur(self, p);
    }
    pub fn put_oncanplay(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncanplay(self, v);
    }
    pub fn get_oncanplay(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncanplay(self, p);
    }
    pub fn put_oncanplaythrough(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncanplaythrough(self, v);
    }
    pub fn get_oncanplaythrough(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncanplaythrough(self, p);
    }
    pub fn put_onchange(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_ondrag(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondrag(self, v);
    }
    pub fn get_ondrag(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondrag(self, p);
    }
    pub fn put_ondragend(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragend(self, v);
    }
    pub fn get_ondragend(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragend(self, p);
    }
    pub fn put_ondragenter(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragenter(self, v);
    }
    pub fn get_ondragenter(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragenter(self, p);
    }
    pub fn put_ondragleave(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragleave(self, v);
    }
    pub fn get_ondragleave(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragleave(self, p);
    }
    pub fn put_ondragover(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragover(self, v);
    }
    pub fn get_ondragover(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragover(self, p);
    }
    pub fn put_ondrop(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondrop(self, v);
    }
    pub fn get_ondrop(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondrop(self, p);
    }
    pub fn put_ondurationchange(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondurationchange(self, v);
    }
    pub fn get_ondurationchange(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondurationchange(self, p);
    }
    pub fn put_onemptied(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onemptied(self, v);
    }
    pub fn get_onemptied(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onemptied(self, p);
    }
    pub fn put_onended(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onended(self, v);
    }
    pub fn get_onended(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onended(self, p);
    }
    pub fn put_onerror(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_onfocus(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocus(self, v);
    }
    pub fn get_onfocus(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocus(self, p);
    }
    pub fn put_oninput(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oninput(self, v);
    }
    pub fn get_oninput(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oninput(self, p);
    }
    pub fn put_onload(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onloadeddata(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadeddata(self, v);
    }
    pub fn get_onloadeddata(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadeddata(self, p);
    }
    pub fn put_onloadedmetadata(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadedmetadata(self, v);
    }
    pub fn get_onloadedmetadata(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadedmetadata(self, p);
    }
    pub fn put_onloadstart(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadstart(self, v);
    }
    pub fn get_onloadstart(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadstart(self, p);
    }
    pub fn put_onpause(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpause(self, v);
    }
    pub fn get_onpause(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpause(self, p);
    }
    pub fn put_onplay(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onplay(self, v);
    }
    pub fn get_onplay(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onplay(self, p);
    }
    pub fn put_onplaying(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onplaying(self, v);
    }
    pub fn get_onplaying(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onplaying(self, p);
    }
    pub fn put_onprogress(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onprogress(self, v);
    }
    pub fn get_onprogress(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onprogress(self, p);
    }
    pub fn put_onratechange(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onratechange(self, v);
    }
    pub fn get_onratechange(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onratechange(self, p);
    }
    pub fn put_onreset(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreset(self, v);
    }
    pub fn get_onreset(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreset(self, p);
    }
    pub fn put_onscroll(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onscroll(self, v);
    }
    pub fn get_onscroll(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onscroll(self, p);
    }
    pub fn put_onseeked(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onseeked(self, v);
    }
    pub fn get_onseeked(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onseeked(self, p);
    }
    pub fn put_onseeking(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onseeking(self, v);
    }
    pub fn get_onseeking(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onseeking(self, p);
    }
    pub fn put_onselect(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselect(self, v);
    }
    pub fn get_onselect(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselect(self, p);
    }
    pub fn put_onstalled(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstalled(self, v);
    }
    pub fn get_onstalled(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstalled(self, p);
    }
    pub fn put_onsubmit(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onsubmit(self, v);
    }
    pub fn get_onsubmit(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onsubmit(self, p);
    }
    pub fn put_onsuspend(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onsuspend(self, v);
    }
    pub fn get_onsuspend(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onsuspend(self, p);
    }
    pub fn put_ontimeupdate(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ontimeupdate(self, v);
    }
    pub fn get_ontimeupdate(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ontimeupdate(self, p);
    }
    pub fn put_onvolumechange(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onvolumechange(self, v);
    }
    pub fn get_onvolumechange(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onvolumechange(self, p);
    }
    pub fn put_onwaiting(self: *const IHTMLDocument7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onwaiting(self, v);
    }
    pub fn get_onwaiting(self: *const IHTMLDocument7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onwaiting(self, p);
    }
    pub fn normalize(self: *const IHTMLDocument7) callconv(.@"inline") HRESULT {
        return self.vtable.normalize(self);
    }
    pub fn importNode(self: *const IHTMLDocument7, pNodeSource: ?*IHTMLDOMNode, fDeep: i16, ppNodeDest: ?*?*IHTMLDOMNode3) callconv(.@"inline") HRESULT {
        return self.vtable.importNode(self, pNodeSource, fDeep, ppNodeDest);
    }
    pub fn get_parentWindow(self: *const IHTMLDocument7, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentWindow(self, p);
    }
    pub fn putref_body(self: *const IHTMLDocument7, v: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.putref_body(self, v);
    }
    pub fn get_body(self: *const IHTMLDocument7, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_body(self, p);
    }
    pub fn get_head(self: *const IHTMLDocument7, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_head(self, p);
    }
};

const IID_IHTMLDOMNode_Value = Guid.initString("3050f5da-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMNode = &IID_IHTMLDOMNode_Value;
pub const IHTMLDOMNode = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeType: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentNode: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        hasChildNodes: *const fn(
            self: *const IHTMLDOMNode,
            fChildren: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_childNodes: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        insertBefore: *const fn(
            self: *const IHTMLDOMNode,
            newChild: ?*IHTMLDOMNode,
            refChild: VARIANT,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        removeChild: *const fn(
            self: *const IHTMLDOMNode,
            oldChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        replaceChild: *const fn(
            self: *const IHTMLDOMNode,
            newChild: ?*IHTMLDOMNode,
            oldChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        cloneNode: *const fn(
            self: *const IHTMLDOMNode,
            fDeep: i16,
            clonedNode: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        removeNode: *const fn(
            self: *const IHTMLDOMNode,
            fDeep: i16,
            removed: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        swapNode: *const fn(
            self: *const IHTMLDOMNode,
            otherNode: ?*IHTMLDOMNode,
            swappedNode: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        replaceNode: *const fn(
            self: *const IHTMLDOMNode,
            replacement: ?*IHTMLDOMNode,
            replaced: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        appendChild: *const fn(
            self: *const IHTMLDOMNode,
            newChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeName: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nodeValue: *const fn(
            self: *const IHTMLDOMNode,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeValue: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_firstChild: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastChild: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_previousSibling: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextSibling: *const fn(
            self: *const IHTMLDOMNode,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_nodeType(self: *const IHTMLDOMNode, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeType(self, p);
    }
    pub fn get_parentNode(self: *const IHTMLDOMNode, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentNode(self, p);
    }
    pub fn hasChildNodes(self: *const IHTMLDOMNode, fChildren: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasChildNodes(self, fChildren);
    }
    pub fn get_childNodes(self: *const IHTMLDOMNode, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_childNodes(self, p);
    }
    pub fn get_attributes(self: *const IHTMLDOMNode, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_attributes(self, p);
    }
    pub fn insertBefore(self: *const IHTMLDOMNode, newChild: ?*IHTMLDOMNode, refChild: VARIANT, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.insertBefore(self, newChild, refChild, node);
    }
    pub fn removeChild(self: *const IHTMLDOMNode, oldChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.removeChild(self, oldChild, node);
    }
    pub fn replaceChild(self: *const IHTMLDOMNode, newChild: ?*IHTMLDOMNode, oldChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.replaceChild(self, newChild, oldChild, node);
    }
    pub fn cloneNode(self: *const IHTMLDOMNode, fDeep: i16, clonedNode: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.cloneNode(self, fDeep, clonedNode);
    }
    pub fn removeNode(self: *const IHTMLDOMNode, fDeep: i16, removed: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.removeNode(self, fDeep, removed);
    }
    pub fn swapNode(self: *const IHTMLDOMNode, otherNode: ?*IHTMLDOMNode, swappedNode: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.swapNode(self, otherNode, swappedNode);
    }
    pub fn replaceNode(self: *const IHTMLDOMNode, replacement: ?*IHTMLDOMNode, replaced: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.replaceNode(self, replacement, replaced);
    }
    pub fn appendChild(self: *const IHTMLDOMNode, newChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.appendChild(self, newChild, node);
    }
    pub fn get_nodeName(self: *const IHTMLDOMNode, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeName(self, p);
    }
    pub fn put_nodeValue(self: *const IHTMLDOMNode, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_nodeValue(self, v);
    }
    pub fn get_nodeValue(self: *const IHTMLDOMNode, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeValue(self, p);
    }
    pub fn get_firstChild(self: *const IHTMLDOMNode, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_firstChild(self, p);
    }
    pub fn get_lastChild(self: *const IHTMLDOMNode, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_lastChild(self, p);
    }
    pub fn get_previousSibling(self: *const IHTMLDOMNode, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_previousSibling(self, p);
    }
    pub fn get_nextSibling(self: *const IHTMLDOMNode, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_nextSibling(self, p);
    }
};

const IID_IHTMLDOMNode2_Value = Guid.initString("3050f80b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMNode2 = &IID_IHTMLDOMNode2_Value;
pub const IHTMLDOMNode2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerDocument: *const fn(
            self: *const IHTMLDOMNode2,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ownerDocument(self: *const IHTMLDOMNode2, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_ownerDocument(self, p);
    }
};

const IID_IHTMLDOMNode3_Value = Guid.initString("305106e0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMNode3 = &IID_IHTMLDOMNode3_Value;
pub const IHTMLDOMNode3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_prefix: *const fn(
            self: *const IHTMLDOMNode3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_prefix: *const fn(
            self: *const IHTMLDOMNode3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_localName: *const fn(
            self: *const IHTMLDOMNode3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaceURI: *const fn(
            self: *const IHTMLDOMNode3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textContent: *const fn(
            self: *const IHTMLDOMNode3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textContent: *const fn(
            self: *const IHTMLDOMNode3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        isEqualNode: *const fn(
            self: *const IHTMLDOMNode3,
            otherNode: ?*IHTMLDOMNode3,
            isEqual: ?*i16,
        ) callconv(.winapi) HRESULT,
        lookupNamespaceURI: *const fn(
            self: *const IHTMLDOMNode3,
            pvarPrefix: ?*VARIANT,
            pvarNamespaceURI: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        lookupPrefix: *const fn(
            self: *const IHTMLDOMNode3,
            pvarNamespaceURI: ?*VARIANT,
            pvarPrefix: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        isDefaultNamespace: *const fn(
            self: *const IHTMLDOMNode3,
            pvarNamespace: ?*VARIANT,
            pfDefaultNamespace: ?*i16,
        ) callconv(.winapi) HRESULT,
        appendChild: *const fn(
            self: *const IHTMLDOMNode3,
            newChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        insertBefore: *const fn(
            self: *const IHTMLDOMNode3,
            newChild: ?*IHTMLDOMNode,
            refChild: VARIANT,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        removeChild: *const fn(
            self: *const IHTMLDOMNode3,
            oldChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        replaceChild: *const fn(
            self: *const IHTMLDOMNode3,
            newChild: ?*IHTMLDOMNode,
            oldChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        isSameNode: *const fn(
            self: *const IHTMLDOMNode3,
            otherNode: ?*IHTMLDOMNode3,
            isSame: ?*i16,
        ) callconv(.winapi) HRESULT,
        compareDocumentPosition: *const fn(
            self: *const IHTMLDOMNode3,
            otherNode: ?*IHTMLDOMNode,
            flags: ?*u16,
        ) callconv(.winapi) HRESULT,
        isSupported: *const fn(
            self: *const IHTMLDOMNode3,
            feature: ?BSTR,
            version: VARIANT,
            pfisSupported: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_prefix(self: *const IHTMLDOMNode3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_prefix(self, v);
    }
    pub fn get_prefix(self: *const IHTMLDOMNode3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_prefix(self, p);
    }
    pub fn get_localName(self: *const IHTMLDOMNode3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_localName(self, p);
    }
    pub fn get_namespaceURI(self: *const IHTMLDOMNode3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_namespaceURI(self, p);
    }
    pub fn put_textContent(self: *const IHTMLDOMNode3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_textContent(self, v);
    }
    pub fn get_textContent(self: *const IHTMLDOMNode3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_textContent(self, p);
    }
    pub fn isEqualNode(self: *const IHTMLDOMNode3, otherNode: ?*IHTMLDOMNode3, isEqual: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isEqualNode(self, otherNode, isEqual);
    }
    pub fn lookupNamespaceURI(self: *const IHTMLDOMNode3, pvarPrefix: ?*VARIANT, pvarNamespaceURI: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.lookupNamespaceURI(self, pvarPrefix, pvarNamespaceURI);
    }
    pub fn lookupPrefix(self: *const IHTMLDOMNode3, pvarNamespaceURI: ?*VARIANT, pvarPrefix: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.lookupPrefix(self, pvarNamespaceURI, pvarPrefix);
    }
    pub fn isDefaultNamespace(self: *const IHTMLDOMNode3, pvarNamespace: ?*VARIANT, pfDefaultNamespace: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isDefaultNamespace(self, pvarNamespace, pfDefaultNamespace);
    }
    pub fn appendChild(self: *const IHTMLDOMNode3, newChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.appendChild(self, newChild, node);
    }
    pub fn insertBefore(self: *const IHTMLDOMNode3, newChild: ?*IHTMLDOMNode, refChild: VARIANT, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.insertBefore(self, newChild, refChild, node);
    }
    pub fn removeChild(self: *const IHTMLDOMNode3, oldChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.removeChild(self, oldChild, node);
    }
    pub fn replaceChild(self: *const IHTMLDOMNode3, newChild: ?*IHTMLDOMNode, oldChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.replaceChild(self, newChild, oldChild, node);
    }
    pub fn isSameNode(self: *const IHTMLDOMNode3, otherNode: ?*IHTMLDOMNode3, isSame: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isSameNode(self, otherNode, isSame);
    }
    pub fn compareDocumentPosition(self: *const IHTMLDOMNode3, otherNode: ?*IHTMLDOMNode, flags: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.compareDocumentPosition(self, otherNode, flags);
    }
    pub fn isSupported(self: *const IHTMLDOMNode3, feature: ?BSTR, version: VARIANT, pfisSupported: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isSupported(self, feature, version, pfisSupported);
    }
};

const IID_IHTMLDOMAttribute_Value = Guid.initString("3050f4b0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMAttribute = &IID_IHTMLDOMAttribute_Value;
pub const IHTMLDOMAttribute = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeName: *const fn(
            self: *const IHTMLDOMAttribute,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nodeValue: *const fn(
            self: *const IHTMLDOMAttribute,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeValue: *const fn(
            self: *const IHTMLDOMAttribute,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_specified: *const fn(
            self: *const IHTMLDOMAttribute,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_nodeName(self: *const IHTMLDOMAttribute, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeName(self, p);
    }
    pub fn put_nodeValue(self: *const IHTMLDOMAttribute, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_nodeValue(self, v);
    }
    pub fn get_nodeValue(self: *const IHTMLDOMAttribute, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeValue(self, p);
    }
    pub fn get_specified(self: *const IHTMLDOMAttribute, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_specified(self, p);
    }
};

const IID_IHTMLDOMAttribute2_Value = Guid.initString("3050f810-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMAttribute2 = &IID_IHTMLDOMAttribute2_Value;
pub const IHTMLDOMAttribute2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLDOMAttribute2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_expando: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeType: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentNode: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_childNodes: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_firstChild: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastChild: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_previousSibling: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextSibling: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerDocument: *const fn(
            self: *const IHTMLDOMAttribute2,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        insertBefore: *const fn(
            self: *const IHTMLDOMAttribute2,
            newChild: ?*IHTMLDOMNode,
            refChild: VARIANT,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        replaceChild: *const fn(
            self: *const IHTMLDOMAttribute2,
            newChild: ?*IHTMLDOMNode,
            oldChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        removeChild: *const fn(
            self: *const IHTMLDOMAttribute2,
            oldChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        appendChild: *const fn(
            self: *const IHTMLDOMAttribute2,
            newChild: ?*IHTMLDOMNode,
            node: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        hasChildNodes: *const fn(
            self: *const IHTMLDOMAttribute2,
            fChildren: ?*i16,
        ) callconv(.winapi) HRESULT,
        cloneNode: *const fn(
            self: *const IHTMLDOMAttribute2,
            fDeep: i16,
            clonedNode: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_name(self: *const IHTMLDOMAttribute2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_value(self: *const IHTMLDOMAttribute2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLDOMAttribute2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn get_expando(self: *const IHTMLDOMAttribute2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_expando(self, p);
    }
    pub fn get_nodeType(self: *const IHTMLDOMAttribute2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeType(self, p);
    }
    pub fn get_parentNode(self: *const IHTMLDOMAttribute2, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentNode(self, p);
    }
    pub fn get_childNodes(self: *const IHTMLDOMAttribute2, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_childNodes(self, p);
    }
    pub fn get_firstChild(self: *const IHTMLDOMAttribute2, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_firstChild(self, p);
    }
    pub fn get_lastChild(self: *const IHTMLDOMAttribute2, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_lastChild(self, p);
    }
    pub fn get_previousSibling(self: *const IHTMLDOMAttribute2, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_previousSibling(self, p);
    }
    pub fn get_nextSibling(self: *const IHTMLDOMAttribute2, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_nextSibling(self, p);
    }
    pub fn get_attributes(self: *const IHTMLDOMAttribute2, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_attributes(self, p);
    }
    pub fn get_ownerDocument(self: *const IHTMLDOMAttribute2, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_ownerDocument(self, p);
    }
    pub fn insertBefore(self: *const IHTMLDOMAttribute2, newChild: ?*IHTMLDOMNode, refChild: VARIANT, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.insertBefore(self, newChild, refChild, node);
    }
    pub fn replaceChild(self: *const IHTMLDOMAttribute2, newChild: ?*IHTMLDOMNode, oldChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.replaceChild(self, newChild, oldChild, node);
    }
    pub fn removeChild(self: *const IHTMLDOMAttribute2, oldChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.removeChild(self, oldChild, node);
    }
    pub fn appendChild(self: *const IHTMLDOMAttribute2, newChild: ?*IHTMLDOMNode, node: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.appendChild(self, newChild, node);
    }
    pub fn hasChildNodes(self: *const IHTMLDOMAttribute2, fChildren: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasChildNodes(self, fChildren);
    }
    pub fn cloneNode(self: *const IHTMLDOMAttribute2, fDeep: i16, clonedNode: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.cloneNode(self, fDeep, clonedNode);
    }
};

const IID_IHTMLDOMAttribute3_Value = Guid.initString("30510468-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMAttribute3 = &IID_IHTMLDOMAttribute3_Value;
pub const IHTMLDOMAttribute3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nodeValue: *const fn(
            self: *const IHTMLDOMAttribute3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeValue: *const fn(
            self: *const IHTMLDOMAttribute3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLDOMAttribute3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLDOMAttribute3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_specified: *const fn(
            self: *const IHTMLDOMAttribute3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerElement: *const fn(
            self: *const IHTMLDOMAttribute3,
            p: ?*?*IHTMLElement2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_nodeValue(self: *const IHTMLDOMAttribute3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_nodeValue(self, v);
    }
    pub fn get_nodeValue(self: *const IHTMLDOMAttribute3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeValue(self, p);
    }
    pub fn put_value(self: *const IHTMLDOMAttribute3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLDOMAttribute3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn get_specified(self: *const IHTMLDOMAttribute3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_specified(self, p);
    }
    pub fn get_ownerElement(self: *const IHTMLDOMAttribute3, p: ?*?*IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.get_ownerElement(self, p);
    }
};

const IID_IHTMLDOMAttribute4_Value = Guid.initString("305106f9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMAttribute4 = &IID_IHTMLDOMAttribute4_Value;
pub const IHTMLDOMAttribute4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nodeValue: *const fn(
            self: *const IHTMLDOMAttribute4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeValue: *const fn(
            self: *const IHTMLDOMAttribute4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeName: *const fn(
            self: *const IHTMLDOMAttribute4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLDOMAttribute4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLDOMAttribute4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLDOMAttribute4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_firstChild: *const fn(
            self: *const IHTMLDOMAttribute4,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastChild: *const fn(
            self: *const IHTMLDOMAttribute4,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_childNodes: *const fn(
            self: *const IHTMLDOMAttribute4,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        hasAttributes: *const fn(
            self: *const IHTMLDOMAttribute4,
            pfHasAttributes: ?*i16,
        ) callconv(.winapi) HRESULT,
        hasChildNodes: *const fn(
            self: *const IHTMLDOMAttribute4,
            fChildren: ?*i16,
        ) callconv(.winapi) HRESULT,
        normalize: *const fn(
            self: *const IHTMLDOMAttribute4,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_specified: *const fn(
            self: *const IHTMLDOMAttribute4,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_nodeValue(self: *const IHTMLDOMAttribute4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_nodeValue(self, v);
    }
    pub fn get_nodeValue(self: *const IHTMLDOMAttribute4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeValue(self, p);
    }
    pub fn get_nodeName(self: *const IHTMLDOMAttribute4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeName(self, p);
    }
    pub fn get_name(self: *const IHTMLDOMAttribute4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_value(self: *const IHTMLDOMAttribute4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLDOMAttribute4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn get_firstChild(self: *const IHTMLDOMAttribute4, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_firstChild(self, p);
    }
    pub fn get_lastChild(self: *const IHTMLDOMAttribute4, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_lastChild(self, p);
    }
    pub fn get_childNodes(self: *const IHTMLDOMAttribute4, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_childNodes(self, p);
    }
    pub fn hasAttributes(self: *const IHTMLDOMAttribute4, pfHasAttributes: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasAttributes(self, pfHasAttributes);
    }
    pub fn hasChildNodes(self: *const IHTMLDOMAttribute4, fChildren: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasChildNodes(self, fChildren);
    }
    pub fn normalize(self: *const IHTMLDOMAttribute4) callconv(.@"inline") HRESULT {
        return self.vtable.normalize(self);
    }
    pub fn get_specified(self: *const IHTMLDOMAttribute4, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_specified(self, p);
    }
};

const IID_IHTMLDOMTextNode_Value = Guid.initString("3050f4b1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMTextNode = &IID_IHTMLDOMTextNode_Value;
pub const IHTMLDOMTextNode = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn(
            self: *const IHTMLDOMTextNode,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IHTMLDOMTextNode,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLDOMTextNode,
            String: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLDOMTextNode,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        splitText: *const fn(
            self: *const IHTMLDOMTextNode,
            offset: i32,
            pRetNode: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_data(self: *const IHTMLDOMTextNode, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_data(self, v);
    }
    pub fn get_data(self: *const IHTMLDOMTextNode, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
    pub fn toString(self: *const IHTMLDOMTextNode, String: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, String);
    }
    pub fn get_length(self: *const IHTMLDOMTextNode, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn splitText(self: *const IHTMLDOMTextNode, offset: i32, pRetNode: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.splitText(self, offset, pRetNode);
    }
};

const IID_IHTMLDOMTextNode2_Value = Guid.initString("3050f809-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMTextNode2 = &IID_IHTMLDOMTextNode2_Value;
pub const IHTMLDOMTextNode2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        substringData: *const fn(
            self: *const IHTMLDOMTextNode2,
            offset: i32,
            Count: i32,
            pbstrsubString: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        appendData: *const fn(
            self: *const IHTMLDOMTextNode2,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
        insertData: *const fn(
            self: *const IHTMLDOMTextNode2,
            offset: i32,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
        deleteData: *const fn(
            self: *const IHTMLDOMTextNode2,
            offset: i32,
            Count: i32,
        ) callconv(.winapi) HRESULT,
        replaceData: *const fn(
            self: *const IHTMLDOMTextNode2,
            offset: i32,
            Count: i32,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn substringData(self: *const IHTMLDOMTextNode2, offset: i32, Count: i32, pbstrsubString: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.substringData(self, offset, Count, pbstrsubString);
    }
    pub fn appendData(self: *const IHTMLDOMTextNode2, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.appendData(self, bstrstring);
    }
    pub fn insertData(self: *const IHTMLDOMTextNode2, offset: i32, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.insertData(self, offset, bstrstring);
    }
    pub fn deleteData(self: *const IHTMLDOMTextNode2, offset: i32, Count: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteData(self, offset, Count);
    }
    pub fn replaceData(self: *const IHTMLDOMTextNode2, offset: i32, Count: i32, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.replaceData(self, offset, Count, bstrstring);
    }
};

const IID_IHTMLDOMTextNode3_Value = Guid.initString("3051073e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMTextNode3 = &IID_IHTMLDOMTextNode3_Value;
pub const IHTMLDOMTextNode3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        substringData: *const fn(
            self: *const IHTMLDOMTextNode3,
            offset: i32,
            Count: i32,
            pbstrsubString: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        insertData: *const fn(
            self: *const IHTMLDOMTextNode3,
            offset: i32,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
        deleteData: *const fn(
            self: *const IHTMLDOMTextNode3,
            offset: i32,
            Count: i32,
        ) callconv(.winapi) HRESULT,
        replaceData: *const fn(
            self: *const IHTMLDOMTextNode3,
            offset: i32,
            Count: i32,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
        splitText: *const fn(
            self: *const IHTMLDOMTextNode3,
            offset: i32,
            pRetNode: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wholeText: *const fn(
            self: *const IHTMLDOMTextNode3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        replaceWholeText: *const fn(
            self: *const IHTMLDOMTextNode3,
            bstrText: ?BSTR,
            ppRetNode: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        hasAttributes: *const fn(
            self: *const IHTMLDOMTextNode3,
            pfHasAttributes: ?*i16,
        ) callconv(.winapi) HRESULT,
        normalize: *const fn(
            self: *const IHTMLDOMTextNode3,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn substringData(self: *const IHTMLDOMTextNode3, offset: i32, Count: i32, pbstrsubString: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.substringData(self, offset, Count, pbstrsubString);
    }
    pub fn insertData(self: *const IHTMLDOMTextNode3, offset: i32, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.insertData(self, offset, bstrstring);
    }
    pub fn deleteData(self: *const IHTMLDOMTextNode3, offset: i32, Count: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteData(self, offset, Count);
    }
    pub fn replaceData(self: *const IHTMLDOMTextNode3, offset: i32, Count: i32, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.replaceData(self, offset, Count, bstrstring);
    }
    pub fn splitText(self: *const IHTMLDOMTextNode3, offset: i32, pRetNode: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.splitText(self, offset, pRetNode);
    }
    pub fn get_wholeText(self: *const IHTMLDOMTextNode3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wholeText(self, p);
    }
    pub fn replaceWholeText(self: *const IHTMLDOMTextNode3, bstrText: ?BSTR, ppRetNode: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.replaceWholeText(self, bstrText, ppRetNode);
    }
    pub fn hasAttributes(self: *const IHTMLDOMTextNode3, pfHasAttributes: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasAttributes(self, pfHasAttributes);
    }
    pub fn normalize(self: *const IHTMLDOMTextNode3) callconv(.@"inline") HRESULT {
        return self.vtable.normalize(self);
    }
};

const IID_IHTMLDOMImplementation_Value = Guid.initString("3050f80d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMImplementation = &IID_IHTMLDOMImplementation_Value;
pub const IHTMLDOMImplementation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        hasFeature: *const fn(
            self: *const IHTMLDOMImplementation,
            bstrfeature: ?BSTR,
            version: VARIANT,
            pfHasFeature: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn hasFeature(self: *const IHTMLDOMImplementation, bstrfeature: ?BSTR, version: VARIANT, pfHasFeature: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasFeature(self, bstrfeature, version, pfHasFeature);
    }
};

const IID_IHTMLDOMImplementation2_Value = Guid.initString("3051073c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMImplementation2 = &IID_IHTMLDOMImplementation2_Value;
pub const IHTMLDOMImplementation2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createDocumentType: *const fn(
            self: *const IHTMLDOMImplementation2,
            bstrQualifiedName: ?BSTR,
            pvarPublicId: ?*VARIANT,
            pvarSystemId: ?*VARIANT,
            newDocumentType: ?*?*IDOMDocumentType,
        ) callconv(.winapi) HRESULT,
        createDocument: *const fn(
            self: *const IHTMLDOMImplementation2,
            pvarNS: ?*VARIANT,
            pvarTagName: ?*VARIANT,
            pDocumentType: ?*IDOMDocumentType,
            ppnewDocument: ?*?*IHTMLDocument7,
        ) callconv(.winapi) HRESULT,
        createHTMLDocument: *const fn(
            self: *const IHTMLDOMImplementation2,
            bstrTitle: ?BSTR,
            ppnewDocument: ?*?*IHTMLDocument7,
        ) callconv(.winapi) HRESULT,
        hasFeature: *const fn(
            self: *const IHTMLDOMImplementation2,
            bstrfeature: ?BSTR,
            version: VARIANT,
            pfHasFeature: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createDocumentType(self: *const IHTMLDOMImplementation2, bstrQualifiedName: ?BSTR, pvarPublicId: ?*VARIANT, pvarSystemId: ?*VARIANT, newDocumentType: ?*?*IDOMDocumentType) callconv(.@"inline") HRESULT {
        return self.vtable.createDocumentType(self, bstrQualifiedName, pvarPublicId, pvarSystemId, newDocumentType);
    }
    pub fn createDocument(self: *const IHTMLDOMImplementation2, pvarNS: ?*VARIANT, pvarTagName: ?*VARIANT, pDocumentType: ?*IDOMDocumentType, ppnewDocument: ?*?*IHTMLDocument7) callconv(.@"inline") HRESULT {
        return self.vtable.createDocument(self, pvarNS, pvarTagName, pDocumentType, ppnewDocument);
    }
    pub fn createHTMLDocument(self: *const IHTMLDOMImplementation2, bstrTitle: ?BSTR, ppnewDocument: ?*?*IHTMLDocument7) callconv(.@"inline") HRESULT {
        return self.vtable.createHTMLDocument(self, bstrTitle, ppnewDocument);
    }
    pub fn hasFeature(self: *const IHTMLDOMImplementation2, bstrfeature: ?BSTR, version: VARIANT, pfHasFeature: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasFeature(self, bstrfeature, version, pfHasFeature);
    }
};

const IID_DispHTMLDOMAttribute_Value = Guid.initString("3050f564-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDOMAttribute = &IID_DispHTMLDOMAttribute_Value;
pub const DispHTMLDOMAttribute = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLDOMTextNode_Value = Guid.initString("3050f565-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDOMTextNode = &IID_DispHTMLDOMTextNode_Value;
pub const DispHTMLDOMTextNode = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLDOMImplementation_Value = Guid.initString("3050f58f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDOMImplementation = &IID_DispHTMLDOMImplementation_Value;
pub const DispHTMLDOMImplementation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLAttributeCollection_Value = Guid.initString("3050f4c3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAttributeCollection = &IID_IHTMLAttributeCollection_Value;
pub const IHTMLAttributeCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLAttributeCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLAttributeCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLAttributeCollection,
            name: ?*VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLAttributeCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLAttributeCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLAttributeCollection, name: ?*VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, name, pdisp);
    }
};

const IID_IHTMLAttributeCollection2_Value = Guid.initString("3050f80a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAttributeCollection2 = &IID_IHTMLAttributeCollection2_Value;
pub const IHTMLAttributeCollection2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getNamedItem: *const fn(
            self: *const IHTMLAttributeCollection2,
            bstrName: ?BSTR,
            newretNode: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        setNamedItem: *const fn(
            self: *const IHTMLAttributeCollection2,
            ppNode: ?*IHTMLDOMAttribute,
            newretNode: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        removeNamedItem: *const fn(
            self: *const IHTMLAttributeCollection2,
            bstrName: ?BSTR,
            newretNode: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getNamedItem(self: *const IHTMLAttributeCollection2, bstrName: ?BSTR, newretNode: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.getNamedItem(self, bstrName, newretNode);
    }
    pub fn setNamedItem(self: *const IHTMLAttributeCollection2, ppNode: ?*IHTMLDOMAttribute, newretNode: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.setNamedItem(self, ppNode, newretNode);
    }
    pub fn removeNamedItem(self: *const IHTMLAttributeCollection2, bstrName: ?BSTR, newretNode: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.removeNamedItem(self, bstrName, newretNode);
    }
};

const IID_IHTMLAttributeCollection4_Value = Guid.initString("305106fa-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAttributeCollection4 = &IID_IHTMLAttributeCollection4_Value;
pub const IHTMLAttributeCollection4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getNamedItemNS: *const fn(
            self: *const IHTMLAttributeCollection4,
            pvarNS: ?*VARIANT,
            bstrName: ?BSTR,
            ppNodeOut: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        setNamedItemNS: *const fn(
            self: *const IHTMLAttributeCollection4,
            pNodeIn: ?*IHTMLDOMAttribute2,
            ppNodeOut: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        removeNamedItemNS: *const fn(
            self: *const IHTMLAttributeCollection4,
            pvarNS: ?*VARIANT,
            bstrName: ?BSTR,
            ppNodeOut: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        getNamedItem: *const fn(
            self: *const IHTMLAttributeCollection4,
            bstrName: ?BSTR,
            ppNodeOut: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        setNamedItem: *const fn(
            self: *const IHTMLAttributeCollection4,
            pNodeIn: ?*IHTMLDOMAttribute2,
            ppNodeOut: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        removeNamedItem: *const fn(
            self: *const IHTMLAttributeCollection4,
            bstrName: ?BSTR,
            ppNodeOut: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLAttributeCollection4,
            index: i32,
            ppNodeOut: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLAttributeCollection4,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getNamedItemNS(self: *const IHTMLAttributeCollection4, pvarNS: ?*VARIANT, bstrName: ?BSTR, ppNodeOut: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.getNamedItemNS(self, pvarNS, bstrName, ppNodeOut);
    }
    pub fn setNamedItemNS(self: *const IHTMLAttributeCollection4, pNodeIn: ?*IHTMLDOMAttribute2, ppNodeOut: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.setNamedItemNS(self, pNodeIn, ppNodeOut);
    }
    pub fn removeNamedItemNS(self: *const IHTMLAttributeCollection4, pvarNS: ?*VARIANT, bstrName: ?BSTR, ppNodeOut: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.removeNamedItemNS(self, pvarNS, bstrName, ppNodeOut);
    }
    pub fn getNamedItem(self: *const IHTMLAttributeCollection4, bstrName: ?BSTR, ppNodeOut: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.getNamedItem(self, bstrName, ppNodeOut);
    }
    pub fn setNamedItem(self: *const IHTMLAttributeCollection4, pNodeIn: ?*IHTMLDOMAttribute2, ppNodeOut: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.setNamedItem(self, pNodeIn, ppNodeOut);
    }
    pub fn removeNamedItem(self: *const IHTMLAttributeCollection4, bstrName: ?BSTR, ppNodeOut: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.removeNamedItem(self, bstrName, ppNodeOut);
    }
    pub fn item(self: *const IHTMLAttributeCollection4, index: i32, ppNodeOut: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppNodeOut);
    }
    pub fn get_length(self: *const IHTMLAttributeCollection4, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
};

const IID_IHTMLDOMChildrenCollection_Value = Guid.initString("3050f5ab-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMChildrenCollection = &IID_IHTMLDOMChildrenCollection_Value;
pub const IHTMLDOMChildrenCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLDOMChildrenCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLDOMChildrenCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLDOMChildrenCollection,
            index: i32,
            ppItem: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLDOMChildrenCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLDOMChildrenCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLDOMChildrenCollection, index: i32, ppItem: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppItem);
    }
};

const IID_IHTMLDOMChildrenCollection2_Value = Guid.initString("30510791-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMChildrenCollection2 = &IID_IHTMLDOMChildrenCollection2_Value;
pub const IHTMLDOMChildrenCollection2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        item: *const fn(
            self: *const IHTMLDOMChildrenCollection2,
            index: i32,
            ppItem: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn item(self: *const IHTMLDOMChildrenCollection2, index: i32, ppItem: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppItem);
    }
};

const IID_DispHTMLAttributeCollection_Value = Guid.initString("3050f56c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLAttributeCollection = &IID_DispHTMLAttributeCollection_Value;
pub const DispHTMLAttributeCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispStaticNodeList_Value = Guid.initString("3050f59b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispStaticNodeList = &IID_DispStaticNodeList_Value;
pub const DispStaticNodeList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispDOMChildrenCollection_Value = Guid.initString("3050f577-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMChildrenCollection = &IID_DispDOMChildrenCollection_Value;
pub const DispDOMChildrenCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLElementEvents4_Value = Guid.initString("3051075e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLElementEvents4 = &IID_HTMLElementEvents4_Value;
pub const HTMLElementEvents4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLElementEvents3_Value = Guid.initString("3050f59f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLElementEvents3 = &IID_HTMLElementEvents3_Value;
pub const HTMLElementEvents3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLElementEvents2_Value = Guid.initString("3050f60f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLElementEvents2 = &IID_HTMLElementEvents2_Value;
pub const HTMLElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLElementEvents_Value = Guid.initString("3050f33c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLElementEvents = &IID_HTMLElementEvents_Value;
pub const HTMLElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IRulesAppliedCollection_Value = Guid.initString("305104be-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IRulesAppliedCollection = &IID_IRulesAppliedCollection_Value;
pub const IRulesAppliedCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        item: *const fn(
            self: *const IRulesAppliedCollection,
            index: i32,
            ppRulesApplied: ?*?*IRulesApplied,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IRulesAppliedCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_element: *const fn(
            self: *const IRulesAppliedCollection,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        propertyInheritedFrom: *const fn(
            self: *const IRulesAppliedCollection,
            name: ?BSTR,
            ppRulesApplied: ?*?*IRulesApplied,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_propertyCount: *const fn(
            self: *const IRulesAppliedCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        property: *const fn(
            self: *const IRulesAppliedCollection,
            index: i32,
            pbstrProperty: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        propertyInheritedTrace: *const fn(
            self: *const IRulesAppliedCollection,
            name: ?BSTR,
            index: i32,
            ppRulesApplied: ?*?*IRulesApplied,
        ) callconv(.winapi) HRESULT,
        propertyInheritedTraceLength: *const fn(
            self: *const IRulesAppliedCollection,
            name: ?BSTR,
            pLength: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn item(self: *const IRulesAppliedCollection, index: i32, ppRulesApplied: ?*?*IRulesApplied) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppRulesApplied);
    }
    pub fn get_length(self: *const IRulesAppliedCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get_element(self: *const IRulesAppliedCollection, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_element(self, p);
    }
    pub fn propertyInheritedFrom(self: *const IRulesAppliedCollection, name: ?BSTR, ppRulesApplied: ?*?*IRulesApplied) callconv(.@"inline") HRESULT {
        return self.vtable.propertyInheritedFrom(self, name, ppRulesApplied);
    }
    pub fn get_propertyCount(self: *const IRulesAppliedCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_propertyCount(self, p);
    }
    pub fn property(self: *const IRulesAppliedCollection, index: i32, pbstrProperty: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.property(self, index, pbstrProperty);
    }
    pub fn propertyInheritedTrace(self: *const IRulesAppliedCollection, name: ?BSTR, index: i32, ppRulesApplied: ?*?*IRulesApplied) callconv(.@"inline") HRESULT {
        return self.vtable.propertyInheritedTrace(self, name, index, ppRulesApplied);
    }
    pub fn propertyInheritedTraceLength(self: *const IRulesAppliedCollection, name: ?BSTR, pLength: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.propertyInheritedTraceLength(self, name, pLength);
    }
};

const IID_IHTMLElement3_Value = Guid.initString("3050f673-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElement3 = &IID_IHTMLElement3_Value;
pub const IHTMLElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        mergeAttributes: *const fn(
            self: *const IHTMLElement3,
            mergeThis: ?*IHTMLElement,
            pvarFlags: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isMultiLine: *const fn(
            self: *const IHTMLElement3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_canHaveHTML: *const fn(
            self: *const IHTMLElement3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onlayoutcomplete: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onlayoutcomplete: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpage: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpage: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_inflateBlock: *const fn(
            self: *const IHTMLElement3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_inflateBlock: *const fn(
            self: *const IHTMLElement3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforedeactivate: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforedeactivate: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        setActive: *const fn(
            self: *const IHTMLElement3,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_contentEditable: *const fn(
            self: *const IHTMLElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentEditable: *const fn(
            self: *const IHTMLElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isContentEditable: *const fn(
            self: *const IHTMLElement3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hideFocus: *const fn(
            self: *const IHTMLElement3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hideFocus: *const fn(
            self: *const IHTMLElement3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLElement3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLElement3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isDisabled: *const fn(
            self: *const IHTMLElement3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmove: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmove: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncontrolselect: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncontrolselect: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        fireEvent: *const fn(
            self: *const IHTMLElement3,
            bstrEventName: ?BSTR,
            pvarEventObject: ?*VARIANT,
            pfCancelled: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onresizestart: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onresizestart: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onresizeend: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onresizeend: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmovestart: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmovestart: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmoveend: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmoveend: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseenter: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseenter: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseleave: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseleave: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onactivate: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onactivate: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondeactivate: *const fn(
            self: *const IHTMLElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondeactivate: *const fn(
            self: *const IHTMLElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        dragDrop: *const fn(
            self: *const IHTMLElement3,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_glyphMode: *const fn(
            self: *const IHTMLElement3,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn mergeAttributes(self: *const IHTMLElement3, mergeThis: ?*IHTMLElement, pvarFlags: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.mergeAttributes(self, mergeThis, pvarFlags);
    }
    pub fn get_isMultiLine(self: *const IHTMLElement3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isMultiLine(self, p);
    }
    pub fn get_canHaveHTML(self: *const IHTMLElement3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_canHaveHTML(self, p);
    }
    pub fn put_onlayoutcomplete(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onlayoutcomplete(self, v);
    }
    pub fn get_onlayoutcomplete(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onlayoutcomplete(self, p);
    }
    pub fn put_onpage(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpage(self, v);
    }
    pub fn get_onpage(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpage(self, p);
    }
    pub fn put_inflateBlock(self: *const IHTMLElement3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_inflateBlock(self, v);
    }
    pub fn get_inflateBlock(self: *const IHTMLElement3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_inflateBlock(self, p);
    }
    pub fn put_onbeforedeactivate(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforedeactivate(self, v);
    }
    pub fn get_onbeforedeactivate(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforedeactivate(self, p);
    }
    pub fn setActive(self: *const IHTMLElement3) callconv(.@"inline") HRESULT {
        return self.vtable.setActive(self);
    }
    pub fn put_contentEditable(self: *const IHTMLElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_contentEditable(self, v);
    }
    pub fn get_contentEditable(self: *const IHTMLElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentEditable(self, p);
    }
    pub fn get_isContentEditable(self: *const IHTMLElement3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isContentEditable(self, p);
    }
    pub fn put_hideFocus(self: *const IHTMLElement3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_hideFocus(self, v);
    }
    pub fn get_hideFocus(self: *const IHTMLElement3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_hideFocus(self, p);
    }
    pub fn put_disabled(self: *const IHTMLElement3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLElement3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_isDisabled(self: *const IHTMLElement3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isDisabled(self, p);
    }
    pub fn put_onmove(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmove(self, v);
    }
    pub fn get_onmove(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmove(self, p);
    }
    pub fn put_oncontrolselect(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncontrolselect(self, v);
    }
    pub fn get_oncontrolselect(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncontrolselect(self, p);
    }
    pub fn fireEvent(self: *const IHTMLElement3, bstrEventName: ?BSTR, pvarEventObject: ?*VARIANT, pfCancelled: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.fireEvent(self, bstrEventName, pvarEventObject, pfCancelled);
    }
    pub fn put_onresizestart(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onresizestart(self, v);
    }
    pub fn get_onresizestart(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onresizestart(self, p);
    }
    pub fn put_onresizeend(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onresizeend(self, v);
    }
    pub fn get_onresizeend(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onresizeend(self, p);
    }
    pub fn put_onmovestart(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmovestart(self, v);
    }
    pub fn get_onmovestart(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmovestart(self, p);
    }
    pub fn put_onmoveend(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmoveend(self, v);
    }
    pub fn get_onmoveend(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmoveend(self, p);
    }
    pub fn put_onmouseenter(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseenter(self, v);
    }
    pub fn get_onmouseenter(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseenter(self, p);
    }
    pub fn put_onmouseleave(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseleave(self, v);
    }
    pub fn get_onmouseleave(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseleave(self, p);
    }
    pub fn put_onactivate(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onactivate(self, v);
    }
    pub fn get_onactivate(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onactivate(self, p);
    }
    pub fn put_ondeactivate(self: *const IHTMLElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondeactivate(self, v);
    }
    pub fn get_ondeactivate(self: *const IHTMLElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondeactivate(self, p);
    }
    pub fn dragDrop(self: *const IHTMLElement3, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.dragDrop(self, pfRet);
    }
    pub fn get_glyphMode(self: *const IHTMLElement3, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_glyphMode(self, p);
    }
};

const IID_IHTMLElement4_Value = Guid.initString("3050f80f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElement4 = &IID_IHTMLElement4_Value;
pub const IHTMLElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousewheel: *const fn(
            self: *const IHTMLElement4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousewheel: *const fn(
            self: *const IHTMLElement4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        normalize: *const fn(
            self: *const IHTMLElement4,
        ) callconv(.winapi) HRESULT,
        getAttributeNode: *const fn(
            self: *const IHTMLElement4,
            bstrname: ?BSTR,
            ppAttribute: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        setAttributeNode: *const fn(
            self: *const IHTMLElement4,
            pattr: ?*IHTMLDOMAttribute,
            ppretAttribute: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        removeAttributeNode: *const fn(
            self: *const IHTMLElement4,
            pattr: ?*IHTMLDOMAttribute,
            ppretAttribute: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeactivate: *const fn(
            self: *const IHTMLElement4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeactivate: *const fn(
            self: *const IHTMLElement4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocusin: *const fn(
            self: *const IHTMLElement4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocusin: *const fn(
            self: *const IHTMLElement4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocusout: *const fn(
            self: *const IHTMLElement4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocusout: *const fn(
            self: *const IHTMLElement4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onmousewheel(self: *const IHTMLElement4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousewheel(self, v);
    }
    pub fn get_onmousewheel(self: *const IHTMLElement4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousewheel(self, p);
    }
    pub fn normalize(self: *const IHTMLElement4) callconv(.@"inline") HRESULT {
        return self.vtable.normalize(self);
    }
    pub fn getAttributeNode(self: *const IHTMLElement4, bstrname: ?BSTR, ppAttribute: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.getAttributeNode(self, bstrname, ppAttribute);
    }
    pub fn setAttributeNode(self: *const IHTMLElement4, pattr: ?*IHTMLDOMAttribute, ppretAttribute: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.setAttributeNode(self, pattr, ppretAttribute);
    }
    pub fn removeAttributeNode(self: *const IHTMLElement4, pattr: ?*IHTMLDOMAttribute, ppretAttribute: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttributeNode(self, pattr, ppretAttribute);
    }
    pub fn put_onbeforeactivate(self: *const IHTMLElement4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeactivate(self, v);
    }
    pub fn get_onbeforeactivate(self: *const IHTMLElement4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeactivate(self, p);
    }
    pub fn put_onfocusin(self: *const IHTMLElement4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocusin(self, v);
    }
    pub fn get_onfocusin(self: *const IHTMLElement4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocusin(self, p);
    }
    pub fn put_onfocusout(self: *const IHTMLElement4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocusout(self, v);
    }
    pub fn get_onfocusout(self: *const IHTMLElement4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocusout(self, p);
    }
};

const IID_IElementSelector_Value = Guid.initString("30510463-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementSelector = &IID_IElementSelector_Value;
pub const IElementSelector = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        querySelector: *const fn(
            self: *const IElementSelector,
            v: ?BSTR,
            pel: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        querySelectorAll: *const fn(
            self: *const IElementSelector,
            v: ?BSTR,
            pel: ?*?*IHTMLDOMChildrenCollection,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn querySelector(self: *const IElementSelector, v: ?BSTR, pel: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.querySelector(self, v, pel);
    }
    pub fn querySelectorAll(self: *const IElementSelector, v: ?BSTR, pel: ?*?*IHTMLDOMChildrenCollection) callconv(.@"inline") HRESULT {
        return self.vtable.querySelectorAll(self, v, pel);
    }
};

const IID_IHTMLElementRender_Value = Guid.initString("3050f669-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElementRender = &IID_IHTMLElementRender_Value;
pub const IHTMLElementRender = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DrawToDC: *const fn(
            self: *const IHTMLElementRender,
            hDC: ?HDC,
        ) callconv(.winapi) HRESULT,
        SetDocumentPrinter: *const fn(
            self: *const IHTMLElementRender,
            bstrPrinterName: ?BSTR,
            hDC: ?HDC,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn DrawToDC(self: *const IHTMLElementRender, hDC: ?HDC) callconv(.@"inline") HRESULT {
        return self.vtable.DrawToDC(self, hDC);
    }
    pub fn SetDocumentPrinter(self: *const IHTMLElementRender, bstrPrinterName: ?BSTR, hDC: ?HDC) callconv(.@"inline") HRESULT {
        return self.vtable.SetDocumentPrinter(self, bstrPrinterName, hDC);
    }
};

const IID_IHTMLUniqueName_Value = Guid.initString("3050f4d0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLUniqueName = &IID_IHTMLUniqueName_Value;
pub const IHTMLUniqueName = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_uniqueNumber: *const fn(
            self: *const IHTMLUniqueName,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_uniqueID: *const fn(
            self: *const IHTMLUniqueName,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_uniqueNumber(self: *const IHTMLUniqueName, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_uniqueNumber(self, p);
    }
    pub fn get_uniqueID(self: *const IHTMLUniqueName, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_uniqueID(self, p);
    }
};

const IID_IHTMLElement5_Value = Guid.initString("3051045d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElement5 = &IID_IHTMLElement5_Value;
pub const IHTMLElement5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getAttributeNode: *const fn(
            self: *const IHTMLElement5,
            bstrname: ?BSTR,
            ppretAttribute: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        setAttributeNode: *const fn(
            self: *const IHTMLElement5,
            pattr: ?*IHTMLDOMAttribute2,
            ppretAttribute: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        removeAttributeNode: *const fn(
            self: *const IHTMLElement5,
            pattr: ?*IHTMLDOMAttribute2,
            ppretAttribute: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        hasAttribute: *const fn(
            self: *const IHTMLElement5,
            name: ?BSTR,
            pfHasAttribute: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_role: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_role: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaBusy: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaBusy: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaChecked: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaChecked: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaDisabled: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaDisabled: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaExpanded: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaExpanded: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaHaspopup: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaHaspopup: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaHidden: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaHidden: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaInvalid: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaInvalid: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaMultiselectable: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaMultiselectable: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaPressed: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaPressed: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaReadonly: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaReadonly: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaRequired: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaRequired: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaSecret: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaSecret: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaSelected: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaSelected: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLElement5,
            strAttributeName: ?BSTR,
            AttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        setAttribute: *const fn(
            self: *const IHTMLElement5,
            strAttributeName: ?BSTR,
            AttributeValue: VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttribute: *const fn(
            self: *const IHTMLElement5,
            strAttributeName: ?BSTR,
            pfSuccess: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn(
            self: *const IHTMLElement5,
            p: ?*?*IHTMLAttributeCollection3,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaValuenow: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaValuenow: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaPosinset: *const fn(
            self: *const IHTMLElement5,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaPosinset: *const fn(
            self: *const IHTMLElement5,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaSetsize: *const fn(
            self: *const IHTMLElement5,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaSetsize: *const fn(
            self: *const IHTMLElement5,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaLevel: *const fn(
            self: *const IHTMLElement5,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaLevel: *const fn(
            self: *const IHTMLElement5,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaValuemin: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaValuemin: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaValuemax: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaValuemax: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaControls: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaControls: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaDescribedby: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaDescribedby: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaFlowto: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaFlowto: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaLabelledby: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaLabelledby: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaActivedescendant: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaActivedescendant: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaOwns: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaOwns: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        hasAttributes: *const fn(
            self: *const IHTMLElement5,
            pfHasAttributes: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaLive: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaLive: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ariaRelevant: *const fn(
            self: *const IHTMLElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ariaRelevant: *const fn(
            self: *const IHTMLElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getAttributeNode(self: *const IHTMLElement5, bstrname: ?BSTR, ppretAttribute: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.getAttributeNode(self, bstrname, ppretAttribute);
    }
    pub fn setAttributeNode(self: *const IHTMLElement5, pattr: ?*IHTMLDOMAttribute2, ppretAttribute: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.setAttributeNode(self, pattr, ppretAttribute);
    }
    pub fn removeAttributeNode(self: *const IHTMLElement5, pattr: ?*IHTMLDOMAttribute2, ppretAttribute: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttributeNode(self, pattr, ppretAttribute);
    }
    pub fn hasAttribute(self: *const IHTMLElement5, name: ?BSTR, pfHasAttribute: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasAttribute(self, name, pfHasAttribute);
    }
    pub fn put_role(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_role(self, v);
    }
    pub fn get_role(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_role(self, p);
    }
    pub fn put_ariaBusy(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaBusy(self, v);
    }
    pub fn get_ariaBusy(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaBusy(self, p);
    }
    pub fn put_ariaChecked(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaChecked(self, v);
    }
    pub fn get_ariaChecked(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaChecked(self, p);
    }
    pub fn put_ariaDisabled(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaDisabled(self, v);
    }
    pub fn get_ariaDisabled(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaDisabled(self, p);
    }
    pub fn put_ariaExpanded(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaExpanded(self, v);
    }
    pub fn get_ariaExpanded(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaExpanded(self, p);
    }
    pub fn put_ariaHaspopup(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaHaspopup(self, v);
    }
    pub fn get_ariaHaspopup(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaHaspopup(self, p);
    }
    pub fn put_ariaHidden(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaHidden(self, v);
    }
    pub fn get_ariaHidden(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaHidden(self, p);
    }
    pub fn put_ariaInvalid(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaInvalid(self, v);
    }
    pub fn get_ariaInvalid(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaInvalid(self, p);
    }
    pub fn put_ariaMultiselectable(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaMultiselectable(self, v);
    }
    pub fn get_ariaMultiselectable(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaMultiselectable(self, p);
    }
    pub fn put_ariaPressed(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaPressed(self, v);
    }
    pub fn get_ariaPressed(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaPressed(self, p);
    }
    pub fn put_ariaReadonly(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaReadonly(self, v);
    }
    pub fn get_ariaReadonly(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaReadonly(self, p);
    }
    pub fn put_ariaRequired(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaRequired(self, v);
    }
    pub fn get_ariaRequired(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaRequired(self, p);
    }
    pub fn put_ariaSecret(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaSecret(self, v);
    }
    pub fn get_ariaSecret(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaSecret(self, p);
    }
    pub fn put_ariaSelected(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaSelected(self, v);
    }
    pub fn get_ariaSelected(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaSelected(self, p);
    }
    pub fn getAttribute(self: *const IHTMLElement5, strAttributeName: ?BSTR, AttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, strAttributeName, AttributeValue);
    }
    pub fn setAttribute(self: *const IHTMLElement5, strAttributeName: ?BSTR, AttributeValue: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, strAttributeName, AttributeValue);
    }
    pub fn removeAttribute(self: *const IHTMLElement5, strAttributeName: ?BSTR, pfSuccess: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttribute(self, strAttributeName, pfSuccess);
    }
    pub fn get_attributes(self: *const IHTMLElement5, p: ?*?*IHTMLAttributeCollection3) callconv(.@"inline") HRESULT {
        return self.vtable.get_attributes(self, p);
    }
    pub fn put_ariaValuenow(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaValuenow(self, v);
    }
    pub fn get_ariaValuenow(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaValuenow(self, p);
    }
    pub fn put_ariaPosinset(self: *const IHTMLElement5, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaPosinset(self, v);
    }
    pub fn get_ariaPosinset(self: *const IHTMLElement5, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaPosinset(self, p);
    }
    pub fn put_ariaSetsize(self: *const IHTMLElement5, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaSetsize(self, v);
    }
    pub fn get_ariaSetsize(self: *const IHTMLElement5, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaSetsize(self, p);
    }
    pub fn put_ariaLevel(self: *const IHTMLElement5, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaLevel(self, v);
    }
    pub fn get_ariaLevel(self: *const IHTMLElement5, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaLevel(self, p);
    }
    pub fn put_ariaValuemin(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaValuemin(self, v);
    }
    pub fn get_ariaValuemin(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaValuemin(self, p);
    }
    pub fn put_ariaValuemax(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaValuemax(self, v);
    }
    pub fn get_ariaValuemax(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaValuemax(self, p);
    }
    pub fn put_ariaControls(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaControls(self, v);
    }
    pub fn get_ariaControls(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaControls(self, p);
    }
    pub fn put_ariaDescribedby(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaDescribedby(self, v);
    }
    pub fn get_ariaDescribedby(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaDescribedby(self, p);
    }
    pub fn put_ariaFlowto(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaFlowto(self, v);
    }
    pub fn get_ariaFlowto(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaFlowto(self, p);
    }
    pub fn put_ariaLabelledby(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaLabelledby(self, v);
    }
    pub fn get_ariaLabelledby(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaLabelledby(self, p);
    }
    pub fn put_ariaActivedescendant(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaActivedescendant(self, v);
    }
    pub fn get_ariaActivedescendant(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaActivedescendant(self, p);
    }
    pub fn put_ariaOwns(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaOwns(self, v);
    }
    pub fn get_ariaOwns(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaOwns(self, p);
    }
    pub fn hasAttributes(self: *const IHTMLElement5, pfHasAttributes: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasAttributes(self, pfHasAttributes);
    }
    pub fn put_ariaLive(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaLive(self, v);
    }
    pub fn get_ariaLive(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaLive(self, p);
    }
    pub fn put_ariaRelevant(self: *const IHTMLElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ariaRelevant(self, v);
    }
    pub fn get_ariaRelevant(self: *const IHTMLElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ariaRelevant(self, p);
    }
};

const IID_IHTMLElement6_Value = Guid.initString("305106f8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElement6 = &IID_IHTMLElement6_Value;
pub const IHTMLElement6 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getAttributeNS: *const fn(
            self: *const IHTMLElement6,
            pvarNS: ?*VARIANT,
            strAttributeName: ?BSTR,
            AttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        setAttributeNS: *const fn(
            self: *const IHTMLElement6,
            pvarNS: ?*VARIANT,
            strAttributeName: ?BSTR,
            pvarAttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttributeNS: *const fn(
            self: *const IHTMLElement6,
            pvarNS: ?*VARIANT,
            strAttributeName: ?BSTR,
        ) callconv(.winapi) HRESULT,
        getAttributeNodeNS: *const fn(
            self: *const IHTMLElement6,
            pvarNS: ?*VARIANT,
            bstrname: ?BSTR,
            ppretAttribute: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        setAttributeNodeNS: *const fn(
            self: *const IHTMLElement6,
            pattr: ?*IHTMLDOMAttribute2,
            ppretAttribute: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        hasAttributeNS: *const fn(
            self: *const IHTMLElement6,
            pvarNS: ?*VARIANT,
            name: ?BSTR,
            pfHasAttribute: ?*i16,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLElement6,
            strAttributeName: ?BSTR,
            AttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        setAttribute: *const fn(
            self: *const IHTMLElement6,
            strAttributeName: ?BSTR,
            pvarAttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttribute: *const fn(
            self: *const IHTMLElement6,
            strAttributeName: ?BSTR,
        ) callconv(.winapi) HRESULT,
        getAttributeNode: *const fn(
            self: *const IHTMLElement6,
            strAttributeName: ?BSTR,
            ppretAttribute: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        setAttributeNode: *const fn(
            self: *const IHTMLElement6,
            pattr: ?*IHTMLDOMAttribute2,
            ppretAttribute: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        removeAttributeNode: *const fn(
            self: *const IHTMLElement6,
            pattr: ?*IHTMLDOMAttribute2,
            ppretAttribute: ?*?*IHTMLDOMAttribute2,
        ) callconv(.winapi) HRESULT,
        hasAttribute: *const fn(
            self: *const IHTMLElement6,
            name: ?BSTR,
            pfHasAttribute: ?*i16,
        ) callconv(.winapi) HRESULT,
        getElementsByTagNameNS: *const fn(
            self: *const IHTMLElement6,
            varNS: ?*VARIANT,
            bstrLocalName: ?BSTR,
            pelColl: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagName: *const fn(
            self: *const IHTMLElement6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeName: *const fn(
            self: *const IHTMLElement6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        getElementsByClassName: *const fn(
            self: *const IHTMLElement6,
            v: ?BSTR,
            pel: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        msMatchesSelector: *const fn(
            self: *const IHTMLElement6,
            v: ?BSTR,
            pfMatches: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onabort: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onabort: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncanplay: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncanplay: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncanplaythrough: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncanplaythrough: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondurationchange: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondurationchange: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onemptied: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onemptied: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onended: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onended: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oninput: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oninput: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadeddata: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadeddata: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadedmetadata: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadedmetadata: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadstart: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadstart: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpause: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpause: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onplay: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onplay: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onplaying: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onplaying: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onprogress: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onprogress: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onratechange: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onratechange: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreset: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreset: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onseeked: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onseeked: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onseeking: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onseeking: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselect: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselect: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstalled: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstalled: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onsubmit: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onsubmit: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onsuspend: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onsuspend: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ontimeupdate: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ontimeupdate: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onvolumechange: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onvolumechange: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onwaiting: *const fn(
            self: *const IHTMLElement6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onwaiting: *const fn(
            self: *const IHTMLElement6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        hasAttributes: *const fn(
            self: *const IHTMLElement6,
            pfHasAttributes: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getAttributeNS(self: *const IHTMLElement6, pvarNS: ?*VARIANT, strAttributeName: ?BSTR, AttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttributeNS(self, pvarNS, strAttributeName, AttributeValue);
    }
    pub fn setAttributeNS(self: *const IHTMLElement6, pvarNS: ?*VARIANT, strAttributeName: ?BSTR, pvarAttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.setAttributeNS(self, pvarNS, strAttributeName, pvarAttributeValue);
    }
    pub fn removeAttributeNS(self: *const IHTMLElement6, pvarNS: ?*VARIANT, strAttributeName: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttributeNS(self, pvarNS, strAttributeName);
    }
    pub fn getAttributeNodeNS(self: *const IHTMLElement6, pvarNS: ?*VARIANT, bstrname: ?BSTR, ppretAttribute: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.getAttributeNodeNS(self, pvarNS, bstrname, ppretAttribute);
    }
    pub fn setAttributeNodeNS(self: *const IHTMLElement6, pattr: ?*IHTMLDOMAttribute2, ppretAttribute: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.setAttributeNodeNS(self, pattr, ppretAttribute);
    }
    pub fn hasAttributeNS(self: *const IHTMLElement6, pvarNS: ?*VARIANT, name: ?BSTR, pfHasAttribute: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasAttributeNS(self, pvarNS, name, pfHasAttribute);
    }
    pub fn getAttribute(self: *const IHTMLElement6, strAttributeName: ?BSTR, AttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, strAttributeName, AttributeValue);
    }
    pub fn setAttribute(self: *const IHTMLElement6, strAttributeName: ?BSTR, pvarAttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, strAttributeName, pvarAttributeValue);
    }
    pub fn removeAttribute(self: *const IHTMLElement6, strAttributeName: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttribute(self, strAttributeName);
    }
    pub fn getAttributeNode(self: *const IHTMLElement6, strAttributeName: ?BSTR, ppretAttribute: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.getAttributeNode(self, strAttributeName, ppretAttribute);
    }
    pub fn setAttributeNode(self: *const IHTMLElement6, pattr: ?*IHTMLDOMAttribute2, ppretAttribute: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.setAttributeNode(self, pattr, ppretAttribute);
    }
    pub fn removeAttributeNode(self: *const IHTMLElement6, pattr: ?*IHTMLDOMAttribute2, ppretAttribute: ?*?*IHTMLDOMAttribute2) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttributeNode(self, pattr, ppretAttribute);
    }
    pub fn hasAttribute(self: *const IHTMLElement6, name: ?BSTR, pfHasAttribute: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasAttribute(self, name, pfHasAttribute);
    }
    pub fn getElementsByTagNameNS(self: *const IHTMLElement6, varNS: ?*VARIANT, bstrLocalName: ?BSTR, pelColl: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getElementsByTagNameNS(self, varNS, bstrLocalName, pelColl);
    }
    pub fn get_tagName(self: *const IHTMLElement6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_tagName(self, p);
    }
    pub fn get_nodeName(self: *const IHTMLElement6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nodeName(self, p);
    }
    pub fn getElementsByClassName(self: *const IHTMLElement6, v: ?BSTR, pel: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getElementsByClassName(self, v, pel);
    }
    pub fn msMatchesSelector(self: *const IHTMLElement6, v: ?BSTR, pfMatches: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.msMatchesSelector(self, v, pfMatches);
    }
    pub fn put_onabort(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onabort(self, v);
    }
    pub fn get_onabort(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onabort(self, p);
    }
    pub fn put_oncanplay(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncanplay(self, v);
    }
    pub fn get_oncanplay(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncanplay(self, p);
    }
    pub fn put_oncanplaythrough(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncanplaythrough(self, v);
    }
    pub fn get_oncanplaythrough(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncanplaythrough(self, p);
    }
    pub fn put_onchange(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_ondurationchange(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondurationchange(self, v);
    }
    pub fn get_ondurationchange(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondurationchange(self, p);
    }
    pub fn put_onemptied(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onemptied(self, v);
    }
    pub fn get_onemptied(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onemptied(self, p);
    }
    pub fn put_onended(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onended(self, v);
    }
    pub fn get_onended(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onended(self, p);
    }
    pub fn put_onerror(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_oninput(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oninput(self, v);
    }
    pub fn get_oninput(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oninput(self, p);
    }
    pub fn put_onload(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onloadeddata(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadeddata(self, v);
    }
    pub fn get_onloadeddata(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadeddata(self, p);
    }
    pub fn put_onloadedmetadata(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadedmetadata(self, v);
    }
    pub fn get_onloadedmetadata(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadedmetadata(self, p);
    }
    pub fn put_onloadstart(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadstart(self, v);
    }
    pub fn get_onloadstart(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadstart(self, p);
    }
    pub fn put_onpause(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpause(self, v);
    }
    pub fn get_onpause(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpause(self, p);
    }
    pub fn put_onplay(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onplay(self, v);
    }
    pub fn get_onplay(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onplay(self, p);
    }
    pub fn put_onplaying(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onplaying(self, v);
    }
    pub fn get_onplaying(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onplaying(self, p);
    }
    pub fn put_onprogress(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onprogress(self, v);
    }
    pub fn get_onprogress(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onprogress(self, p);
    }
    pub fn put_onratechange(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onratechange(self, v);
    }
    pub fn get_onratechange(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onratechange(self, p);
    }
    pub fn put_onreset(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreset(self, v);
    }
    pub fn get_onreset(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreset(self, p);
    }
    pub fn put_onseeked(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onseeked(self, v);
    }
    pub fn get_onseeked(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onseeked(self, p);
    }
    pub fn put_onseeking(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onseeking(self, v);
    }
    pub fn get_onseeking(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onseeking(self, p);
    }
    pub fn put_onselect(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselect(self, v);
    }
    pub fn get_onselect(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselect(self, p);
    }
    pub fn put_onstalled(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstalled(self, v);
    }
    pub fn get_onstalled(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstalled(self, p);
    }
    pub fn put_onsubmit(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onsubmit(self, v);
    }
    pub fn get_onsubmit(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onsubmit(self, p);
    }
    pub fn put_onsuspend(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onsuspend(self, v);
    }
    pub fn get_onsuspend(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onsuspend(self, p);
    }
    pub fn put_ontimeupdate(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ontimeupdate(self, v);
    }
    pub fn get_ontimeupdate(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ontimeupdate(self, p);
    }
    pub fn put_onvolumechange(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onvolumechange(self, v);
    }
    pub fn get_onvolumechange(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onvolumechange(self, p);
    }
    pub fn put_onwaiting(self: *const IHTMLElement6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onwaiting(self, v);
    }
    pub fn get_onwaiting(self: *const IHTMLElement6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onwaiting(self, p);
    }
    pub fn hasAttributes(self: *const IHTMLElement6, pfHasAttributes: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasAttributes(self, pfHasAttributes);
    }
};

const IID_IHTMLElement7_Value = Guid.initString("305107aa-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElement7 = &IID_IHTMLElement7_Value;
pub const IHTMLElement7 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerdown: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerdown: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointermove: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointermove: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerup: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerup: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerover: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerover: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerout: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerout: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointercancel: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointercancel: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerhover: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerhover: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmslostpointercapture: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmslostpointercapture: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgotpointercapture: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgotpointercapture: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturestart: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturestart: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturechange: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturechange: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgestureend: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgestureend: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturehold: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturehold: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturetap: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturetap: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturedoubletap: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturedoubletap: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsinertiastart: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsinertiastart: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        msSetPointerCapture: *const fn(
            self: *const IHTMLElement7,
            pointerId: i32,
        ) callconv(.winapi) HRESULT,
        msReleasePointerCapture: *const fn(
            self: *const IHTMLElement7,
            pointerId: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmstransitionstart: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmstransitionstart: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmstransitionend: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmstransitionend: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsanimationstart: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsanimationstart: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsanimationend: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsanimationend: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsanimationiteration: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsanimationiteration: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oninvalid: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oninvalid: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_xmsAcceleratorKey: *const fn(
            self: *const IHTMLElement7,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xmsAcceleratorKey: *const fn(
            self: *const IHTMLElement7,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_spellcheck: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_spellcheck: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsmanipulationstatechanged: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsmanipulationstatechanged: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncuechange: *const fn(
            self: *const IHTMLElement7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncuechange: *const fn(
            self: *const IHTMLElement7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onmspointerdown(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerdown(self, v);
    }
    pub fn get_onmspointerdown(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerdown(self, p);
    }
    pub fn put_onmspointermove(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointermove(self, v);
    }
    pub fn get_onmspointermove(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointermove(self, p);
    }
    pub fn put_onmspointerup(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerup(self, v);
    }
    pub fn get_onmspointerup(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerup(self, p);
    }
    pub fn put_onmspointerover(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerover(self, v);
    }
    pub fn get_onmspointerover(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerover(self, p);
    }
    pub fn put_onmspointerout(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerout(self, v);
    }
    pub fn get_onmspointerout(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerout(self, p);
    }
    pub fn put_onmspointercancel(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointercancel(self, v);
    }
    pub fn get_onmspointercancel(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointercancel(self, p);
    }
    pub fn put_onmspointerhover(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerhover(self, v);
    }
    pub fn get_onmspointerhover(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerhover(self, p);
    }
    pub fn put_onmslostpointercapture(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmslostpointercapture(self, v);
    }
    pub fn get_onmslostpointercapture(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmslostpointercapture(self, p);
    }
    pub fn put_onmsgotpointercapture(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgotpointercapture(self, v);
    }
    pub fn get_onmsgotpointercapture(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgotpointercapture(self, p);
    }
    pub fn put_onmsgesturestart(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturestart(self, v);
    }
    pub fn get_onmsgesturestart(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturestart(self, p);
    }
    pub fn put_onmsgesturechange(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturechange(self, v);
    }
    pub fn get_onmsgesturechange(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturechange(self, p);
    }
    pub fn put_onmsgestureend(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgestureend(self, v);
    }
    pub fn get_onmsgestureend(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgestureend(self, p);
    }
    pub fn put_onmsgesturehold(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturehold(self, v);
    }
    pub fn get_onmsgesturehold(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturehold(self, p);
    }
    pub fn put_onmsgesturetap(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturetap(self, v);
    }
    pub fn get_onmsgesturetap(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturetap(self, p);
    }
    pub fn put_onmsgesturedoubletap(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturedoubletap(self, v);
    }
    pub fn get_onmsgesturedoubletap(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturedoubletap(self, p);
    }
    pub fn put_onmsinertiastart(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsinertiastart(self, v);
    }
    pub fn get_onmsinertiastart(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsinertiastart(self, p);
    }
    pub fn msSetPointerCapture(self: *const IHTMLElement7, pointerId: i32) callconv(.@"inline") HRESULT {
        return self.vtable.msSetPointerCapture(self, pointerId);
    }
    pub fn msReleasePointerCapture(self: *const IHTMLElement7, pointerId: i32) callconv(.@"inline") HRESULT {
        return self.vtable.msReleasePointerCapture(self, pointerId);
    }
    pub fn put_onmstransitionstart(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmstransitionstart(self, v);
    }
    pub fn get_onmstransitionstart(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmstransitionstart(self, p);
    }
    pub fn put_onmstransitionend(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmstransitionend(self, v);
    }
    pub fn get_onmstransitionend(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmstransitionend(self, p);
    }
    pub fn put_onmsanimationstart(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsanimationstart(self, v);
    }
    pub fn get_onmsanimationstart(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsanimationstart(self, p);
    }
    pub fn put_onmsanimationend(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsanimationend(self, v);
    }
    pub fn get_onmsanimationend(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsanimationend(self, p);
    }
    pub fn put_onmsanimationiteration(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsanimationiteration(self, v);
    }
    pub fn get_onmsanimationiteration(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsanimationiteration(self, p);
    }
    pub fn put_oninvalid(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oninvalid(self, v);
    }
    pub fn get_oninvalid(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oninvalid(self, p);
    }
    pub fn put_xmsAcceleratorKey(self: *const IHTMLElement7, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_xmsAcceleratorKey(self, v);
    }
    pub fn get_xmsAcceleratorKey(self: *const IHTMLElement7, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_xmsAcceleratorKey(self, p);
    }
    pub fn put_spellcheck(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_spellcheck(self, v);
    }
    pub fn get_spellcheck(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_spellcheck(self, p);
    }
    pub fn put_onmsmanipulationstatechanged(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsmanipulationstatechanged(self, v);
    }
    pub fn get_onmsmanipulationstatechanged(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsmanipulationstatechanged(self, p);
    }
    pub fn put_oncuechange(self: *const IHTMLElement7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncuechange(self, v);
    }
    pub fn get_oncuechange(self: *const IHTMLElement7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncuechange(self, p);
    }
};

const IID_IHTMLElementAppliedStyles_Value = Guid.initString("305104bd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElementAppliedStyles = &IID_IHTMLElementAppliedStyles_Value;
pub const IHTMLElementAppliedStyles = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        msGetRulesApplied: *const fn(
            self: *const IHTMLElementAppliedStyles,
            ppRulesAppliedCollection: ?*?*IRulesAppliedCollection,
        ) callconv(.winapi) HRESULT,
        msGetRulesAppliedWithAncestor: *const fn(
            self: *const IHTMLElementAppliedStyles,
            varContext: VARIANT,
            ppRulesAppliedCollection: ?*?*IRulesAppliedCollection,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn msGetRulesApplied(self: *const IHTMLElementAppliedStyles, ppRulesAppliedCollection: ?*?*IRulesAppliedCollection) callconv(.@"inline") HRESULT {
        return self.vtable.msGetRulesApplied(self, ppRulesAppliedCollection);
    }
    pub fn msGetRulesAppliedWithAncestor(self: *const IHTMLElementAppliedStyles, varContext: VARIANT, ppRulesAppliedCollection: ?*?*IRulesAppliedCollection) callconv(.@"inline") HRESULT {
        return self.vtable.msGetRulesAppliedWithAncestor(self, varContext, ppRulesAppliedCollection);
    }
};

const IID_IElementTraversal_Value = Guid.initString("30510736-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementTraversal = &IID_IElementTraversal_Value;
pub const IElementTraversal = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_firstElementChild: *const fn(
            self: *const IElementTraversal,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastElementChild: *const fn(
            self: *const IElementTraversal,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_previousElementSibling: *const fn(
            self: *const IElementTraversal,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextElementSibling: *const fn(
            self: *const IElementTraversal,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_childElementCount: *const fn(
            self: *const IElementTraversal,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_firstElementChild(self: *const IElementTraversal, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_firstElementChild(self, p);
    }
    pub fn get_lastElementChild(self: *const IElementTraversal, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_lastElementChild(self, p);
    }
    pub fn get_previousElementSibling(self: *const IElementTraversal, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_previousElementSibling(self, p);
    }
    pub fn get_nextElementSibling(self: *const IElementTraversal, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_nextElementSibling(self, p);
    }
    pub fn get_childElementCount(self: *const IElementTraversal, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_childElementCount(self, p);
    }
};

const IID_IHTMLDatabinding_Value = Guid.initString("3050f3f2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDatabinding = &IID_IHTMLDatabinding_Value;
pub const IHTMLDatabinding = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dataFld: *const fn(
            self: *const IHTMLDatabinding,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataFld: *const fn(
            self: *const IHTMLDatabinding,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dataSrc: *const fn(
            self: *const IHTMLDatabinding,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataSrc: *const fn(
            self: *const IHTMLDatabinding,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dataFormatAs: *const fn(
            self: *const IHTMLDatabinding,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataFormatAs: *const fn(
            self: *const IHTMLDatabinding,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_dataFld(self: *const IHTMLDatabinding, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dataFld(self, v);
    }
    pub fn get_dataFld(self: *const IHTMLDatabinding, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dataFld(self, p);
    }
    pub fn put_dataSrc(self: *const IHTMLDatabinding, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dataSrc(self, v);
    }
    pub fn get_dataSrc(self: *const IHTMLDatabinding, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dataSrc(self, p);
    }
    pub fn put_dataFormatAs(self: *const IHTMLDatabinding, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dataFormatAs(self, v);
    }
    pub fn get_dataFormatAs(self: *const IHTMLDatabinding, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dataFormatAs(self, p);
    }
};

const IID_IHTMLDocument_Value = Guid.initString("626fc520-a41e-11cf-a731-00a0c9082637");
pub const IID_IHTMLDocument = &IID_IHTMLDocument_Value;
pub const IHTMLDocument = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Script: *const fn(
            self: *const IHTMLDocument,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Script(self: *const IHTMLDocument, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Script(self, p);
    }
};

const IID_IHTMLElementDefaults_Value = Guid.initString("3050f6c9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElementDefaults = &IID_IHTMLElementDefaults_Value;
pub const IHTMLElementDefaults = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_style: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*?*IHTMLStyle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tabStop: *const fn(
            self: *const IHTMLElementDefaults,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tabStop: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_viewInheritStyle: *const fn(
            self: *const IHTMLElementDefaults,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_viewInheritStyle: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_viewMasterTab: *const fn(
            self: *const IHTMLElementDefaults,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_viewMasterTab: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollSegmentX: *const fn(
            self: *const IHTMLElementDefaults,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollSegmentX: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollSegmentY: *const fn(
            self: *const IHTMLElementDefaults,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollSegmentY: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_isMultiLine: *const fn(
            self: *const IHTMLElementDefaults,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isMultiLine: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_contentEditable: *const fn(
            self: *const IHTMLElementDefaults,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentEditable: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_canHaveHTML: *const fn(
            self: *const IHTMLElementDefaults,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_canHaveHTML: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        putref_viewLink: *const fn(
            self: *const IHTMLElementDefaults,
            v: ?*IHTMLDocument,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_viewLink: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*?*IHTMLDocument,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frozen: *const fn(
            self: *const IHTMLElementDefaults,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frozen: *const fn(
            self: *const IHTMLElementDefaults,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_style(self: *const IHTMLElementDefaults, p: ?*?*IHTMLStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_style(self, p);
    }
    pub fn put_tabStop(self: *const IHTMLElementDefaults, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_tabStop(self, v);
    }
    pub fn get_tabStop(self: *const IHTMLElementDefaults, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_tabStop(self, p);
    }
    pub fn put_viewInheritStyle(self: *const IHTMLElementDefaults, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_viewInheritStyle(self, v);
    }
    pub fn get_viewInheritStyle(self: *const IHTMLElementDefaults, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_viewInheritStyle(self, p);
    }
    pub fn put_viewMasterTab(self: *const IHTMLElementDefaults, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_viewMasterTab(self, v);
    }
    pub fn get_viewMasterTab(self: *const IHTMLElementDefaults, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_viewMasterTab(self, p);
    }
    pub fn put_scrollSegmentX(self: *const IHTMLElementDefaults, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollSegmentX(self, v);
    }
    pub fn get_scrollSegmentX(self: *const IHTMLElementDefaults, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollSegmentX(self, p);
    }
    pub fn put_scrollSegmentY(self: *const IHTMLElementDefaults, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollSegmentY(self, v);
    }
    pub fn get_scrollSegmentY(self: *const IHTMLElementDefaults, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollSegmentY(self, p);
    }
    pub fn put_isMultiLine(self: *const IHTMLElementDefaults, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_isMultiLine(self, v);
    }
    pub fn get_isMultiLine(self: *const IHTMLElementDefaults, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isMultiLine(self, p);
    }
    pub fn put_contentEditable(self: *const IHTMLElementDefaults, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_contentEditable(self, v);
    }
    pub fn get_contentEditable(self: *const IHTMLElementDefaults, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentEditable(self, p);
    }
    pub fn put_canHaveHTML(self: *const IHTMLElementDefaults, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_canHaveHTML(self, v);
    }
    pub fn get_canHaveHTML(self: *const IHTMLElementDefaults, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_canHaveHTML(self, p);
    }
    pub fn putref_viewLink(self: *const IHTMLElementDefaults, v: ?*IHTMLDocument) callconv(.@"inline") HRESULT {
        return self.vtable.putref_viewLink(self, v);
    }
    pub fn get_viewLink(self: *const IHTMLElementDefaults, p: ?*?*IHTMLDocument) callconv(.@"inline") HRESULT {
        return self.vtable.get_viewLink(self, p);
    }
    pub fn put_frozen(self: *const IHTMLElementDefaults, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_frozen(self, v);
    }
    pub fn get_frozen(self: *const IHTMLElementDefaults, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_frozen(self, p);
    }
};

const IID_DispHTMLDefaults_Value = Guid.initString("3050f58c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDefaults = &IID_DispHTMLDefaults_Value;
pub const DispHTMLDefaults = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTCDefaultDispatch_Value = Guid.initString("3050f4fd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTCDefaultDispatch = &IID_IHTCDefaultDispatch_Value;
pub const IHTCDefaultDispatch = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_element: *const fn(
            self: *const IHTCDefaultDispatch,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        createEventObject: *const fn(
            self: *const IHTCDefaultDispatch,
            eventObj: ?*?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaults: *const fn(
            self: *const IHTCDefaultDispatch,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_document: *const fn(
            self: *const IHTCDefaultDispatch,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_element(self: *const IHTCDefaultDispatch, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_element(self, p);
    }
    pub fn createEventObject(self: *const IHTCDefaultDispatch, eventObj: ?*?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.createEventObject(self, eventObj);
    }
    pub fn get_defaults(self: *const IHTCDefaultDispatch, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaults(self, p);
    }
    pub fn get_document(self: *const IHTCDefaultDispatch, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_document(self, p);
    }
};

const IID_IHTCPropertyBehavior_Value = Guid.initString("3050f5df-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTCPropertyBehavior = &IID_IHTCPropertyBehavior_Value;
pub const IHTCPropertyBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        fireChange: *const fn(
            self: *const IHTCPropertyBehavior,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTCPropertyBehavior,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTCPropertyBehavior,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn fireChange(self: *const IHTCPropertyBehavior) callconv(.@"inline") HRESULT {
        return self.vtable.fireChange(self);
    }
    pub fn put_value(self: *const IHTCPropertyBehavior, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTCPropertyBehavior, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
};

const IID_IHTCMethodBehavior_Value = Guid.initString("3050f631-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTCMethodBehavior = &IID_IHTCMethodBehavior_Value;
pub const IHTCMethodBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTCEventBehavior_Value = Guid.initString("3050f4ff-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTCEventBehavior = &IID_IHTCEventBehavior_Value;
pub const IHTCEventBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        fire: *const fn(
            self: *const IHTCEventBehavior,
            pvar: ?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn fire(self: *const IHTCEventBehavior, pvar: ?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.fire(self, pvar);
    }
};

const IID_IHTCAttachBehavior_Value = Guid.initString("3050f5f4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTCAttachBehavior = &IID_IHTCAttachBehavior_Value;
pub const IHTCAttachBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        fireEvent: *const fn(
            self: *const IHTCAttachBehavior,
            evt: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        detachEvent: *const fn(
            self: *const IHTCAttachBehavior,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn fireEvent(self: *const IHTCAttachBehavior, evt: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.fireEvent(self, evt);
    }
    pub fn detachEvent(self: *const IHTCAttachBehavior) callconv(.@"inline") HRESULT {
        return self.vtable.detachEvent(self);
    }
};

const IID_IHTCAttachBehavior2_Value = Guid.initString("3050f7eb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTCAttachBehavior2 = &IID_IHTCAttachBehavior2_Value;
pub const IHTCAttachBehavior2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        fireEvent: *const fn(
            self: *const IHTCAttachBehavior2,
            evt: VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn fireEvent(self: *const IHTCAttachBehavior2, evt: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.fireEvent(self, evt);
    }
};

const IID_IHTCDescBehavior_Value = Guid.initString("3050f5dc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTCDescBehavior = &IID_IHTCDescBehavior_Value;
pub const IHTCDescBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_urn: *const fn(
            self: *const IHTCDescBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTCDescBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_urn(self: *const IHTCDescBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_urn(self, p);
    }
    pub fn get_name(self: *const IHTCDescBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
};

const IID_DispHTCDefaultDispatch_Value = Guid.initString("3050f573-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTCDefaultDispatch = &IID_DispHTCDefaultDispatch_Value;
pub const DispHTCDefaultDispatch = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTCPropertyBehavior_Value = Guid.initString("3050f57f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTCPropertyBehavior = &IID_DispHTCPropertyBehavior_Value;
pub const DispHTCPropertyBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTCMethodBehavior_Value = Guid.initString("3050f587-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTCMethodBehavior = &IID_DispHTCMethodBehavior_Value;
pub const DispHTCMethodBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTCEventBehavior_Value = Guid.initString("3050f574-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTCEventBehavior = &IID_DispHTCEventBehavior_Value;
pub const DispHTCEventBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTCAttachBehavior_Value = Guid.initString("3050f583-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTCAttachBehavior = &IID_DispHTCAttachBehavior_Value;
pub const DispHTCAttachBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTCDescBehavior_Value = Guid.initString("3050f57e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTCDescBehavior = &IID_DispHTCDescBehavior_Value;
pub const DispHTCDescBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLUrnCollection_Value = Guid.initString("3050f5e2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLUrnCollection = &IID_IHTMLUrnCollection_Value;
pub const IHTMLUrnCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLUrnCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLUrnCollection,
            index: i32,
            ppUrn: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLUrnCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLUrnCollection, index: i32, ppUrn: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppUrn);
    }
};

const IID_DispHTMLUrnCollection_Value = Guid.initString("3050f551-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLUrnCollection = &IID_DispHTMLUrnCollection_Value;
pub const DispHTMLUrnCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLGenericElement_Value = Guid.initString("3050f4b7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLGenericElement = &IID_IHTMLGenericElement_Value;
pub const IHTMLGenericElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_recordset: *const fn(
            self: *const IHTMLGenericElement,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        namedRecordset: *const fn(
            self: *const IHTMLGenericElement,
            dataMember: ?BSTR,
            hierarchy: ?*VARIANT,
            ppRecordset: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_recordset(self: *const IHTMLGenericElement, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_recordset(self, p);
    }
    pub fn namedRecordset(self: *const IHTMLGenericElement, dataMember: ?BSTR, hierarchy: ?*VARIANT, ppRecordset: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.namedRecordset(self, dataMember, hierarchy, ppRecordset);
    }
};

const IID_DispHTMLGenericElement_Value = Guid.initString("3050f563-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLGenericElement = &IID_DispHTMLGenericElement_Value;
pub const DispHTMLGenericElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleSheetRuleApplied_Value = Guid.initString("305104c1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetRuleApplied = &IID_IHTMLStyleSheetRuleApplied_Value;
pub const IHTMLStyleSheetRuleApplied = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msSpecificity: *const fn(
            self: *const IHTMLStyleSheetRuleApplied,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        msGetSpecificity: *const fn(
            self: *const IHTMLStyleSheetRuleApplied,
            index: i32,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_msSpecificity(self: *const IHTMLStyleSheetRuleApplied, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_msSpecificity(self, p);
    }
    pub fn msGetSpecificity(self: *const IHTMLStyleSheetRuleApplied, index: i32, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.msGetSpecificity(self, index, p);
    }
};

const IID_IHTMLStyleSheetRule2_Value = Guid.initString("305106fd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetRule2 = &IID_IHTMLStyleSheetRule2_Value;
pub const IHTMLStyleSheetRule2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectorText: *const fn(
            self: *const IHTMLStyleSheetRule2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectorText: *const fn(
            self: *const IHTMLStyleSheetRule2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_selectorText(self: *const IHTMLStyleSheetRule2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectorText(self, v);
    }
    pub fn get_selectorText(self: *const IHTMLStyleSheetRule2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectorText(self, p);
    }
};

const IID_IHTMLStyleSheetRulesCollection2_Value = Guid.initString("305106e8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetRulesCollection2 = &IID_IHTMLStyleSheetRulesCollection2_Value;
pub const IHTMLStyleSheetRulesCollection2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLStyleSheetRulesCollection2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLStyleSheetRulesCollection2,
            index: i32,
            ppHTMLCSSRule: ?*?*IHTMLCSSRule,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLStyleSheetRulesCollection2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLStyleSheetRulesCollection2, index: i32, ppHTMLCSSRule: ?*?*IHTMLCSSRule) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppHTMLCSSRule);
    }
};

const IID_DispHTMLStyleSheetRule_Value = Guid.initString("3050f50e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleSheetRule = &IID_DispHTMLStyleSheetRule_Value;
pub const DispHTMLStyleSheetRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLStyleSheetRulesCollection_Value = Guid.initString("3050f52f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleSheetRulesCollection = &IID_DispHTMLStyleSheetRulesCollection_Value;
pub const DispHTMLStyleSheetRulesCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleSheetPage_Value = Guid.initString("3050f7ee-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetPage = &IID_IHTMLStyleSheetPage_Value;
pub const IHTMLStyleSheetPage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selector: *const fn(
            self: *const IHTMLStyleSheetPage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pseudoClass: *const fn(
            self: *const IHTMLStyleSheetPage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_selector(self: *const IHTMLStyleSheetPage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_selector(self, p);
    }
    pub fn get_pseudoClass(self: *const IHTMLStyleSheetPage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pseudoClass(self, p);
    }
};

const IID_IHTMLStyleSheetPage2_Value = Guid.initString("305106ed-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetPage2 = &IID_IHTMLStyleSheetPage2_Value;
pub const IHTMLStyleSheetPage2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectorText: *const fn(
            self: *const IHTMLStyleSheetPage2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectorText: *const fn(
            self: *const IHTMLStyleSheetPage2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_style: *const fn(
            self: *const IHTMLStyleSheetPage2,
            p: ?*?*IHTMLRuleStyle,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_selectorText(self: *const IHTMLStyleSheetPage2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectorText(self, v);
    }
    pub fn get_selectorText(self: *const IHTMLStyleSheetPage2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectorText(self, p);
    }
    pub fn get_style(self: *const IHTMLStyleSheetPage2, p: ?*?*IHTMLRuleStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_style(self, p);
    }
};

const IID_IHTMLStyleSheetPagesCollection_Value = Guid.initString("3050f7f0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetPagesCollection = &IID_IHTMLStyleSheetPagesCollection_Value;
pub const IHTMLStyleSheetPagesCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLStyleSheetPagesCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLStyleSheetPagesCollection,
            index: i32,
            ppHTMLStyleSheetPage: ?*?*IHTMLStyleSheetPage,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLStyleSheetPagesCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLStyleSheetPagesCollection, index: i32, ppHTMLStyleSheetPage: ?*?*IHTMLStyleSheetPage) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppHTMLStyleSheetPage);
    }
};

const IID_DispHTMLStyleSheetPage_Value = Guid.initString("3050f540-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleSheetPage = &IID_DispHTMLStyleSheetPage_Value;
pub const DispHTMLStyleSheetPage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLStyleSheetPagesCollection_Value = Guid.initString("3050f543-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleSheetPagesCollection = &IID_DispHTMLStyleSheetPagesCollection_Value;
pub const DispHTMLStyleSheetPagesCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleSheetsCollection_Value = Guid.initString("3050f37e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetsCollection = &IID_IHTMLStyleSheetsCollection_Value;
pub const IHTMLStyleSheetsCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLStyleSheetsCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLStyleSheetsCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLStyleSheetsCollection,
            pvarIndex: ?*VARIANT,
            pvarResult: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLStyleSheetsCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLStyleSheetsCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLStyleSheetsCollection, pvarIndex: ?*VARIANT, pvarResult: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, pvarIndex, pvarResult);
    }
};

const IID_IHTMLStyleSheet2_Value = Guid.initString("3050f3d1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheet2 = &IID_IHTMLStyleSheet2_Value;
pub const IHTMLStyleSheet2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pages: *const fn(
            self: *const IHTMLStyleSheet2,
            p: ?*?*IHTMLStyleSheetPagesCollection,
        ) callconv(.winapi) HRESULT,
        addPageRule: *const fn(
            self: *const IHTMLStyleSheet2,
            bstrSelector: ?BSTR,
            bstrStyle: ?BSTR,
            lIndex: i32,
            plNewIndex: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_pages(self: *const IHTMLStyleSheet2, p: ?*?*IHTMLStyleSheetPagesCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_pages(self, p);
    }
    pub fn addPageRule(self: *const IHTMLStyleSheet2, bstrSelector: ?BSTR, bstrStyle: ?BSTR, lIndex: i32, plNewIndex: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.addPageRule(self, bstrSelector, bstrStyle, lIndex, plNewIndex);
    }
};

const IID_IHTMLStyleSheet3_Value = Guid.initString("30510496-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheet3 = &IID_IHTMLStyleSheet3_Value;
pub const IHTMLStyleSheet3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLStyleSheet3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLStyleSheet3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isAlternate: *const fn(
            self: *const IHTMLStyleSheet3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isPrefAlternate: *const fn(
            self: *const IHTMLStyleSheet3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_href(self: *const IHTMLStyleSheet3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLStyleSheet3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn get_isAlternate(self: *const IHTMLStyleSheet3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isAlternate(self, p);
    }
    pub fn get_isPrefAlternate(self: *const IHTMLStyleSheet3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isPrefAlternate(self, p);
    }
};

const IID_IHTMLStyleSheet4_Value = Guid.initString("305106f4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheet4 = &IID_IHTMLStyleSheet4_Value;
pub const IHTMLStyleSheet4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLStyleSheet4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLStyleSheet4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_title: *const fn(
            self: *const IHTMLStyleSheet4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerNode: *const fn(
            self: *const IHTMLStyleSheet4,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerRule: *const fn(
            self: *const IHTMLStyleSheet4,
            p: ?*?*IHTMLCSSRule,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cssRules: *const fn(
            self: *const IHTMLStyleSheet4,
            p: ?*?*IHTMLStyleSheetRulesCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const IHTMLStyleSheet4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        insertRule: *const fn(
            self: *const IHTMLStyleSheet4,
            bstrRule: ?BSTR,
            lIndex: i32,
            plNewIndex: ?*i32,
        ) callconv(.winapi) HRESULT,
        deleteRule: *const fn(
            self: *const IHTMLStyleSheet4,
            lIndex: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLStyleSheet4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn get_href(self: *const IHTMLStyleSheet4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn get_title(self: *const IHTMLStyleSheet4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_title(self, p);
    }
    pub fn get_ownerNode(self: *const IHTMLStyleSheet4, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_ownerNode(self, p);
    }
    pub fn get_ownerRule(self: *const IHTMLStyleSheet4, p: ?*?*IHTMLCSSRule) callconv(.@"inline") HRESULT {
        return self.vtable.get_ownerRule(self, p);
    }
    pub fn get_cssRules(self: *const IHTMLStyleSheet4, p: ?*?*IHTMLStyleSheetRulesCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_cssRules(self, p);
    }
    pub fn get_media(self: *const IHTMLStyleSheet4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
    pub fn insertRule(self: *const IHTMLStyleSheet4, bstrRule: ?BSTR, lIndex: i32, plNewIndex: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.insertRule(self, bstrRule, lIndex, plNewIndex);
    }
    pub fn deleteRule(self: *const IHTMLStyleSheet4, lIndex: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteRule(self, lIndex);
    }
};

const IID_DispHTMLStyleSheet_Value = Guid.initString("3050f58d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleSheet = &IID_DispHTMLStyleSheet_Value;
pub const DispHTMLStyleSheet = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleSheetsCollection2_Value = Guid.initString("305106e7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetsCollection2 = &IID_IHTMLStyleSheetsCollection2_Value;
pub const IHTMLStyleSheetsCollection2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        item: *const fn(
            self: *const IHTMLStyleSheetsCollection2,
            index: i32,
            pvarResult: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn item(self: *const IHTMLStyleSheetsCollection2, index: i32, pvarResult: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, pvarResult);
    }
};

const IID_DispHTMLStyleSheetsCollection_Value = Guid.initString("3050f547-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleSheetsCollection = &IID_DispHTMLStyleSheetsCollection_Value;
pub const DispHTMLStyleSheetsCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLLinkElementEvents2_Value = Guid.initString("3050f61d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLLinkElementEvents2 = &IID_HTMLLinkElementEvents2_Value;
pub const HTMLLinkElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLLinkElementEvents_Value = Guid.initString("3050f3cc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLLinkElementEvents = &IID_HTMLLinkElementEvents_Value;
pub const HTMLLinkElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLLinkElement_Value = Guid.initString("3050f205-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLinkElement = &IID_IHTMLLinkElement_Value;
pub const IHTMLLinkElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLLinkElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rel: *const fn(
            self: *const IHTMLLinkElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rel: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rev: *const fn(
            self: *const IHTMLLinkElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rev: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLLinkElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLLinkElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLLinkElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLLinkElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleSheet: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*?*IHTMLStyleSheet,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLLinkElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_media: *const fn(
            self: *const IHTMLLinkElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const IHTMLLinkElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_href(self: *const IHTMLLinkElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLLinkElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn put_rel(self: *const IHTMLLinkElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rel(self, v);
    }
    pub fn get_rel(self: *const IHTMLLinkElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rel(self, p);
    }
    pub fn put_rev(self: *const IHTMLLinkElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rev(self, v);
    }
    pub fn get_rev(self: *const IHTMLLinkElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rev(self, p);
    }
    pub fn put_type(self: *const IHTMLLinkElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLLinkElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn get_readyState(self: *const IHTMLLinkElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLLinkElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLLinkElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn put_onload(self: *const IHTMLLinkElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLLinkElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onerror(self: *const IHTMLLinkElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLLinkElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn get_styleSheet(self: *const IHTMLLinkElement, p: ?*?*IHTMLStyleSheet) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleSheet(self, p);
    }
    pub fn put_disabled(self: *const IHTMLLinkElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLLinkElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn put_media(self: *const IHTMLLinkElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_media(self, v);
    }
    pub fn get_media(self: *const IHTMLLinkElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
};

const IID_IHTMLLinkElement2_Value = Guid.initString("3050f4e5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLinkElement2 = &IID_IHTMLLinkElement2_Value;
pub const IHTMLLinkElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_target: *const fn(
            self: *const IHTMLLinkElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const IHTMLLinkElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_target(self: *const IHTMLLinkElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_target(self, v);
    }
    pub fn get_target(self: *const IHTMLLinkElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_target(self, p);
    }
};

const IID_IHTMLLinkElement3_Value = Guid.initString("3050f81e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLinkElement3 = &IID_IHTMLLinkElement3_Value;
pub const IHTMLLinkElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn(
            self: *const IHTMLLinkElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn(
            self: *const IHTMLLinkElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hreflang: *const fn(
            self: *const IHTMLLinkElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hreflang: *const fn(
            self: *const IHTMLLinkElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_charset(self: *const IHTMLLinkElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_charset(self, v);
    }
    pub fn get_charset(self: *const IHTMLLinkElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_charset(self, p);
    }
    pub fn put_hreflang(self: *const IHTMLLinkElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hreflang(self, v);
    }
    pub fn get_hreflang(self: *const IHTMLLinkElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hreflang(self, p);
    }
};

const IID_IHTMLLinkElement4_Value = Guid.initString("3051043a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLinkElement4 = &IID_IHTMLLinkElement4_Value;
pub const IHTMLLinkElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLLinkElement4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLLinkElement4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_href(self: *const IHTMLLinkElement4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLLinkElement4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
};

const IID_IHTMLLinkElement5_Value = Guid.initString("30510726-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLinkElement5 = &IID_IHTMLLinkElement5_Value;
pub const IHTMLLinkElement5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sheet: *const fn(
            self: *const IHTMLLinkElement5,
            p: ?*?*IHTMLStyleSheet,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_sheet(self: *const IHTMLLinkElement5, p: ?*?*IHTMLStyleSheet) callconv(.@"inline") HRESULT {
        return self.vtable.get_sheet(self, p);
    }
};

const IID_DispHTMLLinkElement_Value = Guid.initString("3050f524-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLLinkElement = &IID_DispHTMLLinkElement_Value;
pub const DispHTMLLinkElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLTxtRange_Value = Guid.initString("3050f220-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTxtRange = &IID_IHTMLTxtRange_Value;
pub const IHTMLTxtRange = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_htmlText: *const fn(
            self: *const IHTMLTxtRange,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IHTMLTxtRange,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IHTMLTxtRange,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        parentElement: *const fn(
            self: *const IHTMLTxtRange,
            parent: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        duplicate: *const fn(
            self: *const IHTMLTxtRange,
            Duplicate: ?*?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
        inRange: *const fn(
            self: *const IHTMLTxtRange,
            Range: ?*IHTMLTxtRange,
            InRange: ?*i16,
        ) callconv(.winapi) HRESULT,
        isEqual: *const fn(
            self: *const IHTMLTxtRange,
            Range: ?*IHTMLTxtRange,
            IsEqual: ?*i16,
        ) callconv(.winapi) HRESULT,
        scrollIntoView: *const fn(
            self: *const IHTMLTxtRange,
            fStart: i16,
        ) callconv(.winapi) HRESULT,
        collapse: *const fn(
            self: *const IHTMLTxtRange,
            Start: i16,
        ) callconv(.winapi) HRESULT,
        expand: *const fn(
            self: *const IHTMLTxtRange,
            Unit: ?BSTR,
            Success: ?*i16,
        ) callconv(.winapi) HRESULT,
        move: *const fn(
            self: *const IHTMLTxtRange,
            Unit: ?BSTR,
            Count: i32,
            ActualCount: ?*i32,
        ) callconv(.winapi) HRESULT,
        moveStart: *const fn(
            self: *const IHTMLTxtRange,
            Unit: ?BSTR,
            Count: i32,
            ActualCount: ?*i32,
        ) callconv(.winapi) HRESULT,
        moveEnd: *const fn(
            self: *const IHTMLTxtRange,
            Unit: ?BSTR,
            Count: i32,
            ActualCount: ?*i32,
        ) callconv(.winapi) HRESULT,
        select: *const fn(
            self: *const IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
        pasteHTML: *const fn(
            self: *const IHTMLTxtRange,
            html: ?BSTR,
        ) callconv(.winapi) HRESULT,
        moveToElementText: *const fn(
            self: *const IHTMLTxtRange,
            element: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        setEndPoint: *const fn(
            self: *const IHTMLTxtRange,
            how: ?BSTR,
            SourceRange: ?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
        compareEndPoints: *const fn(
            self: *const IHTMLTxtRange,
            how: ?BSTR,
            SourceRange: ?*IHTMLTxtRange,
            ret: ?*i32,
        ) callconv(.winapi) HRESULT,
        findText: *const fn(
            self: *const IHTMLTxtRange,
            String: ?BSTR,
            count: i32,
            Flags: i32,
            Success: ?*i16,
        ) callconv(.winapi) HRESULT,
        moveToPoint: *const fn(
            self: *const IHTMLTxtRange,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        getBookmark: *const fn(
            self: *const IHTMLTxtRange,
            Boolmark: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        moveToBookmark: *const fn(
            self: *const IHTMLTxtRange,
            Bookmark: ?BSTR,
            Success: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandSupported: *const fn(
            self: *const IHTMLTxtRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandEnabled: *const fn(
            self: *const IHTMLTxtRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandState: *const fn(
            self: *const IHTMLTxtRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandIndeterm: *const fn(
            self: *const IHTMLTxtRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandText: *const fn(
            self: *const IHTMLTxtRange,
            cmdID: ?BSTR,
            pcmdText: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        queryCommandValue: *const fn(
            self: *const IHTMLTxtRange,
            cmdID: ?BSTR,
            pcmdValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        execCommand: *const fn(
            self: *const IHTMLTxtRange,
            cmdID: ?BSTR,
            showUI: i16,
            value: VARIANT,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        execCommandShowHelp: *const fn(
            self: *const IHTMLTxtRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_htmlText(self: *const IHTMLTxtRange, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_htmlText(self, p);
    }
    pub fn put_text(self: *const IHTMLTxtRange, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_text(self, v);
    }
    pub fn get_text(self: *const IHTMLTxtRange, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_text(self, p);
    }
    pub fn parentElement(self: *const IHTMLTxtRange, parent: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.parentElement(self, parent);
    }
    pub fn duplicate(self: *const IHTMLTxtRange, Duplicate: ?*?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.duplicate(self, Duplicate);
    }
    pub fn inRange(self: *const IHTMLTxtRange, Range: ?*IHTMLTxtRange, InRange: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.inRange(self, Range, InRange);
    }
    pub fn isEqual(self: *const IHTMLTxtRange, Range: ?*IHTMLTxtRange, IsEqual: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isEqual(self, Range, IsEqual);
    }
    pub fn scrollIntoView(self: *const IHTMLTxtRange, fStart: i16) callconv(.@"inline") HRESULT {
        return self.vtable.scrollIntoView(self, fStart);
    }
    pub fn collapse(self: *const IHTMLTxtRange, Start: i16) callconv(.@"inline") HRESULT {
        return self.vtable.collapse(self, Start);
    }
    pub fn expand(self: *const IHTMLTxtRange, Unit: ?BSTR, Success: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.expand(self, Unit, Success);
    }
    pub fn move(self: *const IHTMLTxtRange, Unit: ?BSTR, Count: i32, ActualCount: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.move(self, Unit, Count, ActualCount);
    }
    pub fn moveStart(self: *const IHTMLTxtRange, Unit: ?BSTR, Count: i32, ActualCount: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.moveStart(self, Unit, Count, ActualCount);
    }
    pub fn moveEnd(self: *const IHTMLTxtRange, Unit: ?BSTR, Count: i32, ActualCount: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.moveEnd(self, Unit, Count, ActualCount);
    }
    pub fn select(self: *const IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.select(self);
    }
    pub fn pasteHTML(self: *const IHTMLTxtRange, html: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.pasteHTML(self, html);
    }
    pub fn moveToElementText(self: *const IHTMLTxtRange, element: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.moveToElementText(self, element);
    }
    pub fn setEndPoint(self: *const IHTMLTxtRange, how: ?BSTR, SourceRange: ?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.setEndPoint(self, how, SourceRange);
    }
    pub fn compareEndPoints(self: *const IHTMLTxtRange, how: ?BSTR, SourceRange: ?*IHTMLTxtRange, ret: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.compareEndPoints(self, how, SourceRange, ret);
    }
    pub fn findText(self: *const IHTMLTxtRange, String: ?BSTR, count: i32, Flags: i32, Success: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.findText(self, String, count, Flags, Success);
    }
    pub fn moveToPoint(self: *const IHTMLTxtRange, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.moveToPoint(self, x, y);
    }
    pub fn getBookmark(self: *const IHTMLTxtRange, Boolmark: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getBookmark(self, Boolmark);
    }
    pub fn moveToBookmark(self: *const IHTMLTxtRange, Bookmark: ?BSTR, Success: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.moveToBookmark(self, Bookmark, Success);
    }
    pub fn queryCommandSupported(self: *const IHTMLTxtRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandSupported(self, cmdID, pfRet);
    }
    pub fn queryCommandEnabled(self: *const IHTMLTxtRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandEnabled(self, cmdID, pfRet);
    }
    pub fn queryCommandState(self: *const IHTMLTxtRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandState(self, cmdID, pfRet);
    }
    pub fn queryCommandIndeterm(self: *const IHTMLTxtRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandIndeterm(self, cmdID, pfRet);
    }
    pub fn queryCommandText(self: *const IHTMLTxtRange, cmdID: ?BSTR, pcmdText: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandText(self, cmdID, pcmdText);
    }
    pub fn queryCommandValue(self: *const IHTMLTxtRange, cmdID: ?BSTR, pcmdValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandValue(self, cmdID, pcmdValue);
    }
    pub fn execCommand(self: *const IHTMLTxtRange, cmdID: ?BSTR, showUI: i16, value: VARIANT, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.execCommand(self, cmdID, showUI, value, pfRet);
    }
    pub fn execCommandShowHelp(self: *const IHTMLTxtRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.execCommandShowHelp(self, cmdID, pfRet);
    }
};

const IID_IHTMLTextRangeMetrics_Value = Guid.initString("3050f40b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTextRangeMetrics = &IID_IHTMLTextRangeMetrics_Value;
pub const IHTMLTextRangeMetrics = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetTop: *const fn(
            self: *const IHTMLTextRangeMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetLeft: *const fn(
            self: *const IHTMLTextRangeMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boundingTop: *const fn(
            self: *const IHTMLTextRangeMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boundingLeft: *const fn(
            self: *const IHTMLTextRangeMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boundingWidth: *const fn(
            self: *const IHTMLTextRangeMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boundingHeight: *const fn(
            self: *const IHTMLTextRangeMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_offsetTop(self: *const IHTMLTextRangeMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetTop(self, p);
    }
    pub fn get_offsetLeft(self: *const IHTMLTextRangeMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetLeft(self, p);
    }
    pub fn get_boundingTop(self: *const IHTMLTextRangeMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_boundingTop(self, p);
    }
    pub fn get_boundingLeft(self: *const IHTMLTextRangeMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_boundingLeft(self, p);
    }
    pub fn get_boundingWidth(self: *const IHTMLTextRangeMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_boundingWidth(self, p);
    }
    pub fn get_boundingHeight(self: *const IHTMLTextRangeMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_boundingHeight(self, p);
    }
};

const IID_IHTMLTextRangeMetrics2_Value = Guid.initString("3050f4a6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTextRangeMetrics2 = &IID_IHTMLTextRangeMetrics2_Value;
pub const IHTMLTextRangeMetrics2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getClientRects: *const fn(
            self: *const IHTMLTextRangeMetrics2,
            pRectCol: ?*?*IHTMLRectCollection,
        ) callconv(.winapi) HRESULT,
        getBoundingClientRect: *const fn(
            self: *const IHTMLTextRangeMetrics2,
            pRect: ?*?*IHTMLRect,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getClientRects(self: *const IHTMLTextRangeMetrics2, pRectCol: ?*?*IHTMLRectCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getClientRects(self, pRectCol);
    }
    pub fn getBoundingClientRect(self: *const IHTMLTextRangeMetrics2, pRect: ?*?*IHTMLRect) callconv(.@"inline") HRESULT {
        return self.vtable.getBoundingClientRect(self, pRect);
    }
};

const IID_IHTMLTxtRangeCollection_Value = Guid.initString("3050f7ed-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTxtRangeCollection = &IID_IHTMLTxtRangeCollection_Value;
pub const IHTMLTxtRangeCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLTxtRangeCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLTxtRangeCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLTxtRangeCollection,
            pvarIndex: ?*VARIANT,
            pvarResult: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLTxtRangeCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLTxtRangeCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLTxtRangeCollection, pvarIndex: ?*VARIANT, pvarResult: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, pvarIndex, pvarResult);
    }
};

const IID_IHTMLDOMRange_Value = Guid.initString("305104ae-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMRange = &IID_IHTMLDOMRange_Value;
pub const IHTMLDOMRange = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_startContainer: *const fn(
            self: *const IHTMLDOMRange,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_startOffset: *const fn(
            self: *const IHTMLDOMRange,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_endContainer: *const fn(
            self: *const IHTMLDOMRange,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_endOffset: *const fn(
            self: *const IHTMLDOMRange,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_collapsed: *const fn(
            self: *const IHTMLDOMRange,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_commonAncestorContainer: *const fn(
            self: *const IHTMLDOMRange,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        setStart: *const fn(
            self: *const IHTMLDOMRange,
            refNode: ?*IDispatch,
            offset: i32,
        ) callconv(.winapi) HRESULT,
        setEnd: *const fn(
            self: *const IHTMLDOMRange,
            refNode: ?*IDispatch,
            offset: i32,
        ) callconv(.winapi) HRESULT,
        setStartBefore: *const fn(
            self: *const IHTMLDOMRange,
            refNode: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        setStartAfter: *const fn(
            self: *const IHTMLDOMRange,
            refNode: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        setEndBefore: *const fn(
            self: *const IHTMLDOMRange,
            refNode: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        setEndAfter: *const fn(
            self: *const IHTMLDOMRange,
            refNode: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        collapse: *const fn(
            self: *const IHTMLDOMRange,
            toStart: i16,
        ) callconv(.winapi) HRESULT,
        selectNode: *const fn(
            self: *const IHTMLDOMRange,
            refNode: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        selectNodeContents: *const fn(
            self: *const IHTMLDOMRange,
            refNode: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        compareBoundaryPoints: *const fn(
            self: *const IHTMLDOMRange,
            how: i16,
            sourceRange: ?*IDispatch,
            compareResult: ?*i32,
        ) callconv(.winapi) HRESULT,
        deleteContents: *const fn(
            self: *const IHTMLDOMRange,
        ) callconv(.winapi) HRESULT,
        extractContents: *const fn(
            self: *const IHTMLDOMRange,
            ppDocumentFragment: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        cloneContents: *const fn(
            self: *const IHTMLDOMRange,
            ppDocumentFragment: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        insertNode: *const fn(
            self: *const IHTMLDOMRange,
            newNode: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        surroundContents: *const fn(
            self: *const IHTMLDOMRange,
            newParent: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        cloneRange: *const fn(
            self: *const IHTMLDOMRange,
            ppClonedRange: ?*?*IHTMLDOMRange,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLDOMRange,
            pRangeString: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        detach: *const fn(
            self: *const IHTMLDOMRange,
        ) callconv(.winapi) HRESULT,
        getClientRects: *const fn(
            self: *const IHTMLDOMRange,
            ppRectCol: ?*?*IHTMLRectCollection,
        ) callconv(.winapi) HRESULT,
        getBoundingClientRect: *const fn(
            self: *const IHTMLDOMRange,
            ppRect: ?*?*IHTMLRect,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_startContainer(self: *const IHTMLDOMRange, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_startContainer(self, p);
    }
    pub fn get_startOffset(self: *const IHTMLDOMRange, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_startOffset(self, p);
    }
    pub fn get_endContainer(self: *const IHTMLDOMRange, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_endContainer(self, p);
    }
    pub fn get_endOffset(self: *const IHTMLDOMRange, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_endOffset(self, p);
    }
    pub fn get_collapsed(self: *const IHTMLDOMRange, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_collapsed(self, p);
    }
    pub fn get_commonAncestorContainer(self: *const IHTMLDOMRange, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_commonAncestorContainer(self, p);
    }
    pub fn setStart(self: *const IHTMLDOMRange, refNode: ?*IDispatch, offset: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setStart(self, refNode, offset);
    }
    pub fn setEnd(self: *const IHTMLDOMRange, refNode: ?*IDispatch, offset: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setEnd(self, refNode, offset);
    }
    pub fn setStartBefore(self: *const IHTMLDOMRange, refNode: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.setStartBefore(self, refNode);
    }
    pub fn setStartAfter(self: *const IHTMLDOMRange, refNode: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.setStartAfter(self, refNode);
    }
    pub fn setEndBefore(self: *const IHTMLDOMRange, refNode: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.setEndBefore(self, refNode);
    }
    pub fn setEndAfter(self: *const IHTMLDOMRange, refNode: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.setEndAfter(self, refNode);
    }
    pub fn collapse(self: *const IHTMLDOMRange, toStart: i16) callconv(.@"inline") HRESULT {
        return self.vtable.collapse(self, toStart);
    }
    pub fn selectNode(self: *const IHTMLDOMRange, refNode: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.selectNode(self, refNode);
    }
    pub fn selectNodeContents(self: *const IHTMLDOMRange, refNode: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.selectNodeContents(self, refNode);
    }
    pub fn compareBoundaryPoints(self: *const IHTMLDOMRange, how: i16, sourceRange: ?*IDispatch, compareResult: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.compareBoundaryPoints(self, how, sourceRange, compareResult);
    }
    pub fn deleteContents(self: *const IHTMLDOMRange) callconv(.@"inline") HRESULT {
        return self.vtable.deleteContents(self);
    }
    pub fn extractContents(self: *const IHTMLDOMRange, ppDocumentFragment: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.extractContents(self, ppDocumentFragment);
    }
    pub fn cloneContents(self: *const IHTMLDOMRange, ppDocumentFragment: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.cloneContents(self, ppDocumentFragment);
    }
    pub fn insertNode(self: *const IHTMLDOMRange, newNode: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.insertNode(self, newNode);
    }
    pub fn surroundContents(self: *const IHTMLDOMRange, newParent: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.surroundContents(self, newParent);
    }
    pub fn cloneRange(self: *const IHTMLDOMRange, ppClonedRange: ?*?*IHTMLDOMRange) callconv(.@"inline") HRESULT {
        return self.vtable.cloneRange(self, ppClonedRange);
    }
    pub fn toString(self: *const IHTMLDOMRange, pRangeString: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, pRangeString);
    }
    pub fn detach(self: *const IHTMLDOMRange) callconv(.@"inline") HRESULT {
        return self.vtable.detach(self);
    }
    pub fn getClientRects(self: *const IHTMLDOMRange, ppRectCol: ?*?*IHTMLRectCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getClientRects(self, ppRectCol);
    }
    pub fn getBoundingClientRect(self: *const IHTMLDOMRange, ppRect: ?*?*IHTMLRect) callconv(.@"inline") HRESULT {
        return self.vtable.getBoundingClientRect(self, ppRect);
    }
};

const IID_DispHTMLDOMRange_Value = Guid.initString("3050f5a3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDOMRange = &IID_DispHTMLDOMRange_Value;
pub const DispHTMLDOMRange = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLFormElementEvents2_Value = Guid.initString("3050f614-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLFormElementEvents2 = &IID_HTMLFormElementEvents2_Value;
pub const HTMLFormElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLFormElementEvents_Value = Guid.initString("3050f364-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLFormElementEvents = &IID_HTMLFormElementEvents_Value;
pub const HTMLFormElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLFormElement_Value = Guid.initString("3050f1f7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFormElement = &IID_IHTMLFormElement_Value;
pub const IHTMLFormElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_action: *const fn(
            self: *const IHTMLFormElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_action: *const fn(
            self: *const IHTMLFormElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dir: *const fn(
            self: *const IHTMLFormElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dir: *const fn(
            self: *const IHTMLFormElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_encoding: *const fn(
            self: *const IHTMLFormElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_encoding: *const fn(
            self: *const IHTMLFormElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_method: *const fn(
            self: *const IHTMLFormElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_method: *const fn(
            self: *const IHTMLFormElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_elements: *const fn(
            self: *const IHTMLFormElement,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_target: *const fn(
            self: *const IHTMLFormElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const IHTMLFormElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLFormElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLFormElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onsubmit: *const fn(
            self: *const IHTMLFormElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onsubmit: *const fn(
            self: *const IHTMLFormElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreset: *const fn(
            self: *const IHTMLFormElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreset: *const fn(
            self: *const IHTMLFormElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        submit: *const fn(
            self: *const IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        reset: *const fn(
            self: *const IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_length: *const fn(
            self: *const IHTMLFormElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLFormElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLFormElement,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLFormElement,
            name: VARIANT,
            index: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        tags: *const fn(
            self: *const IHTMLFormElement,
            tagName: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_action(self: *const IHTMLFormElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_action(self, v);
    }
    pub fn get_action(self: *const IHTMLFormElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_action(self, p);
    }
    pub fn put_dir(self: *const IHTMLFormElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dir(self, v);
    }
    pub fn get_dir(self: *const IHTMLFormElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dir(self, p);
    }
    pub fn put_encoding(self: *const IHTMLFormElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_encoding(self, v);
    }
    pub fn get_encoding(self: *const IHTMLFormElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_encoding(self, p);
    }
    pub fn put_method(self: *const IHTMLFormElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_method(self, v);
    }
    pub fn get_method(self: *const IHTMLFormElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_method(self, p);
    }
    pub fn get_elements(self: *const IHTMLFormElement, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_elements(self, p);
    }
    pub fn put_target(self: *const IHTMLFormElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_target(self, v);
    }
    pub fn get_target(self: *const IHTMLFormElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_target(self, p);
    }
    pub fn put_name(self: *const IHTMLFormElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLFormElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_onsubmit(self: *const IHTMLFormElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onsubmit(self, v);
    }
    pub fn get_onsubmit(self: *const IHTMLFormElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onsubmit(self, p);
    }
    pub fn put_onreset(self: *const IHTMLFormElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreset(self, v);
    }
    pub fn get_onreset(self: *const IHTMLFormElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreset(self, p);
    }
    pub fn submit(self: *const IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.submit(self);
    }
    pub fn reset(self: *const IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.reset(self);
    }
    pub fn put_length(self: *const IHTMLFormElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_length(self, v);
    }
    pub fn get_length(self: *const IHTMLFormElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLFormElement, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLFormElement, name: VARIANT, index: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, name, index, pdisp);
    }
    pub fn tags(self: *const IHTMLFormElement, tagName: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.tags(self, tagName, pdisp);
    }
};

const IID_IHTMLFormElement2_Value = Guid.initString("3050f4f6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFormElement2 = &IID_IHTMLFormElement2_Value;
pub const IHTMLFormElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_acceptCharset: *const fn(
            self: *const IHTMLFormElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_acceptCharset: *const fn(
            self: *const IHTMLFormElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        urns: *const fn(
            self: *const IHTMLFormElement2,
            urn: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_acceptCharset(self: *const IHTMLFormElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_acceptCharset(self, v);
    }
    pub fn get_acceptCharset(self: *const IHTMLFormElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_acceptCharset(self, p);
    }
    pub fn urns(self: *const IHTMLFormElement2, urn: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.urns(self, urn, pdisp);
    }
};

const IID_IHTMLFormElement3_Value = Guid.initString("3050f836-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFormElement3 = &IID_IHTMLFormElement3_Value;
pub const IHTMLFormElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        namedItem: *const fn(
            self: *const IHTMLFormElement3,
            name: ?BSTR,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn namedItem(self: *const IHTMLFormElement3, name: ?BSTR, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.namedItem(self, name, pdisp);
    }
};

const IID_IHTMLSubmitData_Value = Guid.initString("3050f645-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSubmitData = &IID_IHTMLSubmitData_Value;
pub const IHTMLSubmitData = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        appendNameValuePair: *const fn(
            self: *const IHTMLSubmitData,
            name: ?BSTR,
            value: ?BSTR,
        ) callconv(.winapi) HRESULT,
        appendNameFilePair: *const fn(
            self: *const IHTMLSubmitData,
            name: ?BSTR,
            filename: ?BSTR,
        ) callconv(.winapi) HRESULT,
        appendItemSeparator: *const fn(
            self: *const IHTMLSubmitData,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn appendNameValuePair(self: *const IHTMLSubmitData, name: ?BSTR, value: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.appendNameValuePair(self, name, value);
    }
    pub fn appendNameFilePair(self: *const IHTMLSubmitData, name: ?BSTR, filename: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.appendNameFilePair(self, name, filename);
    }
    pub fn appendItemSeparator(self: *const IHTMLSubmitData) callconv(.@"inline") HRESULT {
        return self.vtable.appendItemSeparator(self);
    }
};

const IID_IHTMLFormElement4_Value = Guid.initString("3051042c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFormElement4 = &IID_IHTMLFormElement4_Value;
pub const IHTMLFormElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_action: *const fn(
            self: *const IHTMLFormElement4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_action: *const fn(
            self: *const IHTMLFormElement4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_action(self: *const IHTMLFormElement4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_action(self, v);
    }
    pub fn get_action(self: *const IHTMLFormElement4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_action(self, p);
    }
};

const IID_DispHTMLFormElement_Value = Guid.initString("3050f510-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLFormElement = &IID_DispHTMLFormElement_Value;
pub const DispHTMLFormElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLControlElementEvents2_Value = Guid.initString("3050f612-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLControlElementEvents2 = &IID_HTMLControlElementEvents2_Value;
pub const HTMLControlElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLControlElementEvents_Value = Guid.initString("3050f4ea-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLControlElementEvents = &IID_HTMLControlElementEvents_Value;
pub const HTMLControlElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLControlElement_Value = Guid.initString("3050f4e9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLControlElement = &IID_IHTMLControlElement_Value;
pub const IHTMLControlElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tabIndex: *const fn(
            self: *const IHTMLControlElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tabIndex: *const fn(
            self: *const IHTMLControlElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        focus: *const fn(
            self: *const IHTMLControlElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_accessKey: *const fn(
            self: *const IHTMLControlElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accessKey: *const fn(
            self: *const IHTMLControlElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onblur: *const fn(
            self: *const IHTMLControlElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onblur: *const fn(
            self: *const IHTMLControlElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocus: *const fn(
            self: *const IHTMLControlElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocus: *const fn(
            self: *const IHTMLControlElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onresize: *const fn(
            self: *const IHTMLControlElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onresize: *const fn(
            self: *const IHTMLControlElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        blur: *const fn(
            self: *const IHTMLControlElement,
        ) callconv(.winapi) HRESULT,
        addFilter: *const fn(
            self: *const IHTMLControlElement,
            pUnk: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        removeFilter: *const fn(
            self: *const IHTMLControlElement,
            pUnk: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientHeight: *const fn(
            self: *const IHTMLControlElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientWidth: *const fn(
            self: *const IHTMLControlElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientTop: *const fn(
            self: *const IHTMLControlElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientLeft: *const fn(
            self: *const IHTMLControlElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_tabIndex(self: *const IHTMLControlElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_tabIndex(self, v);
    }
    pub fn get_tabIndex(self: *const IHTMLControlElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_tabIndex(self, p);
    }
    pub fn focus(self: *const IHTMLControlElement) callconv(.@"inline") HRESULT {
        return self.vtable.focus(self);
    }
    pub fn put_accessKey(self: *const IHTMLControlElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_accessKey(self, v);
    }
    pub fn get_accessKey(self: *const IHTMLControlElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accessKey(self, p);
    }
    pub fn put_onblur(self: *const IHTMLControlElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onblur(self, v);
    }
    pub fn get_onblur(self: *const IHTMLControlElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onblur(self, p);
    }
    pub fn put_onfocus(self: *const IHTMLControlElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocus(self, v);
    }
    pub fn get_onfocus(self: *const IHTMLControlElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocus(self, p);
    }
    pub fn put_onresize(self: *const IHTMLControlElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onresize(self, v);
    }
    pub fn get_onresize(self: *const IHTMLControlElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onresize(self, p);
    }
    pub fn blur(self: *const IHTMLControlElement) callconv(.@"inline") HRESULT {
        return self.vtable.blur(self);
    }
    pub fn addFilter(self: *const IHTMLControlElement, pUnk: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.addFilter(self, pUnk);
    }
    pub fn removeFilter(self: *const IHTMLControlElement, pUnk: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.removeFilter(self, pUnk);
    }
    pub fn get_clientHeight(self: *const IHTMLControlElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientHeight(self, p);
    }
    pub fn get_clientWidth(self: *const IHTMLControlElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientWidth(self, p);
    }
    pub fn get_clientTop(self: *const IHTMLControlElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientTop(self, p);
    }
    pub fn get_clientLeft(self: *const IHTMLControlElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientLeft(self, p);
    }
};

const IID_IHTMLTextElement_Value = Guid.initString("3050f218-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTextElement = &IID_IHTMLTextElement_Value;
pub const IHTMLTextElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLTextElement_Value = Guid.initString("3050f537-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTextElement = &IID_DispHTMLTextElement_Value;
pub const DispHTMLTextElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLTextContainerEvents2_Value = Guid.initString("3050f624-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLTextContainerEvents2 = &IID_HTMLTextContainerEvents2_Value;
pub const HTMLTextContainerEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLTextContainerEvents_Value = Guid.initString("1ff6aa72-5842-11cf-a707-00aa00c0098d");
pub const IID_HTMLTextContainerEvents = &IID_HTMLTextContainerEvents_Value;
pub const HTMLTextContainerEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLTextContainer_Value = Guid.initString("3050f230-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTextContainer = &IID_IHTMLTextContainer_Value;
pub const IHTMLTextContainer = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createControlRange: *const fn(
            self: *const IHTMLTextContainer,
            range: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollHeight: *const fn(
            self: *const IHTMLTextContainer,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollWidth: *const fn(
            self: *const IHTMLTextContainer,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollTop: *const fn(
            self: *const IHTMLTextContainer,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollTop: *const fn(
            self: *const IHTMLTextContainer,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollLeft: *const fn(
            self: *const IHTMLTextContainer,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollLeft: *const fn(
            self: *const IHTMLTextContainer,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onscroll: *const fn(
            self: *const IHTMLTextContainer,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onscroll: *const fn(
            self: *const IHTMLTextContainer,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createControlRange(self: *const IHTMLTextContainer, range: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.createControlRange(self, range);
    }
    pub fn get_scrollHeight(self: *const IHTMLTextContainer, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollHeight(self, p);
    }
    pub fn get_scrollWidth(self: *const IHTMLTextContainer, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollWidth(self, p);
    }
    pub fn put_scrollTop(self: *const IHTMLTextContainer, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollTop(self, v);
    }
    pub fn get_scrollTop(self: *const IHTMLTextContainer, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollTop(self, p);
    }
    pub fn put_scrollLeft(self: *const IHTMLTextContainer, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollLeft(self, v);
    }
    pub fn get_scrollLeft(self: *const IHTMLTextContainer, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollLeft(self, p);
    }
    pub fn put_onscroll(self: *const IHTMLTextContainer, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onscroll(self, v);
    }
    pub fn get_onscroll(self: *const IHTMLTextContainer, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onscroll(self, p);
    }
};

const IID_IHTMLControlRange_Value = Guid.initString("3050f29c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLControlRange = &IID_IHTMLControlRange_Value;
pub const IHTMLControlRange = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        select: *const fn(
            self: *const IHTMLControlRange,
        ) callconv(.winapi) HRESULT,
        add: *const fn(
            self: *const IHTMLControlRange,
            item: ?*IHTMLControlElement,
        ) callconv(.winapi) HRESULT,
        remove: *const fn(
            self: *const IHTMLControlRange,
            index: i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLControlRange,
            index: i32,
            pdisp: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        scrollIntoView: *const fn(
            self: *const IHTMLControlRange,
            varargStart: VARIANT,
        ) callconv(.winapi) HRESULT,
        queryCommandSupported: *const fn(
            self: *const IHTMLControlRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandEnabled: *const fn(
            self: *const IHTMLControlRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandState: *const fn(
            self: *const IHTMLControlRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandIndeterm: *const fn(
            self: *const IHTMLControlRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandText: *const fn(
            self: *const IHTMLControlRange,
            cmdID: ?BSTR,
            pcmdText: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        queryCommandValue: *const fn(
            self: *const IHTMLControlRange,
            cmdID: ?BSTR,
            pcmdValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        execCommand: *const fn(
            self: *const IHTMLControlRange,
            cmdID: ?BSTR,
            showUI: i16,
            value: VARIANT,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        execCommandShowHelp: *const fn(
            self: *const IHTMLControlRange,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        commonParentElement: *const fn(
            self: *const IHTMLControlRange,
            parent: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLControlRange,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn select(self: *const IHTMLControlRange) callconv(.@"inline") HRESULT {
        return self.vtable.select(self);
    }
    pub fn add(self: *const IHTMLControlRange, _param_item: ?*IHTMLControlElement) callconv(.@"inline") HRESULT {
        return self.vtable.add(self, _param_item);
    }
    pub fn remove(self: *const IHTMLControlRange, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.remove(self, index);
    }
    pub fn item(self: *const IHTMLControlRange, index: i32, pdisp: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, pdisp);
    }
    pub fn scrollIntoView(self: *const IHTMLControlRange, varargStart: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.scrollIntoView(self, varargStart);
    }
    pub fn queryCommandSupported(self: *const IHTMLControlRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandSupported(self, cmdID, pfRet);
    }
    pub fn queryCommandEnabled(self: *const IHTMLControlRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandEnabled(self, cmdID, pfRet);
    }
    pub fn queryCommandState(self: *const IHTMLControlRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandState(self, cmdID, pfRet);
    }
    pub fn queryCommandIndeterm(self: *const IHTMLControlRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandIndeterm(self, cmdID, pfRet);
    }
    pub fn queryCommandText(self: *const IHTMLControlRange, cmdID: ?BSTR, pcmdText: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandText(self, cmdID, pcmdText);
    }
    pub fn queryCommandValue(self: *const IHTMLControlRange, cmdID: ?BSTR, pcmdValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandValue(self, cmdID, pcmdValue);
    }
    pub fn execCommand(self: *const IHTMLControlRange, cmdID: ?BSTR, showUI: i16, value: VARIANT, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.execCommand(self, cmdID, showUI, value, pfRet);
    }
    pub fn execCommandShowHelp(self: *const IHTMLControlRange, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.execCommandShowHelp(self, cmdID, pfRet);
    }
    pub fn commonParentElement(self: *const IHTMLControlRange, parent: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.commonParentElement(self, parent);
    }
    pub fn get_length(self: *const IHTMLControlRange, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
};

const IID_IHTMLControlRange2_Value = Guid.initString("3050f65e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLControlRange2 = &IID_IHTMLControlRange2_Value;
pub const IHTMLControlRange2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        addElement: *const fn(
            self: *const IHTMLControlRange2,
            item: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn addElement(self: *const IHTMLControlRange2, _param_item: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.addElement(self, _param_item);
    }
};

const IID_HTMLImgEvents2_Value = Guid.initString("3050f616-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLImgEvents2 = &IID_HTMLImgEvents2_Value;
pub const HTMLImgEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLImgEvents_Value = Guid.initString("3050f25b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLImgEvents = &IID_HTMLImgEvents_Value;
pub const HTMLImgEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLImgElement_Value = Guid.initString("3050f240-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLImgElement = &IID_IHTMLImgElement_Value;
pub const IHTMLImgElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_isMap: *const fn(
            self: *const IHTMLImgElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isMap: *const fn(
            self: *const IHTMLImgElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_useMap: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_useMap: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeType: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileSize: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileCreatedDate: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileModifiedDate: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileUpdatedDate: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_protocol: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nameProp: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLImgElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLImgElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vspace: *const fn(
            self: *const IHTMLImgElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vspace: *const fn(
            self: *const IHTMLImgElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hspace: *const fn(
            self: *const IHTMLImgElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hspace: *const fn(
            self: *const IHTMLImgElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alt: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alt: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lowsrc: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lowsrc: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vrml: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vrml: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dynsrc: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dynsrc: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_complete: *const fn(
            self: *const IHTMLImgElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_loop: *const fn(
            self: *const IHTMLImgElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loop: *const fn(
            self: *const IHTMLImgElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLImgElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLImgElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLImgElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLImgElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onabort: *const fn(
            self: *const IHTMLImgElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onabort: *const fn(
            self: *const IHTMLImgElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLImgElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLImgElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLImgElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLImgElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_start: *const fn(
            self: *const IHTMLImgElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_start: *const fn(
            self: *const IHTMLImgElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_isMap(self: *const IHTMLImgElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_isMap(self, v);
    }
    pub fn get_isMap(self: *const IHTMLImgElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isMap(self, p);
    }
    pub fn put_useMap(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_useMap(self, v);
    }
    pub fn get_useMap(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_useMap(self, p);
    }
    pub fn get_mimeType(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_mimeType(self, p);
    }
    pub fn get_fileSize(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fileSize(self, p);
    }
    pub fn get_fileCreatedDate(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fileCreatedDate(self, p);
    }
    pub fn get_fileModifiedDate(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fileModifiedDate(self, p);
    }
    pub fn get_fileUpdatedDate(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fileUpdatedDate(self, p);
    }
    pub fn get_protocol(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_protocol(self, p);
    }
    pub fn get_href(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn get_nameProp(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nameProp(self, p);
    }
    pub fn put_border(self: *const IHTMLImgElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLImgElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_vspace(self: *const IHTMLImgElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_vspace(self, v);
    }
    pub fn get_vspace(self: *const IHTMLImgElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_vspace(self, p);
    }
    pub fn put_hspace(self: *const IHTMLImgElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_hspace(self, v);
    }
    pub fn get_hspace(self: *const IHTMLImgElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_hspace(self, p);
    }
    pub fn put_alt(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alt(self, v);
    }
    pub fn get_alt(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alt(self, p);
    }
    pub fn put_src(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_lowsrc(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lowsrc(self, v);
    }
    pub fn get_lowsrc(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lowsrc(self, p);
    }
    pub fn put_vrml(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vrml(self, v);
    }
    pub fn get_vrml(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vrml(self, p);
    }
    pub fn put_dynsrc(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dynsrc(self, v);
    }
    pub fn get_dynsrc(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dynsrc(self, p);
    }
    pub fn get_readyState(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn get_complete(self: *const IHTMLImgElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_complete(self, p);
    }
    pub fn put_loop(self: *const IHTMLImgElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_loop(self, v);
    }
    pub fn get_loop(self: *const IHTMLImgElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_loop(self, p);
    }
    pub fn put_align(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_onload(self: *const IHTMLImgElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLImgElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onerror(self: *const IHTMLImgElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLImgElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_onabort(self: *const IHTMLImgElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onabort(self, v);
    }
    pub fn get_onabort(self: *const IHTMLImgElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onabort(self, p);
    }
    pub fn put_name(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_width(self: *const IHTMLImgElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLImgElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLImgElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLImgElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_start(self: *const IHTMLImgElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_start(self, v);
    }
    pub fn get_start(self: *const IHTMLImgElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_start(self, p);
    }
};

const IID_IHTMLImgElement2_Value = Guid.initString("3050f826-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLImgElement2 = &IID_IHTMLImgElement2_Value;
pub const IHTMLImgElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_longDesc: *const fn(
            self: *const IHTMLImgElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_longDesc: *const fn(
            self: *const IHTMLImgElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_longDesc(self: *const IHTMLImgElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_longDesc(self, v);
    }
    pub fn get_longDesc(self: *const IHTMLImgElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_longDesc(self, p);
    }
};

const IID_IHTMLImgElement3_Value = Guid.initString("30510434-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLImgElement3 = &IID_IHTMLImgElement3_Value;
pub const IHTMLImgElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_longDesc: *const fn(
            self: *const IHTMLImgElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_longDesc: *const fn(
            self: *const IHTMLImgElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vrml: *const fn(
            self: *const IHTMLImgElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vrml: *const fn(
            self: *const IHTMLImgElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lowsrc: *const fn(
            self: *const IHTMLImgElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lowsrc: *const fn(
            self: *const IHTMLImgElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dynsrc: *const fn(
            self: *const IHTMLImgElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dynsrc: *const fn(
            self: *const IHTMLImgElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_longDesc(self: *const IHTMLImgElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_longDesc(self, v);
    }
    pub fn get_longDesc(self: *const IHTMLImgElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_longDesc(self, p);
    }
    pub fn put_vrml(self: *const IHTMLImgElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vrml(self, v);
    }
    pub fn get_vrml(self: *const IHTMLImgElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vrml(self, p);
    }
    pub fn put_lowsrc(self: *const IHTMLImgElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lowsrc(self, v);
    }
    pub fn get_lowsrc(self: *const IHTMLImgElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lowsrc(self, p);
    }
    pub fn put_dynsrc(self: *const IHTMLImgElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dynsrc(self, v);
    }
    pub fn get_dynsrc(self: *const IHTMLImgElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dynsrc(self, p);
    }
};

const IID_IHTMLImgElement4_Value = Guid.initString("305107f6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLImgElement4 = &IID_IHTMLImgElement4_Value;
pub const IHTMLImgElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_naturalWidth: *const fn(
            self: *const IHTMLImgElement4,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_naturalHeight: *const fn(
            self: *const IHTMLImgElement4,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_naturalWidth(self: *const IHTMLImgElement4, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_naturalWidth(self, p);
    }
    pub fn get_naturalHeight(self: *const IHTMLImgElement4, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_naturalHeight(self, p);
    }
};

const IID_IHTMLMSImgElement_Value = Guid.initString("30510793-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMSImgElement = &IID_IHTMLMSImgElement_Value;
pub const IHTMLMSImgElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msPlayToDisabled: *const fn(
            self: *const IHTMLMSImgElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msPlayToDisabled: *const fn(
            self: *const IHTMLMSImgElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msPlayToPrimary: *const fn(
            self: *const IHTMLMSImgElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msPlayToPrimary: *const fn(
            self: *const IHTMLMSImgElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_msPlayToDisabled(self: *const IHTMLMSImgElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_msPlayToDisabled(self, v);
    }
    pub fn get_msPlayToDisabled(self: *const IHTMLMSImgElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_msPlayToDisabled(self, p);
    }
    pub fn put_msPlayToPrimary(self: *const IHTMLMSImgElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_msPlayToPrimary(self, v);
    }
    pub fn get_msPlayToPrimary(self: *const IHTMLMSImgElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_msPlayToPrimary(self, p);
    }
};

const IID_IHTMLImageElementFactory_Value = Guid.initString("3050f38e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLImageElementFactory = &IID_IHTMLImageElementFactory_Value;
pub const IHTMLImageElementFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        create: *const fn(
            self: *const IHTMLImageElementFactory,
            width: VARIANT,
            height: VARIANT,
            __MIDL__IHTMLImageElementFactory0000: ?*?*IHTMLImgElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn create(self: *const IHTMLImageElementFactory, width: VARIANT, height: VARIANT, __MIDL__IHTMLImageElementFactory0000: ?*?*IHTMLImgElement) callconv(.@"inline") HRESULT {
        return self.vtable.create(self, width, height, __MIDL__IHTMLImageElementFactory0000);
    }
};

const IID_DispHTMLImg_Value = Guid.initString("3050f51c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLImg = &IID_DispHTMLImg_Value;
pub const DispHTMLImg = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLBodyElement_Value = Guid.initString("3050f1d8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBodyElement = &IID_IHTMLBodyElement_Value;
pub const IHTMLBodyElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_background: *const fn(
            self: *const IHTMLBodyElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_background: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bgProperties: *const fn(
            self: *const IHTMLBodyElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bgProperties: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_leftMargin: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_leftMargin: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_topMargin: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_topMargin: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rightMargin: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rightMargin: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bottomMargin: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bottomMargin: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_noWrap: *const fn(
            self: *const IHTMLBodyElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_noWrap: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bgColor: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bgColor: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_link: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_link: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vLink: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vLink: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_aLink: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_aLink: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onunload: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onunload: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scroll: *const fn(
            self: *const IHTMLBodyElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scroll: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselect: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselect: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeunload: *const fn(
            self: *const IHTMLBodyElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeunload: *const fn(
            self: *const IHTMLBodyElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        createTextRange: *const fn(
            self: *const IHTMLBodyElement,
            range: ?*?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_background(self: *const IHTMLBodyElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_background(self, v);
    }
    pub fn get_background(self: *const IHTMLBodyElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_background(self, p);
    }
    pub fn put_bgProperties(self: *const IHTMLBodyElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_bgProperties(self, v);
    }
    pub fn get_bgProperties(self: *const IHTMLBodyElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_bgProperties(self, p);
    }
    pub fn put_leftMargin(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_leftMargin(self, v);
    }
    pub fn get_leftMargin(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_leftMargin(self, p);
    }
    pub fn put_topMargin(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_topMargin(self, v);
    }
    pub fn get_topMargin(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_topMargin(self, p);
    }
    pub fn put_rightMargin(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_rightMargin(self, v);
    }
    pub fn get_rightMargin(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_rightMargin(self, p);
    }
    pub fn put_bottomMargin(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bottomMargin(self, v);
    }
    pub fn get_bottomMargin(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bottomMargin(self, p);
    }
    pub fn put_noWrap(self: *const IHTMLBodyElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_noWrap(self, v);
    }
    pub fn get_noWrap(self: *const IHTMLBodyElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_noWrap(self, p);
    }
    pub fn put_bgColor(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bgColor(self, v);
    }
    pub fn get_bgColor(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bgColor(self, p);
    }
    pub fn put_text(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_text(self, v);
    }
    pub fn get_text(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_text(self, p);
    }
    pub fn put_link(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_link(self, v);
    }
    pub fn get_link(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_link(self, p);
    }
    pub fn put_vLink(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_vLink(self, v);
    }
    pub fn get_vLink(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_vLink(self, p);
    }
    pub fn put_aLink(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_aLink(self, v);
    }
    pub fn get_aLink(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_aLink(self, p);
    }
    pub fn put_onload(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onunload(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onunload(self, v);
    }
    pub fn get_onunload(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onunload(self, p);
    }
    pub fn put_scroll(self: *const IHTMLBodyElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_scroll(self, v);
    }
    pub fn get_scroll(self: *const IHTMLBodyElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_scroll(self, p);
    }
    pub fn put_onselect(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselect(self, v);
    }
    pub fn get_onselect(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselect(self, p);
    }
    pub fn put_onbeforeunload(self: *const IHTMLBodyElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeunload(self, v);
    }
    pub fn get_onbeforeunload(self: *const IHTMLBodyElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeunload(self, p);
    }
    pub fn createTextRange(self: *const IHTMLBodyElement, range: ?*?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.createTextRange(self, range);
    }
};

const IID_IHTMLBodyElement2_Value = Guid.initString("3050f5c5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBodyElement2 = &IID_IHTMLBodyElement2_Value;
pub const IHTMLBodyElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeprint: *const fn(
            self: *const IHTMLBodyElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeprint: *const fn(
            self: *const IHTMLBodyElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onafterprint: *const fn(
            self: *const IHTMLBodyElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onafterprint: *const fn(
            self: *const IHTMLBodyElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onbeforeprint(self: *const IHTMLBodyElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeprint(self, v);
    }
    pub fn get_onbeforeprint(self: *const IHTMLBodyElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeprint(self, p);
    }
    pub fn put_onafterprint(self: *const IHTMLBodyElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onafterprint(self, v);
    }
    pub fn get_onafterprint(self: *const IHTMLBodyElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onafterprint(self, p);
    }
};

const IID_IHTMLBodyElement3_Value = Guid.initString("30510422-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBodyElement3 = &IID_IHTMLBodyElement3_Value;
pub const IHTMLBodyElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_background: *const fn(
            self: *const IHTMLBodyElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_background: *const fn(
            self: *const IHTMLBodyElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ononline: *const fn(
            self: *const IHTMLBodyElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ononline: *const fn(
            self: *const IHTMLBodyElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onoffline: *const fn(
            self: *const IHTMLBodyElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onoffline: *const fn(
            self: *const IHTMLBodyElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onhashchange: *const fn(
            self: *const IHTMLBodyElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onhashchange: *const fn(
            self: *const IHTMLBodyElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_background(self: *const IHTMLBodyElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_background(self, v);
    }
    pub fn get_background(self: *const IHTMLBodyElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_background(self, p);
    }
    pub fn put_ononline(self: *const IHTMLBodyElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ononline(self, v);
    }
    pub fn get_ononline(self: *const IHTMLBodyElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ononline(self, p);
    }
    pub fn put_onoffline(self: *const IHTMLBodyElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onoffline(self, v);
    }
    pub fn get_onoffline(self: *const IHTMLBodyElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onoffline(self, p);
    }
    pub fn put_onhashchange(self: *const IHTMLBodyElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onhashchange(self, v);
    }
    pub fn get_onhashchange(self: *const IHTMLBodyElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onhashchange(self, p);
    }
};

const IID_IHTMLBodyElement4_Value = Guid.initString("30510795-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBodyElement4 = &IID_IHTMLBodyElement4_Value;
pub const IHTMLBodyElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmessage: *const fn(
            self: *const IHTMLBodyElement4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmessage: *const fn(
            self: *const IHTMLBodyElement4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstorage: *const fn(
            self: *const IHTMLBodyElement4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstorage: *const fn(
            self: *const IHTMLBodyElement4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onmessage(self: *const IHTMLBodyElement4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmessage(self, v);
    }
    pub fn get_onmessage(self: *const IHTMLBodyElement4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmessage(self, p);
    }
    pub fn put_onstorage(self: *const IHTMLBodyElement4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstorage(self, v);
    }
    pub fn get_onstorage(self: *const IHTMLBodyElement4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstorage(self, p);
    }
};

const IID_IHTMLBodyElement5_Value = Guid.initString("30510822-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBodyElement5 = &IID_IHTMLBodyElement5_Value;
pub const IHTMLBodyElement5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpopstate: *const fn(
            self: *const IHTMLBodyElement5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpopstate: *const fn(
            self: *const IHTMLBodyElement5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onpopstate(self: *const IHTMLBodyElement5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpopstate(self, v);
    }
    pub fn get_onpopstate(self: *const IHTMLBodyElement5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpopstate(self, p);
    }
};

const IID_DispHTMLBody_Value = Guid.initString("3050f507-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLBody = &IID_DispHTMLBody_Value;
pub const DispHTMLBody = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLFontElement_Value = Guid.initString("3050f1d9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFontElement = &IID_IHTMLFontElement_Value;
pub const IHTMLFontElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_color: *const fn(
            self: *const IHTMLFontElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_color: *const fn(
            self: *const IHTMLFontElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_face: *const fn(
            self: *const IHTMLFontElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_face: *const fn(
            self: *const IHTMLFontElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_size: *const fn(
            self: *const IHTMLFontElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_size: *const fn(
            self: *const IHTMLFontElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_color(self: *const IHTMLFontElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_color(self, v);
    }
    pub fn get_color(self: *const IHTMLFontElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_color(self, p);
    }
    pub fn put_face(self: *const IHTMLFontElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_face(self, v);
    }
    pub fn get_face(self: *const IHTMLFontElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_face(self, p);
    }
    pub fn put_size(self: *const IHTMLFontElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_size(self, v);
    }
    pub fn get_size(self: *const IHTMLFontElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_size(self, p);
    }
};

const IID_DispHTMLFontElement_Value = Guid.initString("3050f512-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLFontElement = &IID_DispHTMLFontElement_Value;
pub const DispHTMLFontElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLAnchorEvents2_Value = Guid.initString("3050f610-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLAnchorEvents2 = &IID_HTMLAnchorEvents2_Value;
pub const HTMLAnchorEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLAnchorEvents_Value = Guid.initString("3050f29d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLAnchorEvents = &IID_HTMLAnchorEvents_Value;
pub const HTMLAnchorEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLAnchorElement_Value = Guid.initString("3050f1da-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAnchorElement = &IID_IHTMLAnchorElement_Value;
pub const IHTMLAnchorElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_target: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rel: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rel: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rev: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rev: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_urn: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_urn: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Methods: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Methods: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_host: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_host: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hostname: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hostname: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pathname: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pathname: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_port: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_port: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_protocol: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_protocol: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_search: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_search: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hash: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hash: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onblur: *const fn(
            self: *const IHTMLAnchorElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onblur: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocus: *const fn(
            self: *const IHTMLAnchorElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocus: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_accessKey: *const fn(
            self: *const IHTMLAnchorElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accessKey: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_protocolLong: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeType: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nameProp: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tabIndex: *const fn(
            self: *const IHTMLAnchorElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tabIndex: *const fn(
            self: *const IHTMLAnchorElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        focus: *const fn(
            self: *const IHTMLAnchorElement,
        ) callconv(.winapi) HRESULT,
        blur: *const fn(
            self: *const IHTMLAnchorElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_href(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn put_target(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_target(self, v);
    }
    pub fn get_target(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_target(self, p);
    }
    pub fn put_rel(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rel(self, v);
    }
    pub fn get_rel(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rel(self, p);
    }
    pub fn put_rev(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rev(self, v);
    }
    pub fn get_rev(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rev(self, p);
    }
    pub fn put_urn(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_urn(self, v);
    }
    pub fn get_urn(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_urn(self, p);
    }
    pub fn put_Methods(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_Methods(self, v);
    }
    pub fn get_Methods(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_Methods(self, p);
    }
    pub fn put_name(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_host(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_host(self, v);
    }
    pub fn get_host(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_host(self, p);
    }
    pub fn put_hostname(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hostname(self, v);
    }
    pub fn get_hostname(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hostname(self, p);
    }
    pub fn put_pathname(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pathname(self, v);
    }
    pub fn get_pathname(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pathname(self, p);
    }
    pub fn put_port(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_port(self, v);
    }
    pub fn get_port(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_port(self, p);
    }
    pub fn put_protocol(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_protocol(self, v);
    }
    pub fn get_protocol(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_protocol(self, p);
    }
    pub fn put_search(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_search(self, v);
    }
    pub fn get_search(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_search(self, p);
    }
    pub fn put_hash(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hash(self, v);
    }
    pub fn get_hash(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hash(self, p);
    }
    pub fn put_onblur(self: *const IHTMLAnchorElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onblur(self, v);
    }
    pub fn get_onblur(self: *const IHTMLAnchorElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onblur(self, p);
    }
    pub fn put_onfocus(self: *const IHTMLAnchorElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocus(self, v);
    }
    pub fn get_onfocus(self: *const IHTMLAnchorElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocus(self, p);
    }
    pub fn put_accessKey(self: *const IHTMLAnchorElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_accessKey(self, v);
    }
    pub fn get_accessKey(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accessKey(self, p);
    }
    pub fn get_protocolLong(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_protocolLong(self, p);
    }
    pub fn get_mimeType(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_mimeType(self, p);
    }
    pub fn get_nameProp(self: *const IHTMLAnchorElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nameProp(self, p);
    }
    pub fn put_tabIndex(self: *const IHTMLAnchorElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_tabIndex(self, v);
    }
    pub fn get_tabIndex(self: *const IHTMLAnchorElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_tabIndex(self, p);
    }
    pub fn focus(self: *const IHTMLAnchorElement) callconv(.@"inline") HRESULT {
        return self.vtable.focus(self);
    }
    pub fn blur(self: *const IHTMLAnchorElement) callconv(.@"inline") HRESULT {
        return self.vtable.blur(self);
    }
};

const IID_IHTMLAnchorElement2_Value = Guid.initString("3050f825-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAnchorElement2 = &IID_IHTMLAnchorElement2_Value;
pub const IHTMLAnchorElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn(
            self: *const IHTMLAnchorElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn(
            self: *const IHTMLAnchorElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_coords: *const fn(
            self: *const IHTMLAnchorElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_coords: *const fn(
            self: *const IHTMLAnchorElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hreflang: *const fn(
            self: *const IHTMLAnchorElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hreflang: *const fn(
            self: *const IHTMLAnchorElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shape: *const fn(
            self: *const IHTMLAnchorElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shape: *const fn(
            self: *const IHTMLAnchorElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLAnchorElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLAnchorElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_charset(self: *const IHTMLAnchorElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_charset(self, v);
    }
    pub fn get_charset(self: *const IHTMLAnchorElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_charset(self, p);
    }
    pub fn put_coords(self: *const IHTMLAnchorElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_coords(self, v);
    }
    pub fn get_coords(self: *const IHTMLAnchorElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_coords(self, p);
    }
    pub fn put_hreflang(self: *const IHTMLAnchorElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hreflang(self, v);
    }
    pub fn get_hreflang(self: *const IHTMLAnchorElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hreflang(self, p);
    }
    pub fn put_shape(self: *const IHTMLAnchorElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_shape(self, v);
    }
    pub fn get_shape(self: *const IHTMLAnchorElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_shape(self, p);
    }
    pub fn put_type(self: *const IHTMLAnchorElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLAnchorElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
};

const IID_IHTMLAnchorElement3_Value = Guid.initString("3051041d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAnchorElement3 = &IID_IHTMLAnchorElement3_Value;
pub const IHTMLAnchorElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shape: *const fn(
            self: *const IHTMLAnchorElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shape: *const fn(
            self: *const IHTMLAnchorElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_coords: *const fn(
            self: *const IHTMLAnchorElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_coords: *const fn(
            self: *const IHTMLAnchorElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLAnchorElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLAnchorElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_shape(self: *const IHTMLAnchorElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_shape(self, v);
    }
    pub fn get_shape(self: *const IHTMLAnchorElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_shape(self, p);
    }
    pub fn put_coords(self: *const IHTMLAnchorElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_coords(self, v);
    }
    pub fn get_coords(self: *const IHTMLAnchorElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_coords(self, p);
    }
    pub fn put_href(self: *const IHTMLAnchorElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLAnchorElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
};

const IID_DispHTMLAnchorElement_Value = Guid.initString("3050f502-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLAnchorElement = &IID_DispHTMLAnchorElement_Value;
pub const DispHTMLAnchorElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLLabelEvents2_Value = Guid.initString("3050f61c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLLabelEvents2 = &IID_HTMLLabelEvents2_Value;
pub const HTMLLabelEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLLabelEvents_Value = Guid.initString("3050f329-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLLabelEvents = &IID_HTMLLabelEvents_Value;
pub const HTMLLabelEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLLabelElement_Value = Guid.initString("3050f32a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLabelElement = &IID_IHTMLLabelElement_Value;
pub const IHTMLLabelElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_htmlFor: *const fn(
            self: *const IHTMLLabelElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_htmlFor: *const fn(
            self: *const IHTMLLabelElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_accessKey: *const fn(
            self: *const IHTMLLabelElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accessKey: *const fn(
            self: *const IHTMLLabelElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_htmlFor(self: *const IHTMLLabelElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_htmlFor(self, v);
    }
    pub fn get_htmlFor(self: *const IHTMLLabelElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_htmlFor(self, p);
    }
    pub fn put_accessKey(self: *const IHTMLLabelElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_accessKey(self, v);
    }
    pub fn get_accessKey(self: *const IHTMLLabelElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accessKey(self, p);
    }
};

const IID_IHTMLLabelElement2_Value = Guid.initString("3050f832-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLabelElement2 = &IID_IHTMLLabelElement2_Value;
pub const IHTMLLabelElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLLabelElement2,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_form(self: *const IHTMLLabelElement2, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
};

const IID_DispHTMLLabelElement_Value = Guid.initString("3050f522-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLLabelElement = &IID_DispHTMLLabelElement_Value;
pub const DispHTMLLabelElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLListElement_Value = Guid.initString("3050f20e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLListElement = &IID_IHTMLListElement_Value;
pub const IHTMLListElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLListElement2_Value = Guid.initString("3050f822-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLListElement2 = &IID_IHTMLListElement2_Value;
pub const IHTMLListElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_compact: *const fn(
            self: *const IHTMLListElement2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_compact: *const fn(
            self: *const IHTMLListElement2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_compact(self: *const IHTMLListElement2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_compact(self, v);
    }
    pub fn get_compact(self: *const IHTMLListElement2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_compact(self, p);
    }
};

const IID_DispHTMLListElement_Value = Guid.initString("3050f525-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLListElement = &IID_DispHTMLListElement_Value;
pub const DispHTMLListElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLUListElement_Value = Guid.initString("3050f1dd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLUListElement = &IID_IHTMLUListElement_Value;
pub const IHTMLUListElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_compact: *const fn(
            self: *const IHTMLUListElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_compact: *const fn(
            self: *const IHTMLUListElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLUListElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLUListElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_compact(self: *const IHTMLUListElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_compact(self, v);
    }
    pub fn get_compact(self: *const IHTMLUListElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_compact(self, p);
    }
    pub fn put_type(self: *const IHTMLUListElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLUListElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
};

const IID_DispHTMLUListElement_Value = Guid.initString("3050f538-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLUListElement = &IID_DispHTMLUListElement_Value;
pub const DispHTMLUListElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLOListElement_Value = Guid.initString("3050f1de-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOListElement = &IID_IHTMLOListElement_Value;
pub const IHTMLOListElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_compact: *const fn(
            self: *const IHTMLOListElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_compact: *const fn(
            self: *const IHTMLOListElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_start: *const fn(
            self: *const IHTMLOListElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_start: *const fn(
            self: *const IHTMLOListElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLOListElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLOListElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_compact(self: *const IHTMLOListElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_compact(self, v);
    }
    pub fn get_compact(self: *const IHTMLOListElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_compact(self, p);
    }
    pub fn put_start(self: *const IHTMLOListElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_start(self, v);
    }
    pub fn get_start(self: *const IHTMLOListElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_start(self, p);
    }
    pub fn put_type(self: *const IHTMLOListElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLOListElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
};

const IID_DispHTMLOListElement_Value = Guid.initString("3050f52a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLOListElement = &IID_DispHTMLOListElement_Value;
pub const DispHTMLOListElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLLIElement_Value = Guid.initString("3050f1e0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLIElement = &IID_IHTMLLIElement_Value;
pub const IHTMLLIElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLLIElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLLIElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLLIElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLLIElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_type(self: *const IHTMLLIElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLLIElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLLIElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLLIElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
};

const IID_DispHTMLLIElement_Value = Guid.initString("3050f523-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLLIElement = &IID_DispHTMLLIElement_Value;
pub const DispHTMLLIElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLBlockElement_Value = Guid.initString("3050f208-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBlockElement = &IID_IHTMLBlockElement_Value;
pub const IHTMLBlockElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clear: *const fn(
            self: *const IHTMLBlockElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clear: *const fn(
            self: *const IHTMLBlockElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_clear(self: *const IHTMLBlockElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clear(self, v);
    }
    pub fn get_clear(self: *const IHTMLBlockElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clear(self, p);
    }
};

const IID_IHTMLBlockElement2_Value = Guid.initString("3050f823-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBlockElement2 = &IID_IHTMLBlockElement2_Value;
pub const IHTMLBlockElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cite: *const fn(
            self: *const IHTMLBlockElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cite: *const fn(
            self: *const IHTMLBlockElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLBlockElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLBlockElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_cite(self: *const IHTMLBlockElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cite(self, v);
    }
    pub fn get_cite(self: *const IHTMLBlockElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cite(self, p);
    }
    pub fn put_width(self: *const IHTMLBlockElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLBlockElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
};

const IID_IHTMLBlockElement3_Value = Guid.initString("30510494-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBlockElement3 = &IID_IHTMLBlockElement3_Value;
pub const IHTMLBlockElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cite: *const fn(
            self: *const IHTMLBlockElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cite: *const fn(
            self: *const IHTMLBlockElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_cite(self: *const IHTMLBlockElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cite(self, v);
    }
    pub fn get_cite(self: *const IHTMLBlockElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cite(self, p);
    }
};

const IID_DispHTMLBlockElement_Value = Guid.initString("3050f506-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLBlockElement = &IID_DispHTMLBlockElement_Value;
pub const DispHTMLBlockElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLDivElement_Value = Guid.initString("3050f200-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDivElement = &IID_IHTMLDivElement_Value;
pub const IHTMLDivElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLDivElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLDivElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_noWrap: *const fn(
            self: *const IHTMLDivElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_noWrap: *const fn(
            self: *const IHTMLDivElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLDivElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLDivElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_noWrap(self: *const IHTMLDivElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_noWrap(self, v);
    }
    pub fn get_noWrap(self: *const IHTMLDivElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_noWrap(self, p);
    }
};

const IID_DispHTMLDivElement_Value = Guid.initString("3050f50c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDivElement = &IID_DispHTMLDivElement_Value;
pub const DispHTMLDivElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLDDElement_Value = Guid.initString("3050f1f2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDDElement = &IID_IHTMLDDElement_Value;
pub const IHTMLDDElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_noWrap: *const fn(
            self: *const IHTMLDDElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_noWrap: *const fn(
            self: *const IHTMLDDElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_noWrap(self: *const IHTMLDDElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_noWrap(self, v);
    }
    pub fn get_noWrap(self: *const IHTMLDDElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_noWrap(self, p);
    }
};

const IID_DispHTMLDDElement_Value = Guid.initString("3050f50b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDDElement = &IID_DispHTMLDDElement_Value;
pub const DispHTMLDDElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLDTElement_Value = Guid.initString("3050f1f3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDTElement = &IID_IHTMLDTElement_Value;
pub const IHTMLDTElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_noWrap: *const fn(
            self: *const IHTMLDTElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_noWrap: *const fn(
            self: *const IHTMLDTElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_noWrap(self: *const IHTMLDTElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_noWrap(self, v);
    }
    pub fn get_noWrap(self: *const IHTMLDTElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_noWrap(self, p);
    }
};

const IID_DispHTMLDTElement_Value = Guid.initString("3050f50d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDTElement = &IID_DispHTMLDTElement_Value;
pub const DispHTMLDTElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLBRElement_Value = Guid.initString("3050f1f0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBRElement = &IID_IHTMLBRElement_Value;
pub const IHTMLBRElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clear: *const fn(
            self: *const IHTMLBRElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clear: *const fn(
            self: *const IHTMLBRElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_clear(self: *const IHTMLBRElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_clear(self, v);
    }
    pub fn get_clear(self: *const IHTMLBRElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_clear(self, p);
    }
};

const IID_DispHTMLBRElement_Value = Guid.initString("3050f53a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLBRElement = &IID_DispHTMLBRElement_Value;
pub const DispHTMLBRElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLDListElement_Value = Guid.initString("3050f1f1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDListElement = &IID_IHTMLDListElement_Value;
pub const IHTMLDListElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_compact: *const fn(
            self: *const IHTMLDListElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_compact: *const fn(
            self: *const IHTMLDListElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_compact(self: *const IHTMLDListElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_compact(self, v);
    }
    pub fn get_compact(self: *const IHTMLDListElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_compact(self, p);
    }
};

const IID_DispHTMLDListElement_Value = Guid.initString("3050f53b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDListElement = &IID_DispHTMLDListElement_Value;
pub const DispHTMLDListElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLHRElement_Value = Guid.initString("3050f1f4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLHRElement = &IID_IHTMLHRElement_Value;
pub const IHTMLHRElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLHRElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLHRElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_color: *const fn(
            self: *const IHTMLHRElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_color: *const fn(
            self: *const IHTMLHRElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_noShade: *const fn(
            self: *const IHTMLHRElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_noShade: *const fn(
            self: *const IHTMLHRElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLHRElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLHRElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_size: *const fn(
            self: *const IHTMLHRElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_size: *const fn(
            self: *const IHTMLHRElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLHRElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLHRElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_color(self: *const IHTMLHRElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_color(self, v);
    }
    pub fn get_color(self: *const IHTMLHRElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_color(self, p);
    }
    pub fn put_noShade(self: *const IHTMLHRElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_noShade(self, v);
    }
    pub fn get_noShade(self: *const IHTMLHRElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_noShade(self, p);
    }
    pub fn put_width(self: *const IHTMLHRElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLHRElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_size(self: *const IHTMLHRElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_size(self, v);
    }
    pub fn get_size(self: *const IHTMLHRElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_size(self, p);
    }
};

const IID_DispHTMLHRElement_Value = Guid.initString("3050f53d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLHRElement = &IID_DispHTMLHRElement_Value;
pub const DispHTMLHRElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLParaElement_Value = Guid.initString("3050f1f5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLParaElement = &IID_IHTMLParaElement_Value;
pub const IHTMLParaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLParaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLParaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLParaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLParaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
};

const IID_DispHTMLParaElement_Value = Guid.initString("3050f52c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLParaElement = &IID_DispHTMLParaElement_Value;
pub const DispHTMLParaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLElementCollection2_Value = Guid.initString("3050f5ee-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElementCollection2 = &IID_IHTMLElementCollection2_Value;
pub const IHTMLElementCollection2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        urns: *const fn(
            self: *const IHTMLElementCollection2,
            urn: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn urns(self: *const IHTMLElementCollection2, urn: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.urns(self, urn, pdisp);
    }
};

const IID_IHTMLElementCollection3_Value = Guid.initString("3050f835-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElementCollection3 = &IID_IHTMLElementCollection3_Value;
pub const IHTMLElementCollection3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        namedItem: *const fn(
            self: *const IHTMLElementCollection3,
            name: ?BSTR,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn namedItem(self: *const IHTMLElementCollection3, name: ?BSTR, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.namedItem(self, name, pdisp);
    }
};

const IID_IHTMLElementCollection4_Value = Guid.initString("30510425-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLElementCollection4 = &IID_IHTMLElementCollection4_Value;
pub const IHTMLElementCollection4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLElementCollection4,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLElementCollection4,
            index: i32,
            pNode: ?*?*IHTMLElement2,
        ) callconv(.winapi) HRESULT,
        namedItem: *const fn(
            self: *const IHTMLElementCollection4,
            name: ?BSTR,
            pNode: ?*?*IHTMLElement2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLElementCollection4, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLElementCollection4, index: i32, pNode: ?*?*IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, pNode);
    }
    pub fn namedItem(self: *const IHTMLElementCollection4, name: ?BSTR, pNode: ?*?*IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.namedItem(self, name, pNode);
    }
};

const IID_DispHTMLElementCollection_Value = Guid.initString("3050f56b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLElementCollection = &IID_DispHTMLElementCollection_Value;
pub const DispHTMLElementCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLHeaderElement_Value = Guid.initString("3050f1f6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLHeaderElement = &IID_IHTMLHeaderElement_Value;
pub const IHTMLHeaderElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLHeaderElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLHeaderElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLHeaderElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLHeaderElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
};

const IID_DispHTMLHeaderElement_Value = Guid.initString("3050f515-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLHeaderElement = &IID_DispHTMLHeaderElement_Value;
pub const DispHTMLHeaderElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLSelectElementEvents2_Value = Guid.initString("3050f622-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLSelectElementEvents2 = &IID_HTMLSelectElementEvents2_Value;
pub const HTMLSelectElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLSelectElementEvents_Value = Guid.initString("3050f302-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLSelectElementEvents = &IID_HTMLSelectElementEvents_Value;
pub const HTMLSelectElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLOptionElement_Value = Guid.initString("3050f211-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOptionElement = &IID_IHTMLOptionElement_Value;
pub const IHTMLOptionElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selected: *const fn(
            self: *const IHTMLOptionElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selected: *const fn(
            self: *const IHTMLOptionElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLOptionElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLOptionElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultSelected: *const fn(
            self: *const IHTMLOptionElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultSelected: *const fn(
            self: *const IHTMLOptionElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_index: *const fn(
            self: *const IHTMLOptionElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_index: *const fn(
            self: *const IHTMLOptionElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IHTMLOptionElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IHTMLOptionElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLOptionElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_selected(self: *const IHTMLOptionElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_selected(self, v);
    }
    pub fn get_selected(self: *const IHTMLOptionElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_selected(self, p);
    }
    pub fn put_value(self: *const IHTMLOptionElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLOptionElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_defaultSelected(self: *const IHTMLOptionElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultSelected(self, v);
    }
    pub fn get_defaultSelected(self: *const IHTMLOptionElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultSelected(self, p);
    }
    pub fn put_index(self: *const IHTMLOptionElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_index(self, v);
    }
    pub fn get_index(self: *const IHTMLOptionElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_index(self, p);
    }
    pub fn put_text(self: *const IHTMLOptionElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_text(self, v);
    }
    pub fn get_text(self: *const IHTMLOptionElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_text(self, p);
    }
    pub fn get_form(self: *const IHTMLOptionElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
};

const IID_IHTMLSelectElementEx_Value = Guid.initString("3050f2d1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelectElementEx = &IID_IHTMLSelectElementEx_Value;
pub const IHTMLSelectElementEx = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowDropdown: *const fn(
            self: *const IHTMLSelectElementEx,
            fShow: BOOL,
        ) callconv(.winapi) HRESULT,
        SetSelectExFlags: *const fn(
            self: *const IHTMLSelectElementEx,
            lFlags: u32,
        ) callconv(.winapi) HRESULT,
        GetSelectExFlags: *const fn(
            self: *const IHTMLSelectElementEx,
            pFlags: ?*u32,
        ) callconv(.winapi) HRESULT,
        GetDropdownOpen: *const fn(
            self: *const IHTMLSelectElementEx,
            pfOpen: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ShowDropdown(self: *const IHTMLSelectElementEx, fShow: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.ShowDropdown(self, fShow);
    }
    pub fn SetSelectExFlags(self: *const IHTMLSelectElementEx, lFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SetSelectExFlags(self, lFlags);
    }
    pub fn GetSelectExFlags(self: *const IHTMLSelectElementEx, pFlags: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetSelectExFlags(self, pFlags);
    }
    pub fn GetDropdownOpen(self: *const IHTMLSelectElementEx, pfOpen: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.GetDropdownOpen(self, pfOpen);
    }
};

const IID_IHTMLSelectElement_Value = Guid.initString("3050f244-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelectElement = &IID_IHTMLSelectElement_Value;
pub const IHTMLSelectElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_size: *const fn(
            self: *const IHTMLSelectElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_size: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_multiple: *const fn(
            self: *const IHTMLSelectElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_multiple: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLSelectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_options: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLSelectElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectedIndex: *const fn(
            self: *const IHTMLSelectElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectedIndex: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLSelectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLSelectElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        add: *const fn(
            self: *const IHTMLSelectElement,
            element: ?*IHTMLElement,
            before: VARIANT,
        ) callconv(.winapi) HRESULT,
        remove: *const fn(
            self: *const IHTMLSelectElement,
            index: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_length: *const fn(
            self: *const IHTMLSelectElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLSelectElement,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLSelectElement,
            name: VARIANT,
            index: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        tags: *const fn(
            self: *const IHTMLSelectElement,
            tagName: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_size(self: *const IHTMLSelectElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_size(self, v);
    }
    pub fn get_size(self: *const IHTMLSelectElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_size(self, p);
    }
    pub fn put_multiple(self: *const IHTMLSelectElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_multiple(self, v);
    }
    pub fn get_multiple(self: *const IHTMLSelectElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_multiple(self, p);
    }
    pub fn put_name(self: *const IHTMLSelectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLSelectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn get_options(self: *const IHTMLSelectElement, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_options(self, p);
    }
    pub fn put_onchange(self: *const IHTMLSelectElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLSelectElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_selectedIndex(self: *const IHTMLSelectElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectedIndex(self, v);
    }
    pub fn get_selectedIndex(self: *const IHTMLSelectElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectedIndex(self, p);
    }
    pub fn get_type(self: *const IHTMLSelectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLSelectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLSelectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_disabled(self: *const IHTMLSelectElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLSelectElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_form(self: *const IHTMLSelectElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn add(self: *const IHTMLSelectElement, element: ?*IHTMLElement, before: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.add(self, element, before);
    }
    pub fn remove(self: *const IHTMLSelectElement, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.remove(self, index);
    }
    pub fn put_length(self: *const IHTMLSelectElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_length(self, v);
    }
    pub fn get_length(self: *const IHTMLSelectElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLSelectElement, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLSelectElement, name: VARIANT, index: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, name, index, pdisp);
    }
    pub fn tags(self: *const IHTMLSelectElement, tagName: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.tags(self, tagName, pdisp);
    }
};

const IID_IHTMLSelectElement2_Value = Guid.initString("3050f5ed-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelectElement2 = &IID_IHTMLSelectElement2_Value;
pub const IHTMLSelectElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        urns: *const fn(
            self: *const IHTMLSelectElement2,
            urn: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn urns(self: *const IHTMLSelectElement2, urn: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.urns(self, urn, pdisp);
    }
};

const IID_IHTMLSelectElement4_Value = Guid.initString("3050f838-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelectElement4 = &IID_IHTMLSelectElement4_Value;
pub const IHTMLSelectElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        namedItem: *const fn(
            self: *const IHTMLSelectElement4,
            name: ?BSTR,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn namedItem(self: *const IHTMLSelectElement4, name: ?BSTR, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.namedItem(self, name, pdisp);
    }
};

const IID_IHTMLSelectElement5_Value = Guid.initString("3051049d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelectElement5 = &IID_IHTMLSelectElement5_Value;
pub const IHTMLSelectElement5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        add: *const fn(
            self: *const IHTMLSelectElement5,
            pElem: ?*IHTMLOptionElement,
            pvarBefore: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn add(self: *const IHTMLSelectElement5, pElem: ?*IHTMLOptionElement, pvarBefore: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.add(self, pElem, pvarBefore);
    }
};

const IID_IHTMLSelectElement6_Value = Guid.initString("30510760-98b6-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelectElement6 = &IID_IHTMLSelectElement6_Value;
pub const IHTMLSelectElement6 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        add: *const fn(
            self: *const IHTMLSelectElement6,
            pElem: ?*IHTMLOptionElement,
            pvarBefore: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLSelectElement6,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLSelectElement6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn add(self: *const IHTMLSelectElement6, pElem: ?*IHTMLOptionElement, pvarBefore: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.add(self, pElem, pvarBefore);
    }
    pub fn put_value(self: *const IHTMLSelectElement6, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLSelectElement6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
};

const IID_DispHTMLSelectElement_Value = Guid.initString("3050f531-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLSelectElement = &IID_DispHTMLSelectElement_Value;
pub const DispHTMLSelectElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLWndSelectElement_Value = Guid.initString("3050f597-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLWndSelectElement = &IID_DispHTMLWndSelectElement_Value;
pub const DispHTMLWndSelectElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLSelectionObject_Value = Guid.initString("3050f25a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelectionObject = &IID_IHTMLSelectionObject_Value;
pub const IHTMLSelectionObject = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createRange: *const fn(
            self: *const IHTMLSelectionObject,
            range: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        empty: *const fn(
            self: *const IHTMLSelectionObject,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const IHTMLSelectionObject,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLSelectionObject,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createRange(self: *const IHTMLSelectionObject, range: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.createRange(self, range);
    }
    pub fn empty(self: *const IHTMLSelectionObject) callconv(.@"inline") HRESULT {
        return self.vtable.empty(self);
    }
    pub fn clear(self: *const IHTMLSelectionObject) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
    pub fn get_type(self: *const IHTMLSelectionObject, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
};

const IID_IHTMLSelectionObject2_Value = Guid.initString("3050f7ec-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelectionObject2 = &IID_IHTMLSelectionObject2_Value;
pub const IHTMLSelectionObject2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createRangeCollection: *const fn(
            self: *const IHTMLSelectionObject2,
            rangeCollection: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_typeDetail: *const fn(
            self: *const IHTMLSelectionObject2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createRangeCollection(self: *const IHTMLSelectionObject2, rangeCollection: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.createRangeCollection(self, rangeCollection);
    }
    pub fn get_typeDetail(self: *const IHTMLSelectionObject2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_typeDetail(self, p);
    }
};

const IID_IHTMLSelection_Value = Guid.initString("305104b6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSelection = &IID_IHTMLSelection_Value;
pub const IHTMLSelection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_anchorNode: *const fn(
            self: *const IHTMLSelection,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_anchorOffset: *const fn(
            self: *const IHTMLSelection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_focusNode: *const fn(
            self: *const IHTMLSelection,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_focusOffset: *const fn(
            self: *const IHTMLSelection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isCollapsed: *const fn(
            self: *const IHTMLSelection,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        collapse: *const fn(
            self: *const IHTMLSelection,
            parentNode: ?*IDispatch,
            offfset: i32,
        ) callconv(.winapi) HRESULT,
        collapseToStart: *const fn(
            self: *const IHTMLSelection,
        ) callconv(.winapi) HRESULT,
        collapseToEnd: *const fn(
            self: *const IHTMLSelection,
        ) callconv(.winapi) HRESULT,
        selectAllChildren: *const fn(
            self: *const IHTMLSelection,
            parentNode: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteFromDocument: *const fn(
            self: *const IHTMLSelection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rangeCount: *const fn(
            self: *const IHTMLSelection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        getRangeAt: *const fn(
            self: *const IHTMLSelection,
            index: i32,
            ppRange: ?*?*IHTMLDOMRange,
        ) callconv(.winapi) HRESULT,
        addRange: *const fn(
            self: *const IHTMLSelection,
            range: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        removeRange: *const fn(
            self: *const IHTMLSelection,
            range: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        removeAllRanges: *const fn(
            self: *const IHTMLSelection,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLSelection,
            pSelectionString: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_anchorNode(self: *const IHTMLSelection, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_anchorNode(self, p);
    }
    pub fn get_anchorOffset(self: *const IHTMLSelection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_anchorOffset(self, p);
    }
    pub fn get_focusNode(self: *const IHTMLSelection, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_focusNode(self, p);
    }
    pub fn get_focusOffset(self: *const IHTMLSelection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_focusOffset(self, p);
    }
    pub fn get_isCollapsed(self: *const IHTMLSelection, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isCollapsed(self, p);
    }
    pub fn collapse(self: *const IHTMLSelection, parentNode: ?*IDispatch, offfset: i32) callconv(.@"inline") HRESULT {
        return self.vtable.collapse(self, parentNode, offfset);
    }
    pub fn collapseToStart(self: *const IHTMLSelection) callconv(.@"inline") HRESULT {
        return self.vtable.collapseToStart(self);
    }
    pub fn collapseToEnd(self: *const IHTMLSelection) callconv(.@"inline") HRESULT {
        return self.vtable.collapseToEnd(self);
    }
    pub fn selectAllChildren(self: *const IHTMLSelection, parentNode: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.selectAllChildren(self, parentNode);
    }
    pub fn deleteFromDocument(self: *const IHTMLSelection) callconv(.@"inline") HRESULT {
        return self.vtable.deleteFromDocument(self);
    }
    pub fn get_rangeCount(self: *const IHTMLSelection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_rangeCount(self, p);
    }
    pub fn getRangeAt(self: *const IHTMLSelection, index: i32, ppRange: ?*?*IHTMLDOMRange) callconv(.@"inline") HRESULT {
        return self.vtable.getRangeAt(self, index, ppRange);
    }
    pub fn addRange(self: *const IHTMLSelection, range: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.addRange(self, range);
    }
    pub fn removeRange(self: *const IHTMLSelection, range: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.removeRange(self, range);
    }
    pub fn removeAllRanges(self: *const IHTMLSelection) callconv(.@"inline") HRESULT {
        return self.vtable.removeAllRanges(self);
    }
    pub fn toString(self: *const IHTMLSelection, pSelectionString: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, pSelectionString);
    }
};

const IID_IHTMLOptionElement3_Value = Guid.initString("3050f820-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOptionElement3 = &IID_IHTMLOptionElement3_Value;
pub const IHTMLOptionElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_label: *const fn(
            self: *const IHTMLOptionElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_label: *const fn(
            self: *const IHTMLOptionElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_label(self: *const IHTMLOptionElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_label(self, v);
    }
    pub fn get_label(self: *const IHTMLOptionElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_label(self, p);
    }
};

const IID_IHTMLOptionElement4_Value = Guid.initString("305107b4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOptionElement4 = &IID_IHTMLOptionElement4_Value;
pub const IHTMLOptionElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLOptionElement4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLOptionElement4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_value(self: *const IHTMLOptionElement4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLOptionElement4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
};

const IID_IHTMLOptionElementFactory_Value = Guid.initString("3050f38c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOptionElementFactory = &IID_IHTMLOptionElementFactory_Value;
pub const IHTMLOptionElementFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        create: *const fn(
            self: *const IHTMLOptionElementFactory,
            text: VARIANT,
            value: VARIANT,
            defaultselected: VARIANT,
            selected: VARIANT,
            __MIDL__IHTMLOptionElementFactory0000: ?*?*IHTMLOptionElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn create(self: *const IHTMLOptionElementFactory, text: VARIANT, value: VARIANT, defaultselected: VARIANT, selected: VARIANT, __MIDL__IHTMLOptionElementFactory0000: ?*?*IHTMLOptionElement) callconv(.@"inline") HRESULT {
        return self.vtable.create(self, text, value, defaultselected, selected, __MIDL__IHTMLOptionElementFactory0000);
    }
};

const IID_DispHTMLOptionElement_Value = Guid.initString("3050f52b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLOptionElement = &IID_DispHTMLOptionElement_Value;
pub const DispHTMLOptionElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLWndOptionElement_Value = Guid.initString("3050f598-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLWndOptionElement = &IID_DispHTMLWndOptionElement_Value;
pub const DispHTMLWndOptionElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLButtonElementEvents2_Value = Guid.initString("3050f617-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLButtonElementEvents2 = &IID_HTMLButtonElementEvents2_Value;
pub const HTMLButtonElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLButtonElementEvents_Value = Guid.initString("3050f2b3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLButtonElementEvents = &IID_HTMLButtonElementEvents_Value;
pub const HTMLButtonElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLInputTextElementEvents2_Value = Guid.initString("3050f618-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLInputTextElementEvents2 = &IID_HTMLInputTextElementEvents2_Value;
pub const HTMLInputTextElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLOptionButtonElementEvents2_Value = Guid.initString("3050f619-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLOptionButtonElementEvents2 = &IID_HTMLOptionButtonElementEvents2_Value;
pub const HTMLOptionButtonElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLInputFileElementEvents2_Value = Guid.initString("3050f61a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLInputFileElementEvents2 = &IID_HTMLInputFileElementEvents2_Value;
pub const HTMLInputFileElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLInputImageEvents2_Value = Guid.initString("3050f61b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLInputImageEvents2 = &IID_HTMLInputImageEvents2_Value;
pub const HTMLInputImageEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLInputTextElementEvents_Value = Guid.initString("3050f2a7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLInputTextElementEvents = &IID_HTMLInputTextElementEvents_Value;
pub const HTMLInputTextElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLOptionButtonElementEvents_Value = Guid.initString("3050f2bd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLOptionButtonElementEvents = &IID_HTMLOptionButtonElementEvents_Value;
pub const HTMLOptionButtonElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLInputFileElementEvents_Value = Guid.initString("3050f2af-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLInputFileElementEvents = &IID_HTMLInputFileElementEvents_Value;
pub const HTMLInputFileElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLInputImageEvents_Value = Guid.initString("3050f2c3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLInputImageEvents = &IID_HTMLInputImageEvents_Value;
pub const HTMLInputImageEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLInputElement_Value = Guid.initString("3050f5d2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputElement = &IID_IHTMLInputElement_Value;
pub const IHTMLInputElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLInputElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLInputElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_size: *const fn(
            self: *const IHTMLInputElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_size: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxLength: *const fn(
            self: *const IHTMLInputElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxLength: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        select: *const fn(
            self: *const IHTMLInputElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLInputElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLInputElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselect: *const fn(
            self: *const IHTMLInputElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselect: *const fn(
            self: *const IHTMLInputElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultValue: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultValue: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_readOnly: *const fn(
            self: *const IHTMLInputElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readOnly: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        createTextRange: *const fn(
            self: *const IHTMLInputElement,
            range: ?*?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_indeterminate: *const fn(
            self: *const IHTMLInputElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_indeterminate: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultChecked: *const fn(
            self: *const IHTMLInputElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultChecked: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_checked: *const fn(
            self: *const IHTMLInputElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_checked: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLInputElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLInputElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vspace: *const fn(
            self: *const IHTMLInputElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vspace: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hspace: *const fn(
            self: *const IHTMLInputElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hspace: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alt: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alt: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lowsrc: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lowsrc: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vrml: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vrml: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dynsrc: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dynsrc: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_complete: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_loop: *const fn(
            self: *const IHTMLInputElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loop: *const fn(
            self: *const IHTMLInputElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLInputElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLInputElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLInputElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLInputElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onabort: *const fn(
            self: *const IHTMLInputElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onabort: *const fn(
            self: *const IHTMLInputElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLInputElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLInputElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLInputElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_start: *const fn(
            self: *const IHTMLInputElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_start: *const fn(
            self: *const IHTMLInputElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_type(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_name(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_status(self: *const IHTMLInputElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLInputElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_disabled(self: *const IHTMLInputElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLInputElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_form(self: *const IHTMLInputElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn put_size(self: *const IHTMLInputElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_size(self, v);
    }
    pub fn get_size(self: *const IHTMLInputElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_size(self, p);
    }
    pub fn put_maxLength(self: *const IHTMLInputElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxLength(self, v);
    }
    pub fn get_maxLength(self: *const IHTMLInputElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxLength(self, p);
    }
    pub fn select(self: *const IHTMLInputElement) callconv(.@"inline") HRESULT {
        return self.vtable.select(self);
    }
    pub fn put_onchange(self: *const IHTMLInputElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLInputElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_onselect(self: *const IHTMLInputElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselect(self, v);
    }
    pub fn get_onselect(self: *const IHTMLInputElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselect(self, p);
    }
    pub fn put_defaultValue(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultValue(self, v);
    }
    pub fn get_defaultValue(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultValue(self, p);
    }
    pub fn put_readOnly(self: *const IHTMLInputElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_readOnly(self, v);
    }
    pub fn get_readOnly(self: *const IHTMLInputElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_readOnly(self, p);
    }
    pub fn createTextRange(self: *const IHTMLInputElement, range: ?*?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.createTextRange(self, range);
    }
    pub fn put_indeterminate(self: *const IHTMLInputElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_indeterminate(self, v);
    }
    pub fn get_indeterminate(self: *const IHTMLInputElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_indeterminate(self, p);
    }
    pub fn put_defaultChecked(self: *const IHTMLInputElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultChecked(self, v);
    }
    pub fn get_defaultChecked(self: *const IHTMLInputElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultChecked(self, p);
    }
    pub fn put_checked(self: *const IHTMLInputElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_checked(self, v);
    }
    pub fn get_checked(self: *const IHTMLInputElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_checked(self, p);
    }
    pub fn put_border(self: *const IHTMLInputElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLInputElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_vspace(self: *const IHTMLInputElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_vspace(self, v);
    }
    pub fn get_vspace(self: *const IHTMLInputElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_vspace(self, p);
    }
    pub fn put_hspace(self: *const IHTMLInputElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_hspace(self, v);
    }
    pub fn get_hspace(self: *const IHTMLInputElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_hspace(self, p);
    }
    pub fn put_alt(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alt(self, v);
    }
    pub fn get_alt(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alt(self, p);
    }
    pub fn put_src(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_lowsrc(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lowsrc(self, v);
    }
    pub fn get_lowsrc(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lowsrc(self, p);
    }
    pub fn put_vrml(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vrml(self, v);
    }
    pub fn get_vrml(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vrml(self, p);
    }
    pub fn put_dynsrc(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dynsrc(self, v);
    }
    pub fn get_dynsrc(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dynsrc(self, p);
    }
    pub fn get_readyState(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn get_complete(self: *const IHTMLInputElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_complete(self, p);
    }
    pub fn put_loop(self: *const IHTMLInputElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_loop(self, v);
    }
    pub fn get_loop(self: *const IHTMLInputElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_loop(self, p);
    }
    pub fn put_align(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_onload(self: *const IHTMLInputElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLInputElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onerror(self: *const IHTMLInputElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLInputElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_onabort(self: *const IHTMLInputElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onabort(self, v);
    }
    pub fn get_onabort(self: *const IHTMLInputElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onabort(self, p);
    }
    pub fn put_width(self: *const IHTMLInputElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLInputElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLInputElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLInputElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_start(self: *const IHTMLInputElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_start(self, v);
    }
    pub fn get_start(self: *const IHTMLInputElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_start(self, p);
    }
};

const IID_IHTMLInputElement2_Value = Guid.initString("3050f821-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputElement2 = &IID_IHTMLInputElement2_Value;
pub const IHTMLInputElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_accept: *const fn(
            self: *const IHTMLInputElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accept: *const fn(
            self: *const IHTMLInputElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_useMap: *const fn(
            self: *const IHTMLInputElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_useMap: *const fn(
            self: *const IHTMLInputElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_accept(self: *const IHTMLInputElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_accept(self, v);
    }
    pub fn get_accept(self: *const IHTMLInputElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_accept(self, p);
    }
    pub fn put_useMap(self: *const IHTMLInputElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_useMap(self, v);
    }
    pub fn get_useMap(self: *const IHTMLInputElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_useMap(self, p);
    }
};

const IID_IHTMLInputElement3_Value = Guid.initString("30510435-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputElement3 = &IID_IHTMLInputElement3_Value;
pub const IHTMLInputElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLInputElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLInputElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lowsrc: *const fn(
            self: *const IHTMLInputElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lowsrc: *const fn(
            self: *const IHTMLInputElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vrml: *const fn(
            self: *const IHTMLInputElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vrml: *const fn(
            self: *const IHTMLInputElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dynsrc: *const fn(
            self: *const IHTMLInputElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dynsrc: *const fn(
            self: *const IHTMLInputElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_src(self: *const IHTMLInputElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLInputElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_lowsrc(self: *const IHTMLInputElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lowsrc(self, v);
    }
    pub fn get_lowsrc(self: *const IHTMLInputElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lowsrc(self, p);
    }
    pub fn put_vrml(self: *const IHTMLInputElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vrml(self, v);
    }
    pub fn get_vrml(self: *const IHTMLInputElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vrml(self, p);
    }
    pub fn put_dynsrc(self: *const IHTMLInputElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dynsrc(self, v);
    }
    pub fn get_dynsrc(self: *const IHTMLInputElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dynsrc(self, p);
    }
};

const IID_IHTMLInputButtonElement_Value = Guid.initString("3050f2b2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputButtonElement = &IID_IHTMLInputButtonElement_Value;
pub const IHTMLInputButtonElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLInputButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLInputButtonElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLInputButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLInputButtonElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLInputButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLInputButtonElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLInputButtonElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLInputButtonElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLInputButtonElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLInputButtonElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        createTextRange: *const fn(
            self: *const IHTMLInputButtonElement,
            range: ?*?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLInputButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLInputButtonElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLInputButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_name(self: *const IHTMLInputButtonElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLInputButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_status(self: *const IHTMLInputButtonElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLInputButtonElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_disabled(self: *const IHTMLInputButtonElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLInputButtonElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_form(self: *const IHTMLInputButtonElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn createTextRange(self: *const IHTMLInputButtonElement, range: ?*?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.createTextRange(self, range);
    }
};

const IID_IHTMLInputHiddenElement_Value = Guid.initString("3050f2a4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputHiddenElement = &IID_IHTMLInputHiddenElement_Value;
pub const IHTMLInputHiddenElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLInputHiddenElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLInputHiddenElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLInputHiddenElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLInputHiddenElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLInputHiddenElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLInputHiddenElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLInputHiddenElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLInputHiddenElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLInputHiddenElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLInputHiddenElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        createTextRange: *const fn(
            self: *const IHTMLInputHiddenElement,
            range: ?*?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLInputHiddenElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLInputHiddenElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLInputHiddenElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_name(self: *const IHTMLInputHiddenElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLInputHiddenElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_status(self: *const IHTMLInputHiddenElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLInputHiddenElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_disabled(self: *const IHTMLInputHiddenElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLInputHiddenElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_form(self: *const IHTMLInputHiddenElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn createTextRange(self: *const IHTMLInputHiddenElement, range: ?*?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.createTextRange(self, range);
    }
};

const IID_IHTMLInputTextElement_Value = Guid.initString("3050f2a6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputTextElement = &IID_IHTMLInputTextElement_Value;
pub const IHTMLInputTextElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLInputTextElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLInputTextElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLInputTextElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLInputTextElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultValue: *const fn(
            self: *const IHTMLInputTextElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultValue: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_size: *const fn(
            self: *const IHTMLInputTextElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_size: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxLength: *const fn(
            self: *const IHTMLInputTextElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxLength: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        select: *const fn(
            self: *const IHTMLInputTextElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLInputTextElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselect: *const fn(
            self: *const IHTMLInputTextElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselect: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_readOnly: *const fn(
            self: *const IHTMLInputTextElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readOnly: *const fn(
            self: *const IHTMLInputTextElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        createTextRange: *const fn(
            self: *const IHTMLInputTextElement,
            range: ?*?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLInputTextElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLInputTextElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLInputTextElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_name(self: *const IHTMLInputTextElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLInputTextElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_status(self: *const IHTMLInputTextElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLInputTextElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_disabled(self: *const IHTMLInputTextElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLInputTextElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_form(self: *const IHTMLInputTextElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn put_defaultValue(self: *const IHTMLInputTextElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultValue(self, v);
    }
    pub fn get_defaultValue(self: *const IHTMLInputTextElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultValue(self, p);
    }
    pub fn put_size(self: *const IHTMLInputTextElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_size(self, v);
    }
    pub fn get_size(self: *const IHTMLInputTextElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_size(self, p);
    }
    pub fn put_maxLength(self: *const IHTMLInputTextElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxLength(self, v);
    }
    pub fn get_maxLength(self: *const IHTMLInputTextElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxLength(self, p);
    }
    pub fn select(self: *const IHTMLInputTextElement) callconv(.@"inline") HRESULT {
        return self.vtable.select(self);
    }
    pub fn put_onchange(self: *const IHTMLInputTextElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLInputTextElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_onselect(self: *const IHTMLInputTextElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselect(self, v);
    }
    pub fn get_onselect(self: *const IHTMLInputTextElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselect(self, p);
    }
    pub fn put_readOnly(self: *const IHTMLInputTextElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_readOnly(self, v);
    }
    pub fn get_readOnly(self: *const IHTMLInputTextElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_readOnly(self, p);
    }
    pub fn createTextRange(self: *const IHTMLInputTextElement, range: ?*?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.createTextRange(self, range);
    }
};

const IID_IHTMLInputTextElement2_Value = Guid.initString("3050f2d2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputTextElement2 = &IID_IHTMLInputTextElement2_Value;
pub const IHTMLInputTextElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectionStart: *const fn(
            self: *const IHTMLInputTextElement2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectionStart: *const fn(
            self: *const IHTMLInputTextElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectionEnd: *const fn(
            self: *const IHTMLInputTextElement2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectionEnd: *const fn(
            self: *const IHTMLInputTextElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        setSelectionRange: *const fn(
            self: *const IHTMLInputTextElement2,
            start: i32,
            end: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_selectionStart(self: *const IHTMLInputTextElement2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectionStart(self, v);
    }
    pub fn get_selectionStart(self: *const IHTMLInputTextElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectionStart(self, p);
    }
    pub fn put_selectionEnd(self: *const IHTMLInputTextElement2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectionEnd(self, v);
    }
    pub fn get_selectionEnd(self: *const IHTMLInputTextElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectionEnd(self, p);
    }
    pub fn setSelectionRange(self: *const IHTMLInputTextElement2, start: i32, end: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setSelectionRange(self, start, end);
    }
};

const IID_IHTMLInputFileElement_Value = Guid.initString("3050f2ad-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputFileElement = &IID_IHTMLInputFileElement_Value;
pub const IHTMLInputFileElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLInputFileElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLInputFileElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLInputFileElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_size: *const fn(
            self: *const IHTMLInputFileElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_size: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxLength: *const fn(
            self: *const IHTMLInputFileElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxLength: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        select: *const fn(
            self: *const IHTMLInputFileElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLInputFileElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselect: *const fn(
            self: *const IHTMLInputFileElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselect: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLInputFileElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLInputFileElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLInputFileElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_name(self: *const IHTMLInputFileElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLInputFileElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_status(self: *const IHTMLInputFileElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLInputFileElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_disabled(self: *const IHTMLInputFileElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLInputFileElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_form(self: *const IHTMLInputFileElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn put_size(self: *const IHTMLInputFileElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_size(self, v);
    }
    pub fn get_size(self: *const IHTMLInputFileElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_size(self, p);
    }
    pub fn put_maxLength(self: *const IHTMLInputFileElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_maxLength(self, v);
    }
    pub fn get_maxLength(self: *const IHTMLInputFileElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxLength(self, p);
    }
    pub fn select(self: *const IHTMLInputFileElement) callconv(.@"inline") HRESULT {
        return self.vtable.select(self);
    }
    pub fn put_onchange(self: *const IHTMLInputFileElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLInputFileElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_onselect(self: *const IHTMLInputFileElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselect(self, v);
    }
    pub fn get_onselect(self: *const IHTMLInputFileElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselect(self, p);
    }
    pub fn put_value(self: *const IHTMLInputFileElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLInputFileElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
};

const IID_IHTMLOptionButtonElement_Value = Guid.initString("3050f2bc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOptionButtonElement = &IID_IHTMLOptionButtonElement_Value;
pub const IHTMLOptionButtonElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLOptionButtonElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLOptionButtonElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_checked: *const fn(
            self: *const IHTMLOptionButtonElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_checked: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultChecked: *const fn(
            self: *const IHTMLOptionButtonElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultChecked: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLOptionButtonElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLOptionButtonElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLOptionButtonElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_indeterminate: *const fn(
            self: *const IHTMLOptionButtonElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_indeterminate: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLOptionButtonElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_value(self: *const IHTMLOptionButtonElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLOptionButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn get_type(self: *const IHTMLOptionButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_name(self: *const IHTMLOptionButtonElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLOptionButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_checked(self: *const IHTMLOptionButtonElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_checked(self, v);
    }
    pub fn get_checked(self: *const IHTMLOptionButtonElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_checked(self, p);
    }
    pub fn put_defaultChecked(self: *const IHTMLOptionButtonElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultChecked(self, v);
    }
    pub fn get_defaultChecked(self: *const IHTMLOptionButtonElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultChecked(self, p);
    }
    pub fn put_onchange(self: *const IHTMLOptionButtonElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLOptionButtonElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_disabled(self: *const IHTMLOptionButtonElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLOptionButtonElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn put_status(self: *const IHTMLOptionButtonElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLOptionButtonElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_indeterminate(self: *const IHTMLOptionButtonElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_indeterminate(self, v);
    }
    pub fn get_indeterminate(self: *const IHTMLOptionButtonElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_indeterminate(self, p);
    }
    pub fn get_form(self: *const IHTMLOptionButtonElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
};

const IID_IHTMLInputImage_Value = Guid.initString("3050f2c2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputImage = &IID_IHTMLInputImage_Value;
pub const IHTMLInputImage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLInputImage,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLInputImage,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLInputImage,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLInputImage,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vspace: *const fn(
            self: *const IHTMLInputImage,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vspace: *const fn(
            self: *const IHTMLInputImage,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hspace: *const fn(
            self: *const IHTMLInputImage,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hspace: *const fn(
            self: *const IHTMLInputImage,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alt: *const fn(
            self: *const IHTMLInputImage,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alt: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLInputImage,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lowsrc: *const fn(
            self: *const IHTMLInputImage,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lowsrc: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vrml: *const fn(
            self: *const IHTMLInputImage,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vrml: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dynsrc: *const fn(
            self: *const IHTMLInputImage,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dynsrc: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_complete: *const fn(
            self: *const IHTMLInputImage,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_loop: *const fn(
            self: *const IHTMLInputImage,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loop: *const fn(
            self: *const IHTMLInputImage,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLInputImage,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLInputImage,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLInputImage,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLInputImage,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLInputImage,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onabort: *const fn(
            self: *const IHTMLInputImage,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onabort: *const fn(
            self: *const IHTMLInputImage,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLInputImage,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLInputImage,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLInputImage,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLInputImage,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLInputImage,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_start: *const fn(
            self: *const IHTMLInputImage,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_start: *const fn(
            self: *const IHTMLInputImage,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_disabled(self: *const IHTMLInputImage, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLInputImage, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn put_border(self: *const IHTMLInputImage, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLInputImage, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_vspace(self: *const IHTMLInputImage, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_vspace(self, v);
    }
    pub fn get_vspace(self: *const IHTMLInputImage, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_vspace(self, p);
    }
    pub fn put_hspace(self: *const IHTMLInputImage, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_hspace(self, v);
    }
    pub fn get_hspace(self: *const IHTMLInputImage, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_hspace(self, p);
    }
    pub fn put_alt(self: *const IHTMLInputImage, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alt(self, v);
    }
    pub fn get_alt(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alt(self, p);
    }
    pub fn put_src(self: *const IHTMLInputImage, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_lowsrc(self: *const IHTMLInputImage, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lowsrc(self, v);
    }
    pub fn get_lowsrc(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lowsrc(self, p);
    }
    pub fn put_vrml(self: *const IHTMLInputImage, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vrml(self, v);
    }
    pub fn get_vrml(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vrml(self, p);
    }
    pub fn put_dynsrc(self: *const IHTMLInputImage, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dynsrc(self, v);
    }
    pub fn get_dynsrc(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dynsrc(self, p);
    }
    pub fn get_readyState(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn get_complete(self: *const IHTMLInputImage, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_complete(self, p);
    }
    pub fn put_loop(self: *const IHTMLInputImage, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_loop(self, v);
    }
    pub fn get_loop(self: *const IHTMLInputImage, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_loop(self, p);
    }
    pub fn put_align(self: *const IHTMLInputImage, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_onload(self: *const IHTMLInputImage, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLInputImage, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onerror(self: *const IHTMLInputImage, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLInputImage, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_onabort(self: *const IHTMLInputImage, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onabort(self, v);
    }
    pub fn get_onabort(self: *const IHTMLInputImage, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onabort(self, p);
    }
    pub fn put_name(self: *const IHTMLInputImage, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_width(self: *const IHTMLInputImage, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLInputImage, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLInputImage, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLInputImage, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_start(self: *const IHTMLInputImage, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_start(self, v);
    }
    pub fn get_start(self: *const IHTMLInputImage, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_start(self, p);
    }
};

const IID_IHTMLInputRangeElement_Value = Guid.initString("3050f2d4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLInputRangeElement = &IID_IHTMLInputRangeElement_Value;
pub const IHTMLInputRangeElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLInputRangeElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alt: *const fn(
            self: *const IHTMLInputRangeElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alt: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLInputRangeElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLInputRangeElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_min: *const fn(
            self: *const IHTMLInputRangeElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_min: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_max: *const fn(
            self: *const IHTMLInputRangeElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_max: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_step: *const fn(
            self: *const IHTMLInputRangeElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_step: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_valueAsNumber: *const fn(
            self: *const IHTMLInputRangeElement,
            v: f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_valueAsNumber: *const fn(
            self: *const IHTMLInputRangeElement,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        stepUp: *const fn(
            self: *const IHTMLInputRangeElement,
            n: i32,
        ) callconv(.winapi) HRESULT,
        stepDown: *const fn(
            self: *const IHTMLInputRangeElement,
            n: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_disabled(self: *const IHTMLInputRangeElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLInputRangeElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_type(self: *const IHTMLInputRangeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_alt(self: *const IHTMLInputRangeElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alt(self, v);
    }
    pub fn get_alt(self: *const IHTMLInputRangeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alt(self, p);
    }
    pub fn put_name(self: *const IHTMLInputRangeElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLInputRangeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_value(self: *const IHTMLInputRangeElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLInputRangeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_min(self: *const IHTMLInputRangeElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_min(self, v);
    }
    pub fn get_min(self: *const IHTMLInputRangeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_min(self, p);
    }
    pub fn put_max(self: *const IHTMLInputRangeElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_max(self, v);
    }
    pub fn get_max(self: *const IHTMLInputRangeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_max(self, p);
    }
    pub fn put_step(self: *const IHTMLInputRangeElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_step(self, v);
    }
    pub fn get_step(self: *const IHTMLInputRangeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_step(self, p);
    }
    pub fn put_valueAsNumber(self: *const IHTMLInputRangeElement, v: f64) callconv(.@"inline") HRESULT {
        return self.vtable.put_valueAsNumber(self, v);
    }
    pub fn get_valueAsNumber(self: *const IHTMLInputRangeElement, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_valueAsNumber(self, p);
    }
    pub fn stepUp(self: *const IHTMLInputRangeElement, n: i32) callconv(.@"inline") HRESULT {
        return self.vtable.stepUp(self, n);
    }
    pub fn stepDown(self: *const IHTMLInputRangeElement, n: i32) callconv(.@"inline") HRESULT {
        return self.vtable.stepDown(self, n);
    }
};

const IID_DispHTMLInputElement_Value = Guid.initString("3050f57d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLInputElement = &IID_DispHTMLInputElement_Value;
pub const DispHTMLInputElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLTextAreaElement_Value = Guid.initString("3050f2aa-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTextAreaElement = &IID_IHTMLTextAreaElement_Value;
pub const IHTMLTextAreaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLTextAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLTextAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLTextAreaElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLTextAreaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultValue: *const fn(
            self: *const IHTMLTextAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultValue: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        select: *const fn(
            self: *const IHTMLTextAreaElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLTextAreaElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselect: *const fn(
            self: *const IHTMLTextAreaElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselect: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_readOnly: *const fn(
            self: *const IHTMLTextAreaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readOnly: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rows: *const fn(
            self: *const IHTMLTextAreaElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rows: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cols: *const fn(
            self: *const IHTMLTextAreaElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cols: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_wrap: *const fn(
            self: *const IHTMLTextAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wrap: *const fn(
            self: *const IHTMLTextAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        createTextRange: *const fn(
            self: *const IHTMLTextAreaElement,
            range: ?*?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLTextAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLTextAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLTextAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_name(self: *const IHTMLTextAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLTextAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_status(self: *const IHTMLTextAreaElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLTextAreaElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_disabled(self: *const IHTMLTextAreaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLTextAreaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_form(self: *const IHTMLTextAreaElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn put_defaultValue(self: *const IHTMLTextAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultValue(self, v);
    }
    pub fn get_defaultValue(self: *const IHTMLTextAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultValue(self, p);
    }
    pub fn select(self: *const IHTMLTextAreaElement) callconv(.@"inline") HRESULT {
        return self.vtable.select(self);
    }
    pub fn put_onchange(self: *const IHTMLTextAreaElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLTextAreaElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_onselect(self: *const IHTMLTextAreaElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselect(self, v);
    }
    pub fn get_onselect(self: *const IHTMLTextAreaElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselect(self, p);
    }
    pub fn put_readOnly(self: *const IHTMLTextAreaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_readOnly(self, v);
    }
    pub fn get_readOnly(self: *const IHTMLTextAreaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_readOnly(self, p);
    }
    pub fn put_rows(self: *const IHTMLTextAreaElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_rows(self, v);
    }
    pub fn get_rows(self: *const IHTMLTextAreaElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_rows(self, p);
    }
    pub fn put_cols(self: *const IHTMLTextAreaElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_cols(self, v);
    }
    pub fn get_cols(self: *const IHTMLTextAreaElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_cols(self, p);
    }
    pub fn put_wrap(self: *const IHTMLTextAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_wrap(self, v);
    }
    pub fn get_wrap(self: *const IHTMLTextAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_wrap(self, p);
    }
    pub fn createTextRange(self: *const IHTMLTextAreaElement, range: ?*?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.createTextRange(self, range);
    }
};

const IID_IHTMLTextAreaElement2_Value = Guid.initString("3050f2d3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTextAreaElement2 = &IID_IHTMLTextAreaElement2_Value;
pub const IHTMLTextAreaElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectionStart: *const fn(
            self: *const IHTMLTextAreaElement2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectionStart: *const fn(
            self: *const IHTMLTextAreaElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectionEnd: *const fn(
            self: *const IHTMLTextAreaElement2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectionEnd: *const fn(
            self: *const IHTMLTextAreaElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        setSelectionRange: *const fn(
            self: *const IHTMLTextAreaElement2,
            start: i32,
            end: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_selectionStart(self: *const IHTMLTextAreaElement2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectionStart(self, v);
    }
    pub fn get_selectionStart(self: *const IHTMLTextAreaElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectionStart(self, p);
    }
    pub fn put_selectionEnd(self: *const IHTMLTextAreaElement2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectionEnd(self, v);
    }
    pub fn get_selectionEnd(self: *const IHTMLTextAreaElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectionEnd(self, p);
    }
    pub fn setSelectionRange(self: *const IHTMLTextAreaElement2, start: i32, end: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setSelectionRange(self, start, end);
    }
};

const IID_DispHTMLTextAreaElement_Value = Guid.initString("3050f521-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTextAreaElement = &IID_DispHTMLTextAreaElement_Value;
pub const DispHTMLTextAreaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLRichtextElement_Value = Guid.initString("3050f54d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLRichtextElement = &IID_DispHTMLRichtextElement_Value;
pub const DispHTMLRichtextElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLButtonElement_Value = Guid.initString("3050f2bb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLButtonElement = &IID_IHTMLButtonElement_Value;
pub const IHTMLButtonElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLButtonElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLButtonElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLButtonElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLButtonElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLButtonElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLButtonElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLButtonElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLButtonElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        createTextRange: *const fn(
            self: *const IHTMLButtonElement,
            range: ?*?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLButtonElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_name(self: *const IHTMLButtonElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLButtonElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_status(self: *const IHTMLButtonElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLButtonElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_disabled(self: *const IHTMLButtonElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLButtonElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn get_form(self: *const IHTMLButtonElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn createTextRange(self: *const IHTMLButtonElement, range: ?*?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.createTextRange(self, range);
    }
};

const IID_IHTMLButtonElement2_Value = Guid.initString("305106f3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLButtonElement2 = &IID_IHTMLButtonElement2_Value;
pub const IHTMLButtonElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLButtonElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLButtonElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_type(self: *const IHTMLButtonElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLButtonElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
};

const IID_DispHTMLButtonElement_Value = Guid.initString("3050f51f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLButtonElement = &IID_DispHTMLButtonElement_Value;
pub const DispHTMLButtonElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLMarqueeElementEvents2_Value = Guid.initString("3050f61f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLMarqueeElementEvents2 = &IID_HTMLMarqueeElementEvents2_Value;
pub const HTMLMarqueeElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLMarqueeElementEvents_Value = Guid.initString("3050f2b8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLMarqueeElementEvents = &IID_HTMLMarqueeElementEvents_Value;
pub const HTMLMarqueeElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLMarqueeElement_Value = Guid.initString("3050f2b5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMarqueeElement = &IID_IHTMLMarqueeElement_Value;
pub const IHTMLMarqueeElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bgColor: *const fn(
            self: *const IHTMLMarqueeElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bgColor: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollDelay: *const fn(
            self: *const IHTMLMarqueeElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollDelay: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_direction: *const fn(
            self: *const IHTMLMarqueeElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_direction: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_behavior: *const fn(
            self: *const IHTMLMarqueeElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_behavior: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollAmount: *const fn(
            self: *const IHTMLMarqueeElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollAmount: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_loop: *const fn(
            self: *const IHTMLMarqueeElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loop: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vspace: *const fn(
            self: *const IHTMLMarqueeElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vspace: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hspace: *const fn(
            self: *const IHTMLMarqueeElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hspace: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfinish: *const fn(
            self: *const IHTMLMarqueeElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfinish: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstart: *const fn(
            self: *const IHTMLMarqueeElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstart: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbounce: *const fn(
            self: *const IHTMLMarqueeElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbounce: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLMarqueeElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLMarqueeElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_trueSpeed: *const fn(
            self: *const IHTMLMarqueeElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_trueSpeed: *const fn(
            self: *const IHTMLMarqueeElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        start: *const fn(
            self: *const IHTMLMarqueeElement,
        ) callconv(.winapi) HRESULT,
        stop: *const fn(
            self: *const IHTMLMarqueeElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_bgColor(self: *const IHTMLMarqueeElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bgColor(self, v);
    }
    pub fn get_bgColor(self: *const IHTMLMarqueeElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bgColor(self, p);
    }
    pub fn put_scrollDelay(self: *const IHTMLMarqueeElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollDelay(self, v);
    }
    pub fn get_scrollDelay(self: *const IHTMLMarqueeElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollDelay(self, p);
    }
    pub fn put_direction(self: *const IHTMLMarqueeElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_direction(self, v);
    }
    pub fn get_direction(self: *const IHTMLMarqueeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_direction(self, p);
    }
    pub fn put_behavior(self: *const IHTMLMarqueeElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_behavior(self, v);
    }
    pub fn get_behavior(self: *const IHTMLMarqueeElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_behavior(self, p);
    }
    pub fn put_scrollAmount(self: *const IHTMLMarqueeElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollAmount(self, v);
    }
    pub fn get_scrollAmount(self: *const IHTMLMarqueeElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollAmount(self, p);
    }
    pub fn put_loop(self: *const IHTMLMarqueeElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_loop(self, v);
    }
    pub fn get_loop(self: *const IHTMLMarqueeElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_loop(self, p);
    }
    pub fn put_vspace(self: *const IHTMLMarqueeElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_vspace(self, v);
    }
    pub fn get_vspace(self: *const IHTMLMarqueeElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_vspace(self, p);
    }
    pub fn put_hspace(self: *const IHTMLMarqueeElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_hspace(self, v);
    }
    pub fn get_hspace(self: *const IHTMLMarqueeElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_hspace(self, p);
    }
    pub fn put_onfinish(self: *const IHTMLMarqueeElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfinish(self, v);
    }
    pub fn get_onfinish(self: *const IHTMLMarqueeElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfinish(self, p);
    }
    pub fn put_onstart(self: *const IHTMLMarqueeElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstart(self, v);
    }
    pub fn get_onstart(self: *const IHTMLMarqueeElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstart(self, p);
    }
    pub fn put_onbounce(self: *const IHTMLMarqueeElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbounce(self, v);
    }
    pub fn get_onbounce(self: *const IHTMLMarqueeElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbounce(self, p);
    }
    pub fn put_width(self: *const IHTMLMarqueeElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLMarqueeElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLMarqueeElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLMarqueeElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_trueSpeed(self: *const IHTMLMarqueeElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_trueSpeed(self, v);
    }
    pub fn get_trueSpeed(self: *const IHTMLMarqueeElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_trueSpeed(self, p);
    }
    pub fn start(self: *const IHTMLMarqueeElement) callconv(.@"inline") HRESULT {
        return self.vtable.start(self);
    }
    pub fn stop(self: *const IHTMLMarqueeElement) callconv(.@"inline") HRESULT {
        return self.vtable.stop(self);
    }
};

const IID_DispHTMLMarqueeElement_Value = Guid.initString("3050f527-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLMarqueeElement = &IID_DispHTMLMarqueeElement_Value;
pub const DispHTMLMarqueeElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLHtmlElement_Value = Guid.initString("3050f81c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLHtmlElement = &IID_IHTMLHtmlElement_Value;
pub const IHTMLHtmlElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_version: *const fn(
            self: *const IHTMLHtmlElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn(
            self: *const IHTMLHtmlElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_version(self: *const IHTMLHtmlElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_version(self, v);
    }
    pub fn get_version(self: *const IHTMLHtmlElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_version(self, p);
    }
};

const IID_IHTMLHeadElement_Value = Guid.initString("3050f81d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLHeadElement = &IID_IHTMLHeadElement_Value;
pub const IHTMLHeadElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_profile: *const fn(
            self: *const IHTMLHeadElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_profile: *const fn(
            self: *const IHTMLHeadElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_profile(self: *const IHTMLHeadElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_profile(self, v);
    }
    pub fn get_profile(self: *const IHTMLHeadElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_profile(self, p);
    }
};

const IID_IHTMLHeadElement2_Value = Guid.initString("3051042f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLHeadElement2 = &IID_IHTMLHeadElement2_Value;
pub const IHTMLHeadElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_profile: *const fn(
            self: *const IHTMLHeadElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_profile: *const fn(
            self: *const IHTMLHeadElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_profile(self: *const IHTMLHeadElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_profile(self, v);
    }
    pub fn get_profile(self: *const IHTMLHeadElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_profile(self, p);
    }
};

const IID_IHTMLTitleElement_Value = Guid.initString("3050f322-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTitleElement = &IID_IHTMLTitleElement_Value;
pub const IHTMLTitleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IHTMLTitleElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IHTMLTitleElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_text(self: *const IHTMLTitleElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_text(self, v);
    }
    pub fn get_text(self: *const IHTMLTitleElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_text(self, p);
    }
};

const IID_IHTMLMetaElement_Value = Guid.initString("3050f203-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMetaElement = &IID_IHTMLMetaElement_Value;
pub const IHTMLMetaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_httpEquiv: *const fn(
            self: *const IHTMLMetaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_httpEquiv: *const fn(
            self: *const IHTMLMetaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_content: *const fn(
            self: *const IHTMLMetaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_content: *const fn(
            self: *const IHTMLMetaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLMetaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLMetaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_url: *const fn(
            self: *const IHTMLMetaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_url: *const fn(
            self: *const IHTMLMetaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn(
            self: *const IHTMLMetaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn(
            self: *const IHTMLMetaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_httpEquiv(self: *const IHTMLMetaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_httpEquiv(self, v);
    }
    pub fn get_httpEquiv(self: *const IHTMLMetaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_httpEquiv(self, p);
    }
    pub fn put_content(self: *const IHTMLMetaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_content(self, v);
    }
    pub fn get_content(self: *const IHTMLMetaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_content(self, p);
    }
    pub fn put_name(self: *const IHTMLMetaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLMetaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_url(self: *const IHTMLMetaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_url(self, v);
    }
    pub fn get_url(self: *const IHTMLMetaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_url(self, p);
    }
    pub fn put_charset(self: *const IHTMLMetaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_charset(self, v);
    }
    pub fn get_charset(self: *const IHTMLMetaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_charset(self, p);
    }
};

const IID_IHTMLMetaElement2_Value = Guid.initString("3050f81f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMetaElement2 = &IID_IHTMLMetaElement2_Value;
pub const IHTMLMetaElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scheme: *const fn(
            self: *const IHTMLMetaElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scheme: *const fn(
            self: *const IHTMLMetaElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_scheme(self: *const IHTMLMetaElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_scheme(self, v);
    }
    pub fn get_scheme(self: *const IHTMLMetaElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_scheme(self, p);
    }
};

const IID_IHTMLMetaElement3_Value = Guid.initString("30510495-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMetaElement3 = &IID_IHTMLMetaElement3_Value;
pub const IHTMLMetaElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_url: *const fn(
            self: *const IHTMLMetaElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_url: *const fn(
            self: *const IHTMLMetaElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_url(self: *const IHTMLMetaElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_url(self, v);
    }
    pub fn get_url(self: *const IHTMLMetaElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_url(self, p);
    }
};

const IID_IHTMLBaseElement_Value = Guid.initString("3050f204-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBaseElement = &IID_IHTMLBaseElement_Value;
pub const IHTMLBaseElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLBaseElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLBaseElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_target: *const fn(
            self: *const IHTMLBaseElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const IHTMLBaseElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_href(self: *const IHTMLBaseElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLBaseElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn put_target(self: *const IHTMLBaseElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_target(self, v);
    }
    pub fn get_target(self: *const IHTMLBaseElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_target(self, p);
    }
};

const IID_IHTMLBaseElement2_Value = Guid.initString("30510420-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBaseElement2 = &IID_IHTMLBaseElement2_Value;
pub const IHTMLBaseElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLBaseElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLBaseElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_href(self: *const IHTMLBaseElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLBaseElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
};

const IID_DispHTMLHtmlElement_Value = Guid.initString("3050f560-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLHtmlElement = &IID_DispHTMLHtmlElement_Value;
pub const DispHTMLHtmlElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLHeadElement_Value = Guid.initString("3050f561-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLHeadElement = &IID_DispHTMLHeadElement_Value;
pub const DispHTMLHeadElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLTitleElement_Value = Guid.initString("3050f516-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTitleElement = &IID_DispHTMLTitleElement_Value;
pub const DispHTMLTitleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLMetaElement_Value = Guid.initString("3050f517-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLMetaElement = &IID_DispHTMLMetaElement_Value;
pub const DispHTMLMetaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLBaseElement_Value = Guid.initString("3050f518-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLBaseElement = &IID_DispHTMLBaseElement_Value;
pub const DispHTMLBaseElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLIsIndexElement_Value = Guid.initString("3050f206-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLIsIndexElement = &IID_IHTMLIsIndexElement_Value;
pub const IHTMLIsIndexElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_prompt: *const fn(
            self: *const IHTMLIsIndexElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_prompt: *const fn(
            self: *const IHTMLIsIndexElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_action: *const fn(
            self: *const IHTMLIsIndexElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_action: *const fn(
            self: *const IHTMLIsIndexElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_prompt(self: *const IHTMLIsIndexElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_prompt(self, v);
    }
    pub fn get_prompt(self: *const IHTMLIsIndexElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_prompt(self, p);
    }
    pub fn put_action(self: *const IHTMLIsIndexElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_action(self, v);
    }
    pub fn get_action(self: *const IHTMLIsIndexElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_action(self, p);
    }
};

const IID_IHTMLIsIndexElement2_Value = Guid.initString("3050f82f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLIsIndexElement2 = &IID_IHTMLIsIndexElement2_Value;
pub const IHTMLIsIndexElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLIsIndexElement2,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_form(self: *const IHTMLIsIndexElement2, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
};

const IID_IHTMLNextIdElement_Value = Guid.initString("3050f207-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLNextIdElement = &IID_IHTMLNextIdElement_Value;
pub const IHTMLNextIdElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_n: *const fn(
            self: *const IHTMLNextIdElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_n: *const fn(
            self: *const IHTMLNextIdElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_n(self: *const IHTMLNextIdElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_n(self, v);
    }
    pub fn get_n(self: *const IHTMLNextIdElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_n(self, p);
    }
};

const IID_DispHTMLIsIndexElement_Value = Guid.initString("3050f519-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLIsIndexElement = &IID_DispHTMLIsIndexElement_Value;
pub const DispHTMLIsIndexElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLNextIdElement_Value = Guid.initString("3050f51a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLNextIdElement = &IID_DispHTMLNextIdElement_Value;
pub const DispHTMLNextIdElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLBaseFontElement_Value = Guid.initString("3050f202-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBaseFontElement = &IID_IHTMLBaseFontElement_Value;
pub const IHTMLBaseFontElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_color: *const fn(
            self: *const IHTMLBaseFontElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_color: *const fn(
            self: *const IHTMLBaseFontElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_face: *const fn(
            self: *const IHTMLBaseFontElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_face: *const fn(
            self: *const IHTMLBaseFontElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_size: *const fn(
            self: *const IHTMLBaseFontElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_size: *const fn(
            self: *const IHTMLBaseFontElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_color(self: *const IHTMLBaseFontElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_color(self, v);
    }
    pub fn get_color(self: *const IHTMLBaseFontElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_color(self, p);
    }
    pub fn put_face(self: *const IHTMLBaseFontElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_face(self, v);
    }
    pub fn get_face(self: *const IHTMLBaseFontElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_face(self, p);
    }
    pub fn put_size(self: *const IHTMLBaseFontElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_size(self, v);
    }
    pub fn get_size(self: *const IHTMLBaseFontElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_size(self, p);
    }
};

const IID_DispHTMLBaseFontElement_Value = Guid.initString("3050f504-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLBaseFontElement = &IID_DispHTMLBaseFontElement_Value;
pub const DispHTMLBaseFontElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLUnknownElement_Value = Guid.initString("3050f209-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLUnknownElement = &IID_IHTMLUnknownElement_Value;
pub const IHTMLUnknownElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLUnknownElement_Value = Guid.initString("3050f539-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLUnknownElement = &IID_DispHTMLUnknownElement_Value;
pub const DispHTMLUnknownElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IWebGeolocation_Value = Guid.initString("305107c5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IWebGeolocation = &IID_IWebGeolocation_Value;
pub const IWebGeolocation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getCurrentPosition: *const fn(
            self: *const IWebGeolocation,
            successCallback: ?*IDispatch,
            errorCallback: ?*IDispatch,
            options: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        watchPosition: *const fn(
            self: *const IWebGeolocation,
            successCallback: ?*IDispatch,
            errorCallback: ?*IDispatch,
            options: ?*IDispatch,
            watchId: ?*i32,
        ) callconv(.winapi) HRESULT,
        clearWatch: *const fn(
            self: *const IWebGeolocation,
            watchId: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getCurrentPosition(self: *const IWebGeolocation, successCallback: ?*IDispatch, errorCallback: ?*IDispatch, options: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.getCurrentPosition(self, successCallback, errorCallback, options);
    }
    pub fn watchPosition(self: *const IWebGeolocation, successCallback: ?*IDispatch, errorCallback: ?*IDispatch, options: ?*IDispatch, watchId: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.watchPosition(self, successCallback, errorCallback, options, watchId);
    }
    pub fn clearWatch(self: *const IWebGeolocation, watchId: i32) callconv(.@"inline") HRESULT {
        return self.vtable.clearWatch(self, watchId);
    }
};

const IID_IHTMLMimeTypesCollection_Value = Guid.initString("3050f3fc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMimeTypesCollection = &IID_IHTMLMimeTypesCollection_Value;
pub const IHTMLMimeTypesCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLMimeTypesCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLMimeTypesCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
};

const IID_IHTMLPluginsCollection_Value = Guid.initString("3050f3fd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPluginsCollection = &IID_IHTMLPluginsCollection_Value;
pub const IHTMLPluginsCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLPluginsCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        refresh: *const fn(
            self: *const IHTMLPluginsCollection,
            reload: i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLPluginsCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn refresh(self: *const IHTMLPluginsCollection, reload: i16) callconv(.@"inline") HRESULT {
        return self.vtable.refresh(self, reload);
    }
};

const IID_IOmHistory_Value = Guid.initString("feceaaa2-8405-11cf-8ba1-00aa00476da6");
pub const IID_IOmHistory = &IID_IOmHistory_Value;
pub const IOmHistory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IOmHistory,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        back: *const fn(
            self: *const IOmHistory,
            pvargdistance: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        forward: *const fn(
            self: *const IOmHistory,
            pvargdistance: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        go: *const fn(
            self: *const IOmHistory,
            pvargdistance: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IOmHistory, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn back(self: *const IOmHistory, pvargdistance: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.back(self, pvargdistance);
    }
    pub fn forward(self: *const IOmHistory, pvargdistance: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.forward(self, pvargdistance);
    }
    pub fn go(self: *const IOmHistory, pvargdistance: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.go(self, pvargdistance);
    }
};

const IID_IHTMLOpsProfile_Value = Guid.initString("3050f401-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOpsProfile = &IID_IHTMLOpsProfile_Value;
pub const IHTMLOpsProfile = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        addRequest: *const fn(
            self: *const IHTMLOpsProfile,
            name: ?BSTR,
            reserved: VARIANT,
            success: ?*i16,
        ) callconv(.winapi) HRESULT,
        clearRequest: *const fn(
            self: *const IHTMLOpsProfile,
        ) callconv(.winapi) HRESULT,
        doRequest: *const fn(
            self: *const IHTMLOpsProfile,
            usage: VARIANT,
            fname: VARIANT,
            domain: VARIANT,
            path: VARIANT,
            expire: VARIANT,
            reserved: VARIANT,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLOpsProfile,
            name: ?BSTR,
            value: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        setAttribute: *const fn(
            self: *const IHTMLOpsProfile,
            name: ?BSTR,
            value: ?BSTR,
            prefs: VARIANT,
            success: ?*i16,
        ) callconv(.winapi) HRESULT,
        commitChanges: *const fn(
            self: *const IHTMLOpsProfile,
            success: ?*i16,
        ) callconv(.winapi) HRESULT,
        addReadRequest: *const fn(
            self: *const IHTMLOpsProfile,
            name: ?BSTR,
            reserved: VARIANT,
            success: ?*i16,
        ) callconv(.winapi) HRESULT,
        doReadRequest: *const fn(
            self: *const IHTMLOpsProfile,
            usage: VARIANT,
            fname: VARIANT,
            domain: VARIANT,
            path: VARIANT,
            expire: VARIANT,
            reserved: VARIANT,
        ) callconv(.winapi) HRESULT,
        doWriteRequest: *const fn(
            self: *const IHTMLOpsProfile,
            success: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn addRequest(self: *const IHTMLOpsProfile, name: ?BSTR, reserved: VARIANT, success: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.addRequest(self, name, reserved, success);
    }
    pub fn clearRequest(self: *const IHTMLOpsProfile) callconv(.@"inline") HRESULT {
        return self.vtable.clearRequest(self);
    }
    pub fn doRequest(self: *const IHTMLOpsProfile, usage: VARIANT, fname: VARIANT, domain: VARIANT, path: VARIANT, expire: VARIANT, reserved: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.doRequest(self, usage, fname, domain, path, expire, reserved);
    }
    pub fn getAttribute(self: *const IHTMLOpsProfile, name: ?BSTR, value: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, name, value);
    }
    pub fn setAttribute(self: *const IHTMLOpsProfile, name: ?BSTR, value: ?BSTR, prefs: VARIANT, success: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, name, value, prefs, success);
    }
    pub fn commitChanges(self: *const IHTMLOpsProfile, success: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.commitChanges(self, success);
    }
    pub fn addReadRequest(self: *const IHTMLOpsProfile, name: ?BSTR, reserved: VARIANT, success: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.addReadRequest(self, name, reserved, success);
    }
    pub fn doReadRequest(self: *const IHTMLOpsProfile, usage: VARIANT, fname: VARIANT, domain: VARIANT, path: VARIANT, expire: VARIANT, reserved: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.doReadRequest(self, usage, fname, domain, path, expire, reserved);
    }
    pub fn doWriteRequest(self: *const IHTMLOpsProfile, success: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.doWriteRequest(self, success);
    }
};

const IID_IOmNavigator_Value = Guid.initString("feceaaa5-8405-11cf-8ba1-00aa00476da6");
pub const IID_IOmNavigator = &IID_IOmNavigator_Value;
pub const IOmNavigator = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_appCodeName: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_appName: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_appVersion: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userAgent: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        javaEnabled: *const fn(
            self: *const IOmNavigator,
            enabled: ?*i16,
        ) callconv(.winapi) HRESULT,
        taintEnabled: *const fn(
            self: *const IOmNavigator,
            enabled: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeTypes: *const fn(
            self: *const IOmNavigator,
            p: ?*?*IHTMLMimeTypesCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_plugins: *const fn(
            self: *const IOmNavigator,
            p: ?*?*IHTMLPluginsCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cookieEnabled: *const fn(
            self: *const IOmNavigator,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_opsProfile: *const fn(
            self: *const IOmNavigator,
            p: ?*?*IHTMLOpsProfile,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IOmNavigator,
            string: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cpuClass: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemLanguage: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_browserLanguage: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userLanguage: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_platform: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_appMinorVersion: *const fn(
            self: *const IOmNavigator,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_connectionSpeed: *const fn(
            self: *const IOmNavigator,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onLine: *const fn(
            self: *const IOmNavigator,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userProfile: *const fn(
            self: *const IOmNavigator,
            p: ?*?*IHTMLOpsProfile,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_appCodeName(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_appCodeName(self, p);
    }
    pub fn get_appName(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_appName(self, p);
    }
    pub fn get_appVersion(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_appVersion(self, p);
    }
    pub fn get_userAgent(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_userAgent(self, p);
    }
    pub fn javaEnabled(self: *const IOmNavigator, enabled: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.javaEnabled(self, enabled);
    }
    pub fn taintEnabled(self: *const IOmNavigator, enabled: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.taintEnabled(self, enabled);
    }
    pub fn get_mimeTypes(self: *const IOmNavigator, p: ?*?*IHTMLMimeTypesCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_mimeTypes(self, p);
    }
    pub fn get_plugins(self: *const IOmNavigator, p: ?*?*IHTMLPluginsCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_plugins(self, p);
    }
    pub fn get_cookieEnabled(self: *const IOmNavigator, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_cookieEnabled(self, p);
    }
    pub fn get_opsProfile(self: *const IOmNavigator, p: ?*?*IHTMLOpsProfile) callconv(.@"inline") HRESULT {
        return self.vtable.get_opsProfile(self, p);
    }
    pub fn toString(self: *const IOmNavigator, string: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, string);
    }
    pub fn get_cpuClass(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cpuClass(self, p);
    }
    pub fn get_systemLanguage(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_systemLanguage(self, p);
    }
    pub fn get_browserLanguage(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_browserLanguage(self, p);
    }
    pub fn get_userLanguage(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_userLanguage(self, p);
    }
    pub fn get_platform(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_platform(self, p);
    }
    pub fn get_appMinorVersion(self: *const IOmNavigator, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_appMinorVersion(self, p);
    }
    pub fn get_connectionSpeed(self: *const IOmNavigator, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_connectionSpeed(self, p);
    }
    pub fn get_onLine(self: *const IOmNavigator, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_onLine(self, p);
    }
    pub fn get_userProfile(self: *const IOmNavigator, p: ?*?*IHTMLOpsProfile) callconv(.@"inline") HRESULT {
        return self.vtable.get_userProfile(self, p);
    }
};

const IID_INavigatorGeolocation_Value = Guid.initString("305107cf-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_INavigatorGeolocation = &IID_INavigatorGeolocation_Value;
pub const INavigatorGeolocation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_geolocation: *const fn(
            self: *const INavigatorGeolocation,
            p: ?*?*IWebGeolocation,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_geolocation(self: *const INavigatorGeolocation, p: ?*?*IWebGeolocation) callconv(.@"inline") HRESULT {
        return self.vtable.get_geolocation(self, p);
    }
};

const IID_INavigatorDoNotTrack_Value = Guid.initString("30510804-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_INavigatorDoNotTrack = &IID_INavigatorDoNotTrack_Value;
pub const INavigatorDoNotTrack = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msDoNotTrack: *const fn(
            self: *const INavigatorDoNotTrack,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_msDoNotTrack(self: *const INavigatorDoNotTrack, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_msDoNotTrack(self, p);
    }
};

const IID_IHTMLLocation_Value = Guid.initString("163bb1e0-6e00-11cf-837a-48dc04c10000");
pub const IID_IHTMLLocation = &IID_IHTMLLocation_Value;
pub const IHTMLLocation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLLocation,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLLocation,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_protocol: *const fn(
            self: *const IHTMLLocation,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_protocol: *const fn(
            self: *const IHTMLLocation,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_host: *const fn(
            self: *const IHTMLLocation,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_host: *const fn(
            self: *const IHTMLLocation,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hostname: *const fn(
            self: *const IHTMLLocation,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hostname: *const fn(
            self: *const IHTMLLocation,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_port: *const fn(
            self: *const IHTMLLocation,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_port: *const fn(
            self: *const IHTMLLocation,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pathname: *const fn(
            self: *const IHTMLLocation,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pathname: *const fn(
            self: *const IHTMLLocation,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_search: *const fn(
            self: *const IHTMLLocation,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_search: *const fn(
            self: *const IHTMLLocation,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hash: *const fn(
            self: *const IHTMLLocation,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hash: *const fn(
            self: *const IHTMLLocation,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        reload: *const fn(
            self: *const IHTMLLocation,
            flag: i16,
        ) callconv(.winapi) HRESULT,
        replace: *const fn(
            self: *const IHTMLLocation,
            bstr: ?BSTR,
        ) callconv(.winapi) HRESULT,
        assign: *const fn(
            self: *const IHTMLLocation,
            bstr: ?BSTR,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLLocation,
            string: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_href(self: *const IHTMLLocation, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLLocation, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn put_protocol(self: *const IHTMLLocation, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_protocol(self, v);
    }
    pub fn get_protocol(self: *const IHTMLLocation, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_protocol(self, p);
    }
    pub fn put_host(self: *const IHTMLLocation, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_host(self, v);
    }
    pub fn get_host(self: *const IHTMLLocation, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_host(self, p);
    }
    pub fn put_hostname(self: *const IHTMLLocation, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hostname(self, v);
    }
    pub fn get_hostname(self: *const IHTMLLocation, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hostname(self, p);
    }
    pub fn put_port(self: *const IHTMLLocation, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_port(self, v);
    }
    pub fn get_port(self: *const IHTMLLocation, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_port(self, p);
    }
    pub fn put_pathname(self: *const IHTMLLocation, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pathname(self, v);
    }
    pub fn get_pathname(self: *const IHTMLLocation, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pathname(self, p);
    }
    pub fn put_search(self: *const IHTMLLocation, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_search(self, v);
    }
    pub fn get_search(self: *const IHTMLLocation, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_search(self, p);
    }
    pub fn put_hash(self: *const IHTMLLocation, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hash(self, v);
    }
    pub fn get_hash(self: *const IHTMLLocation, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hash(self, p);
    }
    pub fn reload(self: *const IHTMLLocation, flag: i16) callconv(.@"inline") HRESULT {
        return self.vtable.reload(self, flag);
    }
    pub fn replace(self: *const IHTMLLocation, bstr: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.replace(self, bstr);
    }
    pub fn assign(self: *const IHTMLLocation, bstr: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.assign(self, bstr);
    }
    pub fn toString(self: *const IHTMLLocation, string: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, string);
    }
};

const IID_DispHTMLHistory_Value = Guid.initString("3050f549-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLHistory = &IID_DispHTMLHistory_Value;
pub const DispHTMLHistory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLNavigator_Value = Guid.initString("3050f54c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLNavigator = &IID_DispHTMLNavigator_Value;
pub const DispHTMLNavigator = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLLocation_Value = Guid.initString("3050f54e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLLocation = &IID_DispHTMLLocation_Value;
pub const DispHTMLLocation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispCPlugins_Value = Guid.initString("3050f54a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispCPlugins = &IID_DispCPlugins_Value;
pub const DispCPlugins = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLBookmarkCollection_Value = Guid.initString("3050f4ce-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBookmarkCollection = &IID_IHTMLBookmarkCollection_Value;
pub const IHTMLBookmarkCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLBookmarkCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLBookmarkCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLBookmarkCollection,
            index: i32,
            pVarBookmark: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLBookmarkCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLBookmarkCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLBookmarkCollection, index: i32, pVarBookmark: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, pVarBookmark);
    }
};

const IID_IHTMLDataTransfer_Value = Guid.initString("3050f4b3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDataTransfer = &IID_IHTMLDataTransfer_Value;
pub const IHTMLDataTransfer = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        setData: *const fn(
            self: *const IHTMLDataTransfer,
            format: ?BSTR,
            data: ?*VARIANT,
            pret: ?*i16,
        ) callconv(.winapi) HRESULT,
        getData: *const fn(
            self: *const IHTMLDataTransfer,
            format: ?BSTR,
            pvarRet: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        clearData: *const fn(
            self: *const IHTMLDataTransfer,
            format: ?BSTR,
            pret: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dropEffect: *const fn(
            self: *const IHTMLDataTransfer,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dropEffect: *const fn(
            self: *const IHTMLDataTransfer,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_effectAllowed: *const fn(
            self: *const IHTMLDataTransfer,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_effectAllowed: *const fn(
            self: *const IHTMLDataTransfer,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn setData(self: *const IHTMLDataTransfer, format: ?BSTR, data: ?*VARIANT, pret: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.setData(self, format, data, pret);
    }
    pub fn getData(self: *const IHTMLDataTransfer, format: ?BSTR, pvarRet: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getData(self, format, pvarRet);
    }
    pub fn clearData(self: *const IHTMLDataTransfer, format: ?BSTR, pret: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.clearData(self, format, pret);
    }
    pub fn put_dropEffect(self: *const IHTMLDataTransfer, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dropEffect(self, v);
    }
    pub fn get_dropEffect(self: *const IHTMLDataTransfer, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dropEffect(self, p);
    }
    pub fn put_effectAllowed(self: *const IHTMLDataTransfer, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_effectAllowed(self, v);
    }
    pub fn get_effectAllowed(self: *const IHTMLDataTransfer, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_effectAllowed(self, p);
    }
};

const IID_IHTMLEventObj2_Value = Guid.initString("3050f48b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEventObj2 = &IID_IHTMLEventObj2_Value;
pub const IHTMLEventObj2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        setAttribute: *const fn(
            self: *const IHTMLEventObj2,
            strAttributeName: ?BSTR,
            AttributeValue: VARIANT,
            lFlags: i32,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLEventObj2,
            strAttributeName: ?BSTR,
            lFlags: i32,
            AttributeValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttribute: *const fn(
            self: *const IHTMLEventObj2,
            strAttributeName: ?BSTR,
            lFlags: i32,
            pfSuccess: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_propertyName: *const fn(
            self: *const IHTMLEventObj2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_propertyName: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        putref_bookmarks: *const fn(
            self: *const IHTMLEventObj2,
            v: ?*IHTMLBookmarkCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bookmarks: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?*IHTMLBookmarkCollection,
        ) callconv(.winapi) HRESULT,
        putref_recordset: *const fn(
            self: *const IHTMLEventObj2,
            v: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_recordset: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dataFld: *const fn(
            self: *const IHTMLEventObj2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataFld: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        putref_boundElements: *const fn(
            self: *const IHTMLEventObj2,
            v: ?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_boundElements: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_repeat: *const fn(
            self: *const IHTMLEventObj2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_repeat: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_srcUrn: *const fn(
            self: *const IHTMLEventObj2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_srcUrn: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        putref_srcElement: *const fn(
            self: *const IHTMLEventObj2,
            v: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_srcElement: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_altKey: *const fn(
            self: *const IHTMLEventObj2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_altKey: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ctrlKey: *const fn(
            self: *const IHTMLEventObj2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ctrlKey: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shiftKey: *const fn(
            self: *const IHTMLEventObj2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shiftKey: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        putref_fromElement: *const fn(
            self: *const IHTMLEventObj2,
            v: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fromElement: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        putref_toElement: *const fn(
            self: *const IHTMLEventObj2,
            v: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_toElement: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_button: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_button: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLEventObj2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_qualifier: *const fn(
            self: *const IHTMLEventObj2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_qualifier: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_reason: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_reason: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clientX: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientX: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_clientY: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientY: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_offsetX: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetX: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_offsetY: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetY: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_screenX: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenX: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_screenY: *const fn(
            self: *const IHTMLEventObj2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenY: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        putref_srcFilter: *const fn(
            self: *const IHTMLEventObj2,
            v: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_srcFilter: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataTransfer: *const fn(
            self: *const IHTMLEventObj2,
            p: ?*?*IHTMLDataTransfer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn setAttribute(self: *const IHTMLEventObj2, strAttributeName: ?BSTR, AttributeValue: VARIANT, lFlags: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, strAttributeName, AttributeValue, lFlags);
    }
    pub fn getAttribute(self: *const IHTMLEventObj2, strAttributeName: ?BSTR, lFlags: i32, AttributeValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, strAttributeName, lFlags, AttributeValue);
    }
    pub fn removeAttribute(self: *const IHTMLEventObj2, strAttributeName: ?BSTR, lFlags: i32, pfSuccess: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttribute(self, strAttributeName, lFlags, pfSuccess);
    }
    pub fn put_propertyName(self: *const IHTMLEventObj2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_propertyName(self, v);
    }
    pub fn get_propertyName(self: *const IHTMLEventObj2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_propertyName(self, p);
    }
    pub fn putref_bookmarks(self: *const IHTMLEventObj2, v: ?*IHTMLBookmarkCollection) callconv(.@"inline") HRESULT {
        return self.vtable.putref_bookmarks(self, v);
    }
    pub fn get_bookmarks(self: *const IHTMLEventObj2, p: ?*?*IHTMLBookmarkCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_bookmarks(self, p);
    }
    pub fn putref_recordset(self: *const IHTMLEventObj2, v: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.putref_recordset(self, v);
    }
    pub fn get_recordset(self: *const IHTMLEventObj2, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_recordset(self, p);
    }
    pub fn put_dataFld(self: *const IHTMLEventObj2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dataFld(self, v);
    }
    pub fn get_dataFld(self: *const IHTMLEventObj2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dataFld(self, p);
    }
    pub fn putref_boundElements(self: *const IHTMLEventObj2, v: ?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.putref_boundElements(self, v);
    }
    pub fn get_boundElements(self: *const IHTMLEventObj2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_boundElements(self, p);
    }
    pub fn put_repeat(self: *const IHTMLEventObj2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_repeat(self, v);
    }
    pub fn get_repeat(self: *const IHTMLEventObj2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_repeat(self, p);
    }
    pub fn put_srcUrn(self: *const IHTMLEventObj2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_srcUrn(self, v);
    }
    pub fn get_srcUrn(self: *const IHTMLEventObj2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_srcUrn(self, p);
    }
    pub fn putref_srcElement(self: *const IHTMLEventObj2, v: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.putref_srcElement(self, v);
    }
    pub fn get_srcElement(self: *const IHTMLEventObj2, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_srcElement(self, p);
    }
    pub fn put_altKey(self: *const IHTMLEventObj2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_altKey(self, v);
    }
    pub fn get_altKey(self: *const IHTMLEventObj2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_altKey(self, p);
    }
    pub fn put_ctrlKey(self: *const IHTMLEventObj2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_ctrlKey(self, v);
    }
    pub fn get_ctrlKey(self: *const IHTMLEventObj2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ctrlKey(self, p);
    }
    pub fn put_shiftKey(self: *const IHTMLEventObj2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_shiftKey(self, v);
    }
    pub fn get_shiftKey(self: *const IHTMLEventObj2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_shiftKey(self, p);
    }
    pub fn putref_fromElement(self: *const IHTMLEventObj2, v: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.putref_fromElement(self, v);
    }
    pub fn get_fromElement(self: *const IHTMLEventObj2, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_fromElement(self, p);
    }
    pub fn putref_toElement(self: *const IHTMLEventObj2, v: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.putref_toElement(self, v);
    }
    pub fn get_toElement(self: *const IHTMLEventObj2, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_toElement(self, p);
    }
    pub fn put_button(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_button(self, v);
    }
    pub fn get_button(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_button(self, p);
    }
    pub fn put_type(self: *const IHTMLEventObj2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLEventObj2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_qualifier(self: *const IHTMLEventObj2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_qualifier(self, v);
    }
    pub fn get_qualifier(self: *const IHTMLEventObj2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_qualifier(self, p);
    }
    pub fn put_reason(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_reason(self, v);
    }
    pub fn get_reason(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_reason(self, p);
    }
    pub fn put_x(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_clientX(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_clientX(self, v);
    }
    pub fn get_clientX(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientX(self, p);
    }
    pub fn put_clientY(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_clientY(self, v);
    }
    pub fn get_clientY(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientY(self, p);
    }
    pub fn put_offsetX(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_offsetX(self, v);
    }
    pub fn get_offsetX(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetX(self, p);
    }
    pub fn put_offsetY(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_offsetY(self, v);
    }
    pub fn get_offsetY(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetY(self, p);
    }
    pub fn put_screenX(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_screenX(self, v);
    }
    pub fn get_screenX(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenX(self, p);
    }
    pub fn put_screenY(self: *const IHTMLEventObj2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_screenY(self, v);
    }
    pub fn get_screenY(self: *const IHTMLEventObj2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenY(self, p);
    }
    pub fn putref_srcFilter(self: *const IHTMLEventObj2, v: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.putref_srcFilter(self, v);
    }
    pub fn get_srcFilter(self: *const IHTMLEventObj2, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_srcFilter(self, p);
    }
    pub fn get_dataTransfer(self: *const IHTMLEventObj2, p: ?*?*IHTMLDataTransfer) callconv(.@"inline") HRESULT {
        return self.vtable.get_dataTransfer(self, p);
    }
};

const IID_IHTMLEventObj3_Value = Guid.initString("3050f680-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEventObj3 = &IID_IHTMLEventObj3_Value;
pub const IHTMLEventObj3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentOverflow: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shiftLeft: *const fn(
            self: *const IHTMLEventObj3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shiftLeft: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_altLeft: *const fn(
            self: *const IHTMLEventObj3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_altLeft: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ctrlLeft: *const fn(
            self: *const IHTMLEventObj3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ctrlLeft: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeCompositionChange: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*isize,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeNotifyCommand: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*isize,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeNotifyData: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*isize,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeRequest: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*isize,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imeRequestData: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*isize,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_keyboardLayout: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*isize,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_behaviorCookie: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_behaviorPart: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextPage: *const fn(
            self: *const IHTMLEventObj3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_contentOverflow(self: *const IHTMLEventObj3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentOverflow(self, p);
    }
    pub fn put_shiftLeft(self: *const IHTMLEventObj3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_shiftLeft(self, v);
    }
    pub fn get_shiftLeft(self: *const IHTMLEventObj3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_shiftLeft(self, p);
    }
    pub fn put_altLeft(self: *const IHTMLEventObj3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_altLeft(self, v);
    }
    pub fn get_altLeft(self: *const IHTMLEventObj3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_altLeft(self, p);
    }
    pub fn put_ctrlLeft(self: *const IHTMLEventObj3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_ctrlLeft(self, v);
    }
    pub fn get_ctrlLeft(self: *const IHTMLEventObj3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ctrlLeft(self, p);
    }
    pub fn get_imeCompositionChange(self: *const IHTMLEventObj3, p: ?*isize) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeCompositionChange(self, p);
    }
    pub fn get_imeNotifyCommand(self: *const IHTMLEventObj3, p: ?*isize) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeNotifyCommand(self, p);
    }
    pub fn get_imeNotifyData(self: *const IHTMLEventObj3, p: ?*isize) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeNotifyData(self, p);
    }
    pub fn get_imeRequest(self: *const IHTMLEventObj3, p: ?*isize) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeRequest(self, p);
    }
    pub fn get_imeRequestData(self: *const IHTMLEventObj3, p: ?*isize) callconv(.@"inline") HRESULT {
        return self.vtable.get_imeRequestData(self, p);
    }
    pub fn get_keyboardLayout(self: *const IHTMLEventObj3, p: ?*isize) callconv(.@"inline") HRESULT {
        return self.vtable.get_keyboardLayout(self, p);
    }
    pub fn get_behaviorCookie(self: *const IHTMLEventObj3, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_behaviorCookie(self, p);
    }
    pub fn get_behaviorPart(self: *const IHTMLEventObj3, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_behaviorPart(self, p);
    }
    pub fn get_nextPage(self: *const IHTMLEventObj3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nextPage(self, p);
    }
};

const IID_IHTMLEventObj4_Value = Guid.initString("3050f814-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEventObj4 = &IID_IHTMLEventObj4_Value;
pub const IHTMLEventObj4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wheelDelta: *const fn(
            self: *const IHTMLEventObj4,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_wheelDelta(self: *const IHTMLEventObj4, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_wheelDelta(self, p);
    }
};

const IID_IHTMLEventObj5_Value = Guid.initString("30510478-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEventObj5 = &IID_IHTMLEventObj5_Value;
pub const IHTMLEventObj5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_url: *const fn(
            self: *const IHTMLEventObj5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_url: *const fn(
            self: *const IHTMLEventObj5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn(
            self: *const IHTMLEventObj5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IHTMLEventObj5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_source: *const fn(
            self: *const IHTMLEventObj5,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_origin: *const fn(
            self: *const IHTMLEventObj5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_origin: *const fn(
            self: *const IHTMLEventObj5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_issession: *const fn(
            self: *const IHTMLEventObj5,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_issession: *const fn(
            self: *const IHTMLEventObj5,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_url(self: *const IHTMLEventObj5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_url(self, v);
    }
    pub fn get_url(self: *const IHTMLEventObj5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_url(self, p);
    }
    pub fn put_data(self: *const IHTMLEventObj5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_data(self, v);
    }
    pub fn get_data(self: *const IHTMLEventObj5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
    pub fn get_source(self: *const IHTMLEventObj5, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_source(self, p);
    }
    pub fn put_origin(self: *const IHTMLEventObj5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_origin(self, v);
    }
    pub fn get_origin(self: *const IHTMLEventObj5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_origin(self, p);
    }
    pub fn put_issession(self: *const IHTMLEventObj5, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_issession(self, v);
    }
    pub fn get_issession(self: *const IHTMLEventObj5, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_issession(self, p);
    }
};

const IID_IHTMLEventObj6_Value = Guid.initString("30510734-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEventObj6 = &IID_IHTMLEventObj6_Value;
pub const IHTMLEventObj6 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_actionURL: *const fn(
            self: *const IHTMLEventObj6,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_buttonID: *const fn(
            self: *const IHTMLEventObj6,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_actionURL(self: *const IHTMLEventObj6, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_actionURL(self, p);
    }
    pub fn get_buttonID(self: *const IHTMLEventObj6, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_buttonID(self, p);
    }
};

const IID_DispCEventObj_Value = Guid.initString("3050f558-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispCEventObj = &IID_DispCEventObj_Value;
pub const DispCEventObj = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleMedia_Value = Guid.initString("3051074b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleMedia = &IID_IHTMLStyleMedia_Value;
pub const IHTMLStyleMedia = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLStyleMedia,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        matchMedium: *const fn(
            self: *const IHTMLStyleMedia,
            mediaQuery: ?BSTR,
            matches: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLStyleMedia, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn matchMedium(self: *const IHTMLStyleMedia, mediaQuery: ?BSTR, matches: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.matchMedium(self, mediaQuery, matches);
    }
};

const IID_DispHTMLStyleMedia_Value = Guid.initString("3059009e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleMedia = &IID_DispHTMLStyleMedia_Value;
pub const DispHTMLStyleMedia = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLFramesCollection2_Value = Guid.initString("332c4426-26cb-11d0-b483-00c04fd90119");
pub const IID_IHTMLFramesCollection2 = &IID_IHTMLFramesCollection2_Value;
pub const IHTMLFramesCollection2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        item: *const fn(
            self: *const IHTMLFramesCollection2,
            pvarIndex: ?*VARIANT,
            pvarResult: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLFramesCollection2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn item(self: *const IHTMLFramesCollection2, pvarIndex: ?*VARIANT, pvarResult: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, pvarIndex, pvarResult);
    }
    pub fn get_length(self: *const IHTMLFramesCollection2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
};

const IID_HTMLWindowEvents3_Value = Guid.initString("3050f5a1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLWindowEvents3 = &IID_HTMLWindowEvents3_Value;
pub const HTMLWindowEvents3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLWindowEvents2_Value = Guid.initString("3050f625-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLWindowEvents2 = &IID_HTMLWindowEvents2_Value;
pub const HTMLWindowEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLWindowEvents_Value = Guid.initString("96a0a4e0-d062-11cf-94b6-00aa0060275c");
pub const IID_HTMLWindowEvents = &IID_HTMLWindowEvents_Value;
pub const HTMLWindowEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLDocument2_Value = Guid.initString("332c4425-26cb-11d0-b483-00c04fd90119");
pub const IID_IHTMLDocument2 = &IID_IHTMLDocument2_Value;
pub const IHTMLDocument2 = extern union {
    pub const VTable = extern struct {
        base: IHTMLDocument.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_all: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_body: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_activeElement: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_images: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_applets: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_links: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_forms: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_anchors: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_title: *const fn(
            self: *const IHTMLDocument2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_title: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scripts: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_designMode: *const fn(
            self: *const IHTMLDocument2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_designMode: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selection: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLSelectionObject,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frames: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLFramesCollection2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_embeds: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_plugins: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alinkColor: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alinkColor: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bgColor: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bgColor: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fgColor: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fgColor: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_linkColor: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_linkColor: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vlinkColor: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vlinkColor: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_referrer: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_location: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLLocation,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastModified: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URL: *const fn(
            self: *const IHTMLDocument2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_domain: *const fn(
            self: *const IHTMLDocument2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domain: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cookie: *const fn(
            self: *const IHTMLDocument2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cookie: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_expando: *const fn(
            self: *const IHTMLDocument2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_expando: *const fn(
            self: *const IHTMLDocument2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn(
            self: *const IHTMLDocument2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultCharset: *const fn(
            self: *const IHTMLDocument2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultCharset: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeType: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileSize: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileCreatedDate: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileModifiedDate: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileUpdatedDate: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_security: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_protocol: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nameProp: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        write: *const fn(
            self: *const IHTMLDocument2,
            psarray: ?*SAFEARRAY,
        ) callconv(.winapi) HRESULT,
        writeln: *const fn(
            self: *const IHTMLDocument2,
            psarray: ?*SAFEARRAY,
        ) callconv(.winapi) HRESULT,
        open: *const fn(
            self: *const IHTMLDocument2,
            url: ?BSTR,
            name: VARIANT,
            features: VARIANT,
            replace: VARIANT,
            pomWindowResult: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        close: *const fn(
            self: *const IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
        queryCommandSupported: *const fn(
            self: *const IHTMLDocument2,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandEnabled: *const fn(
            self: *const IHTMLDocument2,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandState: *const fn(
            self: *const IHTMLDocument2,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandIndeterm: *const fn(
            self: *const IHTMLDocument2,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryCommandText: *const fn(
            self: *const IHTMLDocument2,
            cmdID: ?BSTR,
            pcmdText: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        queryCommandValue: *const fn(
            self: *const IHTMLDocument2,
            cmdID: ?BSTR,
            pcmdValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        execCommand: *const fn(
            self: *const IHTMLDocument2,
            cmdID: ?BSTR,
            showUI: i16,
            value: VARIANT,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        execCommandShowHelp: *const fn(
            self: *const IHTMLDocument2,
            cmdID: ?BSTR,
            pfRet: ?*i16,
        ) callconv(.winapi) HRESULT,
        createElement: *const fn(
            self: *const IHTMLDocument2,
            eTag: ?BSTR,
            newElem: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onhelp: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onhelp: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onclick: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onclick: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondblclick: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondblclick: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeyup: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeyup: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeydown: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeydown: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeypress: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeypress: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseup: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseup: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousedown: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousedown: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousemove: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousemove: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseout: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseout: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseover: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseover: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onafterupdate: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onafterupdate: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onrowexit: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onrowexit: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onrowenter: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onrowenter: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragstart: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragstart: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselectstart: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselectstart: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        elementFromPoint: *const fn(
            self: *const IHTMLDocument2,
            x: i32,
            y: i32,
            elementHit: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentWindow: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleSheets: *const fn(
            self: *const IHTMLDocument2,
            p: ?*?*IHTMLStyleSheetsCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeupdate: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeupdate: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerrorupdate: *const fn(
            self: *const IHTMLDocument2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerrorupdate: *const fn(
            self: *const IHTMLDocument2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLDocument2,
            String: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        createStyleSheet: *const fn(
            self: *const IHTMLDocument2,
            bstrHref: ?BSTR,
            lIndex: i32,
            ppnewStyleSheet: ?*?*IHTMLStyleSheet,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IHTMLDocument: IHTMLDocument,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_all(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_all(self, p);
    }
    pub fn get_body(self: *const IHTMLDocument2, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_body(self, p);
    }
    pub fn get_activeElement(self: *const IHTMLDocument2, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_activeElement(self, p);
    }
    pub fn get_images(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_images(self, p);
    }
    pub fn get_applets(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_applets(self, p);
    }
    pub fn get_links(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_links(self, p);
    }
    pub fn get_forms(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_forms(self, p);
    }
    pub fn get_anchors(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_anchors(self, p);
    }
    pub fn put_title(self: *const IHTMLDocument2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_title(self, v);
    }
    pub fn get_title(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_title(self, p);
    }
    pub fn get_scripts(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_scripts(self, p);
    }
    pub fn put_designMode(self: *const IHTMLDocument2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_designMode(self, v);
    }
    pub fn get_designMode(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_designMode(self, p);
    }
    pub fn get_selection(self: *const IHTMLDocument2, p: ?*?*IHTMLSelectionObject) callconv(.@"inline") HRESULT {
        return self.vtable.get_selection(self, p);
    }
    pub fn get_readyState(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn get_frames(self: *const IHTMLDocument2, p: ?*?*IHTMLFramesCollection2) callconv(.@"inline") HRESULT {
        return self.vtable.get_frames(self, p);
    }
    pub fn get_embeds(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_embeds(self, p);
    }
    pub fn get_plugins(self: *const IHTMLDocument2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_plugins(self, p);
    }
    pub fn put_alinkColor(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_alinkColor(self, v);
    }
    pub fn get_alinkColor(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_alinkColor(self, p);
    }
    pub fn put_bgColor(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bgColor(self, v);
    }
    pub fn get_bgColor(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bgColor(self, p);
    }
    pub fn put_fgColor(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_fgColor(self, v);
    }
    pub fn get_fgColor(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fgColor(self, p);
    }
    pub fn put_linkColor(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_linkColor(self, v);
    }
    pub fn get_linkColor(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_linkColor(self, p);
    }
    pub fn put_vlinkColor(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_vlinkColor(self, v);
    }
    pub fn get_vlinkColor(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_vlinkColor(self, p);
    }
    pub fn get_referrer(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_referrer(self, p);
    }
    pub fn get_location(self: *const IHTMLDocument2, p: ?*?*IHTMLLocation) callconv(.@"inline") HRESULT {
        return self.vtable.get_location(self, p);
    }
    pub fn get_lastModified(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lastModified(self, p);
    }
    pub fn put_URL(self: *const IHTMLDocument2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_URL(self, v);
    }
    pub fn get_URL(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_URL(self, p);
    }
    pub fn put_domain(self: *const IHTMLDocument2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_domain(self, v);
    }
    pub fn get_domain(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_domain(self, p);
    }
    pub fn put_cookie(self: *const IHTMLDocument2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cookie(self, v);
    }
    pub fn get_cookie(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cookie(self, p);
    }
    pub fn put_expando(self: *const IHTMLDocument2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_expando(self, v);
    }
    pub fn get_expando(self: *const IHTMLDocument2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_expando(self, p);
    }
    pub fn put_charset(self: *const IHTMLDocument2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_charset(self, v);
    }
    pub fn get_charset(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_charset(self, p);
    }
    pub fn put_defaultCharset(self: *const IHTMLDocument2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultCharset(self, v);
    }
    pub fn get_defaultCharset(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultCharset(self, p);
    }
    pub fn get_mimeType(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_mimeType(self, p);
    }
    pub fn get_fileSize(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fileSize(self, p);
    }
    pub fn get_fileCreatedDate(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fileCreatedDate(self, p);
    }
    pub fn get_fileModifiedDate(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fileModifiedDate(self, p);
    }
    pub fn get_fileUpdatedDate(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fileUpdatedDate(self, p);
    }
    pub fn get_security(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_security(self, p);
    }
    pub fn get_protocol(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_protocol(self, p);
    }
    pub fn get_nameProp(self: *const IHTMLDocument2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nameProp(self, p);
    }
    pub fn write(self: *const IHTMLDocument2, psarray: ?*SAFEARRAY) callconv(.@"inline") HRESULT {
        return self.vtable.write(self, psarray);
    }
    pub fn writeln(self: *const IHTMLDocument2, psarray: ?*SAFEARRAY) callconv(.@"inline") HRESULT {
        return self.vtable.writeln(self, psarray);
    }
    pub fn open(self: *const IHTMLDocument2, url: ?BSTR, name: VARIANT, features: VARIANT, replace: VARIANT, pomWindowResult: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.open(self, url, name, features, replace, pomWindowResult);
    }
    pub fn close(self: *const IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.close(self);
    }
    pub fn clear(self: *const IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
    pub fn queryCommandSupported(self: *const IHTMLDocument2, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandSupported(self, cmdID, pfRet);
    }
    pub fn queryCommandEnabled(self: *const IHTMLDocument2, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandEnabled(self, cmdID, pfRet);
    }
    pub fn queryCommandState(self: *const IHTMLDocument2, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandState(self, cmdID, pfRet);
    }
    pub fn queryCommandIndeterm(self: *const IHTMLDocument2, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandIndeterm(self, cmdID, pfRet);
    }
    pub fn queryCommandText(self: *const IHTMLDocument2, cmdID: ?BSTR, pcmdText: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandText(self, cmdID, pcmdText);
    }
    pub fn queryCommandValue(self: *const IHTMLDocument2, cmdID: ?BSTR, pcmdValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.queryCommandValue(self, cmdID, pcmdValue);
    }
    pub fn execCommand(self: *const IHTMLDocument2, cmdID: ?BSTR, showUI: i16, value: VARIANT, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.execCommand(self, cmdID, showUI, value, pfRet);
    }
    pub fn execCommandShowHelp(self: *const IHTMLDocument2, cmdID: ?BSTR, pfRet: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.execCommandShowHelp(self, cmdID, pfRet);
    }
    pub fn createElement(self: *const IHTMLDocument2, eTag: ?BSTR, newElem: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.createElement(self, eTag, newElem);
    }
    pub fn put_onhelp(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onhelp(self, v);
    }
    pub fn get_onhelp(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onhelp(self, p);
    }
    pub fn put_onclick(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onclick(self, v);
    }
    pub fn get_onclick(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onclick(self, p);
    }
    pub fn put_ondblclick(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondblclick(self, v);
    }
    pub fn get_ondblclick(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondblclick(self, p);
    }
    pub fn put_onkeyup(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeyup(self, v);
    }
    pub fn get_onkeyup(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeyup(self, p);
    }
    pub fn put_onkeydown(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeydown(self, v);
    }
    pub fn get_onkeydown(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeydown(self, p);
    }
    pub fn put_onkeypress(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeypress(self, v);
    }
    pub fn get_onkeypress(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeypress(self, p);
    }
    pub fn put_onmouseup(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseup(self, v);
    }
    pub fn get_onmouseup(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseup(self, p);
    }
    pub fn put_onmousedown(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousedown(self, v);
    }
    pub fn get_onmousedown(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousedown(self, p);
    }
    pub fn put_onmousemove(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousemove(self, v);
    }
    pub fn get_onmousemove(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousemove(self, p);
    }
    pub fn put_onmouseout(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseout(self, v);
    }
    pub fn get_onmouseout(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseout(self, p);
    }
    pub fn put_onmouseover(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseover(self, v);
    }
    pub fn get_onmouseover(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseover(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn put_onafterupdate(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onafterupdate(self, v);
    }
    pub fn get_onafterupdate(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onafterupdate(self, p);
    }
    pub fn put_onrowexit(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onrowexit(self, v);
    }
    pub fn get_onrowexit(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onrowexit(self, p);
    }
    pub fn put_onrowenter(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onrowenter(self, v);
    }
    pub fn get_onrowenter(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onrowenter(self, p);
    }
    pub fn put_ondragstart(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragstart(self, v);
    }
    pub fn get_ondragstart(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragstart(self, p);
    }
    pub fn put_onselectstart(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselectstart(self, v);
    }
    pub fn get_onselectstart(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselectstart(self, p);
    }
    pub fn elementFromPoint(self: *const IHTMLDocument2, x: i32, y: i32, elementHit: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.elementFromPoint(self, x, y, elementHit);
    }
    pub fn get_parentWindow(self: *const IHTMLDocument2, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentWindow(self, p);
    }
    pub fn get_styleSheets(self: *const IHTMLDocument2, p: ?*?*IHTMLStyleSheetsCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleSheets(self, p);
    }
    pub fn put_onbeforeupdate(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeupdate(self, v);
    }
    pub fn get_onbeforeupdate(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeupdate(self, p);
    }
    pub fn put_onerrorupdate(self: *const IHTMLDocument2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerrorupdate(self, v);
    }
    pub fn get_onerrorupdate(self: *const IHTMLDocument2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerrorupdate(self, p);
    }
    pub fn toString(self: *const IHTMLDocument2, String: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, String);
    }
    pub fn createStyleSheet(self: *const IHTMLDocument2, bstrHref: ?BSTR, lIndex: i32, ppnewStyleSheet: ?*?*IHTMLStyleSheet) callconv(.@"inline") HRESULT {
        return self.vtable.createStyleSheet(self, bstrHref, lIndex, ppnewStyleSheet);
    }
};

const IID_IHTMLWindow2_Value = Guid.initString("332c4427-26cb-11d0-b483-00c04fd90119");
pub const IID_IHTMLWindow2 = &IID_IHTMLWindow2_Value;
pub const IHTMLWindow2 = extern union {
    pub const VTable = extern struct {
        base: IHTMLFramesCollection2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frames: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLFramesCollection2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultStatus: *const fn(
            self: *const IHTMLWindow2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultStatus: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLWindow2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        setTimeout: *const fn(
            self: *const IHTMLWindow2,
            expression: ?BSTR,
            msec: i32,
            language: ?*VARIANT,
            timerID: ?*i32,
        ) callconv(.winapi) HRESULT,
        clearTimeout: *const fn(
            self: *const IHTMLWindow2,
            timerID: i32,
        ) callconv(.winapi) HRESULT,
        alert: *const fn(
            self: *const IHTMLWindow2,
            message: ?BSTR,
        ) callconv(.winapi) HRESULT,
        confirm: *const fn(
            self: *const IHTMLWindow2,
            message: ?BSTR,
            confirmed: ?*i16,
        ) callconv(.winapi) HRESULT,
        prompt: *const fn(
            self: *const IHTMLWindow2,
            message: ?BSTR,
            defstr: ?BSTR,
            textdata: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Image: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLImageElementFactory,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_location: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLLocation,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_history: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IOmHistory,
        ) callconv(.winapi) HRESULT,
        close: *const fn(
            self: *const IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_opener: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_opener: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_navigator: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IOmNavigator,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLWindow2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parent: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        open: *const fn(
            self: *const IHTMLWindow2,
            url: ?BSTR,
            name: ?BSTR,
            features: ?BSTR,
            replace: i16,
            pomWindowResult: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_self: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_top: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_window: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        navigate: *const fn(
            self: *const IHTMLWindow2,
            url: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocus: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocus: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onblur: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onblur: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeunload: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeunload: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onunload: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onunload: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onhelp: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onhelp: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onresize: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onresize: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onscroll: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onscroll: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_document: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_event: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        showModalDialog: *const fn(
            self: *const IHTMLWindow2,
            dialog: ?BSTR,
            varArgIn: ?*VARIANT,
            varOptions: ?*VARIANT,
            varArgOut: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        showHelp: *const fn(
            self: *const IHTMLWindow2,
            helpURL: ?BSTR,
            helpArg: VARIANT,
            features: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screen: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLScreen,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Option: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IHTMLOptionElementFactory,
        ) callconv(.winapi) HRESULT,
        focus: *const fn(
            self: *const IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_closed: *const fn(
            self: *const IHTMLWindow2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        blur: *const fn(
            self: *const IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        scroll: *const fn(
            self: *const IHTMLWindow2,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientInformation: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IOmNavigator,
        ) callconv(.winapi) HRESULT,
        setInterval: *const fn(
            self: *const IHTMLWindow2,
            expression: ?BSTR,
            msec: i32,
            language: ?*VARIANT,
            timerID: ?*i32,
        ) callconv(.winapi) HRESULT,
        clearInterval: *const fn(
            self: *const IHTMLWindow2,
            timerID: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_offscreenBuffering: *const fn(
            self: *const IHTMLWindow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offscreenBuffering: *const fn(
            self: *const IHTMLWindow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        execScript: *const fn(
            self: *const IHTMLWindow2,
            code: ?BSTR,
            language: ?BSTR,
            pvarRet: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLWindow2,
            String: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        scrollBy: *const fn(
            self: *const IHTMLWindow2,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        scrollTo: *const fn(
            self: *const IHTMLWindow2,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        moveTo: *const fn(
            self: *const IHTMLWindow2,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        moveBy: *const fn(
            self: *const IHTMLWindow2,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        resizeTo: *const fn(
            self: *const IHTMLWindow2,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        resizeBy: *const fn(
            self: *const IHTMLWindow2,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_external: *const fn(
            self: *const IHTMLWindow2,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IHTMLFramesCollection2: IHTMLFramesCollection2,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_frames(self: *const IHTMLWindow2, p: ?*?*IHTMLFramesCollection2) callconv(.@"inline") HRESULT {
        return self.vtable.get_frames(self, p);
    }
    pub fn put_defaultStatus(self: *const IHTMLWindow2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultStatus(self, v);
    }
    pub fn get_defaultStatus(self: *const IHTMLWindow2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultStatus(self, p);
    }
    pub fn put_status(self: *const IHTMLWindow2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLWindow2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn setTimeout(self: *const IHTMLWindow2, expression: ?BSTR, msec: i32, language: ?*VARIANT, timerID: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.setTimeout(self, expression, msec, language, timerID);
    }
    pub fn clearTimeout(self: *const IHTMLWindow2, timerID: i32) callconv(.@"inline") HRESULT {
        return self.vtable.clearTimeout(self, timerID);
    }
    pub fn alert(self: *const IHTMLWindow2, message: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.alert(self, message);
    }
    pub fn confirm(self: *const IHTMLWindow2, message: ?BSTR, confirmed: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.confirm(self, message, confirmed);
    }
    pub fn prompt(self: *const IHTMLWindow2, message: ?BSTR, defstr: ?BSTR, textdata: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.prompt(self, message, defstr, textdata);
    }
    pub fn get_Image(self: *const IHTMLWindow2, p: ?*?*IHTMLImageElementFactory) callconv(.@"inline") HRESULT {
        return self.vtable.get_Image(self, p);
    }
    pub fn get_location(self: *const IHTMLWindow2, p: ?*?*IHTMLLocation) callconv(.@"inline") HRESULT {
        return self.vtable.get_location(self, p);
    }
    pub fn get_history(self: *const IHTMLWindow2, p: ?*?*IOmHistory) callconv(.@"inline") HRESULT {
        return self.vtable.get_history(self, p);
    }
    pub fn close(self: *const IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.close(self);
    }
    pub fn put_opener(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_opener(self, v);
    }
    pub fn get_opener(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_opener(self, p);
    }
    pub fn get_navigator(self: *const IHTMLWindow2, p: ?*?*IOmNavigator) callconv(.@"inline") HRESULT {
        return self.vtable.get_navigator(self, p);
    }
    pub fn put_name(self: *const IHTMLWindow2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLWindow2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn get_parent(self: *const IHTMLWindow2, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_parent(self, p);
    }
    pub fn open(self: *const IHTMLWindow2, url: ?BSTR, name: ?BSTR, features: ?BSTR, replace: i16, pomWindowResult: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.open(self, url, name, features, replace, pomWindowResult);
    }
    pub fn get_self(self: *const IHTMLWindow2, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_self(self, p);
    }
    pub fn get_top(self: *const IHTMLWindow2, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_top(self, p);
    }
    pub fn get_window(self: *const IHTMLWindow2, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_window(self, p);
    }
    pub fn navigate(self: *const IHTMLWindow2, url: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.navigate(self, url);
    }
    pub fn put_onfocus(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocus(self, v);
    }
    pub fn get_onfocus(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocus(self, p);
    }
    pub fn put_onblur(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onblur(self, v);
    }
    pub fn get_onblur(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onblur(self, p);
    }
    pub fn put_onload(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onbeforeunload(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeunload(self, v);
    }
    pub fn get_onbeforeunload(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeunload(self, p);
    }
    pub fn put_onunload(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onunload(self, v);
    }
    pub fn get_onunload(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onunload(self, p);
    }
    pub fn put_onhelp(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onhelp(self, v);
    }
    pub fn get_onhelp(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onhelp(self, p);
    }
    pub fn put_onerror(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_onresize(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onresize(self, v);
    }
    pub fn get_onresize(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onresize(self, p);
    }
    pub fn put_onscroll(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onscroll(self, v);
    }
    pub fn get_onscroll(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onscroll(self, p);
    }
    pub fn get_document(self: *const IHTMLWindow2, p: ?*?*IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.get_document(self, p);
    }
    pub fn get_event(self: *const IHTMLWindow2, p: ?*?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.get_event(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLWindow2, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn showModalDialog(self: *const IHTMLWindow2, dialog: ?BSTR, varArgIn: ?*VARIANT, varOptions: ?*VARIANT, varArgOut: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.showModalDialog(self, dialog, varArgIn, varOptions, varArgOut);
    }
    pub fn showHelp(self: *const IHTMLWindow2, helpURL: ?BSTR, helpArg: VARIANT, features: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.showHelp(self, helpURL, helpArg, features);
    }
    pub fn get_screen(self: *const IHTMLWindow2, p: ?*?*IHTMLScreen) callconv(.@"inline") HRESULT {
        return self.vtable.get_screen(self, p);
    }
    pub fn get_Option(self: *const IHTMLWindow2, p: ?*?*IHTMLOptionElementFactory) callconv(.@"inline") HRESULT {
        return self.vtable.get_Option(self, p);
    }
    pub fn focus(self: *const IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.focus(self);
    }
    pub fn get_closed(self: *const IHTMLWindow2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_closed(self, p);
    }
    pub fn blur(self: *const IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.blur(self);
    }
    pub fn scroll(self: *const IHTMLWindow2, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.scroll(self, x, y);
    }
    pub fn get_clientInformation(self: *const IHTMLWindow2, p: ?*?*IOmNavigator) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientInformation(self, p);
    }
    pub fn setInterval(self: *const IHTMLWindow2, expression: ?BSTR, msec: i32, language: ?*VARIANT, timerID: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.setInterval(self, expression, msec, language, timerID);
    }
    pub fn clearInterval(self: *const IHTMLWindow2, timerID: i32) callconv(.@"inline") HRESULT {
        return self.vtable.clearInterval(self, timerID);
    }
    pub fn put_offscreenBuffering(self: *const IHTMLWindow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_offscreenBuffering(self, v);
    }
    pub fn get_offscreenBuffering(self: *const IHTMLWindow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_offscreenBuffering(self, p);
    }
    pub fn execScript(self: *const IHTMLWindow2, code: ?BSTR, language: ?BSTR, pvarRet: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.execScript(self, code, language, pvarRet);
    }
    pub fn toString(self: *const IHTMLWindow2, String: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, String);
    }
    pub fn scrollBy(self: *const IHTMLWindow2, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.scrollBy(self, x, y);
    }
    pub fn scrollTo(self: *const IHTMLWindow2, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.scrollTo(self, x, y);
    }
    pub fn moveTo(self: *const IHTMLWindow2, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.moveTo(self, x, y);
    }
    pub fn moveBy(self: *const IHTMLWindow2, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.moveBy(self, x, y);
    }
    pub fn resizeTo(self: *const IHTMLWindow2, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.resizeTo(self, x, y);
    }
    pub fn resizeBy(self: *const IHTMLWindow2, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.resizeBy(self, x, y);
    }
    pub fn get_external(self: *const IHTMLWindow2, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_external(self, p);
    }
};

const IID_IHTMLWindow3_Value = Guid.initString("3050f4ae-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLWindow3 = &IID_IHTMLWindow3_Value;
pub const IHTMLWindow3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenLeft: *const fn(
            self: *const IHTMLWindow3,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenTop: *const fn(
            self: *const IHTMLWindow3,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        attachEvent: *const fn(
            self: *const IHTMLWindow3,
            event: ?BSTR,
            pDisp: ?*IDispatch,
            pfResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        detachEvent: *const fn(
            self: *const IHTMLWindow3,
            event: ?BSTR,
            pDisp: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        setTimeout: *const fn(
            self: *const IHTMLWindow3,
            expression: ?*VARIANT,
            msec: i32,
            language: ?*VARIANT,
            timerID: ?*i32,
        ) callconv(.winapi) HRESULT,
        setInterval: *const fn(
            self: *const IHTMLWindow3,
            expression: ?*VARIANT,
            msec: i32,
            language: ?*VARIANT,
            timerID: ?*i32,
        ) callconv(.winapi) HRESULT,
        print: *const fn(
            self: *const IHTMLWindow3,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeprint: *const fn(
            self: *const IHTMLWindow3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeprint: *const fn(
            self: *const IHTMLWindow3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onafterprint: *const fn(
            self: *const IHTMLWindow3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onafterprint: *const fn(
            self: *const IHTMLWindow3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipboardData: *const fn(
            self: *const IHTMLWindow3,
            p: ?*?*IHTMLDataTransfer,
        ) callconv(.winapi) HRESULT,
        showModelessDialog: *const fn(
            self: *const IHTMLWindow3,
            url: ?BSTR,
            varArgIn: ?*VARIANT,
            options: ?*VARIANT,
            pDialog: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_screenLeft(self: *const IHTMLWindow3, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenLeft(self, p);
    }
    pub fn get_screenTop(self: *const IHTMLWindow3, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenTop(self, p);
    }
    pub fn attachEvent(self: *const IHTMLWindow3, event: ?BSTR, pDisp: ?*IDispatch, pfResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.attachEvent(self, event, pDisp, pfResult);
    }
    pub fn detachEvent(self: *const IHTMLWindow3, event: ?BSTR, pDisp: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.detachEvent(self, event, pDisp);
    }
    pub fn setTimeout(self: *const IHTMLWindow3, expression: ?*VARIANT, msec: i32, language: ?*VARIANT, timerID: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.setTimeout(self, expression, msec, language, timerID);
    }
    pub fn setInterval(self: *const IHTMLWindow3, expression: ?*VARIANT, msec: i32, language: ?*VARIANT, timerID: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.setInterval(self, expression, msec, language, timerID);
    }
    pub fn print(self: *const IHTMLWindow3) callconv(.@"inline") HRESULT {
        return self.vtable.print(self);
    }
    pub fn put_onbeforeprint(self: *const IHTMLWindow3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeprint(self, v);
    }
    pub fn get_onbeforeprint(self: *const IHTMLWindow3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeprint(self, p);
    }
    pub fn put_onafterprint(self: *const IHTMLWindow3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onafterprint(self, v);
    }
    pub fn get_onafterprint(self: *const IHTMLWindow3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onafterprint(self, p);
    }
    pub fn get_clipboardData(self: *const IHTMLWindow3, p: ?*?*IHTMLDataTransfer) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipboardData(self, p);
    }
    pub fn showModelessDialog(self: *const IHTMLWindow3, url: ?BSTR, varArgIn: ?*VARIANT, options: ?*VARIANT, pDialog: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.showModelessDialog(self, url, varArgIn, options, pDialog);
    }
};

const IID_IHTMLFrameBase_Value = Guid.initString("3050f311-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameBase = &IID_IHTMLFrameBase_Value;
pub const IHTMLFrameBase = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLFrameBase,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLFrameBase,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLFrameBase,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameBorder: *const fn(
            self: *const IHTMLFrameBase,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameBorder: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameSpacing: *const fn(
            self: *const IHTMLFrameBase,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameSpacing: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginWidth: *const fn(
            self: *const IHTMLFrameBase,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginWidth: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginHeight: *const fn(
            self: *const IHTMLFrameBase,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginHeight: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_noResize: *const fn(
            self: *const IHTMLFrameBase,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_noResize: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrolling: *const fn(
            self: *const IHTMLFrameBase,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrolling: *const fn(
            self: *const IHTMLFrameBase,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_src(self: *const IHTMLFrameBase, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLFrameBase, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_name(self: *const IHTMLFrameBase, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLFrameBase, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_border(self: *const IHTMLFrameBase, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLFrameBase, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_frameBorder(self: *const IHTMLFrameBase, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameBorder(self, v);
    }
    pub fn get_frameBorder(self: *const IHTMLFrameBase, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameBorder(self, p);
    }
    pub fn put_frameSpacing(self: *const IHTMLFrameBase, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameSpacing(self, v);
    }
    pub fn get_frameSpacing(self: *const IHTMLFrameBase, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameSpacing(self, p);
    }
    pub fn put_marginWidth(self: *const IHTMLFrameBase, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginWidth(self, v);
    }
    pub fn get_marginWidth(self: *const IHTMLFrameBase, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginWidth(self, p);
    }
    pub fn put_marginHeight(self: *const IHTMLFrameBase, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginHeight(self, v);
    }
    pub fn get_marginHeight(self: *const IHTMLFrameBase, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginHeight(self, p);
    }
    pub fn put_noResize(self: *const IHTMLFrameBase, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_noResize(self, v);
    }
    pub fn get_noResize(self: *const IHTMLFrameBase, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_noResize(self, p);
    }
    pub fn put_scrolling(self: *const IHTMLFrameBase, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrolling(self, v);
    }
    pub fn get_scrolling(self: *const IHTMLFrameBase, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrolling(self, p);
    }
};

const IID_IHTMLStorage_Value = Guid.initString("30510474-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStorage = &IID_IHTMLStorage_Value;
pub const IHTMLStorage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLStorage,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_remainingSpace: *const fn(
            self: *const IHTMLStorage,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        key: *const fn(
            self: *const IHTMLStorage,
            lIndex: i32,
            __MIDL__IHTMLStorage0000: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        getItem: *const fn(
            self: *const IHTMLStorage,
            bstrKey: ?BSTR,
            __MIDL__IHTMLStorage0001: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        setItem: *const fn(
            self: *const IHTMLStorage,
            bstrKey: ?BSTR,
            bstrValue: ?BSTR,
        ) callconv(.winapi) HRESULT,
        removeItem: *const fn(
            self: *const IHTMLStorage,
            bstrKey: ?BSTR,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const IHTMLStorage,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLStorage, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get_remainingSpace(self: *const IHTMLStorage, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_remainingSpace(self, p);
    }
    pub fn key(self: *const IHTMLStorage, lIndex: i32, __MIDL__IHTMLStorage0000: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.key(self, lIndex, __MIDL__IHTMLStorage0000);
    }
    pub fn getItem(self: *const IHTMLStorage, bstrKey: ?BSTR, __MIDL__IHTMLStorage0001: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getItem(self, bstrKey, __MIDL__IHTMLStorage0001);
    }
    pub fn setItem(self: *const IHTMLStorage, bstrKey: ?BSTR, bstrValue: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.setItem(self, bstrKey, bstrValue);
    }
    pub fn removeItem(self: *const IHTMLStorage, bstrKey: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.removeItem(self, bstrKey);
    }
    pub fn clear(self: *const IHTMLStorage) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
};

const IID_IHTMLPerformance_Value = Guid.initString("3051074e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPerformance = &IID_IHTMLPerformance_Value;
pub const IHTMLPerformance = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_navigation: *const fn(
            self: *const IHTMLPerformance,
            p: ?*?*IHTMLPerformanceNavigation,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_timing: *const fn(
            self: *const IHTMLPerformance,
            p: ?*?*IHTMLPerformanceTiming,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLPerformance,
            string: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        toJSON: *const fn(
            self: *const IHTMLPerformance,
            pVar: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_navigation(self: *const IHTMLPerformance, p: ?*?*IHTMLPerformanceNavigation) callconv(.@"inline") HRESULT {
        return self.vtable.get_navigation(self, p);
    }
    pub fn get_timing(self: *const IHTMLPerformance, p: ?*?*IHTMLPerformanceTiming) callconv(.@"inline") HRESULT {
        return self.vtable.get_timing(self, p);
    }
    pub fn toString(self: *const IHTMLPerformance, string: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, string);
    }
    pub fn toJSON(self: *const IHTMLPerformance, pVar: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.toJSON(self, pVar);
    }
};

const IID_IHTMLApplicationCache_Value = Guid.initString("30510828-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLApplicationCache = &IID_IHTMLApplicationCache_Value;
pub const IHTMLApplicationCache = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchecking: *const fn(
            self: *const IHTMLApplicationCache,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchecking: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLApplicationCache,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onnoupdate: *const fn(
            self: *const IHTMLApplicationCache,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onnoupdate: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondownloading: *const fn(
            self: *const IHTMLApplicationCache,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondownloading: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onprogress: *const fn(
            self: *const IHTMLApplicationCache,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onprogress: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onupdateready: *const fn(
            self: *const IHTMLApplicationCache,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onupdateready: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncached: *const fn(
            self: *const IHTMLApplicationCache,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncached: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onobsolete: *const fn(
            self: *const IHTMLApplicationCache,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onobsolete: *const fn(
            self: *const IHTMLApplicationCache,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        update: *const fn(
            self: *const IHTMLApplicationCache,
        ) callconv(.winapi) HRESULT,
        swapCache: *const fn(
            self: *const IHTMLApplicationCache,
        ) callconv(.winapi) HRESULT,
        abort: *const fn(
            self: *const IHTMLApplicationCache,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_status(self: *const IHTMLApplicationCache, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_onchecking(self: *const IHTMLApplicationCache, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchecking(self, v);
    }
    pub fn get_onchecking(self: *const IHTMLApplicationCache, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchecking(self, p);
    }
    pub fn put_onerror(self: *const IHTMLApplicationCache, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLApplicationCache, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_onnoupdate(self: *const IHTMLApplicationCache, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onnoupdate(self, v);
    }
    pub fn get_onnoupdate(self: *const IHTMLApplicationCache, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onnoupdate(self, p);
    }
    pub fn put_ondownloading(self: *const IHTMLApplicationCache, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondownloading(self, v);
    }
    pub fn get_ondownloading(self: *const IHTMLApplicationCache, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondownloading(self, p);
    }
    pub fn put_onprogress(self: *const IHTMLApplicationCache, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onprogress(self, v);
    }
    pub fn get_onprogress(self: *const IHTMLApplicationCache, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onprogress(self, p);
    }
    pub fn put_onupdateready(self: *const IHTMLApplicationCache, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onupdateready(self, v);
    }
    pub fn get_onupdateready(self: *const IHTMLApplicationCache, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onupdateready(self, p);
    }
    pub fn put_oncached(self: *const IHTMLApplicationCache, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncached(self, v);
    }
    pub fn get_oncached(self: *const IHTMLApplicationCache, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncached(self, p);
    }
    pub fn put_onobsolete(self: *const IHTMLApplicationCache, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onobsolete(self, v);
    }
    pub fn get_onobsolete(self: *const IHTMLApplicationCache, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onobsolete(self, p);
    }
    pub fn update(self: *const IHTMLApplicationCache) callconv(.@"inline") HRESULT {
        return self.vtable.update(self);
    }
    pub fn swapCache(self: *const IHTMLApplicationCache) callconv(.@"inline") HRESULT {
        return self.vtable.swapCache(self);
    }
    pub fn abort(self: *const IHTMLApplicationCache) callconv(.@"inline") HRESULT {
        return self.vtable.abort(self);
    }
};

const IID_IHTMLScreen_Value = Guid.initString("3050f35c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLScreen = &IID_IHTMLScreen_Value;
pub const IHTMLScreen = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_colorDepth: *const fn(
            self: *const IHTMLScreen,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bufferDepth: *const fn(
            self: *const IHTMLScreen,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bufferDepth: *const fn(
            self: *const IHTMLScreen,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLScreen,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLScreen,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_updateInterval: *const fn(
            self: *const IHTMLScreen,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_updateInterval: *const fn(
            self: *const IHTMLScreen,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_availHeight: *const fn(
            self: *const IHTMLScreen,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_availWidth: *const fn(
            self: *const IHTMLScreen,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontSmoothingEnabled: *const fn(
            self: *const IHTMLScreen,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_colorDepth(self: *const IHTMLScreen, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_colorDepth(self, p);
    }
    pub fn put_bufferDepth(self: *const IHTMLScreen, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_bufferDepth(self, v);
    }
    pub fn get_bufferDepth(self: *const IHTMLScreen, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_bufferDepth(self, p);
    }
    pub fn get_width(self: *const IHTMLScreen, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn get_height(self: *const IHTMLScreen, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_updateInterval(self: *const IHTMLScreen, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_updateInterval(self, v);
    }
    pub fn get_updateInterval(self: *const IHTMLScreen, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_updateInterval(self, p);
    }
    pub fn get_availHeight(self: *const IHTMLScreen, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_availHeight(self, p);
    }
    pub fn get_availWidth(self: *const IHTMLScreen, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_availWidth(self, p);
    }
    pub fn get_fontSmoothingEnabled(self: *const IHTMLScreen, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontSmoothingEnabled(self, p);
    }
};

const IID_IHTMLScreen2_Value = Guid.initString("3050f84a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLScreen2 = &IID_IHTMLScreen2_Value;
pub const IHTMLScreen2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_logicalXDPI: *const fn(
            self: *const IHTMLScreen2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_logicalYDPI: *const fn(
            self: *const IHTMLScreen2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deviceXDPI: *const fn(
            self: *const IHTMLScreen2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deviceYDPI: *const fn(
            self: *const IHTMLScreen2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_logicalXDPI(self: *const IHTMLScreen2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_logicalXDPI(self, p);
    }
    pub fn get_logicalYDPI(self: *const IHTMLScreen2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_logicalYDPI(self, p);
    }
    pub fn get_deviceXDPI(self: *const IHTMLScreen2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_deviceXDPI(self, p);
    }
    pub fn get_deviceYDPI(self: *const IHTMLScreen2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_deviceYDPI(self, p);
    }
};

const IID_IHTMLScreen3_Value = Guid.initString("305104a1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLScreen3 = &IID_IHTMLScreen3_Value;
pub const IHTMLScreen3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemXDPI: *const fn(
            self: *const IHTMLScreen3,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemYDPI: *const fn(
            self: *const IHTMLScreen3,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_systemXDPI(self: *const IHTMLScreen3, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_systemXDPI(self, p);
    }
    pub fn get_systemYDPI(self: *const IHTMLScreen3, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_systemYDPI(self, p);
    }
};

const IID_IHTMLScreen4_Value = Guid.initString("3051076b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLScreen4 = &IID_IHTMLScreen4_Value;
pub const IHTMLScreen4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelDepth: *const fn(
            self: *const IHTMLScreen4,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_pixelDepth(self: *const IHTMLScreen4, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelDepth(self, p);
    }
};

const IID_IHTMLWindow4_Value = Guid.initString("3050f6cf-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLWindow4 = &IID_IHTMLWindow4_Value;
pub const IHTMLWindow4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createPopup: *const fn(
            self: *const IHTMLWindow4,
            varArgIn: ?*VARIANT,
            ppPopup: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameElement: *const fn(
            self: *const IHTMLWindow4,
            p: ?*?*IHTMLFrameBase,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createPopup(self: *const IHTMLWindow4, varArgIn: ?*VARIANT, ppPopup: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.createPopup(self, varArgIn, ppPopup);
    }
    pub fn get_frameElement(self: *const IHTMLWindow4, p: ?*?*IHTMLFrameBase) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameElement(self, p);
    }
};

const IID_IHTMLWindow5_Value = Guid.initString("3051040e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLWindow5 = &IID_IHTMLWindow5_Value;
pub const IHTMLWindow5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XMLHttpRequest: *const fn(
            self: *const IHTMLWindow5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XMLHttpRequest: *const fn(
            self: *const IHTMLWindow5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_XMLHttpRequest(self: *const IHTMLWindow5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_XMLHttpRequest(self, v);
    }
    pub fn get_XMLHttpRequest(self: *const IHTMLWindow5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_XMLHttpRequest(self, p);
    }
};

const IID_IHTMLWindow6_Value = Guid.initString("30510453-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLWindow6 = &IID_IHTMLWindow6_Value;
pub const IHTMLWindow6 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XDomainRequest: *const fn(
            self: *const IHTMLWindow6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XDomainRequest: *const fn(
            self: *const IHTMLWindow6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sessionStorage: *const fn(
            self: *const IHTMLWindow6,
            p: ?*?*IHTMLStorage,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_localStorage: *const fn(
            self: *const IHTMLWindow6,
            p: ?*?*IHTMLStorage,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onhashchange: *const fn(
            self: *const IHTMLWindow6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onhashchange: *const fn(
            self: *const IHTMLWindow6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxConnectionsPerServer: *const fn(
            self: *const IHTMLWindow6,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        postMessage: *const fn(
            self: *const IHTMLWindow6,
            msg: ?BSTR,
            targetOrigin: VARIANT,
        ) callconv(.winapi) HRESULT,
        toStaticHTML: *const fn(
            self: *const IHTMLWindow6,
            bstrHTML: ?BSTR,
            pbstrStaticHTML: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmessage: *const fn(
            self: *const IHTMLWindow6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmessage: *const fn(
            self: *const IHTMLWindow6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        msWriteProfilerMark: *const fn(
            self: *const IHTMLWindow6,
            bstrProfilerMarkName: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_XDomainRequest(self: *const IHTMLWindow6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_XDomainRequest(self, v);
    }
    pub fn get_XDomainRequest(self: *const IHTMLWindow6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_XDomainRequest(self, p);
    }
    pub fn get_sessionStorage(self: *const IHTMLWindow6, p: ?*?*IHTMLStorage) callconv(.@"inline") HRESULT {
        return self.vtable.get_sessionStorage(self, p);
    }
    pub fn get_localStorage(self: *const IHTMLWindow6, p: ?*?*IHTMLStorage) callconv(.@"inline") HRESULT {
        return self.vtable.get_localStorage(self, p);
    }
    pub fn put_onhashchange(self: *const IHTMLWindow6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onhashchange(self, v);
    }
    pub fn get_onhashchange(self: *const IHTMLWindow6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onhashchange(self, p);
    }
    pub fn get_maxConnectionsPerServer(self: *const IHTMLWindow6, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_maxConnectionsPerServer(self, p);
    }
    pub fn postMessage(self: *const IHTMLWindow6, msg: ?BSTR, targetOrigin: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.postMessage(self, msg, targetOrigin);
    }
    pub fn toStaticHTML(self: *const IHTMLWindow6, bstrHTML: ?BSTR, pbstrStaticHTML: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toStaticHTML(self, bstrHTML, pbstrStaticHTML);
    }
    pub fn put_onmessage(self: *const IHTMLWindow6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmessage(self, v);
    }
    pub fn get_onmessage(self: *const IHTMLWindow6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmessage(self, p);
    }
    pub fn msWriteProfilerMark(self: *const IHTMLWindow6, bstrProfilerMarkName: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.msWriteProfilerMark(self, bstrProfilerMarkName);
    }
};

const IID_IHTMLWindow7_Value = Guid.initString("305104b7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLWindow7 = &IID_IHTMLWindow7_Value;
pub const IHTMLWindow7 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getSelection: *const fn(
            self: *const IHTMLWindow7,
            ppIHTMLSelection: ?*?*IHTMLSelection,
        ) callconv(.winapi) HRESULT,
        getComputedStyle: *const fn(
            self: *const IHTMLWindow7,
            varArgIn: ?*IHTMLDOMNode,
            bstrPseudoElt: ?BSTR,
            ppComputedStyle: ?*?*IHTMLCSSStyleDeclaration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleMedia: *const fn(
            self: *const IHTMLWindow7,
            p: ?*?*IHTMLStyleMedia,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_performance: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_performance: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_innerWidth: *const fn(
            self: *const IHTMLWindow7,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_innerHeight: *const fn(
            self: *const IHTMLWindow7,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageXOffset: *const fn(
            self: *const IHTMLWindow7,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageYOffset: *const fn(
            self: *const IHTMLWindow7,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenX: *const fn(
            self: *const IHTMLWindow7,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenY: *const fn(
            self: *const IHTMLWindow7,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outerWidth: *const fn(
            self: *const IHTMLWindow7,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_outerHeight: *const fn(
            self: *const IHTMLWindow7,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onabort: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onabort: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncanplay: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncanplay: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncanplaythrough: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncanplaythrough: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onchange: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onchange: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onclick: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onclick: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncontextmenu: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncontextmenu: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondblclick: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondblclick: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondrag: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondrag: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragend: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragend: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragenter: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragenter: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragleave: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragleave: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragover: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragover: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondragstart: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondragstart: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondrop: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondrop: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondurationchange: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondurationchange: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocusin: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocusin: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocusout: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocusout: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oninput: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oninput: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onemptied: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onemptied: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onended: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onended: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeydown: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeydown: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeypress: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeypress: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onkeyup: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onkeyup: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadeddata: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadeddata: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadedmetadata: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadedmetadata: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onloadstart: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onloadstart: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousedown: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousedown: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseenter: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseenter: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseleave: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseleave: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousemove: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousemove: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseout: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseout: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseover: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseover: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmouseup: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmouseup: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousewheel: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousewheel: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onoffline: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onoffline: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ononline: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ononline: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onprogress: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onprogress: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onratechange: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onratechange: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreset: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreset: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onseeked: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onseeked: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onseeking: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onseeking: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselect: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselect: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstalled: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstalled: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstorage: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstorage: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onsubmit: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onsubmit: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onsuspend: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onsuspend: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ontimeupdate: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ontimeupdate: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpause: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpause: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onplay: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onplay: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onplaying: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onplaying: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onvolumechange: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onvolumechange: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onwaiting: *const fn(
            self: *const IHTMLWindow7,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onwaiting: *const fn(
            self: *const IHTMLWindow7,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getSelection(self: *const IHTMLWindow7, ppIHTMLSelection: ?*?*IHTMLSelection) callconv(.@"inline") HRESULT {
        return self.vtable.getSelection(self, ppIHTMLSelection);
    }
    pub fn getComputedStyle(self: *const IHTMLWindow7, varArgIn: ?*IHTMLDOMNode, bstrPseudoElt: ?BSTR, ppComputedStyle: ?*?*IHTMLCSSStyleDeclaration) callconv(.@"inline") HRESULT {
        return self.vtable.getComputedStyle(self, varArgIn, bstrPseudoElt, ppComputedStyle);
    }
    pub fn get_styleMedia(self: *const IHTMLWindow7, p: ?*?*IHTMLStyleMedia) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleMedia(self, p);
    }
    pub fn put_performance(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_performance(self, v);
    }
    pub fn get_performance(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_performance(self, p);
    }
    pub fn get_innerWidth(self: *const IHTMLWindow7, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_innerWidth(self, p);
    }
    pub fn get_innerHeight(self: *const IHTMLWindow7, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_innerHeight(self, p);
    }
    pub fn get_pageXOffset(self: *const IHTMLWindow7, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageXOffset(self, p);
    }
    pub fn get_pageYOffset(self: *const IHTMLWindow7, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageYOffset(self, p);
    }
    pub fn get_screenX(self: *const IHTMLWindow7, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenX(self, p);
    }
    pub fn get_screenY(self: *const IHTMLWindow7, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenY(self, p);
    }
    pub fn get_outerWidth(self: *const IHTMLWindow7, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_outerWidth(self, p);
    }
    pub fn get_outerHeight(self: *const IHTMLWindow7, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_outerHeight(self, p);
    }
    pub fn put_onabort(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onabort(self, v);
    }
    pub fn get_onabort(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onabort(self, p);
    }
    pub fn put_oncanplay(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncanplay(self, v);
    }
    pub fn get_oncanplay(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncanplay(self, p);
    }
    pub fn put_oncanplaythrough(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncanplaythrough(self, v);
    }
    pub fn get_oncanplaythrough(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncanplaythrough(self, p);
    }
    pub fn put_onchange(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onchange(self, v);
    }
    pub fn get_onchange(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onchange(self, p);
    }
    pub fn put_onclick(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onclick(self, v);
    }
    pub fn get_onclick(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onclick(self, p);
    }
    pub fn put_oncontextmenu(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncontextmenu(self, v);
    }
    pub fn get_oncontextmenu(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncontextmenu(self, p);
    }
    pub fn put_ondblclick(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondblclick(self, v);
    }
    pub fn get_ondblclick(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondblclick(self, p);
    }
    pub fn put_ondrag(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondrag(self, v);
    }
    pub fn get_ondrag(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondrag(self, p);
    }
    pub fn put_ondragend(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragend(self, v);
    }
    pub fn get_ondragend(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragend(self, p);
    }
    pub fn put_ondragenter(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragenter(self, v);
    }
    pub fn get_ondragenter(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragenter(self, p);
    }
    pub fn put_ondragleave(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragleave(self, v);
    }
    pub fn get_ondragleave(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragleave(self, p);
    }
    pub fn put_ondragover(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragover(self, v);
    }
    pub fn get_ondragover(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragover(self, p);
    }
    pub fn put_ondragstart(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondragstart(self, v);
    }
    pub fn get_ondragstart(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondragstart(self, p);
    }
    pub fn put_ondrop(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondrop(self, v);
    }
    pub fn get_ondrop(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondrop(self, p);
    }
    pub fn put_ondurationchange(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondurationchange(self, v);
    }
    pub fn get_ondurationchange(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondurationchange(self, p);
    }
    pub fn put_onfocusin(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocusin(self, v);
    }
    pub fn get_onfocusin(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocusin(self, p);
    }
    pub fn put_onfocusout(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocusout(self, v);
    }
    pub fn get_onfocusout(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocusout(self, p);
    }
    pub fn put_oninput(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oninput(self, v);
    }
    pub fn get_oninput(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oninput(self, p);
    }
    pub fn put_onemptied(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onemptied(self, v);
    }
    pub fn get_onemptied(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onemptied(self, p);
    }
    pub fn put_onended(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onended(self, v);
    }
    pub fn get_onended(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onended(self, p);
    }
    pub fn put_onkeydown(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeydown(self, v);
    }
    pub fn get_onkeydown(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeydown(self, p);
    }
    pub fn put_onkeypress(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeypress(self, v);
    }
    pub fn get_onkeypress(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeypress(self, p);
    }
    pub fn put_onkeyup(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onkeyup(self, v);
    }
    pub fn get_onkeyup(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onkeyup(self, p);
    }
    pub fn put_onloadeddata(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadeddata(self, v);
    }
    pub fn get_onloadeddata(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadeddata(self, p);
    }
    pub fn put_onloadedmetadata(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadedmetadata(self, v);
    }
    pub fn get_onloadedmetadata(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadedmetadata(self, p);
    }
    pub fn put_onloadstart(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onloadstart(self, v);
    }
    pub fn get_onloadstart(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onloadstart(self, p);
    }
    pub fn put_onmousedown(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousedown(self, v);
    }
    pub fn get_onmousedown(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousedown(self, p);
    }
    pub fn put_onmouseenter(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseenter(self, v);
    }
    pub fn get_onmouseenter(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseenter(self, p);
    }
    pub fn put_onmouseleave(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseleave(self, v);
    }
    pub fn get_onmouseleave(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseleave(self, p);
    }
    pub fn put_onmousemove(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousemove(self, v);
    }
    pub fn get_onmousemove(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousemove(self, p);
    }
    pub fn put_onmouseout(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseout(self, v);
    }
    pub fn get_onmouseout(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseout(self, p);
    }
    pub fn put_onmouseover(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseover(self, v);
    }
    pub fn get_onmouseover(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseover(self, p);
    }
    pub fn put_onmouseup(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmouseup(self, v);
    }
    pub fn get_onmouseup(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmouseup(self, p);
    }
    pub fn put_onmousewheel(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousewheel(self, v);
    }
    pub fn get_onmousewheel(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousewheel(self, p);
    }
    pub fn put_onoffline(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onoffline(self, v);
    }
    pub fn get_onoffline(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onoffline(self, p);
    }
    pub fn put_ononline(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ononline(self, v);
    }
    pub fn get_ononline(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ononline(self, p);
    }
    pub fn put_onprogress(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onprogress(self, v);
    }
    pub fn get_onprogress(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onprogress(self, p);
    }
    pub fn put_onratechange(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onratechange(self, v);
    }
    pub fn get_onratechange(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onratechange(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn put_onreset(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreset(self, v);
    }
    pub fn get_onreset(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreset(self, p);
    }
    pub fn put_onseeked(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onseeked(self, v);
    }
    pub fn get_onseeked(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onseeked(self, p);
    }
    pub fn put_onseeking(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onseeking(self, v);
    }
    pub fn get_onseeking(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onseeking(self, p);
    }
    pub fn put_onselect(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselect(self, v);
    }
    pub fn get_onselect(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselect(self, p);
    }
    pub fn put_onstalled(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstalled(self, v);
    }
    pub fn get_onstalled(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstalled(self, p);
    }
    pub fn put_onstorage(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstorage(self, v);
    }
    pub fn get_onstorage(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstorage(self, p);
    }
    pub fn put_onsubmit(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onsubmit(self, v);
    }
    pub fn get_onsubmit(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onsubmit(self, p);
    }
    pub fn put_onsuspend(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onsuspend(self, v);
    }
    pub fn get_onsuspend(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onsuspend(self, p);
    }
    pub fn put_ontimeupdate(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ontimeupdate(self, v);
    }
    pub fn get_ontimeupdate(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ontimeupdate(self, p);
    }
    pub fn put_onpause(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpause(self, v);
    }
    pub fn get_onpause(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpause(self, p);
    }
    pub fn put_onplay(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onplay(self, v);
    }
    pub fn get_onplay(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onplay(self, p);
    }
    pub fn put_onplaying(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onplaying(self, v);
    }
    pub fn get_onplaying(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onplaying(self, p);
    }
    pub fn put_onvolumechange(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onvolumechange(self, v);
    }
    pub fn get_onvolumechange(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onvolumechange(self, p);
    }
    pub fn put_onwaiting(self: *const IHTMLWindow7, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onwaiting(self, v);
    }
    pub fn get_onwaiting(self: *const IHTMLWindow7, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onwaiting(self, p);
    }
};

const IID_IHTMLWindow8_Value = Guid.initString("305107ab-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLWindow8 = &IID_IHTMLWindow8_Value;
pub const IHTMLWindow8 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerdown: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerdown: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointermove: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointermove: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerup: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerup: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerover: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerover: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerout: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerout: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointercancel: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointercancel: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerhover: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerhover: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturestart: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturestart: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturechange: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturechange: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgestureend: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgestureend: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturehold: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturehold: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturetap: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturetap: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturedoubletap: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturedoubletap: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsinertiastart: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsinertiastart: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_applicationCache: *const fn(
            self: *const IHTMLWindow8,
            p: ?*?*IHTMLApplicationCache,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpopstate: *const fn(
            self: *const IHTMLWindow8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpopstate: *const fn(
            self: *const IHTMLWindow8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onmspointerdown(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerdown(self, v);
    }
    pub fn get_onmspointerdown(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerdown(self, p);
    }
    pub fn put_onmspointermove(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointermove(self, v);
    }
    pub fn get_onmspointermove(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointermove(self, p);
    }
    pub fn put_onmspointerup(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerup(self, v);
    }
    pub fn get_onmspointerup(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerup(self, p);
    }
    pub fn put_onmspointerover(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerover(self, v);
    }
    pub fn get_onmspointerover(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerover(self, p);
    }
    pub fn put_onmspointerout(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerout(self, v);
    }
    pub fn get_onmspointerout(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerout(self, p);
    }
    pub fn put_onmspointercancel(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointercancel(self, v);
    }
    pub fn get_onmspointercancel(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointercancel(self, p);
    }
    pub fn put_onmspointerhover(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerhover(self, v);
    }
    pub fn get_onmspointerhover(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerhover(self, p);
    }
    pub fn put_onmsgesturestart(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturestart(self, v);
    }
    pub fn get_onmsgesturestart(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturestart(self, p);
    }
    pub fn put_onmsgesturechange(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturechange(self, v);
    }
    pub fn get_onmsgesturechange(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturechange(self, p);
    }
    pub fn put_onmsgestureend(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgestureend(self, v);
    }
    pub fn get_onmsgestureend(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgestureend(self, p);
    }
    pub fn put_onmsgesturehold(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturehold(self, v);
    }
    pub fn get_onmsgesturehold(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturehold(self, p);
    }
    pub fn put_onmsgesturetap(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturetap(self, v);
    }
    pub fn get_onmsgesturetap(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturetap(self, p);
    }
    pub fn put_onmsgesturedoubletap(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturedoubletap(self, v);
    }
    pub fn get_onmsgesturedoubletap(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturedoubletap(self, p);
    }
    pub fn put_onmsinertiastart(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsinertiastart(self, v);
    }
    pub fn get_onmsinertiastart(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsinertiastart(self, p);
    }
    pub fn get_applicationCache(self: *const IHTMLWindow8, p: ?*?*IHTMLApplicationCache) callconv(.@"inline") HRESULT {
        return self.vtable.get_applicationCache(self, p);
    }
    pub fn put_onpopstate(self: *const IHTMLWindow8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpopstate(self, v);
    }
    pub fn get_onpopstate(self: *const IHTMLWindow8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpopstate(self, p);
    }
};

const IID_DispHTMLScreen_Value = Guid.initString("3050f591-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLScreen = &IID_DispHTMLScreen_Value;
pub const DispHTMLScreen = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLWindow2_Value = Guid.initString("3050f55d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLWindow2 = &IID_DispHTMLWindow2_Value;
pub const DispHTMLWindow2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLWindowProxy_Value = Guid.initString("3050f55e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLWindowProxy = &IID_DispHTMLWindowProxy_Value;
pub const DispHTMLWindowProxy = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLDocumentCompatibleInfo_Value = Guid.initString("3051041a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDocumentCompatibleInfo = &IID_IHTMLDocumentCompatibleInfo_Value;
pub const IHTMLDocumentCompatibleInfo = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userAgent: *const fn(
            self: *const IHTMLDocumentCompatibleInfo,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn(
            self: *const IHTMLDocumentCompatibleInfo,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_userAgent(self: *const IHTMLDocumentCompatibleInfo, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_userAgent(self, p);
    }
    pub fn get_version(self: *const IHTMLDocumentCompatibleInfo, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_version(self, p);
    }
};

const IID_IHTMLDocumentCompatibleInfoCollection_Value = Guid.initString("30510418-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDocumentCompatibleInfoCollection = &IID_IHTMLDocumentCompatibleInfoCollection_Value;
pub const IHTMLDocumentCompatibleInfoCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLDocumentCompatibleInfoCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLDocumentCompatibleInfoCollection,
            index: i32,
            compatibleInfo: ?*?*IHTMLDocumentCompatibleInfo,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLDocumentCompatibleInfoCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLDocumentCompatibleInfoCollection, index: i32, compatibleInfo: ?*?*IHTMLDocumentCompatibleInfo) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, compatibleInfo);
    }
};

const IID_DispHTMLDocumentCompatibleInfo_Value = Guid.initString("3050f53e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDocumentCompatibleInfo = &IID_DispHTMLDocumentCompatibleInfo_Value;
pub const DispHTMLDocumentCompatibleInfo = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLDocumentCompatibleInfoCollection_Value = Guid.initString("3050f53f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDocumentCompatibleInfoCollection = &IID_DispHTMLDocumentCompatibleInfoCollection_Value;
pub const DispHTMLDocumentCompatibleInfoCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLDocumentEvents4_Value = Guid.initString("30510737-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLDocumentEvents4 = &IID_HTMLDocumentEvents4_Value;
pub const HTMLDocumentEvents4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLDocumentEvents3_Value = Guid.initString("3050f5a0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLDocumentEvents3 = &IID_HTMLDocumentEvents3_Value;
pub const HTMLDocumentEvents3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLDocumentEvents2_Value = Guid.initString("3050f613-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLDocumentEvents2 = &IID_HTMLDocumentEvents2_Value;
pub const HTMLDocumentEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLDocumentEvents_Value = Guid.initString("3050f260-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLDocumentEvents = &IID_HTMLDocumentEvents_Value;
pub const HTMLDocumentEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGSVGElement_Value = Guid.initString("305104e7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGSVGElement = &IID_ISVGSVGElement_Value;
pub const ISVGSVGElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_x: *const fn(
            self: *const ISVGSVGElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y: *const fn(
            self: *const ISVGSVGElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_width: *const fn(
            self: *const ISVGSVGElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_height: *const fn(
            self: *const ISVGSVGElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_contentScriptType: *const fn(
            self: *const ISVGSVGElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentScriptType: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_contentStyleType: *const fn(
            self: *const ISVGSVGElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentStyleType: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        putref_viewport: *const fn(
            self: *const ISVGSVGElement,
            v: ?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_viewport: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelUnitToMillimeterX: *const fn(
            self: *const ISVGSVGElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelUnitToMillimeterX: *const fn(
            self: *const ISVGSVGElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pixelUnitToMillimeterY: *const fn(
            self: *const ISVGSVGElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pixelUnitToMillimeterY: *const fn(
            self: *const ISVGSVGElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_screenPixelToMillimeterX: *const fn(
            self: *const ISVGSVGElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenPixelToMillimeterX: *const fn(
            self: *const ISVGSVGElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_screenPixelToMillimeterY: *const fn(
            self: *const ISVGSVGElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenPixelToMillimeterY: *const fn(
            self: *const ISVGSVGElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_useCurrentView: *const fn(
            self: *const ISVGSVGElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_useCurrentView: *const fn(
            self: *const ISVGSVGElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        putref_currentView: *const fn(
            self: *const ISVGSVGElement,
            v: ?*ISVGViewSpec,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentView: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?*ISVGViewSpec,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentScale: *const fn(
            self: *const ISVGSVGElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentScale: *const fn(
            self: *const ISVGSVGElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        putref_currentTranslate: *const fn(
            self: *const ISVGSVGElement,
            v: ?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentTranslate: *const fn(
            self: *const ISVGSVGElement,
            p: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        suspendRedraw: *const fn(
            self: *const ISVGSVGElement,
            maxWaitMilliseconds: u32,
            pResult: ?*u32,
        ) callconv(.winapi) HRESULT,
        unsuspendRedraw: *const fn(
            self: *const ISVGSVGElement,
            suspendHandeID: u32,
        ) callconv(.winapi) HRESULT,
        unsuspendRedrawAll: *const fn(
            self: *const ISVGSVGElement,
        ) callconv(.winapi) HRESULT,
        forceRedraw: *const fn(
            self: *const ISVGSVGElement,
        ) callconv(.winapi) HRESULT,
        pauseAnimations: *const fn(
            self: *const ISVGSVGElement,
        ) callconv(.winapi) HRESULT,
        unpauseAnimations: *const fn(
            self: *const ISVGSVGElement,
        ) callconv(.winapi) HRESULT,
        animationsPaused: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        getCurrentTime: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*f32,
        ) callconv(.winapi) HRESULT,
        setCurrentTime: *const fn(
            self: *const ISVGSVGElement,
            seconds: f32,
        ) callconv(.winapi) HRESULT,
        getIntersectionList: *const fn(
            self: *const ISVGSVGElement,
            rect: ?*ISVGRect,
            referenceElement: ?*ISVGElement,
            pResult: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getEnclosureList: *const fn(
            self: *const ISVGSVGElement,
            rect: ?*ISVGRect,
            referenceElement: ?*ISVGElement,
            pResult: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        checkIntersection: *const fn(
            self: *const ISVGSVGElement,
            element: ?*ISVGElement,
            rect: ?*ISVGRect,
            pResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        checkEnclosure: *const fn(
            self: *const ISVGSVGElement,
            element: ?*ISVGElement,
            rect: ?*ISVGRect,
            pResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        deselectAll: *const fn(
            self: *const ISVGSVGElement,
        ) callconv(.winapi) HRESULT,
        createSVGNumber: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*?*ISVGNumber,
        ) callconv(.winapi) HRESULT,
        createSVGLength: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        createSVGAngle: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*?*ISVGAngle,
        ) callconv(.winapi) HRESULT,
        createSVGPoint: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        createSVGMatrix: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        createSVGRect: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        createSVGTransform: *const fn(
            self: *const ISVGSVGElement,
            pResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        createSVGTransformFromMatrix: *const fn(
            self: *const ISVGSVGElement,
            matrix: ?*ISVGMatrix,
            pResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        getElementById: *const fn(
            self: *const ISVGSVGElement,
            elementId: ?BSTR,
            pResult: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_x(self: *const ISVGSVGElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x(self, v);
    }
    pub fn get_x(self: *const ISVGSVGElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn putref_y(self: *const ISVGSVGElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y(self, v);
    }
    pub fn get_y(self: *const ISVGSVGElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn putref_width(self: *const ISVGSVGElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_width(self, v);
    }
    pub fn get_width(self: *const ISVGSVGElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn putref_height(self: *const ISVGSVGElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_height(self, v);
    }
    pub fn get_height(self: *const ISVGSVGElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_contentScriptType(self: *const ISVGSVGElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_contentScriptType(self, v);
    }
    pub fn get_contentScriptType(self: *const ISVGSVGElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentScriptType(self, p);
    }
    pub fn put_contentStyleType(self: *const ISVGSVGElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_contentStyleType(self, v);
    }
    pub fn get_contentStyleType(self: *const ISVGSVGElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentStyleType(self, p);
    }
    pub fn putref_viewport(self: *const ISVGSVGElement, v: ?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.putref_viewport(self, v);
    }
    pub fn get_viewport(self: *const ISVGSVGElement, p: ?*?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.get_viewport(self, p);
    }
    pub fn put_pixelUnitToMillimeterX(self: *const ISVGSVGElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelUnitToMillimeterX(self, v);
    }
    pub fn get_pixelUnitToMillimeterX(self: *const ISVGSVGElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelUnitToMillimeterX(self, p);
    }
    pub fn put_pixelUnitToMillimeterY(self: *const ISVGSVGElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pixelUnitToMillimeterY(self, v);
    }
    pub fn get_pixelUnitToMillimeterY(self: *const ISVGSVGElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pixelUnitToMillimeterY(self, p);
    }
    pub fn put_screenPixelToMillimeterX(self: *const ISVGSVGElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_screenPixelToMillimeterX(self, v);
    }
    pub fn get_screenPixelToMillimeterX(self: *const ISVGSVGElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenPixelToMillimeterX(self, p);
    }
    pub fn put_screenPixelToMillimeterY(self: *const ISVGSVGElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_screenPixelToMillimeterY(self, v);
    }
    pub fn get_screenPixelToMillimeterY(self: *const ISVGSVGElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenPixelToMillimeterY(self, p);
    }
    pub fn put_useCurrentView(self: *const ISVGSVGElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_useCurrentView(self, v);
    }
    pub fn get_useCurrentView(self: *const ISVGSVGElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_useCurrentView(self, p);
    }
    pub fn putref_currentView(self: *const ISVGSVGElement, v: ?*ISVGViewSpec) callconv(.@"inline") HRESULT {
        return self.vtable.putref_currentView(self, v);
    }
    pub fn get_currentView(self: *const ISVGSVGElement, p: ?*?*ISVGViewSpec) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentView(self, p);
    }
    pub fn put_currentScale(self: *const ISVGSVGElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_currentScale(self, v);
    }
    pub fn get_currentScale(self: *const ISVGSVGElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentScale(self, p);
    }
    pub fn putref_currentTranslate(self: *const ISVGSVGElement, v: ?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.putref_currentTranslate(self, v);
    }
    pub fn get_currentTranslate(self: *const ISVGSVGElement, p: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentTranslate(self, p);
    }
    pub fn suspendRedraw(self: *const ISVGSVGElement, maxWaitMilliseconds: u32, pResult: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.suspendRedraw(self, maxWaitMilliseconds, pResult);
    }
    pub fn unsuspendRedraw(self: *const ISVGSVGElement, suspendHandeID: u32) callconv(.@"inline") HRESULT {
        return self.vtable.unsuspendRedraw(self, suspendHandeID);
    }
    pub fn unsuspendRedrawAll(self: *const ISVGSVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.unsuspendRedrawAll(self);
    }
    pub fn forceRedraw(self: *const ISVGSVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.forceRedraw(self);
    }
    pub fn pauseAnimations(self: *const ISVGSVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.pauseAnimations(self);
    }
    pub fn unpauseAnimations(self: *const ISVGSVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.unpauseAnimations(self);
    }
    pub fn animationsPaused(self: *const ISVGSVGElement, pResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.animationsPaused(self, pResult);
    }
    pub fn getCurrentTime(self: *const ISVGSVGElement, pResult: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.getCurrentTime(self, pResult);
    }
    pub fn setCurrentTime(self: *const ISVGSVGElement, seconds: f32) callconv(.@"inline") HRESULT {
        return self.vtable.setCurrentTime(self, seconds);
    }
    pub fn getIntersectionList(self: *const ISVGSVGElement, rect: ?*ISVGRect, referenceElement: ?*ISVGElement, pResult: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getIntersectionList(self, rect, referenceElement, pResult);
    }
    pub fn getEnclosureList(self: *const ISVGSVGElement, rect: ?*ISVGRect, referenceElement: ?*ISVGElement, pResult: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getEnclosureList(self, rect, referenceElement, pResult);
    }
    pub fn checkIntersection(self: *const ISVGSVGElement, element: ?*ISVGElement, rect: ?*ISVGRect, pResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.checkIntersection(self, element, rect, pResult);
    }
    pub fn checkEnclosure(self: *const ISVGSVGElement, element: ?*ISVGElement, rect: ?*ISVGRect, pResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.checkEnclosure(self, element, rect, pResult);
    }
    pub fn deselectAll(self: *const ISVGSVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.deselectAll(self);
    }
    pub fn createSVGNumber(self: *const ISVGSVGElement, pResult: ?*?*ISVGNumber) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGNumber(self, pResult);
    }
    pub fn createSVGLength(self: *const ISVGSVGElement, pResult: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGLength(self, pResult);
    }
    pub fn createSVGAngle(self: *const ISVGSVGElement, pResult: ?*?*ISVGAngle) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGAngle(self, pResult);
    }
    pub fn createSVGPoint(self: *const ISVGSVGElement, pResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPoint(self, pResult);
    }
    pub fn createSVGMatrix(self: *const ISVGSVGElement, pResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGMatrix(self, pResult);
    }
    pub fn createSVGRect(self: *const ISVGSVGElement, pResult: ?*?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGRect(self, pResult);
    }
    pub fn createSVGTransform(self: *const ISVGSVGElement, pResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGTransform(self, pResult);
    }
    pub fn createSVGTransformFromMatrix(self: *const ISVGSVGElement, matrix: ?*ISVGMatrix, pResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGTransformFromMatrix(self, matrix, pResult);
    }
    pub fn getElementById(self: *const ISVGSVGElement, elementId: ?BSTR, pResult: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.getElementById(self, elementId, pResult);
    }
};

const IID_IDOMNodeIterator_Value = Guid.initString("30510746-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMNodeIterator = &IID_IDOMNodeIterator_Value;
pub const IDOMNodeIterator = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_root: *const fn(
            self: *const IDOMNodeIterator,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_whatToShow: *const fn(
            self: *const IDOMNodeIterator,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filter: *const fn(
            self: *const IDOMNodeIterator,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_expandEntityReferences: *const fn(
            self: *const IDOMNodeIterator,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        nextNode: *const fn(
            self: *const IDOMNodeIterator,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        previousNode: *const fn(
            self: *const IDOMNodeIterator,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        detach: *const fn(
            self: *const IDOMNodeIterator,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_root(self: *const IDOMNodeIterator, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_root(self, p);
    }
    pub fn get_whatToShow(self: *const IDOMNodeIterator, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_whatToShow(self, p);
    }
    pub fn get_filter(self: *const IDOMNodeIterator, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_filter(self, p);
    }
    pub fn get_expandEntityReferences(self: *const IDOMNodeIterator, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_expandEntityReferences(self, p);
    }
    pub fn nextNode(self: *const IDOMNodeIterator, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.nextNode(self, ppRetNode);
    }
    pub fn previousNode(self: *const IDOMNodeIterator, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.previousNode(self, ppRetNode);
    }
    pub fn detach(self: *const IDOMNodeIterator) callconv(.@"inline") HRESULT {
        return self.vtable.detach(self);
    }
};

const IID_IDOMTreeWalker_Value = Guid.initString("30510748-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMTreeWalker = &IID_IDOMTreeWalker_Value;
pub const IDOMTreeWalker = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_root: *const fn(
            self: *const IDOMTreeWalker,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_whatToShow: *const fn(
            self: *const IDOMTreeWalker,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filter: *const fn(
            self: *const IDOMTreeWalker,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_expandEntityReferences: *const fn(
            self: *const IDOMTreeWalker,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        putref_currentNode: *const fn(
            self: *const IDOMTreeWalker,
            v: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentNode: *const fn(
            self: *const IDOMTreeWalker,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        parentNode: *const fn(
            self: *const IDOMTreeWalker,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        firstChild: *const fn(
            self: *const IDOMTreeWalker,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        lastChild: *const fn(
            self: *const IDOMTreeWalker,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        previousSibling: *const fn(
            self: *const IDOMTreeWalker,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        nextSibling: *const fn(
            self: *const IDOMTreeWalker,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        previousNode: *const fn(
            self: *const IDOMTreeWalker,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        nextNode: *const fn(
            self: *const IDOMTreeWalker,
            ppRetNode: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_root(self: *const IDOMTreeWalker, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_root(self, p);
    }
    pub fn get_whatToShow(self: *const IDOMTreeWalker, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_whatToShow(self, p);
    }
    pub fn get_filter(self: *const IDOMTreeWalker, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_filter(self, p);
    }
    pub fn get_expandEntityReferences(self: *const IDOMTreeWalker, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_expandEntityReferences(self, p);
    }
    pub fn putref_currentNode(self: *const IDOMTreeWalker, v: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.putref_currentNode(self, v);
    }
    pub fn get_currentNode(self: *const IDOMTreeWalker, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentNode(self, p);
    }
    pub fn parentNode(self: *const IDOMTreeWalker, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.parentNode(self, ppRetNode);
    }
    pub fn firstChild(self: *const IDOMTreeWalker, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.firstChild(self, ppRetNode);
    }
    pub fn lastChild(self: *const IDOMTreeWalker, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.lastChild(self, ppRetNode);
    }
    pub fn previousSibling(self: *const IDOMTreeWalker, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.previousSibling(self, ppRetNode);
    }
    pub fn nextSibling(self: *const IDOMTreeWalker, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.nextSibling(self, ppRetNode);
    }
    pub fn previousNode(self: *const IDOMTreeWalker, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.previousNode(self, ppRetNode);
    }
    pub fn nextNode(self: *const IDOMTreeWalker, ppRetNode: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.nextNode(self, ppRetNode);
    }
};

const IID_IDOMProcessingInstruction_Value = Guid.initString("30510742-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMProcessingInstruction = &IID_IDOMProcessingInstruction_Value;
pub const IDOMProcessingInstruction = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const IDOMProcessingInstruction,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn(
            self: *const IDOMProcessingInstruction,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IDOMProcessingInstruction,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_target(self: *const IDOMProcessingInstruction, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_target(self, p);
    }
    pub fn put_data(self: *const IDOMProcessingInstruction, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_data(self, v);
    }
    pub fn get_data(self: *const IDOMProcessingInstruction, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
};

const IID_IHTMLDocument3_Value = Guid.initString("3050f485-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDocument3 = &IID_IHTMLDocument3_Value;
pub const IHTMLDocument3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        releaseCapture: *const fn(
            self: *const IHTMLDocument3,
        ) callconv(.winapi) HRESULT,
        recalc: *const fn(
            self: *const IHTMLDocument3,
            fForce: i16,
        ) callconv(.winapi) HRESULT,
        createTextNode: *const fn(
            self: *const IHTMLDocument3,
            text: ?BSTR,
            newTextNode: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_documentElement: *const fn(
            self: *const IHTMLDocument3,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_uniqueID: *const fn(
            self: *const IHTMLDocument3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        attachEvent: *const fn(
            self: *const IHTMLDocument3,
            event: ?BSTR,
            pDisp: ?*IDispatch,
            pfResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        detachEvent: *const fn(
            self: *const IHTMLDocument3,
            event: ?BSTR,
            pDisp: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onrowsdelete: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onrowsdelete: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onrowsinserted: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onrowsinserted: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncellchange: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncellchange: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondatasetchanged: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondatasetchanged: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondataavailable: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondataavailable: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondatasetcomplete: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondatasetcomplete: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onpropertychange: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onpropertychange: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dir: *const fn(
            self: *const IHTMLDocument3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dir: *const fn(
            self: *const IHTMLDocument3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncontextmenu: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncontextmenu: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstop: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstop: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        createDocumentFragment: *const fn(
            self: *const IHTMLDocument3,
            pNewDoc: ?*?*IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentDocument: *const fn(
            self: *const IHTMLDocument3,
            p: ?*?*IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enableDownload: *const fn(
            self: *const IHTMLDocument3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enableDownload: *const fn(
            self: *const IHTMLDocument3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseUrl: *const fn(
            self: *const IHTMLDocument3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseUrl: *const fn(
            self: *const IHTMLDocument3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_childNodes: *const fn(
            self: *const IHTMLDocument3,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_inheritStyleSheets: *const fn(
            self: *const IHTMLDocument3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_inheritStyleSheets: *const fn(
            self: *const IHTMLDocument3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeeditfocus: *const fn(
            self: *const IHTMLDocument3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeeditfocus: *const fn(
            self: *const IHTMLDocument3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getElementsByName: *const fn(
            self: *const IHTMLDocument3,
            v: ?BSTR,
            pelColl: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        getElementById: *const fn(
            self: *const IHTMLDocument3,
            v: ?BSTR,
            pel: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        getElementsByTagName: *const fn(
            self: *const IHTMLDocument3,
            v: ?BSTR,
            pelColl: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn releaseCapture(self: *const IHTMLDocument3) callconv(.@"inline") HRESULT {
        return self.vtable.releaseCapture(self);
    }
    pub fn recalc(self: *const IHTMLDocument3, fForce: i16) callconv(.@"inline") HRESULT {
        return self.vtable.recalc(self, fForce);
    }
    pub fn createTextNode(self: *const IHTMLDocument3, text: ?BSTR, newTextNode: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.createTextNode(self, text, newTextNode);
    }
    pub fn get_documentElement(self: *const IHTMLDocument3, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_documentElement(self, p);
    }
    pub fn get_uniqueID(self: *const IHTMLDocument3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_uniqueID(self, p);
    }
    pub fn attachEvent(self: *const IHTMLDocument3, event: ?BSTR, pDisp: ?*IDispatch, pfResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.attachEvent(self, event, pDisp, pfResult);
    }
    pub fn detachEvent(self: *const IHTMLDocument3, event: ?BSTR, pDisp: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.detachEvent(self, event, pDisp);
    }
    pub fn put_onrowsdelete(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onrowsdelete(self, v);
    }
    pub fn get_onrowsdelete(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onrowsdelete(self, p);
    }
    pub fn put_onrowsinserted(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onrowsinserted(self, v);
    }
    pub fn get_onrowsinserted(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onrowsinserted(self, p);
    }
    pub fn put_oncellchange(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncellchange(self, v);
    }
    pub fn get_oncellchange(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncellchange(self, p);
    }
    pub fn put_ondatasetchanged(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondatasetchanged(self, v);
    }
    pub fn get_ondatasetchanged(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondatasetchanged(self, p);
    }
    pub fn put_ondataavailable(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondataavailable(self, v);
    }
    pub fn get_ondataavailable(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondataavailable(self, p);
    }
    pub fn put_ondatasetcomplete(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondatasetcomplete(self, v);
    }
    pub fn get_ondatasetcomplete(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondatasetcomplete(self, p);
    }
    pub fn put_onpropertychange(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onpropertychange(self, v);
    }
    pub fn get_onpropertychange(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onpropertychange(self, p);
    }
    pub fn put_dir(self: *const IHTMLDocument3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dir(self, v);
    }
    pub fn get_dir(self: *const IHTMLDocument3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dir(self, p);
    }
    pub fn put_oncontextmenu(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncontextmenu(self, v);
    }
    pub fn get_oncontextmenu(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncontextmenu(self, p);
    }
    pub fn put_onstop(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstop(self, v);
    }
    pub fn get_onstop(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstop(self, p);
    }
    pub fn createDocumentFragment(self: *const IHTMLDocument3, pNewDoc: ?*?*IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.createDocumentFragment(self, pNewDoc);
    }
    pub fn get_parentDocument(self: *const IHTMLDocument3, p: ?*?*IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentDocument(self, p);
    }
    pub fn put_enableDownload(self: *const IHTMLDocument3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_enableDownload(self, v);
    }
    pub fn get_enableDownload(self: *const IHTMLDocument3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_enableDownload(self, p);
    }
    pub fn put_baseUrl(self: *const IHTMLDocument3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_baseUrl(self, v);
    }
    pub fn get_baseUrl(self: *const IHTMLDocument3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseUrl(self, p);
    }
    pub fn get_childNodes(self: *const IHTMLDocument3, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_childNodes(self, p);
    }
    pub fn put_inheritStyleSheets(self: *const IHTMLDocument3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_inheritStyleSheets(self, v);
    }
    pub fn get_inheritStyleSheets(self: *const IHTMLDocument3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_inheritStyleSheets(self, p);
    }
    pub fn put_onbeforeeditfocus(self: *const IHTMLDocument3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeeditfocus(self, v);
    }
    pub fn get_onbeforeeditfocus(self: *const IHTMLDocument3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeeditfocus(self, p);
    }
    pub fn getElementsByName(self: *const IHTMLDocument3, v: ?BSTR, pelColl: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getElementsByName(self, v, pelColl);
    }
    pub fn getElementById(self: *const IHTMLDocument3, v: ?BSTR, pel: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.getElementById(self, v, pel);
    }
    pub fn getElementsByTagName(self: *const IHTMLDocument3, v: ?BSTR, pelColl: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.getElementsByTagName(self, v, pelColl);
    }
};

const IID_IHTMLDocument4_Value = Guid.initString("3050f69a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDocument4 = &IID_IHTMLDocument4_Value;
pub const IHTMLDocument4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        focus: *const fn(
            self: *const IHTMLDocument4,
        ) callconv(.winapi) HRESULT,
        hasFocus: *const fn(
            self: *const IHTMLDocument4,
            pfFocus: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onselectionchange: *const fn(
            self: *const IHTMLDocument4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onselectionchange: *const fn(
            self: *const IHTMLDocument4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaces: *const fn(
            self: *const IHTMLDocument4,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        createDocumentFromUrl: *const fn(
            self: *const IHTMLDocument4,
            bstrUrl: ?BSTR,
            bstrOptions: ?BSTR,
            newDoc: ?*?*IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_media: *const fn(
            self: *const IHTMLDocument4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const IHTMLDocument4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        createEventObject: *const fn(
            self: *const IHTMLDocument4,
            pvarEventObject: ?*VARIANT,
            ppEventObj: ?*?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
        fireEvent: *const fn(
            self: *const IHTMLDocument4,
            bstrEventName: ?BSTR,
            pvarEventObject: ?*VARIANT,
            pfCancelled: ?*i16,
        ) callconv(.winapi) HRESULT,
        createRenderStyle: *const fn(
            self: *const IHTMLDocument4,
            v: ?BSTR,
            ppIHTMLRenderStyle: ?*?*IHTMLRenderStyle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_oncontrolselect: *const fn(
            self: *const IHTMLDocument4,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oncontrolselect: *const fn(
            self: *const IHTMLDocument4,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URLUnencoded: *const fn(
            self: *const IHTMLDocument4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn focus(self: *const IHTMLDocument4) callconv(.@"inline") HRESULT {
        return self.vtable.focus(self);
    }
    pub fn hasFocus(self: *const IHTMLDocument4, pfFocus: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasFocus(self, pfFocus);
    }
    pub fn put_onselectionchange(self: *const IHTMLDocument4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onselectionchange(self, v);
    }
    pub fn get_onselectionchange(self: *const IHTMLDocument4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onselectionchange(self, p);
    }
    pub fn get_namespaces(self: *const IHTMLDocument4, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_namespaces(self, p);
    }
    pub fn createDocumentFromUrl(self: *const IHTMLDocument4, bstrUrl: ?BSTR, bstrOptions: ?BSTR, newDoc: ?*?*IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.createDocumentFromUrl(self, bstrUrl, bstrOptions, newDoc);
    }
    pub fn put_media(self: *const IHTMLDocument4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_media(self, v);
    }
    pub fn get_media(self: *const IHTMLDocument4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
    pub fn createEventObject(self: *const IHTMLDocument4, pvarEventObject: ?*VARIANT, ppEventObj: ?*?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.createEventObject(self, pvarEventObject, ppEventObj);
    }
    pub fn fireEvent(self: *const IHTMLDocument4, bstrEventName: ?BSTR, pvarEventObject: ?*VARIANT, pfCancelled: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.fireEvent(self, bstrEventName, pvarEventObject, pfCancelled);
    }
    pub fn createRenderStyle(self: *const IHTMLDocument4, v: ?BSTR, ppIHTMLRenderStyle: ?*?*IHTMLRenderStyle) callconv(.@"inline") HRESULT {
        return self.vtable.createRenderStyle(self, v, ppIHTMLRenderStyle);
    }
    pub fn put_oncontrolselect(self: *const IHTMLDocument4, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_oncontrolselect(self, v);
    }
    pub fn get_oncontrolselect(self: *const IHTMLDocument4, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_oncontrolselect(self, p);
    }
    pub fn get_URLUnencoded(self: *const IHTMLDocument4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_URLUnencoded(self, p);
    }
};

const IID_IHTMLDocument5_Value = Guid.initString("3050f80c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDocument5 = &IID_IHTMLDocument5_Value;
pub const IHTMLDocument5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmousewheel: *const fn(
            self: *const IHTMLDocument5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmousewheel: *const fn(
            self: *const IHTMLDocument5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_doctype: *const fn(
            self: *const IHTMLDocument5,
            p: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_implementation: *const fn(
            self: *const IHTMLDocument5,
            p: ?*?*IHTMLDOMImplementation,
        ) callconv(.winapi) HRESULT,
        createAttribute: *const fn(
            self: *const IHTMLDocument5,
            bstrattrName: ?BSTR,
            ppattribute: ?*?*IHTMLDOMAttribute,
        ) callconv(.winapi) HRESULT,
        createComment: *const fn(
            self: *const IHTMLDocument5,
            bstrdata: ?BSTR,
            ppRetNode: ?*?*IHTMLDOMNode,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocusin: *const fn(
            self: *const IHTMLDocument5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocusin: *const fn(
            self: *const IHTMLDocument5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocusout: *const fn(
            self: *const IHTMLDocument5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocusout: *const fn(
            self: *const IHTMLDocument5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onactivate: *const fn(
            self: *const IHTMLDocument5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onactivate: *const fn(
            self: *const IHTMLDocument5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondeactivate: *const fn(
            self: *const IHTMLDocument5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ondeactivate: *const fn(
            self: *const IHTMLDocument5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeactivate: *const fn(
            self: *const IHTMLDocument5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeactivate: *const fn(
            self: *const IHTMLDocument5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforedeactivate: *const fn(
            self: *const IHTMLDocument5,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforedeactivate: *const fn(
            self: *const IHTMLDocument5,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_compatMode: *const fn(
            self: *const IHTMLDocument5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onmousewheel(self: *const IHTMLDocument5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmousewheel(self, v);
    }
    pub fn get_onmousewheel(self: *const IHTMLDocument5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmousewheel(self, p);
    }
    pub fn get_doctype(self: *const IHTMLDocument5, p: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.get_doctype(self, p);
    }
    pub fn get_implementation(self: *const IHTMLDocument5, p: ?*?*IHTMLDOMImplementation) callconv(.@"inline") HRESULT {
        return self.vtable.get_implementation(self, p);
    }
    pub fn createAttribute(self: *const IHTMLDocument5, bstrattrName: ?BSTR, ppattribute: ?*?*IHTMLDOMAttribute) callconv(.@"inline") HRESULT {
        return self.vtable.createAttribute(self, bstrattrName, ppattribute);
    }
    pub fn createComment(self: *const IHTMLDocument5, bstrdata: ?BSTR, ppRetNode: ?*?*IHTMLDOMNode) callconv(.@"inline") HRESULT {
        return self.vtable.createComment(self, bstrdata, ppRetNode);
    }
    pub fn put_onfocusin(self: *const IHTMLDocument5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocusin(self, v);
    }
    pub fn get_onfocusin(self: *const IHTMLDocument5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocusin(self, p);
    }
    pub fn put_onfocusout(self: *const IHTMLDocument5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocusout(self, v);
    }
    pub fn get_onfocusout(self: *const IHTMLDocument5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocusout(self, p);
    }
    pub fn put_onactivate(self: *const IHTMLDocument5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onactivate(self, v);
    }
    pub fn get_onactivate(self: *const IHTMLDocument5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onactivate(self, p);
    }
    pub fn put_ondeactivate(self: *const IHTMLDocument5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ondeactivate(self, v);
    }
    pub fn get_ondeactivate(self: *const IHTMLDocument5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ondeactivate(self, p);
    }
    pub fn put_onbeforeactivate(self: *const IHTMLDocument5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeactivate(self, v);
    }
    pub fn get_onbeforeactivate(self: *const IHTMLDocument5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeactivate(self, p);
    }
    pub fn put_onbeforedeactivate(self: *const IHTMLDocument5, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforedeactivate(self, v);
    }
    pub fn get_onbeforedeactivate(self: *const IHTMLDocument5, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforedeactivate(self, p);
    }
    pub fn get_compatMode(self: *const IHTMLDocument5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_compatMode(self, p);
    }
};

const IID_IHTMLDocument6_Value = Guid.initString("30510417-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDocument6 = &IID_IHTMLDocument6_Value;
pub const IHTMLDocument6 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_compatible: *const fn(
            self: *const IHTMLDocument6,
            p: ?*?*IHTMLDocumentCompatibleInfoCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_documentMode: *const fn(
            self: *const IHTMLDocument6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstorage: *const fn(
            self: *const IHTMLDocument6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstorage: *const fn(
            self: *const IHTMLDocument6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstoragecommit: *const fn(
            self: *const IHTMLDocument6,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstoragecommit: *const fn(
            self: *const IHTMLDocument6,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getElementById: *const fn(
            self: *const IHTMLDocument6,
            bstrId: ?BSTR,
            ppRetElement: ?*?*IHTMLElement2,
        ) callconv(.winapi) HRESULT,
        updateSettings: *const fn(
            self: *const IHTMLDocument6,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_compatible(self: *const IHTMLDocument6, p: ?*?*IHTMLDocumentCompatibleInfoCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_compatible(self, p);
    }
    pub fn get_documentMode(self: *const IHTMLDocument6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_documentMode(self, p);
    }
    pub fn put_onstorage(self: *const IHTMLDocument6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstorage(self, v);
    }
    pub fn get_onstorage(self: *const IHTMLDocument6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstorage(self, p);
    }
    pub fn put_onstoragecommit(self: *const IHTMLDocument6, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstoragecommit(self, v);
    }
    pub fn get_onstoragecommit(self: *const IHTMLDocument6, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstoragecommit(self, p);
    }
    pub fn getElementById(self: *const IHTMLDocument6, bstrId: ?BSTR, ppRetElement: ?*?*IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.getElementById(self, bstrId, ppRetElement);
    }
    pub fn updateSettings(self: *const IHTMLDocument6) callconv(.@"inline") HRESULT {
        return self.vtable.updateSettings(self);
    }
};

const IID_IHTMLDocument8_Value = Guid.initString("305107d0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDocument8 = &IID_IHTMLDocument8_Value;
pub const IHTMLDocument8 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmscontentzoom: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmscontentzoom: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerdown: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerdown: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointermove: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointermove: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerup: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerup: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerover: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerover: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerout: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerout: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointercancel: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointercancel: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmspointerhover: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmspointerhover: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturestart: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturestart: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturechange: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturechange: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgestureend: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgestureend: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturehold: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturehold: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturetap: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturetap: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsgesturedoubletap: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsgesturedoubletap: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsinertiastart: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsinertiastart: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        elementsFromPoint: *const fn(
            self: *const IHTMLDocument8,
            x: f32,
            y: f32,
            elementsHit: ?*?*IHTMLDOMChildrenCollection,
        ) callconv(.winapi) HRESULT,
        elementsFromRect: *const fn(
            self: *const IHTMLDocument8,
            left: f32,
            top: f32,
            width: f32,
            height: f32,
            elementsHit: ?*?*IHTMLDOMChildrenCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmsmanipulationstatechanged: *const fn(
            self: *const IHTMLDocument8,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmsmanipulationstatechanged: *const fn(
            self: *const IHTMLDocument8,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msCapsLockWarningOff: *const fn(
            self: *const IHTMLDocument8,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msCapsLockWarningOff: *const fn(
            self: *const IHTMLDocument8,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onmscontentzoom(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmscontentzoom(self, v);
    }
    pub fn get_onmscontentzoom(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmscontentzoom(self, p);
    }
    pub fn put_onmspointerdown(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerdown(self, v);
    }
    pub fn get_onmspointerdown(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerdown(self, p);
    }
    pub fn put_onmspointermove(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointermove(self, v);
    }
    pub fn get_onmspointermove(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointermove(self, p);
    }
    pub fn put_onmspointerup(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerup(self, v);
    }
    pub fn get_onmspointerup(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerup(self, p);
    }
    pub fn put_onmspointerover(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerover(self, v);
    }
    pub fn get_onmspointerover(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerover(self, p);
    }
    pub fn put_onmspointerout(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerout(self, v);
    }
    pub fn get_onmspointerout(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerout(self, p);
    }
    pub fn put_onmspointercancel(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointercancel(self, v);
    }
    pub fn get_onmspointercancel(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointercancel(self, p);
    }
    pub fn put_onmspointerhover(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmspointerhover(self, v);
    }
    pub fn get_onmspointerhover(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmspointerhover(self, p);
    }
    pub fn put_onmsgesturestart(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturestart(self, v);
    }
    pub fn get_onmsgesturestart(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturestart(self, p);
    }
    pub fn put_onmsgesturechange(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturechange(self, v);
    }
    pub fn get_onmsgesturechange(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturechange(self, p);
    }
    pub fn put_onmsgestureend(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgestureend(self, v);
    }
    pub fn get_onmsgestureend(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgestureend(self, p);
    }
    pub fn put_onmsgesturehold(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturehold(self, v);
    }
    pub fn get_onmsgesturehold(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturehold(self, p);
    }
    pub fn put_onmsgesturetap(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturetap(self, v);
    }
    pub fn get_onmsgesturetap(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturetap(self, p);
    }
    pub fn put_onmsgesturedoubletap(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsgesturedoubletap(self, v);
    }
    pub fn get_onmsgesturedoubletap(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsgesturedoubletap(self, p);
    }
    pub fn put_onmsinertiastart(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsinertiastart(self, v);
    }
    pub fn get_onmsinertiastart(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsinertiastart(self, p);
    }
    pub fn elementsFromPoint(self: *const IHTMLDocument8, x: f32, y: f32, elementsHit: ?*?*IHTMLDOMChildrenCollection) callconv(.@"inline") HRESULT {
        return self.vtable.elementsFromPoint(self, x, y, elementsHit);
    }
    pub fn elementsFromRect(self: *const IHTMLDocument8, left: f32, top: f32, width: f32, height: f32, elementsHit: ?*?*IHTMLDOMChildrenCollection) callconv(.@"inline") HRESULT {
        return self.vtable.elementsFromRect(self, left, top, width, height, elementsHit);
    }
    pub fn put_onmsmanipulationstatechanged(self: *const IHTMLDocument8, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmsmanipulationstatechanged(self, v);
    }
    pub fn get_onmsmanipulationstatechanged(self: *const IHTMLDocument8, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmsmanipulationstatechanged(self, p);
    }
    pub fn put_msCapsLockWarningOff(self: *const IHTMLDocument8, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_msCapsLockWarningOff(self, v);
    }
    pub fn get_msCapsLockWarningOff(self: *const IHTMLDocument8, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_msCapsLockWarningOff(self, p);
    }
};

const IID_IDocumentEvent_Value = Guid.initString("305104bc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDocumentEvent = &IID_IDocumentEvent_Value;
pub const IDocumentEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createEvent: *const fn(
            self: *const IDocumentEvent,
            eventType: ?BSTR,
            ppEvent: ?*?*IDOMEvent,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createEvent(self: *const IDocumentEvent, eventType: ?BSTR, ppEvent: ?*?*IDOMEvent) callconv(.@"inline") HRESULT {
        return self.vtable.createEvent(self, eventType, ppEvent);
    }
};

const IID_IDocumentRange_Value = Guid.initString("305104af-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDocumentRange = &IID_IDocumentRange_Value;
pub const IDocumentRange = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createRange: *const fn(
            self: *const IDocumentRange,
            ppIHTMLDOMRange: ?*?*IHTMLDOMRange,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createRange(self: *const IDocumentRange, ppIHTMLDOMRange: ?*?*IHTMLDOMRange) callconv(.@"inline") HRESULT {
        return self.vtable.createRange(self, ppIHTMLDOMRange);
    }
};

const IID_IDocumentSelector_Value = Guid.initString("30510462-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDocumentSelector = &IID_IDocumentSelector_Value;
pub const IDocumentSelector = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        querySelector: *const fn(
            self: *const IDocumentSelector,
            v: ?BSTR,
            pel: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        querySelectorAll: *const fn(
            self: *const IDocumentSelector,
            v: ?BSTR,
            pel: ?*?*IHTMLDOMChildrenCollection,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn querySelector(self: *const IDocumentSelector, v: ?BSTR, pel: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.querySelector(self, v, pel);
    }
    pub fn querySelectorAll(self: *const IDocumentSelector, v: ?BSTR, pel: ?*?*IHTMLDOMChildrenCollection) callconv(.@"inline") HRESULT {
        return self.vtable.querySelectorAll(self, v, pel);
    }
};

const IID_IDocumentTraversal_Value = Guid.initString("30510744-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDocumentTraversal = &IID_IDocumentTraversal_Value;
pub const IDocumentTraversal = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createNodeIterator: *const fn(
            self: *const IDocumentTraversal,
            pRootNode: ?*IDispatch,
            ulWhatToShow: i32,
            pFilter: ?*VARIANT,
            fEntityReferenceExpansion: i16,
            ppNodeIterator: ?*?*IDOMNodeIterator,
        ) callconv(.winapi) HRESULT,
        createTreeWalker: *const fn(
            self: *const IDocumentTraversal,
            pRootNode: ?*IDispatch,
            ulWhatToShow: i32,
            pFilter: ?*VARIANT,
            fEntityReferenceExpansion: i16,
            ppTreeWalker: ?*?*IDOMTreeWalker,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createNodeIterator(self: *const IDocumentTraversal, pRootNode: ?*IDispatch, ulWhatToShow: i32, pFilter: ?*VARIANT, fEntityReferenceExpansion: i16, ppNodeIterator: ?*?*IDOMNodeIterator) callconv(.@"inline") HRESULT {
        return self.vtable.createNodeIterator(self, pRootNode, ulWhatToShow, pFilter, fEntityReferenceExpansion, ppNodeIterator);
    }
    pub fn createTreeWalker(self: *const IDocumentTraversal, pRootNode: ?*IDispatch, ulWhatToShow: i32, pFilter: ?*VARIANT, fEntityReferenceExpansion: i16, ppTreeWalker: ?*?*IDOMTreeWalker) callconv(.@"inline") HRESULT {
        return self.vtable.createTreeWalker(self, pRootNode, ulWhatToShow, pFilter, fEntityReferenceExpansion, ppTreeWalker);
    }
};

const IID_DispHTMLDocument_Value = Guid.initString("3050f55f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDocument = &IID_DispHTMLDocument_Value;
pub const DispHTMLDocument = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DWebBridgeEvents_Value = Guid.initString("a6d897ff-0a95-11d1-b0ba-006008166e11");
pub const IID_DWebBridgeEvents = &IID_DWebBridgeEvents_Value;
pub const DWebBridgeEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IWebBridge_Value = Guid.initString("ae24fdad-03c6-11d1-8b76-0080c744f389");
pub const IID_IWebBridge = &IID_IWebBridge_Value;
pub const IWebBridge = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URL: *const fn(
            self: *const IWebBridge,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn(
            self: *const IWebBridge,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scrollbar: *const fn(
            self: *const IWebBridge,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scrollbar: *const fn(
            self: *const IWebBridge,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_embed: *const fn(
            self: *const IWebBridge,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_embed: *const fn(
            self: *const IWebBridge,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_event: *const fn(
            self: *const IWebBridge,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IWebBridge,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        AboutBox: *const fn(
            self: *const IWebBridge,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_URL(self: *const IWebBridge, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_URL(self, v);
    }
    pub fn get_URL(self: *const IWebBridge, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_URL(self, p);
    }
    pub fn put_Scrollbar(self: *const IWebBridge, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_Scrollbar(self, v);
    }
    pub fn get_Scrollbar(self: *const IWebBridge, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_Scrollbar(self, p);
    }
    pub fn put_embed(self: *const IWebBridge, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_embed(self, v);
    }
    pub fn get_embed(self: *const IWebBridge, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_embed(self, p);
    }
    pub fn get_event(self: *const IWebBridge, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_event(self, p);
    }
    pub fn get_readyState(self: *const IWebBridge, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn AboutBox(self: *const IWebBridge) callconv(.@"inline") HRESULT {
        return self.vtable.AboutBox(self);
    }
};

const IID_IWBScriptControl_Value = Guid.initString("a5170870-0cf8-11d1-8b91-0080c744f389");
pub const IID_IWBScriptControl = &IID_IWBScriptControl_Value;
pub const IWBScriptControl = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        raiseEvent: *const fn(
            self: *const IWBScriptControl,
            name: ?BSTR,
            eventData: VARIANT,
        ) callconv(.winapi) HRESULT,
        bubbleEvent: *const fn(
            self: *const IWBScriptControl,
        ) callconv(.winapi) HRESULT,
        setContextMenu: *const fn(
            self: *const IWBScriptControl,
            menuItemPairs: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectableContent: *const fn(
            self: *const IWBScriptControl,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectableContent: *const fn(
            self: *const IWBScriptControl,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frozen: *const fn(
            self: *const IWBScriptControl,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollbar: *const fn(
            self: *const IWBScriptControl,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollbar: *const fn(
            self: *const IWBScriptControl,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn(
            self: *const IWBScriptControl,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_visibility: *const fn(
            self: *const IWBScriptControl,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onvisibilitychange: *const fn(
            self: *const IWBScriptControl,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onvisibilitychange: *const fn(
            self: *const IWBScriptControl,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn raiseEvent(self: *const IWBScriptControl, name: ?BSTR, eventData: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.raiseEvent(self, name, eventData);
    }
    pub fn bubbleEvent(self: *const IWBScriptControl) callconv(.@"inline") HRESULT {
        return self.vtable.bubbleEvent(self);
    }
    pub fn setContextMenu(self: *const IWBScriptControl, menuItemPairs: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.setContextMenu(self, menuItemPairs);
    }
    pub fn put_selectableContent(self: *const IWBScriptControl, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectableContent(self, v);
    }
    pub fn get_selectableContent(self: *const IWBScriptControl, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectableContent(self, p);
    }
    pub fn get_frozen(self: *const IWBScriptControl, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_frozen(self, p);
    }
    pub fn put_scrollbar(self: *const IWBScriptControl, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollbar(self, v);
    }
    pub fn get_scrollbar(self: *const IWBScriptControl, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollbar(self, p);
    }
    pub fn get_version(self: *const IWBScriptControl, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_version(self, p);
    }
    pub fn get_visibility(self: *const IWBScriptControl, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_visibility(self, p);
    }
    pub fn put_onvisibilitychange(self: *const IWBScriptControl, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onvisibilitychange(self, v);
    }
    pub fn get_onvisibilitychange(self: *const IWBScriptControl, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onvisibilitychange(self, p);
    }
};

const IID_IHTMLEmbedElement_Value = Guid.initString("3050f25f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEmbedElement = &IID_IHTMLEmbedElement_Value;
pub const IHTMLEmbedElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hidden: *const fn(
            self: *const IHTMLEmbedElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hidden: *const fn(
            self: *const IHTMLEmbedElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_palette: *const fn(
            self: *const IHTMLEmbedElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pluginspage: *const fn(
            self: *const IHTMLEmbedElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLEmbedElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLEmbedElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_units: *const fn(
            self: *const IHTMLEmbedElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_units: *const fn(
            self: *const IHTMLEmbedElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLEmbedElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLEmbedElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLEmbedElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLEmbedElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLEmbedElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLEmbedElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_hidden(self: *const IHTMLEmbedElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hidden(self, v);
    }
    pub fn get_hidden(self: *const IHTMLEmbedElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hidden(self, p);
    }
    pub fn get_palette(self: *const IHTMLEmbedElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_palette(self, p);
    }
    pub fn get_pluginspage(self: *const IHTMLEmbedElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pluginspage(self, p);
    }
    pub fn put_src(self: *const IHTMLEmbedElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLEmbedElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_units(self: *const IHTMLEmbedElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_units(self, v);
    }
    pub fn get_units(self: *const IHTMLEmbedElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_units(self, p);
    }
    pub fn put_name(self: *const IHTMLEmbedElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLEmbedElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_width(self: *const IHTMLEmbedElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLEmbedElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLEmbedElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLEmbedElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
};

const IID_IHTMLEmbedElement2_Value = Guid.initString("30510493-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEmbedElement2 = &IID_IHTMLEmbedElement2_Value;
pub const IHTMLEmbedElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLEmbedElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLEmbedElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pluginspage: *const fn(
            self: *const IHTMLEmbedElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_src(self: *const IHTMLEmbedElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLEmbedElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn get_pluginspage(self: *const IHTMLEmbedElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pluginspage(self, p);
    }
};

const IID_DispHTMLEmbed_Value = Guid.initString("3050f52e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLEmbed = &IID_DispHTMLEmbed_Value;
pub const DispHTMLEmbed = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLMapEvents2_Value = Guid.initString("3050f61e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLMapEvents2 = &IID_HTMLMapEvents2_Value;
pub const HTMLMapEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLMapEvents_Value = Guid.initString("3050f3ba-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLMapEvents = &IID_HTMLMapEvents_Value;
pub const HTMLMapEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLAreasCollection_Value = Guid.initString("3050f383-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAreasCollection = &IID_IHTMLAreasCollection_Value;
pub const IHTMLAreasCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_length: *const fn(
            self: *const IHTMLAreasCollection,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLAreasCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLAreasCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLAreasCollection,
            name: VARIANT,
            index: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        tags: *const fn(
            self: *const IHTMLAreasCollection,
            tagName: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        add: *const fn(
            self: *const IHTMLAreasCollection,
            element: ?*IHTMLElement,
            before: VARIANT,
        ) callconv(.winapi) HRESULT,
        remove: *const fn(
            self: *const IHTMLAreasCollection,
            index: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_length(self: *const IHTMLAreasCollection, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_length(self, v);
    }
    pub fn get_length(self: *const IHTMLAreasCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLAreasCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLAreasCollection, name: VARIANT, index: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, name, index, pdisp);
    }
    pub fn tags(self: *const IHTMLAreasCollection, tagName: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.tags(self, tagName, pdisp);
    }
    pub fn add(self: *const IHTMLAreasCollection, element: ?*IHTMLElement, before: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.add(self, element, before);
    }
    pub fn remove(self: *const IHTMLAreasCollection, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.remove(self, index);
    }
};

const IID_IHTMLAreasCollection2_Value = Guid.initString("3050f5ec-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAreasCollection2 = &IID_IHTMLAreasCollection2_Value;
pub const IHTMLAreasCollection2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        urns: *const fn(
            self: *const IHTMLAreasCollection2,
            urn: VARIANT,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn urns(self: *const IHTMLAreasCollection2, urn: VARIANT, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.urns(self, urn, pdisp);
    }
};

const IID_IHTMLAreasCollection3_Value = Guid.initString("3050f837-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAreasCollection3 = &IID_IHTMLAreasCollection3_Value;
pub const IHTMLAreasCollection3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        namedItem: *const fn(
            self: *const IHTMLAreasCollection3,
            name: ?BSTR,
            pdisp: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn namedItem(self: *const IHTMLAreasCollection3, name: ?BSTR, pdisp: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.namedItem(self, name, pdisp);
    }
};

const IID_IHTMLAreasCollection4_Value = Guid.initString("30510492-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAreasCollection4 = &IID_IHTMLAreasCollection4_Value;
pub const IHTMLAreasCollection4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLAreasCollection4,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLAreasCollection4,
            index: i32,
            pNode: ?*?*IHTMLElement2,
        ) callconv(.winapi) HRESULT,
        namedItem: *const fn(
            self: *const IHTMLAreasCollection4,
            name: ?BSTR,
            pNode: ?*?*IHTMLElement2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLAreasCollection4, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLAreasCollection4, index: i32, pNode: ?*?*IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, pNode);
    }
    pub fn namedItem(self: *const IHTMLAreasCollection4, name: ?BSTR, pNode: ?*?*IHTMLElement2) callconv(.@"inline") HRESULT {
        return self.vtable.namedItem(self, name, pNode);
    }
};

const IID_IHTMLMapElement_Value = Guid.initString("3050f266-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMapElement = &IID_IHTMLMapElement_Value;
pub const IHTMLMapElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_areas: *const fn(
            self: *const IHTMLMapElement,
            p: ?*?*IHTMLAreasCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLMapElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLMapElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_areas(self: *const IHTMLMapElement, p: ?*?*IHTMLAreasCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_areas(self, p);
    }
    pub fn put_name(self: *const IHTMLMapElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLMapElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
};

const IID_DispHTMLAreasCollection_Value = Guid.initString("3050f56a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLAreasCollection = &IID_DispHTMLAreasCollection_Value;
pub const DispHTMLAreasCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLMapElement_Value = Guid.initString("3050f526-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLMapElement = &IID_DispHTMLMapElement_Value;
pub const DispHTMLMapElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLAreaEvents2_Value = Guid.initString("3050f611-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLAreaEvents2 = &IID_HTMLAreaEvents2_Value;
pub const HTMLAreaEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLAreaEvents_Value = Guid.initString("3050f366-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLAreaEvents = &IID_HTMLAreaEvents_Value;
pub const HTMLAreaEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLAreaElement_Value = Guid.initString("3050f265-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAreaElement = &IID_IHTMLAreaElement_Value;
pub const IHTMLAreaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shape: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shape: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_coords: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_coords: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_target: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alt: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alt: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_noHref: *const fn(
            self: *const IHTMLAreaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_noHref: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_host: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_host: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hostname: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hostname: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pathname: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pathname: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_port: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_port: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_protocol: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_protocol: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_search: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_search: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hash: *const fn(
            self: *const IHTMLAreaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hash: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onblur: *const fn(
            self: *const IHTMLAreaElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onblur: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onfocus: *const fn(
            self: *const IHTMLAreaElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onfocus: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tabIndex: *const fn(
            self: *const IHTMLAreaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tabIndex: *const fn(
            self: *const IHTMLAreaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        focus: *const fn(
            self: *const IHTMLAreaElement,
        ) callconv(.winapi) HRESULT,
        blur: *const fn(
            self: *const IHTMLAreaElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_shape(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_shape(self, v);
    }
    pub fn get_shape(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_shape(self, p);
    }
    pub fn put_coords(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_coords(self, v);
    }
    pub fn get_coords(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_coords(self, p);
    }
    pub fn put_href(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
    pub fn put_target(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_target(self, v);
    }
    pub fn get_target(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_target(self, p);
    }
    pub fn put_alt(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alt(self, v);
    }
    pub fn get_alt(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alt(self, p);
    }
    pub fn put_noHref(self: *const IHTMLAreaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_noHref(self, v);
    }
    pub fn get_noHref(self: *const IHTMLAreaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_noHref(self, p);
    }
    pub fn put_host(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_host(self, v);
    }
    pub fn get_host(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_host(self, p);
    }
    pub fn put_hostname(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hostname(self, v);
    }
    pub fn get_hostname(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hostname(self, p);
    }
    pub fn put_pathname(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_pathname(self, v);
    }
    pub fn get_pathname(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pathname(self, p);
    }
    pub fn put_port(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_port(self, v);
    }
    pub fn get_port(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_port(self, p);
    }
    pub fn put_protocol(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_protocol(self, v);
    }
    pub fn get_protocol(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_protocol(self, p);
    }
    pub fn put_search(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_search(self, v);
    }
    pub fn get_search(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_search(self, p);
    }
    pub fn put_hash(self: *const IHTMLAreaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_hash(self, v);
    }
    pub fn get_hash(self: *const IHTMLAreaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_hash(self, p);
    }
    pub fn put_onblur(self: *const IHTMLAreaElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onblur(self, v);
    }
    pub fn get_onblur(self: *const IHTMLAreaElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onblur(self, p);
    }
    pub fn put_onfocus(self: *const IHTMLAreaElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onfocus(self, v);
    }
    pub fn get_onfocus(self: *const IHTMLAreaElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onfocus(self, p);
    }
    pub fn put_tabIndex(self: *const IHTMLAreaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_tabIndex(self, v);
    }
    pub fn get_tabIndex(self: *const IHTMLAreaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_tabIndex(self, p);
    }
    pub fn focus(self: *const IHTMLAreaElement) callconv(.@"inline") HRESULT {
        return self.vtable.focus(self);
    }
    pub fn blur(self: *const IHTMLAreaElement) callconv(.@"inline") HRESULT {
        return self.vtable.blur(self);
    }
};

const IID_IHTMLAreaElement2_Value = Guid.initString("3051041f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAreaElement2 = &IID_IHTMLAreaElement2_Value;
pub const IHTMLAreaElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shape: *const fn(
            self: *const IHTMLAreaElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shape: *const fn(
            self: *const IHTMLAreaElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_coords: *const fn(
            self: *const IHTMLAreaElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_coords: *const fn(
            self: *const IHTMLAreaElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_href: *const fn(
            self: *const IHTMLAreaElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const IHTMLAreaElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_shape(self: *const IHTMLAreaElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_shape(self, v);
    }
    pub fn get_shape(self: *const IHTMLAreaElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_shape(self, p);
    }
    pub fn put_coords(self: *const IHTMLAreaElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_coords(self, v);
    }
    pub fn get_coords(self: *const IHTMLAreaElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_coords(self, p);
    }
    pub fn put_href(self: *const IHTMLAreaElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_href(self, v);
    }
    pub fn get_href(self: *const IHTMLAreaElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
};

const IID_DispHTMLAreaElement_Value = Guid.initString("3050f503-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLAreaElement = &IID_DispHTMLAreaElement_Value;
pub const DispHTMLAreaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLTableCaption_Value = Guid.initString("3050f2eb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableCaption = &IID_IHTMLTableCaption_Value;
pub const IHTMLTableCaption = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLTableCaption,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLTableCaption,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vAlign: *const fn(
            self: *const IHTMLTableCaption,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vAlign: *const fn(
            self: *const IHTMLTableCaption,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLTableCaption, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLTableCaption, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_vAlign(self: *const IHTMLTableCaption, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vAlign(self, v);
    }
    pub fn get_vAlign(self: *const IHTMLTableCaption, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vAlign(self, p);
    }
};

const IID_DispHTMLTableCaption_Value = Guid.initString("3050f508-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTableCaption = &IID_DispHTMLTableCaption_Value;
pub const DispHTMLTableCaption = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLCommentElement_Value = Guid.initString("3050f20c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCommentElement = &IID_IHTMLCommentElement_Value;
pub const IHTMLCommentElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IHTMLCommentElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IHTMLCommentElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_atomic: *const fn(
            self: *const IHTMLCommentElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_atomic: *const fn(
            self: *const IHTMLCommentElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_text(self: *const IHTMLCommentElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_text(self, v);
    }
    pub fn get_text(self: *const IHTMLCommentElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_text(self, p);
    }
    pub fn put_atomic(self: *const IHTMLCommentElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_atomic(self, v);
    }
    pub fn get_atomic(self: *const IHTMLCommentElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_atomic(self, p);
    }
};

const IID_IHTMLCommentElement2_Value = Guid.initString("3050f813-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCommentElement2 = &IID_IHTMLCommentElement2_Value;
pub const IHTMLCommentElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn(
            self: *const IHTMLCommentElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IHTMLCommentElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLCommentElement2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        substringData: *const fn(
            self: *const IHTMLCommentElement2,
            offset: i32,
            Count: i32,
            pbstrsubString: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        appendData: *const fn(
            self: *const IHTMLCommentElement2,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
        insertData: *const fn(
            self: *const IHTMLCommentElement2,
            offset: i32,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
        deleteData: *const fn(
            self: *const IHTMLCommentElement2,
            offset: i32,
            Count: i32,
        ) callconv(.winapi) HRESULT,
        replaceData: *const fn(
            self: *const IHTMLCommentElement2,
            offset: i32,
            Count: i32,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_data(self: *const IHTMLCommentElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_data(self, v);
    }
    pub fn get_data(self: *const IHTMLCommentElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
    pub fn get_length(self: *const IHTMLCommentElement2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn substringData(self: *const IHTMLCommentElement2, offset: i32, Count: i32, pbstrsubString: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.substringData(self, offset, Count, pbstrsubString);
    }
    pub fn appendData(self: *const IHTMLCommentElement2, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.appendData(self, bstrstring);
    }
    pub fn insertData(self: *const IHTMLCommentElement2, offset: i32, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.insertData(self, offset, bstrstring);
    }
    pub fn deleteData(self: *const IHTMLCommentElement2, offset: i32, Count: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteData(self, offset, Count);
    }
    pub fn replaceData(self: *const IHTMLCommentElement2, offset: i32, Count: i32, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.replaceData(self, offset, Count, bstrstring);
    }
};

const IID_IHTMLCommentElement3_Value = Guid.initString("3051073f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCommentElement3 = &IID_IHTMLCommentElement3_Value;
pub const IHTMLCommentElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        substringData: *const fn(
            self: *const IHTMLCommentElement3,
            offset: i32,
            Count: i32,
            pbstrsubString: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        insertData: *const fn(
            self: *const IHTMLCommentElement3,
            offset: i32,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
        deleteData: *const fn(
            self: *const IHTMLCommentElement3,
            offset: i32,
            Count: i32,
        ) callconv(.winapi) HRESULT,
        replaceData: *const fn(
            self: *const IHTMLCommentElement3,
            offset: i32,
            Count: i32,
            bstrstring: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn substringData(self: *const IHTMLCommentElement3, offset: i32, Count: i32, pbstrsubString: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.substringData(self, offset, Count, pbstrsubString);
    }
    pub fn insertData(self: *const IHTMLCommentElement3, offset: i32, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.insertData(self, offset, bstrstring);
    }
    pub fn deleteData(self: *const IHTMLCommentElement3, offset: i32, Count: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteData(self, offset, Count);
    }
    pub fn replaceData(self: *const IHTMLCommentElement3, offset: i32, Count: i32, bstrstring: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.replaceData(self, offset, Count, bstrstring);
    }
};

const IID_DispHTMLCommentElement_Value = Guid.initString("3050f50a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCommentElement = &IID_DispHTMLCommentElement_Value;
pub const DispHTMLCommentElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLPhraseElement_Value = Guid.initString("3050f20a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPhraseElement = &IID_IHTMLPhraseElement_Value;
pub const IHTMLPhraseElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLPhraseElement2_Value = Guid.initString("3050f824-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPhraseElement2 = &IID_IHTMLPhraseElement2_Value;
pub const IHTMLPhraseElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cite: *const fn(
            self: *const IHTMLPhraseElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cite: *const fn(
            self: *const IHTMLPhraseElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dateTime: *const fn(
            self: *const IHTMLPhraseElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dateTime: *const fn(
            self: *const IHTMLPhraseElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_cite(self: *const IHTMLPhraseElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cite(self, v);
    }
    pub fn get_cite(self: *const IHTMLPhraseElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cite(self, p);
    }
    pub fn put_dateTime(self: *const IHTMLPhraseElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dateTime(self, v);
    }
    pub fn get_dateTime(self: *const IHTMLPhraseElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dateTime(self, p);
    }
};

const IID_IHTMLPhraseElement3_Value = Guid.initString("3051043d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPhraseElement3 = &IID_IHTMLPhraseElement3_Value;
pub const IHTMLPhraseElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cite: *const fn(
            self: *const IHTMLPhraseElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cite: *const fn(
            self: *const IHTMLPhraseElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_cite(self: *const IHTMLPhraseElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cite(self, v);
    }
    pub fn get_cite(self: *const IHTMLPhraseElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cite(self, p);
    }
};

const IID_IHTMLSpanElement_Value = Guid.initString("3050f3f3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSpanElement = &IID_IHTMLSpanElement_Value;
pub const IHTMLSpanElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLPhraseElement_Value = Guid.initString("3050f52d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLPhraseElement = &IID_DispHTMLPhraseElement_Value;
pub const DispHTMLPhraseElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLSpanElement_Value = Guid.initString("3050f548-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLSpanElement = &IID_DispHTMLSpanElement_Value;
pub const DispHTMLSpanElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLTableEvents2_Value = Guid.initString("3050f623-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLTableEvents2 = &IID_HTMLTableEvents2_Value;
pub const HTMLTableEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLTableEvents_Value = Guid.initString("3050f407-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLTableEvents = &IID_HTMLTableEvents_Value;
pub const HTMLTableEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLTableSection_Value = Guid.initString("3050f23b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableSection = &IID_IHTMLTableSection_Value;
pub const IHTMLTableSection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLTableSection,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLTableSection,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vAlign: *const fn(
            self: *const IHTMLTableSection,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vAlign: *const fn(
            self: *const IHTMLTableSection,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bgColor: *const fn(
            self: *const IHTMLTableSection,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bgColor: *const fn(
            self: *const IHTMLTableSection,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rows: *const fn(
            self: *const IHTMLTableSection,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        insertRow: *const fn(
            self: *const IHTMLTableSection,
            index: i32,
            row: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteRow: *const fn(
            self: *const IHTMLTableSection,
            index: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLTableSection, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLTableSection, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_vAlign(self: *const IHTMLTableSection, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vAlign(self, v);
    }
    pub fn get_vAlign(self: *const IHTMLTableSection, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vAlign(self, p);
    }
    pub fn put_bgColor(self: *const IHTMLTableSection, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bgColor(self, v);
    }
    pub fn get_bgColor(self: *const IHTMLTableSection, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bgColor(self, p);
    }
    pub fn get_rows(self: *const IHTMLTableSection, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_rows(self, p);
    }
    pub fn insertRow(self: *const IHTMLTableSection, index: i32, row: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.insertRow(self, index, row);
    }
    pub fn deleteRow(self: *const IHTMLTableSection, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteRow(self, index);
    }
};

const IID_IHTMLTable_Value = Guid.initString("3050f21e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTable = &IID_IHTMLTable_Value;
pub const IHTMLTable = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cols: *const fn(
            self: *const IHTMLTable,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cols: *const fn(
            self: *const IHTMLTable,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frame: *const fn(
            self: *const IHTMLTable,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frame: *const fn(
            self: *const IHTMLTable,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rules: *const fn(
            self: *const IHTMLTable,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rules: *const fn(
            self: *const IHTMLTable,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cellSpacing: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cellSpacing: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cellPadding: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cellPadding: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_background: *const fn(
            self: *const IHTMLTable,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_background: *const fn(
            self: *const IHTMLTable,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bgColor: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bgColor: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColor: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColorLight: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColorLight: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColorDark: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColorDark: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLTable,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLTable,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        refresh: *const fn(
            self: *const IHTMLTable,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rows: *const fn(
            self: *const IHTMLTable,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dataPageSize: *const fn(
            self: *const IHTMLTable,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataPageSize: *const fn(
            self: *const IHTMLTable,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        nextPage: *const fn(
            self: *const IHTMLTable,
        ) callconv(.winapi) HRESULT,
        previousPage: *const fn(
            self: *const IHTMLTable,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tHead: *const fn(
            self: *const IHTMLTable,
            p: ?*?*IHTMLTableSection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tFoot: *const fn(
            self: *const IHTMLTable,
            p: ?*?*IHTMLTableSection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tBodies: *const fn(
            self: *const IHTMLTable,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_caption: *const fn(
            self: *const IHTMLTable,
            p: ?*?*IHTMLTableCaption,
        ) callconv(.winapi) HRESULT,
        createTHead: *const fn(
            self: *const IHTMLTable,
            head: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteTHead: *const fn(
            self: *const IHTMLTable,
        ) callconv(.winapi) HRESULT,
        createTFoot: *const fn(
            self: *const IHTMLTable,
            foot: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteTFoot: *const fn(
            self: *const IHTMLTable,
        ) callconv(.winapi) HRESULT,
        createCaption: *const fn(
            self: *const IHTMLTable,
            caption: ?*?*IHTMLTableCaption,
        ) callconv(.winapi) HRESULT,
        deleteCaption: *const fn(
            self: *const IHTMLTable,
        ) callconv(.winapi) HRESULT,
        insertRow: *const fn(
            self: *const IHTMLTable,
            index: i32,
            row: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteRow: *const fn(
            self: *const IHTMLTable,
            index: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLTable,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLTable,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLTable,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_cols(self: *const IHTMLTable, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_cols(self, v);
    }
    pub fn get_cols(self: *const IHTMLTable, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_cols(self, p);
    }
    pub fn put_border(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_frame(self: *const IHTMLTable, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_frame(self, v);
    }
    pub fn get_frame(self: *const IHTMLTable, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_frame(self, p);
    }
    pub fn put_rules(self: *const IHTMLTable, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rules(self, v);
    }
    pub fn get_rules(self: *const IHTMLTable, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rules(self, p);
    }
    pub fn put_cellSpacing(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_cellSpacing(self, v);
    }
    pub fn get_cellSpacing(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_cellSpacing(self, p);
    }
    pub fn put_cellPadding(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_cellPadding(self, v);
    }
    pub fn get_cellPadding(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_cellPadding(self, p);
    }
    pub fn put_background(self: *const IHTMLTable, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_background(self, v);
    }
    pub fn get_background(self: *const IHTMLTable, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_background(self, p);
    }
    pub fn put_bgColor(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bgColor(self, v);
    }
    pub fn get_bgColor(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bgColor(self, p);
    }
    pub fn put_borderColor(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColor(self, v);
    }
    pub fn get_borderColor(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
    pub fn put_borderColorLight(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColorLight(self, v);
    }
    pub fn get_borderColorLight(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColorLight(self, p);
    }
    pub fn put_borderColorDark(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColorDark(self, v);
    }
    pub fn get_borderColorDark(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColorDark(self, p);
    }
    pub fn put_align(self: *const IHTMLTable, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLTable, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn refresh(self: *const IHTMLTable) callconv(.@"inline") HRESULT {
        return self.vtable.refresh(self);
    }
    pub fn get_rows(self: *const IHTMLTable, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_rows(self, p);
    }
    pub fn put_width(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_dataPageSize(self: *const IHTMLTable, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_dataPageSize(self, v);
    }
    pub fn get_dataPageSize(self: *const IHTMLTable, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_dataPageSize(self, p);
    }
    pub fn nextPage(self: *const IHTMLTable) callconv(.@"inline") HRESULT {
        return self.vtable.nextPage(self);
    }
    pub fn previousPage(self: *const IHTMLTable) callconv(.@"inline") HRESULT {
        return self.vtable.previousPage(self);
    }
    pub fn get_tHead(self: *const IHTMLTable, p: ?*?*IHTMLTableSection) callconv(.@"inline") HRESULT {
        return self.vtable.get_tHead(self, p);
    }
    pub fn get_tFoot(self: *const IHTMLTable, p: ?*?*IHTMLTableSection) callconv(.@"inline") HRESULT {
        return self.vtable.get_tFoot(self, p);
    }
    pub fn get_tBodies(self: *const IHTMLTable, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_tBodies(self, p);
    }
    pub fn get_caption(self: *const IHTMLTable, p: ?*?*IHTMLTableCaption) callconv(.@"inline") HRESULT {
        return self.vtable.get_caption(self, p);
    }
    pub fn createTHead(self: *const IHTMLTable, head: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.createTHead(self, head);
    }
    pub fn deleteTHead(self: *const IHTMLTable) callconv(.@"inline") HRESULT {
        return self.vtable.deleteTHead(self);
    }
    pub fn createTFoot(self: *const IHTMLTable, foot: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.createTFoot(self, foot);
    }
    pub fn deleteTFoot(self: *const IHTMLTable) callconv(.@"inline") HRESULT {
        return self.vtable.deleteTFoot(self);
    }
    pub fn createCaption(self: *const IHTMLTable, caption: ?*?*IHTMLTableCaption) callconv(.@"inline") HRESULT {
        return self.vtable.createCaption(self, caption);
    }
    pub fn deleteCaption(self: *const IHTMLTable) callconv(.@"inline") HRESULT {
        return self.vtable.deleteCaption(self);
    }
    pub fn insertRow(self: *const IHTMLTable, index: i32, row: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.insertRow(self, index, row);
    }
    pub fn deleteRow(self: *const IHTMLTable, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteRow(self, index);
    }
    pub fn get_readyState(self: *const IHTMLTable, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLTable, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLTable, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
};

const IID_IHTMLTable2_Value = Guid.initString("3050f4ad-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTable2 = &IID_IHTMLTable2_Value;
pub const IHTMLTable2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        firstPage: *const fn(
            self: *const IHTMLTable2,
        ) callconv(.winapi) HRESULT,
        lastPage: *const fn(
            self: *const IHTMLTable2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cells: *const fn(
            self: *const IHTMLTable2,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        moveRow: *const fn(
            self: *const IHTMLTable2,
            indexFrom: i32,
            indexTo: i32,
            row: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn firstPage(self: *const IHTMLTable2) callconv(.@"inline") HRESULT {
        return self.vtable.firstPage(self);
    }
    pub fn lastPage(self: *const IHTMLTable2) callconv(.@"inline") HRESULT {
        return self.vtable.lastPage(self);
    }
    pub fn get_cells(self: *const IHTMLTable2, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_cells(self, p);
    }
    pub fn moveRow(self: *const IHTMLTable2, indexFrom: i32, indexTo: i32, row: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.moveRow(self, indexFrom, indexTo, row);
    }
};

const IID_IHTMLTable3_Value = Guid.initString("3050f829-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTable3 = &IID_IHTMLTable3_Value;
pub const IHTMLTable3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_summary: *const fn(
            self: *const IHTMLTable3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_summary: *const fn(
            self: *const IHTMLTable3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_summary(self: *const IHTMLTable3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_summary(self, v);
    }
    pub fn get_summary(self: *const IHTMLTable3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_summary(self, p);
    }
};

const IID_IHTMLTable4_Value = Guid.initString("305106c2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTable4 = &IID_IHTMLTable4_Value;
pub const IHTMLTable4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_tHead: *const fn(
            self: *const IHTMLTable4,
            v: ?*IHTMLTableSection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tHead: *const fn(
            self: *const IHTMLTable4,
            p: ?*?*IHTMLTableSection,
        ) callconv(.winapi) HRESULT,
        putref_tFoot: *const fn(
            self: *const IHTMLTable4,
            v: ?*IHTMLTableSection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tFoot: *const fn(
            self: *const IHTMLTable4,
            p: ?*?*IHTMLTableSection,
        ) callconv(.winapi) HRESULT,
        putref_caption: *const fn(
            self: *const IHTMLTable4,
            v: ?*IHTMLTableCaption,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_caption: *const fn(
            self: *const IHTMLTable4,
            p: ?*?*IHTMLTableCaption,
        ) callconv(.winapi) HRESULT,
        insertRow: *const fn(
            self: *const IHTMLTable4,
            index: i32,
            row: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteRow: *const fn(
            self: *const IHTMLTable4,
            index: i32,
        ) callconv(.winapi) HRESULT,
        createTBody: *const fn(
            self: *const IHTMLTable4,
            tbody: ?*?*IHTMLTableSection,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_tHead(self: *const IHTMLTable4, v: ?*IHTMLTableSection) callconv(.@"inline") HRESULT {
        return self.vtable.putref_tHead(self, v);
    }
    pub fn get_tHead(self: *const IHTMLTable4, p: ?*?*IHTMLTableSection) callconv(.@"inline") HRESULT {
        return self.vtable.get_tHead(self, p);
    }
    pub fn putref_tFoot(self: *const IHTMLTable4, v: ?*IHTMLTableSection) callconv(.@"inline") HRESULT {
        return self.vtable.putref_tFoot(self, v);
    }
    pub fn get_tFoot(self: *const IHTMLTable4, p: ?*?*IHTMLTableSection) callconv(.@"inline") HRESULT {
        return self.vtable.get_tFoot(self, p);
    }
    pub fn putref_caption(self: *const IHTMLTable4, v: ?*IHTMLTableCaption) callconv(.@"inline") HRESULT {
        return self.vtable.putref_caption(self, v);
    }
    pub fn get_caption(self: *const IHTMLTable4, p: ?*?*IHTMLTableCaption) callconv(.@"inline") HRESULT {
        return self.vtable.get_caption(self, p);
    }
    pub fn insertRow(self: *const IHTMLTable4, index: i32, row: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.insertRow(self, index, row);
    }
    pub fn deleteRow(self: *const IHTMLTable4, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteRow(self, index);
    }
    pub fn createTBody(self: *const IHTMLTable4, tbody: ?*?*IHTMLTableSection) callconv(.@"inline") HRESULT {
        return self.vtable.createTBody(self, tbody);
    }
};

const IID_IHTMLTableCol_Value = Guid.initString("3050f23a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableCol = &IID_IHTMLTableCol_Value;
pub const IHTMLTableCol = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_span: *const fn(
            self: *const IHTMLTableCol,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_span: *const fn(
            self: *const IHTMLTableCol,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLTableCol,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLTableCol,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLTableCol,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLTableCol,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vAlign: *const fn(
            self: *const IHTMLTableCol,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vAlign: *const fn(
            self: *const IHTMLTableCol,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_span(self: *const IHTMLTableCol, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_span(self, v);
    }
    pub fn get_span(self: *const IHTMLTableCol, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_span(self, p);
    }
    pub fn put_width(self: *const IHTMLTableCol, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLTableCol, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_align(self: *const IHTMLTableCol, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLTableCol, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_vAlign(self: *const IHTMLTableCol, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vAlign(self, v);
    }
    pub fn get_vAlign(self: *const IHTMLTableCol, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vAlign(self, p);
    }
};

const IID_IHTMLTableCol2_Value = Guid.initString("3050f82a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableCol2 = &IID_IHTMLTableCol2_Value;
pub const IHTMLTableCol2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ch: *const fn(
            self: *const IHTMLTableCol2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ch: *const fn(
            self: *const IHTMLTableCol2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_chOff: *const fn(
            self: *const IHTMLTableCol2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_chOff: *const fn(
            self: *const IHTMLTableCol2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_ch(self: *const IHTMLTableCol2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ch(self, v);
    }
    pub fn get_ch(self: *const IHTMLTableCol2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ch(self, p);
    }
    pub fn put_chOff(self: *const IHTMLTableCol2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_chOff(self, v);
    }
    pub fn get_chOff(self: *const IHTMLTableCol2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_chOff(self, p);
    }
};

const IID_IHTMLTableCol3_Value = Guid.initString("305106c4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableCol3 = &IID_IHTMLTableCol3_Value;
pub const IHTMLTableCol3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ch: *const fn(
            self: *const IHTMLTableCol3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ch: *const fn(
            self: *const IHTMLTableCol3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_chOff: *const fn(
            self: *const IHTMLTableCol3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_chOff: *const fn(
            self: *const IHTMLTableCol3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_ch(self: *const IHTMLTableCol3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ch(self, v);
    }
    pub fn get_ch(self: *const IHTMLTableCol3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ch(self, p);
    }
    pub fn put_chOff(self: *const IHTMLTableCol3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_chOff(self, v);
    }
    pub fn get_chOff(self: *const IHTMLTableCol3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_chOff(self, p);
    }
};

const IID_IHTMLTableSection2_Value = Guid.initString("3050f5c7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableSection2 = &IID_IHTMLTableSection2_Value;
pub const IHTMLTableSection2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        moveRow: *const fn(
            self: *const IHTMLTableSection2,
            indexFrom: i32,
            indexTo: i32,
            row: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn moveRow(self: *const IHTMLTableSection2, indexFrom: i32, indexTo: i32, row: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.moveRow(self, indexFrom, indexTo, row);
    }
};

const IID_IHTMLTableSection3_Value = Guid.initString("3050f82b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableSection3 = &IID_IHTMLTableSection3_Value;
pub const IHTMLTableSection3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ch: *const fn(
            self: *const IHTMLTableSection3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ch: *const fn(
            self: *const IHTMLTableSection3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_chOff: *const fn(
            self: *const IHTMLTableSection3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_chOff: *const fn(
            self: *const IHTMLTableSection3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_ch(self: *const IHTMLTableSection3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ch(self, v);
    }
    pub fn get_ch(self: *const IHTMLTableSection3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ch(self, p);
    }
    pub fn put_chOff(self: *const IHTMLTableSection3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_chOff(self, v);
    }
    pub fn get_chOff(self: *const IHTMLTableSection3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_chOff(self, p);
    }
};

const IID_IHTMLTableSection4_Value = Guid.initString("305106c5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableSection4 = &IID_IHTMLTableSection4_Value;
pub const IHTMLTableSection4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ch: *const fn(
            self: *const IHTMLTableSection4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ch: *const fn(
            self: *const IHTMLTableSection4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_chOff: *const fn(
            self: *const IHTMLTableSection4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_chOff: *const fn(
            self: *const IHTMLTableSection4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        insertRow: *const fn(
            self: *const IHTMLTableSection4,
            index: i32,
            row: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteRow: *const fn(
            self: *const IHTMLTableSection4,
            index: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_ch(self: *const IHTMLTableSection4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ch(self, v);
    }
    pub fn get_ch(self: *const IHTMLTableSection4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ch(self, p);
    }
    pub fn put_chOff(self: *const IHTMLTableSection4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_chOff(self, v);
    }
    pub fn get_chOff(self: *const IHTMLTableSection4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_chOff(self, p);
    }
    pub fn insertRow(self: *const IHTMLTableSection4, index: i32, row: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.insertRow(self, index, row);
    }
    pub fn deleteRow(self: *const IHTMLTableSection4, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteRow(self, index);
    }
};

const IID_IHTMLTableRow_Value = Guid.initString("3050f23c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableRow = &IID_IHTMLTableRow_Value;
pub const IHTMLTableRow = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLTableRow,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLTableRow,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vAlign: *const fn(
            self: *const IHTMLTableRow,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vAlign: *const fn(
            self: *const IHTMLTableRow,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bgColor: *const fn(
            self: *const IHTMLTableRow,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bgColor: *const fn(
            self: *const IHTMLTableRow,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColor: *const fn(
            self: *const IHTMLTableRow,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLTableRow,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColorLight: *const fn(
            self: *const IHTMLTableRow,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColorLight: *const fn(
            self: *const IHTMLTableRow,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColorDark: *const fn(
            self: *const IHTMLTableRow,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColorDark: *const fn(
            self: *const IHTMLTableRow,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rowIndex: *const fn(
            self: *const IHTMLTableRow,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sectionRowIndex: *const fn(
            self: *const IHTMLTableRow,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cells: *const fn(
            self: *const IHTMLTableRow,
            p: ?*?*IHTMLElementCollection,
        ) callconv(.winapi) HRESULT,
        insertCell: *const fn(
            self: *const IHTMLTableRow,
            index: i32,
            row: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteCell: *const fn(
            self: *const IHTMLTableRow,
            index: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLTableRow, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLTableRow, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_vAlign(self: *const IHTMLTableRow, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vAlign(self, v);
    }
    pub fn get_vAlign(self: *const IHTMLTableRow, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vAlign(self, p);
    }
    pub fn put_bgColor(self: *const IHTMLTableRow, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bgColor(self, v);
    }
    pub fn get_bgColor(self: *const IHTMLTableRow, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bgColor(self, p);
    }
    pub fn put_borderColor(self: *const IHTMLTableRow, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColor(self, v);
    }
    pub fn get_borderColor(self: *const IHTMLTableRow, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
    pub fn put_borderColorLight(self: *const IHTMLTableRow, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColorLight(self, v);
    }
    pub fn get_borderColorLight(self: *const IHTMLTableRow, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColorLight(self, p);
    }
    pub fn put_borderColorDark(self: *const IHTMLTableRow, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColorDark(self, v);
    }
    pub fn get_borderColorDark(self: *const IHTMLTableRow, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColorDark(self, p);
    }
    pub fn get_rowIndex(self: *const IHTMLTableRow, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_rowIndex(self, p);
    }
    pub fn get_sectionRowIndex(self: *const IHTMLTableRow, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_sectionRowIndex(self, p);
    }
    pub fn get_cells(self: *const IHTMLTableRow, p: ?*?*IHTMLElementCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_cells(self, p);
    }
    pub fn insertCell(self: *const IHTMLTableRow, index: i32, row: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.insertCell(self, index, row);
    }
    pub fn deleteCell(self: *const IHTMLTableRow, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteCell(self, index);
    }
};

const IID_IHTMLTableRow2_Value = Guid.initString("3050f4a1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableRow2 = &IID_IHTMLTableRow2_Value;
pub const IHTMLTableRow2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLTableRow2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLTableRow2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_height(self: *const IHTMLTableRow2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLTableRow2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
};

const IID_IHTMLTableRow3_Value = Guid.initString("3050f82c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableRow3 = &IID_IHTMLTableRow3_Value;
pub const IHTMLTableRow3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ch: *const fn(
            self: *const IHTMLTableRow3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ch: *const fn(
            self: *const IHTMLTableRow3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_chOff: *const fn(
            self: *const IHTMLTableRow3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_chOff: *const fn(
            self: *const IHTMLTableRow3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_ch(self: *const IHTMLTableRow3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ch(self, v);
    }
    pub fn get_ch(self: *const IHTMLTableRow3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ch(self, p);
    }
    pub fn put_chOff(self: *const IHTMLTableRow3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_chOff(self, v);
    }
    pub fn get_chOff(self: *const IHTMLTableRow3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_chOff(self, p);
    }
};

const IID_IHTMLTableRow4_Value = Guid.initString("305106c6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableRow4 = &IID_IHTMLTableRow4_Value;
pub const IHTMLTableRow4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ch: *const fn(
            self: *const IHTMLTableRow4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ch: *const fn(
            self: *const IHTMLTableRow4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_chOff: *const fn(
            self: *const IHTMLTableRow4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_chOff: *const fn(
            self: *const IHTMLTableRow4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        insertCell: *const fn(
            self: *const IHTMLTableRow4,
            index: i32,
            row: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        deleteCell: *const fn(
            self: *const IHTMLTableRow4,
            index: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_ch(self: *const IHTMLTableRow4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ch(self, v);
    }
    pub fn get_ch(self: *const IHTMLTableRow4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ch(self, p);
    }
    pub fn put_chOff(self: *const IHTMLTableRow4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_chOff(self, v);
    }
    pub fn get_chOff(self: *const IHTMLTableRow4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_chOff(self, p);
    }
    pub fn insertCell(self: *const IHTMLTableRow4, index: i32, row: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.insertCell(self, index, row);
    }
    pub fn deleteCell(self: *const IHTMLTableRow4, index: i32) callconv(.@"inline") HRESULT {
        return self.vtable.deleteCell(self, index);
    }
};

const IID_IHTMLTableRowMetrics_Value = Guid.initString("3050f413-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableRowMetrics = &IID_IHTMLTableRowMetrics_Value;
pub const IHTMLTableRowMetrics = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientHeight: *const fn(
            self: *const IHTMLTableRowMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientWidth: *const fn(
            self: *const IHTMLTableRowMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientTop: *const fn(
            self: *const IHTMLTableRowMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientLeft: *const fn(
            self: *const IHTMLTableRowMetrics,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_clientHeight(self: *const IHTMLTableRowMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientHeight(self, p);
    }
    pub fn get_clientWidth(self: *const IHTMLTableRowMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientWidth(self, p);
    }
    pub fn get_clientTop(self: *const IHTMLTableRowMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientTop(self, p);
    }
    pub fn get_clientLeft(self: *const IHTMLTableRowMetrics, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientLeft(self, p);
    }
};

const IID_IHTMLTableCell_Value = Guid.initString("3050f23d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableCell = &IID_IHTMLTableCell_Value;
pub const IHTMLTableCell = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rowSpan: *const fn(
            self: *const IHTMLTableCell,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rowSpan: *const fn(
            self: *const IHTMLTableCell,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_colSpan: *const fn(
            self: *const IHTMLTableCell,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_colSpan: *const fn(
            self: *const IHTMLTableCell,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLTableCell,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLTableCell,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vAlign: *const fn(
            self: *const IHTMLTableCell,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vAlign: *const fn(
            self: *const IHTMLTableCell,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bgColor: *const fn(
            self: *const IHTMLTableCell,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bgColor: *const fn(
            self: *const IHTMLTableCell,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_noWrap: *const fn(
            self: *const IHTMLTableCell,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_noWrap: *const fn(
            self: *const IHTMLTableCell,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_background: *const fn(
            self: *const IHTMLTableCell,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_background: *const fn(
            self: *const IHTMLTableCell,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColor: *const fn(
            self: *const IHTMLTableCell,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLTableCell,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColorLight: *const fn(
            self: *const IHTMLTableCell,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColorLight: *const fn(
            self: *const IHTMLTableCell,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColorDark: *const fn(
            self: *const IHTMLTableCell,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColorDark: *const fn(
            self: *const IHTMLTableCell,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLTableCell,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLTableCell,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLTableCell,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLTableCell,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cellIndex: *const fn(
            self: *const IHTMLTableCell,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_rowSpan(self: *const IHTMLTableCell, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_rowSpan(self, v);
    }
    pub fn get_rowSpan(self: *const IHTMLTableCell, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_rowSpan(self, p);
    }
    pub fn put_colSpan(self: *const IHTMLTableCell, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_colSpan(self, v);
    }
    pub fn get_colSpan(self: *const IHTMLTableCell, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_colSpan(self, p);
    }
    pub fn put_align(self: *const IHTMLTableCell, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLTableCell, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_vAlign(self: *const IHTMLTableCell, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_vAlign(self, v);
    }
    pub fn get_vAlign(self: *const IHTMLTableCell, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_vAlign(self, p);
    }
    pub fn put_bgColor(self: *const IHTMLTableCell, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_bgColor(self, v);
    }
    pub fn get_bgColor(self: *const IHTMLTableCell, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_bgColor(self, p);
    }
    pub fn put_noWrap(self: *const IHTMLTableCell, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_noWrap(self, v);
    }
    pub fn get_noWrap(self: *const IHTMLTableCell, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_noWrap(self, p);
    }
    pub fn put_background(self: *const IHTMLTableCell, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_background(self, v);
    }
    pub fn get_background(self: *const IHTMLTableCell, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_background(self, p);
    }
    pub fn put_borderColor(self: *const IHTMLTableCell, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColor(self, v);
    }
    pub fn get_borderColor(self: *const IHTMLTableCell, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
    pub fn put_borderColorLight(self: *const IHTMLTableCell, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColorLight(self, v);
    }
    pub fn get_borderColorLight(self: *const IHTMLTableCell, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColorLight(self, p);
    }
    pub fn put_borderColorDark(self: *const IHTMLTableCell, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColorDark(self, v);
    }
    pub fn get_borderColorDark(self: *const IHTMLTableCell, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColorDark(self, p);
    }
    pub fn put_width(self: *const IHTMLTableCell, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLTableCell, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLTableCell, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLTableCell, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn get_cellIndex(self: *const IHTMLTableCell, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_cellIndex(self, p);
    }
};

const IID_IHTMLTableCell2_Value = Guid.initString("3050f82d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableCell2 = &IID_IHTMLTableCell2_Value;
pub const IHTMLTableCell2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_abbr: *const fn(
            self: *const IHTMLTableCell2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_abbr: *const fn(
            self: *const IHTMLTableCell2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_axis: *const fn(
            self: *const IHTMLTableCell2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_axis: *const fn(
            self: *const IHTMLTableCell2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ch: *const fn(
            self: *const IHTMLTableCell2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ch: *const fn(
            self: *const IHTMLTableCell2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_chOff: *const fn(
            self: *const IHTMLTableCell2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_chOff: *const fn(
            self: *const IHTMLTableCell2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_headers: *const fn(
            self: *const IHTMLTableCell2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_headers: *const fn(
            self: *const IHTMLTableCell2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scope: *const fn(
            self: *const IHTMLTableCell2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scope: *const fn(
            self: *const IHTMLTableCell2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_abbr(self: *const IHTMLTableCell2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_abbr(self, v);
    }
    pub fn get_abbr(self: *const IHTMLTableCell2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_abbr(self, p);
    }
    pub fn put_axis(self: *const IHTMLTableCell2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_axis(self, v);
    }
    pub fn get_axis(self: *const IHTMLTableCell2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_axis(self, p);
    }
    pub fn put_ch(self: *const IHTMLTableCell2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ch(self, v);
    }
    pub fn get_ch(self: *const IHTMLTableCell2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ch(self, p);
    }
    pub fn put_chOff(self: *const IHTMLTableCell2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_chOff(self, v);
    }
    pub fn get_chOff(self: *const IHTMLTableCell2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_chOff(self, p);
    }
    pub fn put_headers(self: *const IHTMLTableCell2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_headers(self, v);
    }
    pub fn get_headers(self: *const IHTMLTableCell2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_headers(self, p);
    }
    pub fn put_scope(self: *const IHTMLTableCell2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_scope(self, v);
    }
    pub fn get_scope(self: *const IHTMLTableCell2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_scope(self, p);
    }
};

const IID_IHTMLTableCell3_Value = Guid.initString("305106c7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTableCell3 = &IID_IHTMLTableCell3_Value;
pub const IHTMLTableCell3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ch: *const fn(
            self: *const IHTMLTableCell3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ch: *const fn(
            self: *const IHTMLTableCell3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_chOff: *const fn(
            self: *const IHTMLTableCell3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_chOff: *const fn(
            self: *const IHTMLTableCell3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_ch(self: *const IHTMLTableCell3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_ch(self, v);
    }
    pub fn get_ch(self: *const IHTMLTableCell3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_ch(self, p);
    }
    pub fn put_chOff(self: *const IHTMLTableCell3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_chOff(self, v);
    }
    pub fn get_chOff(self: *const IHTMLTableCell3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_chOff(self, p);
    }
};

const IID_DispHTMLTable_Value = Guid.initString("3050f532-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTable = &IID_DispHTMLTable_Value;
pub const DispHTMLTable = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLTableCol_Value = Guid.initString("3050f533-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTableCol = &IID_DispHTMLTableCol_Value;
pub const DispHTMLTableCol = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLTableSection_Value = Guid.initString("3050f534-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTableSection = &IID_DispHTMLTableSection_Value;
pub const DispHTMLTableSection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLTableRow_Value = Guid.initString("3050f535-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTableRow = &IID_DispHTMLTableRow_Value;
pub const DispHTMLTableRow = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLTableCell_Value = Guid.initString("3050f536-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTableCell = &IID_DispHTMLTableCell_Value;
pub const DispHTMLTableCell = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLScriptEvents2_Value = Guid.initString("3050f621-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLScriptEvents2 = &IID_HTMLScriptEvents2_Value;
pub const HTMLScriptEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLScriptEvents_Value = Guid.initString("3050f3e2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLScriptEvents = &IID_HTMLScriptEvents_Value;
pub const HTMLScriptEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLScriptElement_Value = Guid.initString("3050f28b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLScriptElement = &IID_IHTMLScriptElement_Value;
pub const IHTMLScriptElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLScriptElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLScriptElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_htmlFor: *const fn(
            self: *const IHTMLScriptElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_htmlFor: *const fn(
            self: *const IHTMLScriptElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_event: *const fn(
            self: *const IHTMLScriptElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_event: *const fn(
            self: *const IHTMLScriptElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IHTMLScriptElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IHTMLScriptElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defer: *const fn(
            self: *const IHTMLScriptElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defer: *const fn(
            self: *const IHTMLScriptElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLScriptElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLScriptElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLScriptElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLScriptElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLScriptElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_src(self: *const IHTMLScriptElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLScriptElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_htmlFor(self: *const IHTMLScriptElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_htmlFor(self, v);
    }
    pub fn get_htmlFor(self: *const IHTMLScriptElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_htmlFor(self, p);
    }
    pub fn put_event(self: *const IHTMLScriptElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_event(self, v);
    }
    pub fn get_event(self: *const IHTMLScriptElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_event(self, p);
    }
    pub fn put_text(self: *const IHTMLScriptElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_text(self, v);
    }
    pub fn get_text(self: *const IHTMLScriptElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_text(self, p);
    }
    pub fn put_defer(self: *const IHTMLScriptElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_defer(self, v);
    }
    pub fn get_defer(self: *const IHTMLScriptElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_defer(self, p);
    }
    pub fn get_readyState(self: *const IHTMLScriptElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn put_onerror(self: *const IHTMLScriptElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLScriptElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_type(self: *const IHTMLScriptElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLScriptElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
};

const IID_IHTMLScriptElement2_Value = Guid.initString("3050f828-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLScriptElement2 = &IID_IHTMLScriptElement2_Value;
pub const IHTMLScriptElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn(
            self: *const IHTMLScriptElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn(
            self: *const IHTMLScriptElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_charset(self: *const IHTMLScriptElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_charset(self, v);
    }
    pub fn get_charset(self: *const IHTMLScriptElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_charset(self, p);
    }
};

const IID_IHTMLScriptElement3_Value = Guid.initString("30510447-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLScriptElement3 = &IID_IHTMLScriptElement3_Value;
pub const IHTMLScriptElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLScriptElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLScriptElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_src(self: *const IHTMLScriptElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLScriptElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
};

const IID_IHTMLScriptElement4_Value = Guid.initString("30510801-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLScriptElement4 = &IID_IHTMLScriptElement4_Value;
pub const IHTMLScriptElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_usedCharset: *const fn(
            self: *const IHTMLScriptElement4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_usedCharset(self: *const IHTMLScriptElement4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_usedCharset(self, p);
    }
};

const IID_DispHTMLScriptElement_Value = Guid.initString("3050f530-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLScriptElement = &IID_DispHTMLScriptElement_Value;
pub const DispHTMLScriptElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLNoShowElement_Value = Guid.initString("3050f38a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLNoShowElement = &IID_IHTMLNoShowElement_Value;
pub const IHTMLNoShowElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLNoShowElement_Value = Guid.initString("3050f528-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLNoShowElement = &IID_DispHTMLNoShowElement_Value;
pub const DispHTMLNoShowElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLObjectElementEvents2_Value = Guid.initString("3050f620-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLObjectElementEvents2 = &IID_HTMLObjectElementEvents2_Value;
pub const HTMLObjectElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLObjectElementEvents_Value = Guid.initString("3050f3c4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLObjectElementEvents = &IID_HTMLObjectElementEvents_Value;
pub const HTMLObjectElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLObjectElement_Value = Guid.initString("3050f24f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLObjectElement = &IID_IHTMLObjectElement_Value;
pub const IHTMLObjectElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_object: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_classid: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        putref_recordset: *const fn(
            self: *const IHTMLObjectElement,
            v: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_recordset: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLObjectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLObjectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_codeBase: *const fn(
            self: *const IHTMLObjectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_codeBase: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_codeType: *const fn(
            self: *const IHTMLObjectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_codeType: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_code: *const fn(
            self: *const IHTMLObjectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_code: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BaseHref: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLObjectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLObjectElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLObjectElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLObjectElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLObjectElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_altHtml: *const fn(
            self: *const IHTMLObjectElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_altHtml: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vspace: *const fn(
            self: *const IHTMLObjectElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vspace: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hspace: *const fn(
            self: *const IHTMLObjectElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hspace: *const fn(
            self: *const IHTMLObjectElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_object(self: *const IHTMLObjectElement, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_object(self, p);
    }
    pub fn get_classid(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_classid(self, p);
    }
    pub fn get_data(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
    pub fn putref_recordset(self: *const IHTMLObjectElement, v: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.putref_recordset(self, v);
    }
    pub fn get_recordset(self: *const IHTMLObjectElement, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_recordset(self, p);
    }
    pub fn put_align(self: *const IHTMLObjectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_name(self: *const IHTMLObjectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_codeBase(self: *const IHTMLObjectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_codeBase(self, v);
    }
    pub fn get_codeBase(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_codeBase(self, p);
    }
    pub fn put_codeType(self: *const IHTMLObjectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_codeType(self, v);
    }
    pub fn get_codeType(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_codeType(self, p);
    }
    pub fn put_code(self: *const IHTMLObjectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_code(self, v);
    }
    pub fn get_code(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_code(self, p);
    }
    pub fn get_BaseHref(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_BaseHref(self, p);
    }
    pub fn put_type(self: *const IHTMLObjectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn get_form(self: *const IHTMLObjectElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
    pub fn put_width(self: *const IHTMLObjectElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLObjectElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLObjectElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLObjectElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn get_readyState(self: *const IHTMLObjectElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLObjectElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLObjectElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn put_onerror(self: *const IHTMLObjectElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLObjectElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_altHtml(self: *const IHTMLObjectElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_altHtml(self, v);
    }
    pub fn get_altHtml(self: *const IHTMLObjectElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_altHtml(self, p);
    }
    pub fn put_vspace(self: *const IHTMLObjectElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_vspace(self, v);
    }
    pub fn get_vspace(self: *const IHTMLObjectElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_vspace(self, p);
    }
    pub fn put_hspace(self: *const IHTMLObjectElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_hspace(self, v);
    }
    pub fn get_hspace(self: *const IHTMLObjectElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_hspace(self, p);
    }
};

const IID_IHTMLObjectElement2_Value = Guid.initString("3050f4cd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLObjectElement2 = &IID_IHTMLObjectElement2_Value;
pub const IHTMLObjectElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        namedRecordset: *const fn(
            self: *const IHTMLObjectElement2,
            dataMember: ?BSTR,
            hierarchy: ?*VARIANT,
            ppRecordset: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_classid: *const fn(
            self: *const IHTMLObjectElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_classid: *const fn(
            self: *const IHTMLObjectElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn(
            self: *const IHTMLObjectElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IHTMLObjectElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn namedRecordset(self: *const IHTMLObjectElement2, dataMember: ?BSTR, hierarchy: ?*VARIANT, ppRecordset: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.namedRecordset(self, dataMember, hierarchy, ppRecordset);
    }
    pub fn put_classid(self: *const IHTMLObjectElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_classid(self, v);
    }
    pub fn get_classid(self: *const IHTMLObjectElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_classid(self, p);
    }
    pub fn put_data(self: *const IHTMLObjectElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_data(self, v);
    }
    pub fn get_data(self: *const IHTMLObjectElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
};

const IID_IHTMLObjectElement3_Value = Guid.initString("3050f827-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLObjectElement3 = &IID_IHTMLObjectElement3_Value;
pub const IHTMLObjectElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_archive: *const fn(
            self: *const IHTMLObjectElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_archive: *const fn(
            self: *const IHTMLObjectElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_alt: *const fn(
            self: *const IHTMLObjectElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_alt: *const fn(
            self: *const IHTMLObjectElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_declare: *const fn(
            self: *const IHTMLObjectElement3,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_declare: *const fn(
            self: *const IHTMLObjectElement3,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_standby: *const fn(
            self: *const IHTMLObjectElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_standby: *const fn(
            self: *const IHTMLObjectElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLObjectElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLObjectElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_useMap: *const fn(
            self: *const IHTMLObjectElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_useMap: *const fn(
            self: *const IHTMLObjectElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_archive(self: *const IHTMLObjectElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_archive(self, v);
    }
    pub fn get_archive(self: *const IHTMLObjectElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_archive(self, p);
    }
    pub fn put_alt(self: *const IHTMLObjectElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_alt(self, v);
    }
    pub fn get_alt(self: *const IHTMLObjectElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_alt(self, p);
    }
    pub fn put_declare(self: *const IHTMLObjectElement3, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_declare(self, v);
    }
    pub fn get_declare(self: *const IHTMLObjectElement3, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_declare(self, p);
    }
    pub fn put_standby(self: *const IHTMLObjectElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_standby(self, v);
    }
    pub fn get_standby(self: *const IHTMLObjectElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_standby(self, p);
    }
    pub fn put_border(self: *const IHTMLObjectElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLObjectElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_useMap(self: *const IHTMLObjectElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_useMap(self, v);
    }
    pub fn get_useMap(self: *const IHTMLObjectElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_useMap(self, p);
    }
};

const IID_IHTMLObjectElement4_Value = Guid.initString("3051043e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLObjectElement4 = &IID_IHTMLObjectElement4_Value;
pub const IHTMLObjectElement4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentDocument: *const fn(
            self: *const IHTMLObjectElement4,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_codeBase: *const fn(
            self: *const IHTMLObjectElement4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_codeBase: *const fn(
            self: *const IHTMLObjectElement4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn(
            self: *const IHTMLObjectElement4,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IHTMLObjectElement4,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_contentDocument(self: *const IHTMLObjectElement4, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentDocument(self, p);
    }
    pub fn put_codeBase(self: *const IHTMLObjectElement4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_codeBase(self, v);
    }
    pub fn get_codeBase(self: *const IHTMLObjectElement4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_codeBase(self, p);
    }
    pub fn put_data(self: *const IHTMLObjectElement4, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_data(self, v);
    }
    pub fn get_data(self: *const IHTMLObjectElement4, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
};

const IID_IHTMLObjectElement5_Value = Guid.initString("305104b5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLObjectElement5 = &IID_IHTMLObjectElement5_Value;
pub const IHTMLObjectElement5 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_object: *const fn(
            self: *const IHTMLObjectElement5,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_object: *const fn(
            self: *const IHTMLObjectElement5,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_object(self: *const IHTMLObjectElement5, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_object(self, v);
    }
    pub fn get_object(self: *const IHTMLObjectElement5, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_object(self, p);
    }
};

const IID_IHTMLParamElement_Value = Guid.initString("3050f83d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLParamElement = &IID_IHTMLParamElement_Value;
pub const IHTMLParamElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLParamElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLParamElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLParamElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLParamElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLParamElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLParamElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_valueType: *const fn(
            self: *const IHTMLParamElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_valueType: *const fn(
            self: *const IHTMLParamElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_name(self: *const IHTMLParamElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLParamElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_value(self: *const IHTMLParamElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLParamElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_type(self: *const IHTMLParamElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLParamElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_valueType(self: *const IHTMLParamElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_valueType(self, v);
    }
    pub fn get_valueType(self: *const IHTMLParamElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_valueType(self, p);
    }
};

const IID_IHTMLParamElement2_Value = Guid.initString("30510444-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLParamElement2 = &IID_IHTMLParamElement2_Value;
pub const IHTMLParamElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLParamElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLParamElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLParamElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLParamElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLParamElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLParamElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_valueType: *const fn(
            self: *const IHTMLParamElement2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_valueType: *const fn(
            self: *const IHTMLParamElement2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_name(self: *const IHTMLParamElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLParamElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_type(self: *const IHTMLParamElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLParamElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_value(self: *const IHTMLParamElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLParamElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_valueType(self: *const IHTMLParamElement2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_valueType(self, v);
    }
    pub fn get_valueType(self: *const IHTMLParamElement2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_valueType(self, p);
    }
};

const IID_DispHTMLObjectElement_Value = Guid.initString("3050f529-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLObjectElement = &IID_DispHTMLObjectElement_Value;
pub const DispHTMLObjectElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLParamElement_Value = Guid.initString("3050f590-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLParamElement = &IID_DispHTMLParamElement_Value;
pub const DispHTMLParamElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLFrameSiteEvents2_Value = Guid.initString("3050f7ff-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLFrameSiteEvents2 = &IID_HTMLFrameSiteEvents2_Value;
pub const HTMLFrameSiteEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLFrameSiteEvents_Value = Guid.initString("3050f800-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLFrameSiteEvents = &IID_HTMLFrameSiteEvents_Value;
pub const HTMLFrameSiteEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLFrameBase2_Value = Guid.initString("3050f6db-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameBase2 = &IID_IHTMLFrameBase2_Value;
pub const IHTMLFrameBase2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentWindow: *const fn(
            self: *const IHTMLFrameBase2,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLFrameBase2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLFrameBase2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLFrameBase2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLFrameBase2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLFrameBase2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_allowTransparency: *const fn(
            self: *const IHTMLFrameBase2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_allowTransparency: *const fn(
            self: *const IHTMLFrameBase2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_contentWindow(self: *const IHTMLFrameBase2, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentWindow(self, p);
    }
    pub fn put_onload(self: *const IHTMLFrameBase2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLFrameBase2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLFrameBase2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLFrameBase2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn get_readyState(self: *const IHTMLFrameBase2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn put_allowTransparency(self: *const IHTMLFrameBase2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_allowTransparency(self, v);
    }
    pub fn get_allowTransparency(self: *const IHTMLFrameBase2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_allowTransparency(self, p);
    }
};

const IID_IHTMLFrameBase3_Value = Guid.initString("3050f82e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameBase3 = &IID_IHTMLFrameBase3_Value;
pub const IHTMLFrameBase3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_longDesc: *const fn(
            self: *const IHTMLFrameBase3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_longDesc: *const fn(
            self: *const IHTMLFrameBase3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_longDesc(self: *const IHTMLFrameBase3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_longDesc(self, v);
    }
    pub fn get_longDesc(self: *const IHTMLFrameBase3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_longDesc(self, p);
    }
};

const IID_DispHTMLFrameBase_Value = Guid.initString("3050f541-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLFrameBase = &IID_DispHTMLFrameBase_Value;
pub const DispHTMLFrameBase = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLFrameElement_Value = Guid.initString("3050f313-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameElement = &IID_IHTMLFrameElement_Value;
pub const IHTMLFrameElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColor: *const fn(
            self: *const IHTMLFrameElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLFrameElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_borderColor(self: *const IHTMLFrameElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColor(self, v);
    }
    pub fn get_borderColor(self: *const IHTMLFrameElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
};

const IID_IHTMLFrameElement2_Value = Guid.initString("3050f7f5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameElement2 = &IID_IHTMLFrameElement2_Value;
pub const IHTMLFrameElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLFrameElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLFrameElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLFrameElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLFrameElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_height(self: *const IHTMLFrameElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLFrameElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_width(self: *const IHTMLFrameElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLFrameElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
};

const IID_IHTMLFrameElement3_Value = Guid.initString("3051042d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameElement3 = &IID_IHTMLFrameElement3_Value;
pub const IHTMLFrameElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentDocument: *const fn(
            self: *const IHTMLFrameElement3,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLFrameElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLFrameElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_longDesc: *const fn(
            self: *const IHTMLFrameElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_longDesc: *const fn(
            self: *const IHTMLFrameElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameBorder: *const fn(
            self: *const IHTMLFrameElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameBorder: *const fn(
            self: *const IHTMLFrameElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_contentDocument(self: *const IHTMLFrameElement3, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentDocument(self, p);
    }
    pub fn put_src(self: *const IHTMLFrameElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLFrameElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_longDesc(self: *const IHTMLFrameElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_longDesc(self, v);
    }
    pub fn get_longDesc(self: *const IHTMLFrameElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_longDesc(self, p);
    }
    pub fn put_frameBorder(self: *const IHTMLFrameElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameBorder(self, v);
    }
    pub fn get_frameBorder(self: *const IHTMLFrameElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameBorder(self, p);
    }
};

const IID_DispHTMLFrameElement_Value = Guid.initString("3050f513-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLFrameElement = &IID_DispHTMLFrameElement_Value;
pub const DispHTMLFrameElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLIFrameElement_Value = Guid.initString("3050f315-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLIFrameElement = &IID_IHTMLIFrameElement_Value;
pub const IHTMLIFrameElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_vspace: *const fn(
            self: *const IHTMLIFrameElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_vspace: *const fn(
            self: *const IHTMLIFrameElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hspace: *const fn(
            self: *const IHTMLIFrameElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hspace: *const fn(
            self: *const IHTMLIFrameElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLIFrameElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLIFrameElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_vspace(self: *const IHTMLIFrameElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_vspace(self, v);
    }
    pub fn get_vspace(self: *const IHTMLIFrameElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_vspace(self, p);
    }
    pub fn put_hspace(self: *const IHTMLIFrameElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_hspace(self, v);
    }
    pub fn get_hspace(self: *const IHTMLIFrameElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_hspace(self, p);
    }
    pub fn put_align(self: *const IHTMLIFrameElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLIFrameElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
};

const IID_IHTMLIFrameElement2_Value = Guid.initString("3050f4e6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLIFrameElement2 = &IID_IHTMLIFrameElement2_Value;
pub const IHTMLIFrameElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLIFrameElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLIFrameElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLIFrameElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLIFrameElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_height(self: *const IHTMLIFrameElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLIFrameElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn put_width(self: *const IHTMLIFrameElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLIFrameElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
};

const IID_IHTMLIFrameElement3_Value = Guid.initString("30510433-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLIFrameElement3 = &IID_IHTMLIFrameElement3_Value;
pub const IHTMLIFrameElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentDocument: *const fn(
            self: *const IHTMLIFrameElement3,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLIFrameElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLIFrameElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_longDesc: *const fn(
            self: *const IHTMLIFrameElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_longDesc: *const fn(
            self: *const IHTMLIFrameElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameBorder: *const fn(
            self: *const IHTMLIFrameElement3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameBorder: *const fn(
            self: *const IHTMLIFrameElement3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_contentDocument(self: *const IHTMLIFrameElement3, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentDocument(self, p);
    }
    pub fn put_src(self: *const IHTMLIFrameElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLIFrameElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_longDesc(self: *const IHTMLIFrameElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_longDesc(self, v);
    }
    pub fn get_longDesc(self: *const IHTMLIFrameElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_longDesc(self, p);
    }
    pub fn put_frameBorder(self: *const IHTMLIFrameElement3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameBorder(self, v);
    }
    pub fn get_frameBorder(self: *const IHTMLIFrameElement3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameBorder(self, p);
    }
};

const IID_DispHTMLIFrame_Value = Guid.initString("3050f51b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLIFrame = &IID_DispHTMLIFrame_Value;
pub const DispHTMLIFrame = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLDivPosition_Value = Guid.initString("3050f212-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDivPosition = &IID_IHTMLDivPosition_Value;
pub const IHTMLDivPosition = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLDivPosition,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLDivPosition,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLDivPosition, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLDivPosition, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
};

const IID_IHTMLFieldSetElement_Value = Guid.initString("3050f3e7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFieldSetElement = &IID_IHTMLFieldSetElement_Value;
pub const IHTMLFieldSetElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLFieldSetElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLFieldSetElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLFieldSetElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLFieldSetElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
};

const IID_IHTMLFieldSetElement2_Value = Guid.initString("3050f833-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFieldSetElement2 = &IID_IHTMLFieldSetElement2_Value;
pub const IHTMLFieldSetElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLFieldSetElement2,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_form(self: *const IHTMLFieldSetElement2, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
};

const IID_IHTMLLegendElement_Value = Guid.initString("3050f3ea-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLegendElement = &IID_IHTMLLegendElement_Value;
pub const IHTMLLegendElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLLegendElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLLegendElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLLegendElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLLegendElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
};

const IID_IHTMLLegendElement2_Value = Guid.initString("3050f834-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLLegendElement2 = &IID_IHTMLLegendElement2_Value;
pub const IHTMLLegendElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLLegendElement2,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_form(self: *const IHTMLLegendElement2, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
};

const IID_DispHTMLDivPosition_Value = Guid.initString("3050f50f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLDivPosition = &IID_DispHTMLDivPosition_Value;
pub const DispHTMLDivPosition = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLFieldSetElement_Value = Guid.initString("3050f545-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLFieldSetElement = &IID_DispHTMLFieldSetElement_Value;
pub const DispHTMLFieldSetElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLLegendElement_Value = Guid.initString("3050f546-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLLegendElement = &IID_DispHTMLLegendElement_Value;
pub const DispHTMLLegendElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLSpanFlow_Value = Guid.initString("3050f3e5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSpanFlow = &IID_IHTMLSpanFlow_Value;
pub const IHTMLSpanFlow = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const IHTMLSpanFlow,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const IHTMLSpanFlow,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const IHTMLSpanFlow, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const IHTMLSpanFlow, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
};

const IID_DispHTMLSpanFlow_Value = Guid.initString("3050f544-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLSpanFlow = &IID_DispHTMLSpanFlow_Value;
pub const DispHTMLSpanFlow = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLFrameSetElement_Value = Guid.initString("3050f319-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameSetElement = &IID_IHTMLFrameSetElement_Value;
pub const IHTMLFrameSetElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rows: *const fn(
            self: *const IHTMLFrameSetElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rows: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_cols: *const fn(
            self: *const IHTMLFrameSetElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cols: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLFrameSetElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderColor: *const fn(
            self: *const IHTMLFrameSetElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderColor: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameBorder: *const fn(
            self: *const IHTMLFrameSetElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameBorder: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameSpacing: *const fn(
            self: *const IHTMLFrameSetElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameSpacing: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn(
            self: *const IHTMLFrameSetElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLFrameSetElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onunload: *const fn(
            self: *const IHTMLFrameSetElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onunload: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeunload: *const fn(
            self: *const IHTMLFrameSetElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeunload: *const fn(
            self: *const IHTMLFrameSetElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_rows(self: *const IHTMLFrameSetElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_rows(self, v);
    }
    pub fn get_rows(self: *const IHTMLFrameSetElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_rows(self, p);
    }
    pub fn put_cols(self: *const IHTMLFrameSetElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_cols(self, v);
    }
    pub fn get_cols(self: *const IHTMLFrameSetElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cols(self, p);
    }
    pub fn put_border(self: *const IHTMLFrameSetElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLFrameSetElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_borderColor(self: *const IHTMLFrameSetElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderColor(self, v);
    }
    pub fn get_borderColor(self: *const IHTMLFrameSetElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderColor(self, p);
    }
    pub fn put_frameBorder(self: *const IHTMLFrameSetElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameBorder(self, v);
    }
    pub fn get_frameBorder(self: *const IHTMLFrameSetElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameBorder(self, p);
    }
    pub fn put_frameSpacing(self: *const IHTMLFrameSetElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameSpacing(self, v);
    }
    pub fn get_frameSpacing(self: *const IHTMLFrameSetElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameSpacing(self, p);
    }
    pub fn put_name(self: *const IHTMLFrameSetElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_name(self, v);
    }
    pub fn get_name(self: *const IHTMLFrameSetElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn put_onload(self: *const IHTMLFrameSetElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLFrameSetElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onunload(self: *const IHTMLFrameSetElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onunload(self, v);
    }
    pub fn get_onunload(self: *const IHTMLFrameSetElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onunload(self, p);
    }
    pub fn put_onbeforeunload(self: *const IHTMLFrameSetElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeunload(self, v);
    }
    pub fn get_onbeforeunload(self: *const IHTMLFrameSetElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeunload(self, p);
    }
};

const IID_IHTMLFrameSetElement2_Value = Guid.initString("3050f5c6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameSetElement2 = &IID_IHTMLFrameSetElement2_Value;
pub const IHTMLFrameSetElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onbeforeprint: *const fn(
            self: *const IHTMLFrameSetElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onbeforeprint: *const fn(
            self: *const IHTMLFrameSetElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onafterprint: *const fn(
            self: *const IHTMLFrameSetElement2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onafterprint: *const fn(
            self: *const IHTMLFrameSetElement2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onbeforeprint(self: *const IHTMLFrameSetElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onbeforeprint(self, v);
    }
    pub fn get_onbeforeprint(self: *const IHTMLFrameSetElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onbeforeprint(self, p);
    }
    pub fn put_onafterprint(self: *const IHTMLFrameSetElement2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onafterprint(self, v);
    }
    pub fn get_onafterprint(self: *const IHTMLFrameSetElement2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onafterprint(self, p);
    }
};

const IID_IHTMLFrameSetElement3_Value = Guid.initString("30510796-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFrameSetElement3 = &IID_IHTMLFrameSetElement3_Value;
pub const IHTMLFrameSetElement3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onhashchange: *const fn(
            self: *const IHTMLFrameSetElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onhashchange: *const fn(
            self: *const IHTMLFrameSetElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onmessage: *const fn(
            self: *const IHTMLFrameSetElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onmessage: *const fn(
            self: *const IHTMLFrameSetElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onoffline: *const fn(
            self: *const IHTMLFrameSetElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onoffline: *const fn(
            self: *const IHTMLFrameSetElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ononline: *const fn(
            self: *const IHTMLFrameSetElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ononline: *const fn(
            self: *const IHTMLFrameSetElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onstorage: *const fn(
            self: *const IHTMLFrameSetElement3,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onstorage: *const fn(
            self: *const IHTMLFrameSetElement3,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_onhashchange(self: *const IHTMLFrameSetElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onhashchange(self, v);
    }
    pub fn get_onhashchange(self: *const IHTMLFrameSetElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onhashchange(self, p);
    }
    pub fn put_onmessage(self: *const IHTMLFrameSetElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onmessage(self, v);
    }
    pub fn get_onmessage(self: *const IHTMLFrameSetElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onmessage(self, p);
    }
    pub fn put_onoffline(self: *const IHTMLFrameSetElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onoffline(self, v);
    }
    pub fn get_onoffline(self: *const IHTMLFrameSetElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onoffline(self, p);
    }
    pub fn put_ononline(self: *const IHTMLFrameSetElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ononline(self, v);
    }
    pub fn get_ononline(self: *const IHTMLFrameSetElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ononline(self, p);
    }
    pub fn put_onstorage(self: *const IHTMLFrameSetElement3, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onstorage(self, v);
    }
    pub fn get_onstorage(self: *const IHTMLFrameSetElement3, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onstorage(self, p);
    }
};

const IID_DispHTMLFrameSetSite_Value = Guid.initString("3050f514-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLFrameSetSite = &IID_DispHTMLFrameSetSite_Value;
pub const DispHTMLFrameSetSite = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLBGsound_Value = Guid.initString("3050f369-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLBGsound = &IID_IHTMLBGsound_Value;
pub const IHTMLBGsound = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLBGsound,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLBGsound,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_loop: *const fn(
            self: *const IHTMLBGsound,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loop: *const fn(
            self: *const IHTMLBGsound,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_volume: *const fn(
            self: *const IHTMLBGsound,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_volume: *const fn(
            self: *const IHTMLBGsound,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_balance: *const fn(
            self: *const IHTMLBGsound,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_balance: *const fn(
            self: *const IHTMLBGsound,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_src(self: *const IHTMLBGsound, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLBGsound, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_loop(self: *const IHTMLBGsound, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_loop(self, v);
    }
    pub fn get_loop(self: *const IHTMLBGsound, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_loop(self, p);
    }
    pub fn put_volume(self: *const IHTMLBGsound, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_volume(self, v);
    }
    pub fn get_volume(self: *const IHTMLBGsound, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_volume(self, p);
    }
    pub fn put_balance(self: *const IHTMLBGsound, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_balance(self, v);
    }
    pub fn get_balance(self: *const IHTMLBGsound, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_balance(self, p);
    }
};

const IID_DispHTMLBGsound_Value = Guid.initString("3050f53c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLBGsound = &IID_DispHTMLBGsound_Value;
pub const DispHTMLBGsound = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLFontNamesCollection_Value = Guid.initString("3050f376-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFontNamesCollection = &IID_IHTMLFontNamesCollection_Value;
pub const IHTMLFontNamesCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLFontNamesCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLFontNamesCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLFontNamesCollection,
            index: i32,
            pBstr: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLFontNamesCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLFontNamesCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLFontNamesCollection, index: i32, pBstr: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, pBstr);
    }
};

const IID_IHTMLFontSizesCollection_Value = Guid.initString("3050f377-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLFontSizesCollection = &IID_IHTMLFontSizesCollection_Value;
pub const IHTMLFontSizesCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLFontSizesCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLFontSizesCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_forFont: *const fn(
            self: *const IHTMLFontSizesCollection,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLFontSizesCollection,
            index: i32,
            plSize: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLFontSizesCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLFontSizesCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn get_forFont(self: *const IHTMLFontSizesCollection, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_forFont(self, p);
    }
    pub fn item(self: *const IHTMLFontSizesCollection, index: i32, plSize: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, plSize);
    }
};

const IID_IHTMLOptionsHolder_Value = Guid.initString("3050f378-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOptionsHolder = &IID_IHTMLOptionsHolder_Value;
pub const IHTMLOptionsHolder = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_document: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*?*IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fonts: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*?*IHTMLFontNamesCollection,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_execArg: *const fn(
            self: *const IHTMLOptionsHolder,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_execArg: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_errorLine: *const fn(
            self: *const IHTMLOptionsHolder,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorLine: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_errorCharacter: *const fn(
            self: *const IHTMLOptionsHolder,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorCharacter: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_errorCode: *const fn(
            self: *const IHTMLOptionsHolder,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorCode: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_errorMessage: *const fn(
            self: *const IHTMLOptionsHolder,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorMessage: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_errorDebug: *const fn(
            self: *const IHTMLOptionsHolder,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorDebug: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unsecuredWindowOfDocument: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_findText: *const fn(
            self: *const IHTMLOptionsHolder,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_findText: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_anythingAfterFrameset: *const fn(
            self: *const IHTMLOptionsHolder,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_anythingAfterFrameset: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        sizes: *const fn(
            self: *const IHTMLOptionsHolder,
            fontName: ?BSTR,
            pSizesCollection: ?*?*IHTMLFontSizesCollection,
        ) callconv(.winapi) HRESULT,
        openfiledlg: *const fn(
            self: *const IHTMLOptionsHolder,
            initFile: VARIANT,
            initDir: VARIANT,
            filter: VARIANT,
            title: VARIANT,
            pathName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        savefiledlg: *const fn(
            self: *const IHTMLOptionsHolder,
            initFile: VARIANT,
            initDir: VARIANT,
            filter: VARIANT,
            title: VARIANT,
            pathName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        choosecolordlg: *const fn(
            self: *const IHTMLOptionsHolder,
            initColor: VARIANT,
            rgbColor: ?*i32,
        ) callconv(.winapi) HRESULT,
        showSecurityInfo: *const fn(
            self: *const IHTMLOptionsHolder,
        ) callconv(.winapi) HRESULT,
        isApartmentModel: *const fn(
            self: *const IHTMLOptionsHolder,
            object: ?*IHTMLObjectElement,
            fApartment: ?*i16,
        ) callconv(.winapi) HRESULT,
        getCharset: *const fn(
            self: *const IHTMLOptionsHolder,
            fontName: ?BSTR,
            charset: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_secureConnectionInfo: *const fn(
            self: *const IHTMLOptionsHolder,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_document(self: *const IHTMLOptionsHolder, p: ?*?*IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.get_document(self, p);
    }
    pub fn get_fonts(self: *const IHTMLOptionsHolder, p: ?*?*IHTMLFontNamesCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_fonts(self, p);
    }
    pub fn put_execArg(self: *const IHTMLOptionsHolder, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_execArg(self, v);
    }
    pub fn get_execArg(self: *const IHTMLOptionsHolder, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_execArg(self, p);
    }
    pub fn put_errorLine(self: *const IHTMLOptionsHolder, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_errorLine(self, v);
    }
    pub fn get_errorLine(self: *const IHTMLOptionsHolder, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_errorLine(self, p);
    }
    pub fn put_errorCharacter(self: *const IHTMLOptionsHolder, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_errorCharacter(self, v);
    }
    pub fn get_errorCharacter(self: *const IHTMLOptionsHolder, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_errorCharacter(self, p);
    }
    pub fn put_errorCode(self: *const IHTMLOptionsHolder, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_errorCode(self, v);
    }
    pub fn get_errorCode(self: *const IHTMLOptionsHolder, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_errorCode(self, p);
    }
    pub fn put_errorMessage(self: *const IHTMLOptionsHolder, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_errorMessage(self, v);
    }
    pub fn get_errorMessage(self: *const IHTMLOptionsHolder, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_errorMessage(self, p);
    }
    pub fn put_errorDebug(self: *const IHTMLOptionsHolder, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_errorDebug(self, v);
    }
    pub fn get_errorDebug(self: *const IHTMLOptionsHolder, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_errorDebug(self, p);
    }
    pub fn get_unsecuredWindowOfDocument(self: *const IHTMLOptionsHolder, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_unsecuredWindowOfDocument(self, p);
    }
    pub fn put_findText(self: *const IHTMLOptionsHolder, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_findText(self, v);
    }
    pub fn get_findText(self: *const IHTMLOptionsHolder, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_findText(self, p);
    }
    pub fn put_anythingAfterFrameset(self: *const IHTMLOptionsHolder, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_anythingAfterFrameset(self, v);
    }
    pub fn get_anythingAfterFrameset(self: *const IHTMLOptionsHolder, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_anythingAfterFrameset(self, p);
    }
    pub fn sizes(self: *const IHTMLOptionsHolder, fontName: ?BSTR, pSizesCollection: ?*?*IHTMLFontSizesCollection) callconv(.@"inline") HRESULT {
        return self.vtable.sizes(self, fontName, pSizesCollection);
    }
    pub fn openfiledlg(self: *const IHTMLOptionsHolder, initFile: VARIANT, initDir: VARIANT, filter: VARIANT, title: VARIANT, pathName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.openfiledlg(self, initFile, initDir, filter, title, pathName);
    }
    pub fn savefiledlg(self: *const IHTMLOptionsHolder, initFile: VARIANT, initDir: VARIANT, filter: VARIANT, title: VARIANT, pathName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.savefiledlg(self, initFile, initDir, filter, title, pathName);
    }
    pub fn choosecolordlg(self: *const IHTMLOptionsHolder, initColor: VARIANT, rgbColor: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.choosecolordlg(self, initColor, rgbColor);
    }
    pub fn showSecurityInfo(self: *const IHTMLOptionsHolder) callconv(.@"inline") HRESULT {
        return self.vtable.showSecurityInfo(self);
    }
    pub fn isApartmentModel(self: *const IHTMLOptionsHolder, object: ?*IHTMLObjectElement, fApartment: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isApartmentModel(self, object, fApartment);
    }
    pub fn getCharset(self: *const IHTMLOptionsHolder, fontName: ?BSTR, charset: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.getCharset(self, fontName, charset);
    }
    pub fn get_secureConnectionInfo(self: *const IHTMLOptionsHolder, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_secureConnectionInfo(self, p);
    }
};

const IID_HTMLStyleElementEvents2_Value = Guid.initString("3050f615-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLStyleElementEvents2 = &IID_HTMLStyleElementEvents2_Value;
pub const HTMLStyleElementEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLStyleElementEvents_Value = Guid.initString("3050f3cb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLStyleElementEvents = &IID_HTMLStyleElementEvents_Value;
pub const HTMLStyleElementEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleElement_Value = Guid.initString("3050f375-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleElement = &IID_IHTMLStyleElement_Value;
pub const IHTMLStyleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLStyleElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLStyleElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLStyleElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLStyleElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLStyleElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLStyleElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLStyleElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLStyleElement,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLStyleElement,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_styleSheet: *const fn(
            self: *const IHTMLStyleElement,
            p: ?*?*IHTMLStyleSheet,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disabled: *const fn(
            self: *const IHTMLStyleElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disabled: *const fn(
            self: *const IHTMLStyleElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_media: *const fn(
            self: *const IHTMLStyleElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const IHTMLStyleElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_type(self: *const IHTMLStyleElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLStyleElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn get_readyState(self: *const IHTMLStyleElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLStyleElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLStyleElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn put_onload(self: *const IHTMLStyleElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLStyleElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn put_onerror(self: *const IHTMLStyleElement, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLStyleElement, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn get_styleSheet(self: *const IHTMLStyleElement, p: ?*?*IHTMLStyleSheet) callconv(.@"inline") HRESULT {
        return self.vtable.get_styleSheet(self, p);
    }
    pub fn put_disabled(self: *const IHTMLStyleElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_disabled(self, v);
    }
    pub fn get_disabled(self: *const IHTMLStyleElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_disabled(self, p);
    }
    pub fn put_media(self: *const IHTMLStyleElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_media(self, v);
    }
    pub fn get_media(self: *const IHTMLStyleElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
};

const IID_IHTMLStyleElement2_Value = Guid.initString("3051072a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleElement2 = &IID_IHTMLStyleElement2_Value;
pub const IHTMLStyleElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sheet: *const fn(
            self: *const IHTMLStyleElement2,
            p: ?*?*IHTMLStyleSheet,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_sheet(self: *const IHTMLStyleElement2, p: ?*?*IHTMLStyleSheet) callconv(.@"inline") HRESULT {
        return self.vtable.get_sheet(self, p);
    }
};

const IID_DispHTMLStyleElement_Value = Guid.initString("3050f511-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleElement = &IID_DispHTMLStyleElement_Value;
pub const DispHTMLStyleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleFontFace_Value = Guid.initString("3050f3d5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleFontFace = &IID_IHTMLStyleFontFace_Value;
pub const IHTMLStyleFontFace = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fontsrc: *const fn(
            self: *const IHTMLStyleFontFace,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontsrc: *const fn(
            self: *const IHTMLStyleFontFace,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_fontsrc(self: *const IHTMLStyleFontFace, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_fontsrc(self, v);
    }
    pub fn get_fontsrc(self: *const IHTMLStyleFontFace, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontsrc(self, p);
    }
};

const IID_IHTMLStyleFontFace2_Value = Guid.initString("305106ec-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleFontFace2 = &IID_IHTMLStyleFontFace2_Value;
pub const IHTMLStyleFontFace2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_style: *const fn(
            self: *const IHTMLStyleFontFace2,
            p: ?*?*IHTMLRuleStyle,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_style(self: *const IHTMLStyleFontFace2, p: ?*?*IHTMLRuleStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_style(self, p);
    }
};

const IID_DispHTMLStyleFontFace_Value = Guid.initString("30590081-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleFontFace = &IID_DispHTMLStyleFontFace_Value;
pub const DispHTMLStyleFontFace = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLXDomainRequest_Value = Guid.initString("30510454-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLXDomainRequest = &IID_IHTMLXDomainRequest_Value;
pub const IHTMLXDomainRequest = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseText: *const fn(
            self: *const IHTMLXDomainRequest,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_timeout: *const fn(
            self: *const IHTMLXDomainRequest,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_timeout: *const fn(
            self: *const IHTMLXDomainRequest,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentType: *const fn(
            self: *const IHTMLXDomainRequest,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onprogress: *const fn(
            self: *const IHTMLXDomainRequest,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onprogress: *const fn(
            self: *const IHTMLXDomainRequest,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onerror: *const fn(
            self: *const IHTMLXDomainRequest,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onerror: *const fn(
            self: *const IHTMLXDomainRequest,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ontimeout: *const fn(
            self: *const IHTMLXDomainRequest,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ontimeout: *const fn(
            self: *const IHTMLXDomainRequest,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onload: *const fn(
            self: *const IHTMLXDomainRequest,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onload: *const fn(
            self: *const IHTMLXDomainRequest,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        abort: *const fn(
            self: *const IHTMLXDomainRequest,
        ) callconv(.winapi) HRESULT,
        open: *const fn(
            self: *const IHTMLXDomainRequest,
            bstrMethod: ?BSTR,
            bstrUrl: ?BSTR,
        ) callconv(.winapi) HRESULT,
        send: *const fn(
            self: *const IHTMLXDomainRequest,
            varBody: VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_responseText(self: *const IHTMLXDomainRequest, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_responseText(self, p);
    }
    pub fn put_timeout(self: *const IHTMLXDomainRequest, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_timeout(self, v);
    }
    pub fn get_timeout(self: *const IHTMLXDomainRequest, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_timeout(self, p);
    }
    pub fn get_contentType(self: *const IHTMLXDomainRequest, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentType(self, p);
    }
    pub fn put_onprogress(self: *const IHTMLXDomainRequest, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onprogress(self, v);
    }
    pub fn get_onprogress(self: *const IHTMLXDomainRequest, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onprogress(self, p);
    }
    pub fn put_onerror(self: *const IHTMLXDomainRequest, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onerror(self, v);
    }
    pub fn get_onerror(self: *const IHTMLXDomainRequest, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onerror(self, p);
    }
    pub fn put_ontimeout(self: *const IHTMLXDomainRequest, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ontimeout(self, v);
    }
    pub fn get_ontimeout(self: *const IHTMLXDomainRequest, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ontimeout(self, p);
    }
    pub fn put_onload(self: *const IHTMLXDomainRequest, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onload(self, v);
    }
    pub fn get_onload(self: *const IHTMLXDomainRequest, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onload(self, p);
    }
    pub fn abort(self: *const IHTMLXDomainRequest) callconv(.@"inline") HRESULT {
        return self.vtable.abort(self);
    }
    pub fn open(self: *const IHTMLXDomainRequest, bstrMethod: ?BSTR, bstrUrl: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.open(self, bstrMethod, bstrUrl);
    }
    pub fn send(self: *const IHTMLXDomainRequest, varBody: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.send(self, varBody);
    }
};

const IID_IHTMLXDomainRequestFactory_Value = Guid.initString("30510456-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLXDomainRequestFactory = &IID_IHTMLXDomainRequestFactory_Value;
pub const IHTMLXDomainRequestFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        create: *const fn(
            self: *const IHTMLXDomainRequestFactory,
            __MIDL__IHTMLXDomainRequestFactory0000: ?*?*IHTMLXDomainRequest,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn create(self: *const IHTMLXDomainRequestFactory, __MIDL__IHTMLXDomainRequestFactory0000: ?*?*IHTMLXDomainRequest) callconv(.@"inline") HRESULT {
        return self.vtable.create(self, __MIDL__IHTMLXDomainRequestFactory0000);
    }
};

const IID_DispXDomainRequest_Value = Guid.initString("3050f599-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispXDomainRequest = &IID_DispXDomainRequest_Value;
pub const DispXDomainRequest = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStorage2_Value = Guid.initString("30510799-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStorage2 = &IID_IHTMLStorage2_Value;
pub const IHTMLStorage2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        setItem: *const fn(
            self: *const IHTMLStorage2,
            bstrKey: ?BSTR,
            bstrValue: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn setItem(self: *const IHTMLStorage2, bstrKey: ?BSTR, bstrValue: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.setItem(self, bstrKey, bstrValue);
    }
};

const IID_DispHTMLStorage_Value = Guid.initString("3050f59d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStorage = &IID_DispHTMLStorage_Value;
pub const DispHTMLStorage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IEventTarget_Value = Guid.initString("305104b9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IEventTarget = &IID_IEventTarget_Value;
pub const IEventTarget = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        addEventListener: *const fn(
            self: *const IEventTarget,
            type: ?BSTR,
            listener: ?*IDispatch,
            useCapture: i16,
        ) callconv(.winapi) HRESULT,
        removeEventListener: *const fn(
            self: *const IEventTarget,
            type: ?BSTR,
            listener: ?*IDispatch,
            useCapture: i16,
        ) callconv(.winapi) HRESULT,
        dispatchEvent: *const fn(
            self: *const IEventTarget,
            evt: ?*IDOMEvent,
            pfResult: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn addEventListener(self: *const IEventTarget, @"type": ?BSTR, listener: ?*IDispatch, useCapture: i16) callconv(.@"inline") HRESULT {
        return self.vtable.addEventListener(self, @"type", listener, useCapture);
    }
    pub fn removeEventListener(self: *const IEventTarget, @"type": ?BSTR, listener: ?*IDispatch, useCapture: i16) callconv(.@"inline") HRESULT {
        return self.vtable.removeEventListener(self, @"type", listener, useCapture);
    }
    pub fn dispatchEvent(self: *const IEventTarget, evt: ?*IDOMEvent, pfResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.dispatchEvent(self, evt, pfResult);
    }
};

const IID_DispDOMEvent_Value = Guid.initString("3050f5a2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMEvent = &IID_DispDOMEvent_Value;
pub const DispDOMEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMUIEvent_Value = Guid.initString("305106ca-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMUIEvent = &IID_IDOMUIEvent_Value;
pub const IDOMUIEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_view: *const fn(
            self: *const IDOMUIEvent,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_detail: *const fn(
            self: *const IDOMUIEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        initUIEvent: *const fn(
            self: *const IDOMUIEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            view: ?*IHTMLWindow2,
            detail: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_view(self: *const IDOMUIEvent, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_view(self, p);
    }
    pub fn get_detail(self: *const IDOMUIEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_detail(self, p);
    }
    pub fn initUIEvent(self: *const IDOMUIEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, view: ?*IHTMLWindow2, detail: i32) callconv(.@"inline") HRESULT {
        return self.vtable.initUIEvent(self, eventType, canBubble, cancelable, view, detail);
    }
};

const IID_DispDOMUIEvent_Value = Guid.initString("30590072-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMUIEvent = &IID_DispDOMUIEvent_Value;
pub const DispDOMUIEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMMouseEvent_Value = Guid.initString("305106ce-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMMouseEvent = &IID_IDOMMouseEvent_Value;
pub const IDOMMouseEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenX: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_screenY: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientX: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clientY: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ctrlKey: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shiftKey: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_altKey: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_metaKey: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_button: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_relatedTarget: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*?*IEventTarget,
        ) callconv(.winapi) HRESULT,
        initMouseEvent: *const fn(
            self: *const IDOMMouseEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            viewArg: ?*IHTMLWindow2,
            detailArg: i32,
            screenXArg: i32,
            screenYArg: i32,
            clientXArg: i32,
            clientYArg: i32,
            ctrlKeyArg: i16,
            altKeyArg: i16,
            shiftKeyArg: i16,
            metaKeyArg: i16,
            buttonArg: u16,
            relatedTargetArg: ?*IEventTarget,
        ) callconv(.winapi) HRESULT,
        getModifierState: *const fn(
            self: *const IDOMMouseEvent,
            keyArg: ?BSTR,
            activated: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_buttons: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fromElement: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_toElement: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetX: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offsetY: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageX: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageY: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layerX: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_layerY: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_which: *const fn(
            self: *const IDOMMouseEvent,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_screenX(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenX(self, p);
    }
    pub fn get_screenY(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_screenY(self, p);
    }
    pub fn get_clientX(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientX(self, p);
    }
    pub fn get_clientY(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_clientY(self, p);
    }
    pub fn get_ctrlKey(self: *const IDOMMouseEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ctrlKey(self, p);
    }
    pub fn get_shiftKey(self: *const IDOMMouseEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_shiftKey(self, p);
    }
    pub fn get_altKey(self: *const IDOMMouseEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_altKey(self, p);
    }
    pub fn get_metaKey(self: *const IDOMMouseEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_metaKey(self, p);
    }
    pub fn get_button(self: *const IDOMMouseEvent, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_button(self, p);
    }
    pub fn get_relatedTarget(self: *const IDOMMouseEvent, p: ?*?*IEventTarget) callconv(.@"inline") HRESULT {
        return self.vtable.get_relatedTarget(self, p);
    }
    pub fn initMouseEvent(self: *const IDOMMouseEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, viewArg: ?*IHTMLWindow2, detailArg: i32, screenXArg: i32, screenYArg: i32, clientXArg: i32, clientYArg: i32, ctrlKeyArg: i16, altKeyArg: i16, shiftKeyArg: i16, metaKeyArg: i16, buttonArg: u16, relatedTargetArg: ?*IEventTarget) callconv(.@"inline") HRESULT {
        return self.vtable.initMouseEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg);
    }
    pub fn getModifierState(self: *const IDOMMouseEvent, keyArg: ?BSTR, activated: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.getModifierState(self, keyArg, activated);
    }
    pub fn get_buttons(self: *const IDOMMouseEvent, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_buttons(self, p);
    }
    pub fn get_fromElement(self: *const IDOMMouseEvent, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_fromElement(self, p);
    }
    pub fn get_toElement(self: *const IDOMMouseEvent, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_toElement(self, p);
    }
    pub fn get_x(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn get_y(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn get_offsetX(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetX(self, p);
    }
    pub fn get_offsetY(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_offsetY(self, p);
    }
    pub fn get_pageX(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageX(self, p);
    }
    pub fn get_pageY(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageY(self, p);
    }
    pub fn get_layerX(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_layerX(self, p);
    }
    pub fn get_layerY(self: *const IDOMMouseEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_layerY(self, p);
    }
    pub fn get_which(self: *const IDOMMouseEvent, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_which(self, p);
    }
};

const IID_DispDOMMouseEvent_Value = Guid.initString("30590073-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMMouseEvent = &IID_DispDOMMouseEvent_Value;
pub const DispDOMMouseEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMDragEvent_Value = Guid.initString("30510761-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMDragEvent = &IID_IDOMDragEvent_Value;
pub const IDOMDragEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataTransfer: *const fn(
            self: *const IDOMDragEvent,
            p: ?*?*IHTMLDataTransfer,
        ) callconv(.winapi) HRESULT,
        initDragEvent: *const fn(
            self: *const IDOMDragEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            viewArg: ?*IHTMLWindow2,
            detailArg: i32,
            screenXArg: i32,
            screenYArg: i32,
            clientXArg: i32,
            clientYArg: i32,
            ctrlKeyArg: i16,
            altKeyArg: i16,
            shiftKeyArg: i16,
            metaKeyArg: i16,
            buttonArg: u16,
            relatedTargetArg: ?*IEventTarget,
            dataTransferArg: ?*IHTMLDataTransfer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_dataTransfer(self: *const IDOMDragEvent, p: ?*?*IHTMLDataTransfer) callconv(.@"inline") HRESULT {
        return self.vtable.get_dataTransfer(self, p);
    }
    pub fn initDragEvent(self: *const IDOMDragEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, viewArg: ?*IHTMLWindow2, detailArg: i32, screenXArg: i32, screenYArg: i32, clientXArg: i32, clientYArg: i32, ctrlKeyArg: i16, altKeyArg: i16, shiftKeyArg: i16, metaKeyArg: i16, buttonArg: u16, relatedTargetArg: ?*IEventTarget, dataTransferArg: ?*IHTMLDataTransfer) callconv(.@"inline") HRESULT {
        return self.vtable.initDragEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg, dataTransferArg);
    }
};

const IID_DispDOMDragEvent_Value = Guid.initString("305900a7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMDragEvent = &IID_DispDOMDragEvent_Value;
pub const DispDOMDragEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMMouseWheelEvent_Value = Guid.initString("305106d0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMMouseWheelEvent = &IID_IDOMMouseWheelEvent_Value;
pub const IDOMMouseWheelEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wheelDelta: *const fn(
            self: *const IDOMMouseWheelEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        initMouseWheelEvent: *const fn(
            self: *const IDOMMouseWheelEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            viewArg: ?*IHTMLWindow2,
            detailArg: i32,
            screenXArg: i32,
            screenYArg: i32,
            clientXArg: i32,
            clientYArg: i32,
            buttonArg: u16,
            relatedTargetArg: ?*IEventTarget,
            modifiersListArg: ?BSTR,
            wheelDeltaArg: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_wheelDelta(self: *const IDOMMouseWheelEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_wheelDelta(self, p);
    }
    pub fn initMouseWheelEvent(self: *const IDOMMouseWheelEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, viewArg: ?*IHTMLWindow2, detailArg: i32, screenXArg: i32, screenYArg: i32, clientXArg: i32, clientYArg: i32, buttonArg: u16, relatedTargetArg: ?*IEventTarget, modifiersListArg: ?BSTR, wheelDeltaArg: i32) callconv(.@"inline") HRESULT {
        return self.vtable.initMouseWheelEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, wheelDeltaArg);
    }
};

const IID_DispDOMMouseWheelEvent_Value = Guid.initString("30590074-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMMouseWheelEvent = &IID_DispDOMMouseWheelEvent_Value;
pub const DispDOMMouseWheelEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMWheelEvent_Value = Guid.initString("305106d2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMWheelEvent = &IID_IDOMWheelEvent_Value;
pub const IDOMWheelEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deltaX: *const fn(
            self: *const IDOMWheelEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deltaY: *const fn(
            self: *const IDOMWheelEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deltaZ: *const fn(
            self: *const IDOMWheelEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deltaMode: *const fn(
            self: *const IDOMWheelEvent,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        initWheelEvent: *const fn(
            self: *const IDOMWheelEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            viewArg: ?*IHTMLWindow2,
            detailArg: i32,
            screenXArg: i32,
            screenYArg: i32,
            clientXArg: i32,
            clientYArg: i32,
            buttonArg: u16,
            relatedTargetArg: ?*IEventTarget,
            modifiersListArg: ?BSTR,
            deltaX: i32,
            deltaY: i32,
            deltaZ: i32,
            deltaMode: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_deltaX(self: *const IDOMWheelEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_deltaX(self, p);
    }
    pub fn get_deltaY(self: *const IDOMWheelEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_deltaY(self, p);
    }
    pub fn get_deltaZ(self: *const IDOMWheelEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_deltaZ(self, p);
    }
    pub fn get_deltaMode(self: *const IDOMWheelEvent, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_deltaMode(self, p);
    }
    pub fn initWheelEvent(self: *const IDOMWheelEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, viewArg: ?*IHTMLWindow2, detailArg: i32, screenXArg: i32, screenYArg: i32, clientXArg: i32, clientYArg: i32, buttonArg: u16, relatedTargetArg: ?*IEventTarget, modifiersListArg: ?BSTR, deltaX: i32, deltaY: i32, deltaZ: i32, deltaMode: u32) callconv(.@"inline") HRESULT {
        return self.vtable.initWheelEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, deltaX, deltaY, deltaZ, deltaMode);
    }
};

const IID_DispDOMWheelEvent_Value = Guid.initString("30590075-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMWheelEvent = &IID_DispDOMWheelEvent_Value;
pub const DispDOMWheelEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMTextEvent_Value = Guid.initString("305106d4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMTextEvent = &IID_IDOMTextEvent_Value;
pub const IDOMTextEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IDOMTextEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_inputMethod: *const fn(
            self: *const IDOMTextEvent,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        initTextEvent: *const fn(
            self: *const IDOMTextEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            viewArg: ?*IHTMLWindow2,
            dataArg: ?BSTR,
            inputMethod: u32,
            locale: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_locale: *const fn(
            self: *const IDOMTextEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_data(self: *const IDOMTextEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
    pub fn get_inputMethod(self: *const IDOMTextEvent, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_inputMethod(self, p);
    }
    pub fn initTextEvent(self: *const IDOMTextEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, viewArg: ?*IHTMLWindow2, dataArg: ?BSTR, inputMethod: u32, locale: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.initTextEvent(self, eventType, canBubble, cancelable, viewArg, dataArg, inputMethod, locale);
    }
    pub fn get_locale(self: *const IDOMTextEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_locale(self, p);
    }
};

const IID_DispDOMTextEvent_Value = Guid.initString("30590076-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMTextEvent = &IID_DispDOMTextEvent_Value;
pub const DispDOMTextEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMKeyboardEvent_Value = Guid.initString("305106d6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMKeyboardEvent = &IID_IDOMKeyboardEvent_Value;
pub const IDOMKeyboardEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_key: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_location: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ctrlKey: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shiftKey: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_altKey: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_metaKey: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_repeat: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        getModifierState: *const fn(
            self: *const IDOMKeyboardEvent,
            keyArg: ?BSTR,
            state: ?*i16,
        ) callconv(.winapi) HRESULT,
        initKeyboardEvent: *const fn(
            self: *const IDOMKeyboardEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            viewArg: ?*IHTMLWindow2,
            keyArg: ?BSTR,
            locationArg: u32,
            modifiersListArg: ?BSTR,
            repeat: i16,
            locale: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_keyCode: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charCode: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_which: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ie9_char: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_locale: *const fn(
            self: *const IDOMKeyboardEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_key(self: *const IDOMKeyboardEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_key(self, p);
    }
    pub fn get_location(self: *const IDOMKeyboardEvent, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_location(self, p);
    }
    pub fn get_ctrlKey(self: *const IDOMKeyboardEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ctrlKey(self, p);
    }
    pub fn get_shiftKey(self: *const IDOMKeyboardEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_shiftKey(self, p);
    }
    pub fn get_altKey(self: *const IDOMKeyboardEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_altKey(self, p);
    }
    pub fn get_metaKey(self: *const IDOMKeyboardEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_metaKey(self, p);
    }
    pub fn get_repeat(self: *const IDOMKeyboardEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_repeat(self, p);
    }
    pub fn getModifierState(self: *const IDOMKeyboardEvent, keyArg: ?BSTR, state: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.getModifierState(self, keyArg, state);
    }
    pub fn initKeyboardEvent(self: *const IDOMKeyboardEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, viewArg: ?*IHTMLWindow2, keyArg: ?BSTR, locationArg: u32, modifiersListArg: ?BSTR, repeat: i16, locale: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.initKeyboardEvent(self, eventType, canBubble, cancelable, viewArg, keyArg, locationArg, modifiersListArg, repeat, locale);
    }
    pub fn get_keyCode(self: *const IDOMKeyboardEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_keyCode(self, p);
    }
    pub fn get_charCode(self: *const IDOMKeyboardEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_charCode(self, p);
    }
    pub fn get_which(self: *const IDOMKeyboardEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_which(self, p);
    }
    pub fn get_ie9_char(self: *const IDOMKeyboardEvent, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ie9_char(self, p);
    }
    pub fn get_locale(self: *const IDOMKeyboardEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_locale(self, p);
    }
};

const IID_DispDOMKeyboardEvent_Value = Guid.initString("30590077-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMKeyboardEvent = &IID_DispDOMKeyboardEvent_Value;
pub const DispDOMKeyboardEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMCompositionEvent_Value = Guid.initString("305106d8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMCompositionEvent = &IID_IDOMCompositionEvent_Value;
pub const IDOMCompositionEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IDOMCompositionEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        initCompositionEvent: *const fn(
            self: *const IDOMCompositionEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            viewArg: ?*IHTMLWindow2,
            data: ?BSTR,
            locale: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_locale: *const fn(
            self: *const IDOMCompositionEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_data(self: *const IDOMCompositionEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
    pub fn initCompositionEvent(self: *const IDOMCompositionEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, viewArg: ?*IHTMLWindow2, data: ?BSTR, locale: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.initCompositionEvent(self, eventType, canBubble, cancelable, viewArg, data, locale);
    }
    pub fn get_locale(self: *const IDOMCompositionEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_locale(self, p);
    }
};

const IID_DispDOMCompositionEvent_Value = Guid.initString("30590078-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMCompositionEvent = &IID_DispDOMCompositionEvent_Value;
pub const DispDOMCompositionEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMMutationEvent_Value = Guid.initString("305106da-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMMutationEvent = &IID_IDOMMutationEvent_Value;
pub const IDOMMutationEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_relatedNode: *const fn(
            self: *const IDOMMutationEvent,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_prevValue: *const fn(
            self: *const IDOMMutationEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_newValue: *const fn(
            self: *const IDOMMutationEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attrName: *const fn(
            self: *const IDOMMutationEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attrChange: *const fn(
            self: *const IDOMMutationEvent,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        initMutationEvent: *const fn(
            self: *const IDOMMutationEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            relatedNodeArg: ?*IDispatch,
            prevValueArg: ?BSTR,
            newValueArg: ?BSTR,
            attrNameArg: ?BSTR,
            attrChangeArg: u16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_relatedNode(self: *const IDOMMutationEvent, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_relatedNode(self, p);
    }
    pub fn get_prevValue(self: *const IDOMMutationEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_prevValue(self, p);
    }
    pub fn get_newValue(self: *const IDOMMutationEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_newValue(self, p);
    }
    pub fn get_attrName(self: *const IDOMMutationEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_attrName(self, p);
    }
    pub fn get_attrChange(self: *const IDOMMutationEvent, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_attrChange(self, p);
    }
    pub fn initMutationEvent(self: *const IDOMMutationEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, relatedNodeArg: ?*IDispatch, prevValueArg: ?BSTR, newValueArg: ?BSTR, attrNameArg: ?BSTR, attrChangeArg: u16) callconv(.@"inline") HRESULT {
        return self.vtable.initMutationEvent(self, eventType, canBubble, cancelable, relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg);
    }
};

const IID_DispDOMMutationEvent_Value = Guid.initString("30590079-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMMutationEvent = &IID_DispDOMMutationEvent_Value;
pub const DispDOMMutationEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMBeforeUnloadEvent_Value = Guid.initString("30510763-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMBeforeUnloadEvent = &IID_IDOMBeforeUnloadEvent_Value;
pub const IDOMBeforeUnloadEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_returnValue: *const fn(
            self: *const IDOMBeforeUnloadEvent,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_returnValue: *const fn(
            self: *const IDOMBeforeUnloadEvent,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_returnValue(self: *const IDOMBeforeUnloadEvent, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_returnValue(self, v);
    }
    pub fn get_returnValue(self: *const IDOMBeforeUnloadEvent, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_returnValue(self, p);
    }
};

const IID_DispDOMBeforeUnloadEvent_Value = Guid.initString("305900a8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMBeforeUnloadEvent = &IID_DispDOMBeforeUnloadEvent_Value;
pub const DispDOMBeforeUnloadEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMFocusEvent_Value = Guid.initString("305106cc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMFocusEvent = &IID_IDOMFocusEvent_Value;
pub const IDOMFocusEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_relatedTarget: *const fn(
            self: *const IDOMFocusEvent,
            p: ?*?*IEventTarget,
        ) callconv(.winapi) HRESULT,
        initFocusEvent: *const fn(
            self: *const IDOMFocusEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            view: ?*IHTMLWindow2,
            detail: i32,
            relatedTargetArg: ?*IEventTarget,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_relatedTarget(self: *const IDOMFocusEvent, p: ?*?*IEventTarget) callconv(.@"inline") HRESULT {
        return self.vtable.get_relatedTarget(self, p);
    }
    pub fn initFocusEvent(self: *const IDOMFocusEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, view: ?*IHTMLWindow2, detail: i32, relatedTargetArg: ?*IEventTarget) callconv(.@"inline") HRESULT {
        return self.vtable.initFocusEvent(self, eventType, canBubble, cancelable, view, detail, relatedTargetArg);
    }
};

const IID_DispDOMFocusEvent_Value = Guid.initString("30590071-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMFocusEvent = &IID_DispDOMFocusEvent_Value;
pub const DispDOMFocusEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMCustomEvent_Value = Guid.initString("305106de-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMCustomEvent = &IID_IDOMCustomEvent_Value;
pub const IDOMCustomEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_detail: *const fn(
            self: *const IDOMCustomEvent,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        initCustomEvent: *const fn(
            self: *const IDOMCustomEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            detail: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_detail(self: *const IDOMCustomEvent, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_detail(self, p);
    }
    pub fn initCustomEvent(self: *const IDOMCustomEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, detail: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.initCustomEvent(self, eventType, canBubble, cancelable, detail);
    }
};

const IID_DispDOMCustomEvent_Value = Guid.initString("3059007c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMCustomEvent = &IID_DispDOMCustomEvent_Value;
pub const DispDOMCustomEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ICanvasGradient_Value = Guid.initString("30510714-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICanvasGradient = &IID_ICanvasGradient_Value;
pub const ICanvasGradient = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        addColorStop: *const fn(
            self: *const ICanvasGradient,
            offset: f32,
            color: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn addColorStop(self: *const ICanvasGradient, offset: f32, color: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.addColorStop(self, offset, color);
    }
};

const IID_ICanvasPattern_Value = Guid.initString("30510716-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICanvasPattern = &IID_ICanvasPattern_Value;
pub const ICanvasPattern = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ICanvasTextMetrics_Value = Guid.initString("30510718-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICanvasTextMetrics = &IID_ICanvasTextMetrics_Value;
pub const ICanvasTextMetrics = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ICanvasTextMetrics,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_width(self: *const ICanvasTextMetrics, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
};

const IID_ICanvasImageData_Value = Guid.initString("3051071a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICanvasImageData = &IID_ICanvasImageData_Value;
pub const ICanvasImageData = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ICanvasImageData,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const ICanvasImageData,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const ICanvasImageData,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_width(self: *const ICanvasImageData, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn get_height(self: *const ICanvasImageData, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn get_data(self: *const ICanvasImageData, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
};

const IID_ICanvasPixelArray_Value = Guid.initString("3051071c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICanvasPixelArray = &IID_ICanvasPixelArray_Value;
pub const ICanvasPixelArray = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const ICanvasPixelArray,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const ICanvasPixelArray, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
};

const IID_IHTMLCanvasElement_Value = Guid.initString("305106e4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCanvasElement = &IID_IHTMLCanvasElement_Value;
pub const IHTMLCanvasElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLCanvasElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLCanvasElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLCanvasElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLCanvasElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        getContext: *const fn(
            self: *const IHTMLCanvasElement,
            contextId: ?BSTR,
            ppContext: ?*?*ICanvasRenderingContext2D,
        ) callconv(.winapi) HRESULT,
        toDataURL: *const fn(
            self: *const IHTMLCanvasElement,
            type: ?BSTR,
            jpegquality: VARIANT,
            pUrl: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_width(self: *const IHTMLCanvasElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLCanvasElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLCanvasElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLCanvasElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn getContext(self: *const IHTMLCanvasElement, contextId: ?BSTR, ppContext: ?*?*ICanvasRenderingContext2D) callconv(.@"inline") HRESULT {
        return self.vtable.getContext(self, contextId, ppContext);
    }
    pub fn toDataURL(self: *const IHTMLCanvasElement, @"type": ?BSTR, jpegquality: VARIANT, pUrl: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toDataURL(self, @"type", jpegquality, pUrl);
    }
};

const IID_ICanvasRenderingContext2D_Value = Guid.initString("305106ff-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICanvasRenderingContext2D = &IID_ICanvasRenderingContext2D_Value;
pub const ICanvasRenderingContext2D = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_canvas: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*?*IHTMLCanvasElement,
        ) callconv(.winapi) HRESULT,
        restore: *const fn(
            self: *const ICanvasRenderingContext2D,
        ) callconv(.winapi) HRESULT,
        save: *const fn(
            self: *const ICanvasRenderingContext2D,
        ) callconv(.winapi) HRESULT,
        rotate: *const fn(
            self: *const ICanvasRenderingContext2D,
            angle: f32,
        ) callconv(.winapi) HRESULT,
        scale: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
        ) callconv(.winapi) HRESULT,
        setTransform: *const fn(
            self: *const ICanvasRenderingContext2D,
            m11: f32,
            m12: f32,
            m21: f32,
            m22: f32,
            dx: f32,
            dy: f32,
        ) callconv(.winapi) HRESULT,
        transform: *const fn(
            self: *const ICanvasRenderingContext2D,
            m11: f32,
            m12: f32,
            m21: f32,
            m22: f32,
            dx: f32,
            dy: f32,
        ) callconv(.winapi) HRESULT,
        translate: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_globalAlpha: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_globalAlpha: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_globalCompositeOperation: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_globalCompositeOperation: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fillStyle: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fillStyle: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_strokeStyle: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strokeStyle: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        createLinearGradient: *const fn(
            self: *const ICanvasRenderingContext2D,
            x0: f32,
            y0: f32,
            x1: f32,
            y1: f32,
            ppCanvasGradient: ?*?*ICanvasGradient,
        ) callconv(.winapi) HRESULT,
        createRadialGradient: *const fn(
            self: *const ICanvasRenderingContext2D,
            x0: f32,
            y0: f32,
            r0: f32,
            x1: f32,
            y1: f32,
            r1: f32,
            ppCanvasGradient: ?*?*ICanvasGradient,
        ) callconv(.winapi) HRESULT,
        createPattern: *const fn(
            self: *const ICanvasRenderingContext2D,
            image: ?*IDispatch,
            repetition: VARIANT,
            ppCanvasPattern: ?*?*ICanvasPattern,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineCap: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineCap: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineJoin: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineJoin: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_lineWidth: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineWidth: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_miterLimit: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_miterLimit: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shadowBlur: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shadowBlur: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shadowColor: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shadowColor: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shadowOffsetX: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shadowOffsetX: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_shadowOffsetY: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shadowOffsetY: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        clearRect: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
            w: f32,
            h: f32,
        ) callconv(.winapi) HRESULT,
        fillRect: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
            w: f32,
            h: f32,
        ) callconv(.winapi) HRESULT,
        strokeRect: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
            w: f32,
            h: f32,
        ) callconv(.winapi) HRESULT,
        arc: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
            radius: f32,
            startAngle: f32,
            endAngle: f32,
            anticlockwise: BOOL,
        ) callconv(.winapi) HRESULT,
        arcTo: *const fn(
            self: *const ICanvasRenderingContext2D,
            x1: f32,
            y1: f32,
            x2: f32,
            y2: f32,
            radius: f32,
        ) callconv(.winapi) HRESULT,
        beginPath: *const fn(
            self: *const ICanvasRenderingContext2D,
        ) callconv(.winapi) HRESULT,
        bezierCurveTo: *const fn(
            self: *const ICanvasRenderingContext2D,
            cp1x: f32,
            cp1y: f32,
            cp2x: f32,
            cp2y: f32,
            x: f32,
            y: f32,
        ) callconv(.winapi) HRESULT,
        clip: *const fn(
            self: *const ICanvasRenderingContext2D,
        ) callconv(.winapi) HRESULT,
        closePath: *const fn(
            self: *const ICanvasRenderingContext2D,
        ) callconv(.winapi) HRESULT,
        fill: *const fn(
            self: *const ICanvasRenderingContext2D,
        ) callconv(.winapi) HRESULT,
        lineTo: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
        ) callconv(.winapi) HRESULT,
        moveTo: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
        ) callconv(.winapi) HRESULT,
        quadraticCurveTo: *const fn(
            self: *const ICanvasRenderingContext2D,
            cpx: f32,
            cpy: f32,
            x: f32,
            y: f32,
        ) callconv(.winapi) HRESULT,
        rect: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
            w: f32,
            h: f32,
        ) callconv(.winapi) HRESULT,
        stroke: *const fn(
            self: *const ICanvasRenderingContext2D,
        ) callconv(.winapi) HRESULT,
        isPointInPath: *const fn(
            self: *const ICanvasRenderingContext2D,
            x: f32,
            y: f32,
            pResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_font: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_font: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textAlign: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textAlign: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textBaseline: *const fn(
            self: *const ICanvasRenderingContext2D,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textBaseline: *const fn(
            self: *const ICanvasRenderingContext2D,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        fillText: *const fn(
            self: *const ICanvasRenderingContext2D,
            text: ?BSTR,
            x: f32,
            y: f32,
            maxWidth: VARIANT,
        ) callconv(.winapi) HRESULT,
        measureText: *const fn(
            self: *const ICanvasRenderingContext2D,
            text: ?BSTR,
            ppCanvasTextMetrics: ?*?*ICanvasTextMetrics,
        ) callconv(.winapi) HRESULT,
        strokeText: *const fn(
            self: *const ICanvasRenderingContext2D,
            text: ?BSTR,
            x: f32,
            y: f32,
            maxWidth: VARIANT,
        ) callconv(.winapi) HRESULT,
        drawImage: *const fn(
            self: *const ICanvasRenderingContext2D,
            pSrc: ?*IDispatch,
            a1: VARIANT,
            a2: VARIANT,
            a3: VARIANT,
            a4: VARIANT,
            a5: VARIANT,
            a6: VARIANT,
            a7: VARIANT,
            a8: VARIANT,
        ) callconv(.winapi) HRESULT,
        createImageData: *const fn(
            self: *const ICanvasRenderingContext2D,
            a1: VARIANT,
            a2: VARIANT,
            ppCanvasImageData: ?*?*ICanvasImageData,
        ) callconv(.winapi) HRESULT,
        getImageData: *const fn(
            self: *const ICanvasRenderingContext2D,
            sx: f32,
            sy: f32,
            sw: f32,
            sh: f32,
            ppCanvasImageData: ?*?*ICanvasImageData,
        ) callconv(.winapi) HRESULT,
        putImageData: *const fn(
            self: *const ICanvasRenderingContext2D,
            imagedata: ?*ICanvasImageData,
            dx: f32,
            dy: f32,
            dirtyX: VARIANT,
            dirtyY: VARIANT,
            dirtyWidth: VARIANT,
            dirtyHeight: VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_canvas(self: *const ICanvasRenderingContext2D, p: ?*?*IHTMLCanvasElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_canvas(self, p);
    }
    pub fn restore(self: *const ICanvasRenderingContext2D) callconv(.@"inline") HRESULT {
        return self.vtable.restore(self);
    }
    pub fn save(self: *const ICanvasRenderingContext2D) callconv(.@"inline") HRESULT {
        return self.vtable.save(self);
    }
    pub fn rotate(self: *const ICanvasRenderingContext2D, angle: f32) callconv(.@"inline") HRESULT {
        return self.vtable.rotate(self, angle);
    }
    pub fn scale(self: *const ICanvasRenderingContext2D, x: f32, y: f32) callconv(.@"inline") HRESULT {
        return self.vtable.scale(self, x, y);
    }
    pub fn setTransform(self: *const ICanvasRenderingContext2D, m11: f32, m12: f32, m21: f32, m22: f32, dx: f32, dy: f32) callconv(.@"inline") HRESULT {
        return self.vtable.setTransform(self, m11, m12, m21, m22, dx, dy);
    }
    pub fn transform(self: *const ICanvasRenderingContext2D, m11: f32, m12: f32, m21: f32, m22: f32, dx: f32, dy: f32) callconv(.@"inline") HRESULT {
        return self.vtable.transform(self, m11, m12, m21, m22, dx, dy);
    }
    pub fn translate(self: *const ICanvasRenderingContext2D, x: f32, y: f32) callconv(.@"inline") HRESULT {
        return self.vtable.translate(self, x, y);
    }
    pub fn put_globalAlpha(self: *const ICanvasRenderingContext2D, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_globalAlpha(self, v);
    }
    pub fn get_globalAlpha(self: *const ICanvasRenderingContext2D, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_globalAlpha(self, p);
    }
    pub fn put_globalCompositeOperation(self: *const ICanvasRenderingContext2D, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_globalCompositeOperation(self, v);
    }
    pub fn get_globalCompositeOperation(self: *const ICanvasRenderingContext2D, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_globalCompositeOperation(self, p);
    }
    pub fn put_fillStyle(self: *const ICanvasRenderingContext2D, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_fillStyle(self, v);
    }
    pub fn get_fillStyle(self: *const ICanvasRenderingContext2D, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_fillStyle(self, p);
    }
    pub fn put_strokeStyle(self: *const ICanvasRenderingContext2D, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_strokeStyle(self, v);
    }
    pub fn get_strokeStyle(self: *const ICanvasRenderingContext2D, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_strokeStyle(self, p);
    }
    pub fn createLinearGradient(self: *const ICanvasRenderingContext2D, x0: f32, y0: f32, x1: f32, y1: f32, ppCanvasGradient: ?*?*ICanvasGradient) callconv(.@"inline") HRESULT {
        return self.vtable.createLinearGradient(self, x0, y0, x1, y1, ppCanvasGradient);
    }
    pub fn createRadialGradient(self: *const ICanvasRenderingContext2D, x0: f32, y0: f32, r0: f32, x1: f32, y1: f32, r1: f32, ppCanvasGradient: ?*?*ICanvasGradient) callconv(.@"inline") HRESULT {
        return self.vtable.createRadialGradient(self, x0, y0, r0, x1, y1, r1, ppCanvasGradient);
    }
    pub fn createPattern(self: *const ICanvasRenderingContext2D, image: ?*IDispatch, repetition: VARIANT, ppCanvasPattern: ?*?*ICanvasPattern) callconv(.@"inline") HRESULT {
        return self.vtable.createPattern(self, image, repetition, ppCanvasPattern);
    }
    pub fn put_lineCap(self: *const ICanvasRenderingContext2D, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineCap(self, v);
    }
    pub fn get_lineCap(self: *const ICanvasRenderingContext2D, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineCap(self, p);
    }
    pub fn put_lineJoin(self: *const ICanvasRenderingContext2D, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineJoin(self, v);
    }
    pub fn get_lineJoin(self: *const ICanvasRenderingContext2D, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineJoin(self, p);
    }
    pub fn put_lineWidth(self: *const ICanvasRenderingContext2D, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_lineWidth(self, v);
    }
    pub fn get_lineWidth(self: *const ICanvasRenderingContext2D, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineWidth(self, p);
    }
    pub fn put_miterLimit(self: *const ICanvasRenderingContext2D, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_miterLimit(self, v);
    }
    pub fn get_miterLimit(self: *const ICanvasRenderingContext2D, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_miterLimit(self, p);
    }
    pub fn put_shadowBlur(self: *const ICanvasRenderingContext2D, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_shadowBlur(self, v);
    }
    pub fn get_shadowBlur(self: *const ICanvasRenderingContext2D, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_shadowBlur(self, p);
    }
    pub fn put_shadowColor(self: *const ICanvasRenderingContext2D, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_shadowColor(self, v);
    }
    pub fn get_shadowColor(self: *const ICanvasRenderingContext2D, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_shadowColor(self, p);
    }
    pub fn put_shadowOffsetX(self: *const ICanvasRenderingContext2D, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_shadowOffsetX(self, v);
    }
    pub fn get_shadowOffsetX(self: *const ICanvasRenderingContext2D, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_shadowOffsetX(self, p);
    }
    pub fn put_shadowOffsetY(self: *const ICanvasRenderingContext2D, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_shadowOffsetY(self, v);
    }
    pub fn get_shadowOffsetY(self: *const ICanvasRenderingContext2D, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_shadowOffsetY(self, p);
    }
    pub fn clearRect(self: *const ICanvasRenderingContext2D, x: f32, y: f32, w: f32, h: f32) callconv(.@"inline") HRESULT {
        return self.vtable.clearRect(self, x, y, w, h);
    }
    pub fn fillRect(self: *const ICanvasRenderingContext2D, x: f32, y: f32, w: f32, h: f32) callconv(.@"inline") HRESULT {
        return self.vtable.fillRect(self, x, y, w, h);
    }
    pub fn strokeRect(self: *const ICanvasRenderingContext2D, x: f32, y: f32, w: f32, h: f32) callconv(.@"inline") HRESULT {
        return self.vtable.strokeRect(self, x, y, w, h);
    }
    pub fn arc(self: *const ICanvasRenderingContext2D, x: f32, y: f32, radius: f32, startAngle: f32, endAngle: f32, anticlockwise: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.arc(self, x, y, radius, startAngle, endAngle, anticlockwise);
    }
    pub fn arcTo(self: *const ICanvasRenderingContext2D, x1: f32, y1: f32, x2: f32, y2: f32, radius: f32) callconv(.@"inline") HRESULT {
        return self.vtable.arcTo(self, x1, y1, x2, y2, radius);
    }
    pub fn beginPath(self: *const ICanvasRenderingContext2D) callconv(.@"inline") HRESULT {
        return self.vtable.beginPath(self);
    }
    pub fn bezierCurveTo(self: *const ICanvasRenderingContext2D, cp1x: f32, cp1y: f32, cp2x: f32, cp2y: f32, x: f32, y: f32) callconv(.@"inline") HRESULT {
        return self.vtable.bezierCurveTo(self, cp1x, cp1y, cp2x, cp2y, x, y);
    }
    pub fn clip(self: *const ICanvasRenderingContext2D) callconv(.@"inline") HRESULT {
        return self.vtable.clip(self);
    }
    pub fn closePath(self: *const ICanvasRenderingContext2D) callconv(.@"inline") HRESULT {
        return self.vtable.closePath(self);
    }
    pub fn fill(self: *const ICanvasRenderingContext2D) callconv(.@"inline") HRESULT {
        return self.vtable.fill(self);
    }
    pub fn lineTo(self: *const ICanvasRenderingContext2D, x: f32, y: f32) callconv(.@"inline") HRESULT {
        return self.vtable.lineTo(self, x, y);
    }
    pub fn moveTo(self: *const ICanvasRenderingContext2D, x: f32, y: f32) callconv(.@"inline") HRESULT {
        return self.vtable.moveTo(self, x, y);
    }
    pub fn quadraticCurveTo(self: *const ICanvasRenderingContext2D, cpx: f32, cpy: f32, x: f32, y: f32) callconv(.@"inline") HRESULT {
        return self.vtable.quadraticCurveTo(self, cpx, cpy, x, y);
    }
    pub fn rect(self: *const ICanvasRenderingContext2D, x: f32, y: f32, w: f32, h: f32) callconv(.@"inline") HRESULT {
        return self.vtable.rect(self, x, y, w, h);
    }
    pub fn stroke(self: *const ICanvasRenderingContext2D) callconv(.@"inline") HRESULT {
        return self.vtable.stroke(self);
    }
    pub fn isPointInPath(self: *const ICanvasRenderingContext2D, x: f32, y: f32, pResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isPointInPath(self, x, y, pResult);
    }
    pub fn put_font(self: *const ICanvasRenderingContext2D, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_font(self, v);
    }
    pub fn get_font(self: *const ICanvasRenderingContext2D, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_font(self, p);
    }
    pub fn put_textAlign(self: *const ICanvasRenderingContext2D, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textAlign(self, v);
    }
    pub fn get_textAlign(self: *const ICanvasRenderingContext2D, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textAlign(self, p);
    }
    pub fn put_textBaseline(self: *const ICanvasRenderingContext2D, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textBaseline(self, v);
    }
    pub fn get_textBaseline(self: *const ICanvasRenderingContext2D, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textBaseline(self, p);
    }
    pub fn fillText(self: *const ICanvasRenderingContext2D, text: ?BSTR, x: f32, y: f32, maxWidth: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.fillText(self, text, x, y, maxWidth);
    }
    pub fn measureText(self: *const ICanvasRenderingContext2D, text: ?BSTR, ppCanvasTextMetrics: ?*?*ICanvasTextMetrics) callconv(.@"inline") HRESULT {
        return self.vtable.measureText(self, text, ppCanvasTextMetrics);
    }
    pub fn strokeText(self: *const ICanvasRenderingContext2D, text: ?BSTR, x: f32, y: f32, maxWidth: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.strokeText(self, text, x, y, maxWidth);
    }
    pub fn drawImage(self: *const ICanvasRenderingContext2D, pSrc: ?*IDispatch, a1: VARIANT, a2: VARIANT, a3: VARIANT, a4: VARIANT, a5: VARIANT, a6: VARIANT, a7: VARIANT, a8: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.drawImage(self, pSrc, a1, a2, a3, a4, a5, a6, a7, a8);
    }
    pub fn createImageData(self: *const ICanvasRenderingContext2D, a1: VARIANT, a2: VARIANT, ppCanvasImageData: ?*?*ICanvasImageData) callconv(.@"inline") HRESULT {
        return self.vtable.createImageData(self, a1, a2, ppCanvasImageData);
    }
    pub fn getImageData(self: *const ICanvasRenderingContext2D, sx: f32, sy: f32, sw: f32, sh: f32, ppCanvasImageData: ?*?*ICanvasImageData) callconv(.@"inline") HRESULT {
        return self.vtable.getImageData(self, sx, sy, sw, sh, ppCanvasImageData);
    }
    pub fn putImageData(self: *const ICanvasRenderingContext2D, imagedata: ?*ICanvasImageData, dx: f32, dy: f32, dirtyX: VARIANT, dirtyY: VARIANT, dirtyWidth: VARIANT, dirtyHeight: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.putImageData(self, imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
    }
};

const IID_DispCanvasGradient_Value = Guid.initString("3059008c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispCanvasGradient = &IID_DispCanvasGradient_Value;
pub const DispCanvasGradient = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispCanvasPattern_Value = Guid.initString("3059008d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispCanvasPattern = &IID_DispCanvasPattern_Value;
pub const DispCanvasPattern = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispCanvasTextMetrics_Value = Guid.initString("3059008e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispCanvasTextMetrics = &IID_DispCanvasTextMetrics_Value;
pub const DispCanvasTextMetrics = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispCanvasImageData_Value = Guid.initString("3059008f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispCanvasImageData = &IID_DispCanvasImageData_Value;
pub const DispCanvasImageData = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispCanvasRenderingContext2D_Value = Guid.initString("30590082-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispCanvasRenderingContext2D = &IID_DispCanvasRenderingContext2D_Value;
pub const DispCanvasRenderingContext2D = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLCanvasElement_Value = Guid.initString("3059007b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLCanvasElement = &IID_DispHTMLCanvasElement_Value;
pub const DispHTMLCanvasElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMProgressEvent_Value = Guid.initString("3051071e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMProgressEvent = &IID_IDOMProgressEvent_Value;
pub const IDOMProgressEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lengthComputable: *const fn(
            self: *const IDOMProgressEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loaded: *const fn(
            self: *const IDOMProgressEvent,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_total: *const fn(
            self: *const IDOMProgressEvent,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        initProgressEvent: *const fn(
            self: *const IDOMProgressEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            lengthComputableArg: i16,
            loadedArg: u64,
            totalArg: u64,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_lengthComputable(self: *const IDOMProgressEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_lengthComputable(self, p);
    }
    pub fn get_loaded(self: *const IDOMProgressEvent, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_loaded(self, p);
    }
    pub fn get_total(self: *const IDOMProgressEvent, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_total(self, p);
    }
    pub fn initProgressEvent(self: *const IDOMProgressEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, lengthComputableArg: i16, loadedArg: u64, totalArg: u64) callconv(.@"inline") HRESULT {
        return self.vtable.initProgressEvent(self, eventType, canBubble, cancelable, lengthComputableArg, loadedArg, totalArg);
    }
};

const IID_DispDOMProgressEvent_Value = Guid.initString("30590091-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMProgressEvent = &IID_DispDOMProgressEvent_Value;
pub const DispDOMProgressEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMMessageEvent_Value = Guid.initString("30510720-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMMessageEvent = &IID_IDOMMessageEvent_Value;
pub const IDOMMessageEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IDOMMessageEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_origin: *const fn(
            self: *const IDOMMessageEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_source: *const fn(
            self: *const IDOMMessageEvent,
            p: ?*?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        initMessageEvent: *const fn(
            self: *const IDOMMessageEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            data: ?BSTR,
            origin: ?BSTR,
            lastEventId: ?BSTR,
            source: ?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_data(self: *const IDOMMessageEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_data(self, p);
    }
    pub fn get_origin(self: *const IDOMMessageEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_origin(self, p);
    }
    pub fn get_source(self: *const IDOMMessageEvent, p: ?*?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.get_source(self, p);
    }
    pub fn initMessageEvent(self: *const IDOMMessageEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, data: ?BSTR, origin: ?BSTR, lastEventId: ?BSTR, source: ?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.initMessageEvent(self, eventType, canBubble, cancelable, data, origin, lastEventId, source);
    }
};

const IID_DispDOMMessageEvent_Value = Guid.initString("30590092-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMMessageEvent = &IID_DispDOMMessageEvent_Value;
pub const DispDOMMessageEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMSiteModeEvent_Value = Guid.initString("30510765-98b6-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMSiteModeEvent = &IID_IDOMSiteModeEvent_Value;
pub const IDOMSiteModeEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_buttonID: *const fn(
            self: *const IDOMSiteModeEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_actionURL: *const fn(
            self: *const IDOMSiteModeEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_buttonID(self: *const IDOMSiteModeEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_buttonID(self, p);
    }
    pub fn get_actionURL(self: *const IDOMSiteModeEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_actionURL(self, p);
    }
};

const IID_DispDOMSiteModeEvent_Value = Guid.initString("305900a9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMSiteModeEvent = &IID_DispDOMSiteModeEvent_Value;
pub const DispDOMSiteModeEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMStorageEvent_Value = Guid.initString("30510722-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMStorageEvent = &IID_IDOMStorageEvent_Value;
pub const IDOMStorageEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_key: *const fn(
            self: *const IDOMStorageEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_oldValue: *const fn(
            self: *const IDOMStorageEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_newValue: *const fn(
            self: *const IDOMStorageEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_url: *const fn(
            self: *const IDOMStorageEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_storageArea: *const fn(
            self: *const IDOMStorageEvent,
            p: ?*?*IHTMLStorage,
        ) callconv(.winapi) HRESULT,
        initStorageEvent: *const fn(
            self: *const IDOMStorageEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            keyArg: ?BSTR,
            oldValueArg: ?BSTR,
            newValueArg: ?BSTR,
            urlArg: ?BSTR,
            storageAreaArg: ?*IHTMLStorage,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_key(self: *const IDOMStorageEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_key(self, p);
    }
    pub fn get_oldValue(self: *const IDOMStorageEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_oldValue(self, p);
    }
    pub fn get_newValue(self: *const IDOMStorageEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_newValue(self, p);
    }
    pub fn get_url(self: *const IDOMStorageEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_url(self, p);
    }
    pub fn get_storageArea(self: *const IDOMStorageEvent, p: ?*?*IHTMLStorage) callconv(.@"inline") HRESULT {
        return self.vtable.get_storageArea(self, p);
    }
    pub fn initStorageEvent(self: *const IDOMStorageEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, keyArg: ?BSTR, oldValueArg: ?BSTR, newValueArg: ?BSTR, urlArg: ?BSTR, storageAreaArg: ?*IHTMLStorage) callconv(.@"inline") HRESULT {
        return self.vtable.initStorageEvent(self, eventType, canBubble, cancelable, keyArg, oldValueArg, newValueArg, urlArg, storageAreaArg);
    }
};

const IID_DispDOMStorageEvent_Value = Guid.initString("30590093-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMStorageEvent = &IID_DispDOMStorageEvent_Value;
pub const DispDOMStorageEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IXMLHttpRequestEventTarget_Value = Guid.initString("30510830-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IXMLHttpRequestEventTarget = &IID_IXMLHttpRequestEventTarget_Value;
pub const IXMLHttpRequestEventTarget = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispXMLHttpRequestEventTarget_Value = Guid.initString("305900e7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispXMLHttpRequestEventTarget = &IID_DispXMLHttpRequestEventTarget_Value;
pub const DispXMLHttpRequestEventTarget = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_HTMLXMLHttpRequestEvents_Value = Guid.initString("30510498-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLXMLHttpRequestEvents = &IID_HTMLXMLHttpRequestEvents_Value;
pub const HTMLXMLHttpRequestEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLXMLHttpRequest_Value = Guid.initString("3051040a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLXMLHttpRequest = &IID_IHTMLXMLHttpRequest_Value;
pub const IHTMLXMLHttpRequest = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLXMLHttpRequest,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseBody: *const fn(
            self: *const IHTMLXMLHttpRequest,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseText: *const fn(
            self: *const IHTMLXMLHttpRequest,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseXML: *const fn(
            self: *const IHTMLXMLHttpRequest,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLXMLHttpRequest,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_statusText: *const fn(
            self: *const IHTMLXMLHttpRequest,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLXMLHttpRequest,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLXMLHttpRequest,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        abort: *const fn(
            self: *const IHTMLXMLHttpRequest,
        ) callconv(.winapi) HRESULT,
        open: *const fn(
            self: *const IHTMLXMLHttpRequest,
            bstrMethod: ?BSTR,
            bstrUrl: ?BSTR,
            varAsync: VARIANT,
            varUser: VARIANT,
            varPassword: VARIANT,
        ) callconv(.winapi) HRESULT,
        send: *const fn(
            self: *const IHTMLXMLHttpRequest,
            varBody: VARIANT,
        ) callconv(.winapi) HRESULT,
        getAllResponseHeaders: *const fn(
            self: *const IHTMLXMLHttpRequest,
            __MIDL__IHTMLXMLHttpRequest0000: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        getResponseHeader: *const fn(
            self: *const IHTMLXMLHttpRequest,
            bstrHeader: ?BSTR,
            __MIDL__IHTMLXMLHttpRequest0001: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        setRequestHeader: *const fn(
            self: *const IHTMLXMLHttpRequest,
            bstrHeader: ?BSTR,
            bstrValue: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_readyState(self: *const IHTMLXMLHttpRequest, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn get_responseBody(self: *const IHTMLXMLHttpRequest, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_responseBody(self, p);
    }
    pub fn get_responseText(self: *const IHTMLXMLHttpRequest, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_responseText(self, p);
    }
    pub fn get_responseXML(self: *const IHTMLXMLHttpRequest, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_responseXML(self, p);
    }
    pub fn get_status(self: *const IHTMLXMLHttpRequest, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn get_statusText(self: *const IHTMLXMLHttpRequest, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_statusText(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLXMLHttpRequest, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLXMLHttpRequest, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn abort(self: *const IHTMLXMLHttpRequest) callconv(.@"inline") HRESULT {
        return self.vtable.abort(self);
    }
    pub fn open(self: *const IHTMLXMLHttpRequest, bstrMethod: ?BSTR, bstrUrl: ?BSTR, varAsync: VARIANT, varUser: VARIANT, varPassword: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.open(self, bstrMethod, bstrUrl, varAsync, varUser, varPassword);
    }
    pub fn send(self: *const IHTMLXMLHttpRequest, varBody: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.send(self, varBody);
    }
    pub fn getAllResponseHeaders(self: *const IHTMLXMLHttpRequest, __MIDL__IHTMLXMLHttpRequest0000: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getAllResponseHeaders(self, __MIDL__IHTMLXMLHttpRequest0000);
    }
    pub fn getResponseHeader(self: *const IHTMLXMLHttpRequest, bstrHeader: ?BSTR, __MIDL__IHTMLXMLHttpRequest0001: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getResponseHeader(self, bstrHeader, __MIDL__IHTMLXMLHttpRequest0001);
    }
    pub fn setRequestHeader(self: *const IHTMLXMLHttpRequest, bstrHeader: ?BSTR, bstrValue: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.setRequestHeader(self, bstrHeader, bstrValue);
    }
};

const IID_IHTMLXMLHttpRequest2_Value = Guid.initString("30510482-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLXMLHttpRequest2 = &IID_IHTMLXMLHttpRequest2_Value;
pub const IHTMLXMLHttpRequest2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_timeout: *const fn(
            self: *const IHTMLXMLHttpRequest2,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_timeout: *const fn(
            self: *const IHTMLXMLHttpRequest2,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ontimeout: *const fn(
            self: *const IHTMLXMLHttpRequest2,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ontimeout: *const fn(
            self: *const IHTMLXMLHttpRequest2,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_timeout(self: *const IHTMLXMLHttpRequest2, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_timeout(self, v);
    }
    pub fn get_timeout(self: *const IHTMLXMLHttpRequest2, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_timeout(self, p);
    }
    pub fn put_ontimeout(self: *const IHTMLXMLHttpRequest2, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_ontimeout(self, v);
    }
    pub fn get_ontimeout(self: *const IHTMLXMLHttpRequest2, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_ontimeout(self, p);
    }
};

const IID_IHTMLXMLHttpRequestFactory_Value = Guid.initString("3051040c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLXMLHttpRequestFactory = &IID_IHTMLXMLHttpRequestFactory_Value;
pub const IHTMLXMLHttpRequestFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        create: *const fn(
            self: *const IHTMLXMLHttpRequestFactory,
            __MIDL__IHTMLXMLHttpRequestFactory0000: ?*?*IHTMLXMLHttpRequest,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn create(self: *const IHTMLXMLHttpRequestFactory, __MIDL__IHTMLXMLHttpRequestFactory0000: ?*?*IHTMLXMLHttpRequest) callconv(.@"inline") HRESULT {
        return self.vtable.create(self, __MIDL__IHTMLXMLHttpRequestFactory0000);
    }
};

const IID_DispHTMLXMLHttpRequest_Value = Guid.initString("3050f596-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLXMLHttpRequest = &IID_DispHTMLXMLHttpRequest_Value;
pub const DispHTMLXMLHttpRequest = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGAngle_Value = Guid.initString("305104d3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAngle = &IID_ISVGAngle_Value;
pub const ISVGAngle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_unitType: *const fn(
            self: *const ISVGAngle,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unitType: *const fn(
            self: *const ISVGAngle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const ISVGAngle,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const ISVGAngle,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_valueInSpecifiedUnits: *const fn(
            self: *const ISVGAngle,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_valueInSpecifiedUnits: *const fn(
            self: *const ISVGAngle,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_valueAsString: *const fn(
            self: *const ISVGAngle,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_valueAsString: *const fn(
            self: *const ISVGAngle,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        newValueSpecifiedUnits: *const fn(
            self: *const ISVGAngle,
            unitType: i16,
            valueInSpecifiedUnits: f32,
        ) callconv(.winapi) HRESULT,
        convertToSpecifiedUnits: *const fn(
            self: *const ISVGAngle,
            unitType: i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_unitType(self: *const ISVGAngle, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_unitType(self, v);
    }
    pub fn get_unitType(self: *const ISVGAngle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_unitType(self, p);
    }
    pub fn put_value(self: *const ISVGAngle, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const ISVGAngle, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_valueInSpecifiedUnits(self: *const ISVGAngle, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_valueInSpecifiedUnits(self, v);
    }
    pub fn get_valueInSpecifiedUnits(self: *const ISVGAngle, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_valueInSpecifiedUnits(self, p);
    }
    pub fn put_valueAsString(self: *const ISVGAngle, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_valueAsString(self, v);
    }
    pub fn get_valueAsString(self: *const ISVGAngle, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_valueAsString(self, p);
    }
    pub fn newValueSpecifiedUnits(self: *const ISVGAngle, unitType: i16, valueInSpecifiedUnits: f32) callconv(.@"inline") HRESULT {
        return self.vtable.newValueSpecifiedUnits(self, unitType, valueInSpecifiedUnits);
    }
    pub fn convertToSpecifiedUnits(self: *const ISVGAngle, unitType: i16) callconv(.@"inline") HRESULT {
        return self.vtable.convertToSpecifiedUnits(self, unitType);
    }
};

const IID_ISVGElement_Value = Guid.initString("305104c5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGElement = &IID_ISVGElement_Value;
pub const ISVGElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_xmlbase: *const fn(
            self: *const ISVGElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xmlbase: *const fn(
            self: *const ISVGElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        putref_ownerSVGElement: *const fn(
            self: *const ISVGElement,
            v: ?*ISVGSVGElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerSVGElement: *const fn(
            self: *const ISVGElement,
            p: ?*?*ISVGSVGElement,
        ) callconv(.winapi) HRESULT,
        putref_viewportElement: *const fn(
            self: *const ISVGElement,
            v: ?*ISVGElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_viewportElement: *const fn(
            self: *const ISVGElement,
            p: ?*?*ISVGElement,
        ) callconv(.winapi) HRESULT,
        putref_focusable: *const fn(
            self: *const ISVGElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_focusable: *const fn(
            self: *const ISVGElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_xmlbase(self: *const ISVGElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_xmlbase(self, v);
    }
    pub fn get_xmlbase(self: *const ISVGElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_xmlbase(self, p);
    }
    pub fn putref_ownerSVGElement(self: *const ISVGElement, v: ?*ISVGSVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.putref_ownerSVGElement(self, v);
    }
    pub fn get_ownerSVGElement(self: *const ISVGElement, p: ?*?*ISVGSVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_ownerSVGElement(self, p);
    }
    pub fn putref_viewportElement(self: *const ISVGElement, v: ?*ISVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.putref_viewportElement(self, v);
    }
    pub fn get_viewportElement(self: *const ISVGElement, p: ?*?*ISVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_viewportElement(self, p);
    }
    pub fn putref_focusable(self: *const ISVGElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_focusable(self, v);
    }
    pub fn get_focusable(self: *const ISVGElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_focusable(self, p);
    }
};

const IID_ISVGRect_Value = Guid.initString("305104d7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGRect = &IID_ISVGRect_Value;
pub const ISVGRect = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGRect,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGRect,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGRect,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGRect,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const ISVGRect,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ISVGRect,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const ISVGRect,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const ISVGRect,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGRect, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGRect, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGRect, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGRect, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_width(self: *const ISVGRect, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const ISVGRect, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const ISVGRect, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const ISVGRect, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
};

const IID_ISVGMatrix_Value = Guid.initString("305104f6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGMatrix = &IID_ISVGMatrix_Value;
pub const ISVGMatrix = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_a: *const fn(
            self: *const ISVGMatrix,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_a: *const fn(
            self: *const ISVGMatrix,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_b: *const fn(
            self: *const ISVGMatrix,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_b: *const fn(
            self: *const ISVGMatrix,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_c: *const fn(
            self: *const ISVGMatrix,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_c: *const fn(
            self: *const ISVGMatrix,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_d: *const fn(
            self: *const ISVGMatrix,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_d: *const fn(
            self: *const ISVGMatrix,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_e: *const fn(
            self: *const ISVGMatrix,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_e: *const fn(
            self: *const ISVGMatrix,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_f: *const fn(
            self: *const ISVGMatrix,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_f: *const fn(
            self: *const ISVGMatrix,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        multiply: *const fn(
            self: *const ISVGMatrix,
            secondMatrix: ?*ISVGMatrix,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        inverse: *const fn(
            self: *const ISVGMatrix,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        translate: *const fn(
            self: *const ISVGMatrix,
            x: f32,
            y: f32,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        scale: *const fn(
            self: *const ISVGMatrix,
            scaleFactor: f32,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        scaleNonUniform: *const fn(
            self: *const ISVGMatrix,
            scaleFactorX: f32,
            scaleFactorY: f32,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        rotate: *const fn(
            self: *const ISVGMatrix,
            angle: f32,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        rotateFromVector: *const fn(
            self: *const ISVGMatrix,
            x: f32,
            y: f32,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        flipX: *const fn(
            self: *const ISVGMatrix,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        flipY: *const fn(
            self: *const ISVGMatrix,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        skewX: *const fn(
            self: *const ISVGMatrix,
            angle: f32,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        skewY: *const fn(
            self: *const ISVGMatrix,
            angle: f32,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_a(self: *const ISVGMatrix, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_a(self, v);
    }
    pub fn get_a(self: *const ISVGMatrix, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_a(self, p);
    }
    pub fn put_b(self: *const ISVGMatrix, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_b(self, v);
    }
    pub fn get_b(self: *const ISVGMatrix, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_b(self, p);
    }
    pub fn put_c(self: *const ISVGMatrix, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_c(self, v);
    }
    pub fn get_c(self: *const ISVGMatrix, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_c(self, p);
    }
    pub fn put_d(self: *const ISVGMatrix, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_d(self, v);
    }
    pub fn get_d(self: *const ISVGMatrix, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_d(self, p);
    }
    pub fn put_e(self: *const ISVGMatrix, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_e(self, v);
    }
    pub fn get_e(self: *const ISVGMatrix, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_e(self, p);
    }
    pub fn put_f(self: *const ISVGMatrix, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_f(self, v);
    }
    pub fn get_f(self: *const ISVGMatrix, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_f(self, p);
    }
    pub fn multiply(self: *const ISVGMatrix, secondMatrix: ?*ISVGMatrix, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.multiply(self, secondMatrix, ppResult);
    }
    pub fn inverse(self: *const ISVGMatrix, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.inverse(self, ppResult);
    }
    pub fn translate(self: *const ISVGMatrix, x: f32, y: f32, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.translate(self, x, y, ppResult);
    }
    pub fn scale(self: *const ISVGMatrix, scaleFactor: f32, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.scale(self, scaleFactor, ppResult);
    }
    pub fn scaleNonUniform(self: *const ISVGMatrix, scaleFactorX: f32, scaleFactorY: f32, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.scaleNonUniform(self, scaleFactorX, scaleFactorY, ppResult);
    }
    pub fn rotate(self: *const ISVGMatrix, angle: f32, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.rotate(self, angle, ppResult);
    }
    pub fn rotateFromVector(self: *const ISVGMatrix, x: f32, y: f32, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.rotateFromVector(self, x, y, ppResult);
    }
    pub fn flipX(self: *const ISVGMatrix, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.flipX(self, ppResult);
    }
    pub fn flipY(self: *const ISVGMatrix, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.flipY(self, ppResult);
    }
    pub fn skewX(self: *const ISVGMatrix, angle: f32, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.skewX(self, angle, ppResult);
    }
    pub fn skewY(self: *const ISVGMatrix, angle: f32, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.skewY(self, angle, ppResult);
    }
};

const IID_ISVGStringList_Value = Guid.initString("305104c8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGStringList = &IID_ISVGStringList_Value;
pub const ISVGStringList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_numberOfItems: *const fn(
            self: *const ISVGStringList,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_numberOfItems: *const fn(
            self: *const ISVGStringList,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const ISVGStringList,
        ) callconv(.winapi) HRESULT,
        initialize: *const fn(
            self: *const ISVGStringList,
            newItem: ?BSTR,
            ppResult: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        getItem: *const fn(
            self: *const ISVGStringList,
            index: i32,
            ppResult: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        insertItemBefore: *const fn(
            self: *const ISVGStringList,
            newItem: ?BSTR,
            index: i32,
            ppResult: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        replaceItem: *const fn(
            self: *const ISVGStringList,
            newItem: ?BSTR,
            index: i32,
            ppResult: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        removeItem: *const fn(
            self: *const ISVGStringList,
            index: i32,
            ppResult: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        appendItem: *const fn(
            self: *const ISVGStringList,
            newItem: ?BSTR,
            ppResult: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_numberOfItems(self: *const ISVGStringList, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_numberOfItems(self, v);
    }
    pub fn get_numberOfItems(self: *const ISVGStringList, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_numberOfItems(self, p);
    }
    pub fn clear(self: *const ISVGStringList) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
    pub fn initialize(self: *const ISVGStringList, newItem: ?BSTR, ppResult: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.initialize(self, newItem, ppResult);
    }
    pub fn getItem(self: *const ISVGStringList, index: i32, ppResult: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getItem(self, index, ppResult);
    }
    pub fn insertItemBefore(self: *const ISVGStringList, newItem: ?BSTR, index: i32, ppResult: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.insertItemBefore(self, newItem, index, ppResult);
    }
    pub fn replaceItem(self: *const ISVGStringList, newItem: ?BSTR, index: i32, ppResult: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.replaceItem(self, newItem, index, ppResult);
    }
    pub fn removeItem(self: *const ISVGStringList, index: i32, ppResult: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.removeItem(self, index, ppResult);
    }
    pub fn appendItem(self: *const ISVGStringList, newItem: ?BSTR, ppResult: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.appendItem(self, newItem, ppResult);
    }
};

const IID_ISVGAnimatedRect_Value = Guid.initString("305104d8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedRect = &IID_ISVGAnimatedRect_Value;
pub const ISVGAnimatedRect = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_baseVal: *const fn(
            self: *const ISVGAnimatedRect,
            v: ?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedRect,
            p: ?*?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        putref_animVal: *const fn(
            self: *const ISVGAnimatedRect,
            v: ?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedRect,
            p: ?*?*ISVGRect,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_baseVal(self: *const ISVGAnimatedRect, v: ?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.putref_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedRect, p: ?*?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn putref_animVal(self: *const ISVGAnimatedRect, v: ?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedRect, p: ?*?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGAnimatedString_Value = Guid.initString("305104c7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedString = &IID_ISVGAnimatedString_Value;
pub const ISVGAnimatedString = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseVal: *const fn(
            self: *const ISVGAnimatedString,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedString,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedString,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_baseVal(self: *const ISVGAnimatedString, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedString, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn get_animVal(self: *const ISVGAnimatedString, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGAnimatedBoolean_Value = Guid.initString("305104c6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedBoolean = &IID_ISVGAnimatedBoolean_Value;
pub const ISVGAnimatedBoolean = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseVal: *const fn(
            self: *const ISVGAnimatedBoolean,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedBoolean,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animVal: *const fn(
            self: *const ISVGAnimatedBoolean,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedBoolean,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_baseVal(self: *const ISVGAnimatedBoolean, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedBoolean, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn put_animVal(self: *const ISVGAnimatedBoolean, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedBoolean, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGAnimatedTransformList_Value = Guid.initString("305104f9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedTransformList = &IID_ISVGAnimatedTransformList_Value;
pub const ISVGAnimatedTransformList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_baseVal: *const fn(
            self: *const ISVGAnimatedTransformList,
            v: ?*ISVGTransformList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedTransformList,
            p: ?*?*ISVGTransformList,
        ) callconv(.winapi) HRESULT,
        putref_animVal: *const fn(
            self: *const ISVGAnimatedTransformList,
            v: ?*ISVGTransformList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedTransformList,
            p: ?*?*ISVGTransformList,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_baseVal(self: *const ISVGAnimatedTransformList, v: ?*ISVGTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedTransformList, p: ?*?*ISVGTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn putref_animVal(self: *const ISVGAnimatedTransformList, v: ?*ISVGTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedTransformList, p: ?*?*ISVGTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGAnimatedPreserveAspectRatio_Value = Guid.initString("305104fb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedPreserveAspectRatio = &IID_ISVGAnimatedPreserveAspectRatio_Value;
pub const ISVGAnimatedPreserveAspectRatio = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_baseVal: *const fn(
            self: *const ISVGAnimatedPreserveAspectRatio,
            v: ?*ISVGPreserveAspectRatio,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedPreserveAspectRatio,
            p: ?*?*ISVGPreserveAspectRatio,
        ) callconv(.winapi) HRESULT,
        putref_animVal: *const fn(
            self: *const ISVGAnimatedPreserveAspectRatio,
            v: ?*ISVGPreserveAspectRatio,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedPreserveAspectRatio,
            p: ?*?*ISVGPreserveAspectRatio,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_baseVal(self: *const ISVGAnimatedPreserveAspectRatio, v: ?*ISVGPreserveAspectRatio) callconv(.@"inline") HRESULT {
        return self.vtable.putref_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedPreserveAspectRatio, p: ?*?*ISVGPreserveAspectRatio) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn putref_animVal(self: *const ISVGAnimatedPreserveAspectRatio, v: ?*ISVGPreserveAspectRatio) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedPreserveAspectRatio, p: ?*?*ISVGPreserveAspectRatio) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGStylable_Value = Guid.initString("305104da-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGStylable = &IID_ISVGStylable_Value;
pub const ISVGStylable = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_className: *const fn(
            self: *const ISVGStylable,
            p: ?*?*ISVGAnimatedString,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_className(self: *const ISVGStylable, p: ?*?*ISVGAnimatedString) callconv(.@"inline") HRESULT {
        return self.vtable.get_className(self, p);
    }
};

const IID_ISVGLocatable_Value = Guid.initString("305104db-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGLocatable = &IID_ISVGLocatable_Value;
pub const ISVGLocatable = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nearestViewportElement: *const fn(
            self: *const ISVGLocatable,
            p: ?*?*ISVGElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_farthestViewportElement: *const fn(
            self: *const ISVGLocatable,
            p: ?*?*ISVGElement,
        ) callconv(.winapi) HRESULT,
        getBBox: *const fn(
            self: *const ISVGLocatable,
            ppResult: ?*?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        getCTM: *const fn(
            self: *const ISVGLocatable,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        getScreenCTM: *const fn(
            self: *const ISVGLocatable,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        getTransformToElement: *const fn(
            self: *const ISVGLocatable,
            pElement: ?*ISVGElement,
            ppResult: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_nearestViewportElement(self: *const ISVGLocatable, p: ?*?*ISVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_nearestViewportElement(self, p);
    }
    pub fn get_farthestViewportElement(self: *const ISVGLocatable, p: ?*?*ISVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_farthestViewportElement(self, p);
    }
    pub fn getBBox(self: *const ISVGLocatable, ppResult: ?*?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.getBBox(self, ppResult);
    }
    pub fn getCTM(self: *const ISVGLocatable, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.getCTM(self, ppResult);
    }
    pub fn getScreenCTM(self: *const ISVGLocatable, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.getScreenCTM(self, ppResult);
    }
    pub fn getTransformToElement(self: *const ISVGLocatable, pElement: ?*ISVGElement, ppResult: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.getTransformToElement(self, pElement, ppResult);
    }
};

const IID_ISVGTransformable_Value = Guid.initString("305104dc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTransformable = &IID_ISVGTransformable_Value;
pub const ISVGTransformable = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_transform: *const fn(
            self: *const ISVGTransformable,
            p: ?*?*ISVGAnimatedTransformList,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_transform(self: *const ISVGTransformable, p: ?*?*ISVGAnimatedTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.get_transform(self, p);
    }
};

const IID_ISVGTests_Value = Guid.initString("305104dd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTests = &IID_ISVGTests_Value;
pub const ISVGTests = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_requiredFeatures: *const fn(
            self: *const ISVGTests,
            p: ?*?*ISVGStringList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_requiredExtensions: *const fn(
            self: *const ISVGTests,
            p: ?*?*ISVGStringList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemLanguage: *const fn(
            self: *const ISVGTests,
            p: ?*?*ISVGStringList,
        ) callconv(.winapi) HRESULT,
        hasExtension: *const fn(
            self: *const ISVGTests,
            extension: ?BSTR,
            pResult: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_requiredFeatures(self: *const ISVGTests, p: ?*?*ISVGStringList) callconv(.@"inline") HRESULT {
        return self.vtable.get_requiredFeatures(self, p);
    }
    pub fn get_requiredExtensions(self: *const ISVGTests, p: ?*?*ISVGStringList) callconv(.@"inline") HRESULT {
        return self.vtable.get_requiredExtensions(self, p);
    }
    pub fn get_systemLanguage(self: *const ISVGTests, p: ?*?*ISVGStringList) callconv(.@"inline") HRESULT {
        return self.vtable.get_systemLanguage(self, p);
    }
    pub fn hasExtension(self: *const ISVGTests, extension: ?BSTR, pResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasExtension(self, extension, pResult);
    }
};

const IID_ISVGLangSpace_Value = Guid.initString("305104de-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGLangSpace = &IID_ISVGLangSpace_Value;
pub const ISVGLangSpace = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_xmllang: *const fn(
            self: *const ISVGLangSpace,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xmllang: *const fn(
            self: *const ISVGLangSpace,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_xmlspace: *const fn(
            self: *const ISVGLangSpace,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xmlspace: *const fn(
            self: *const ISVGLangSpace,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_xmllang(self: *const ISVGLangSpace, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_xmllang(self, v);
    }
    pub fn get_xmllang(self: *const ISVGLangSpace, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_xmllang(self, p);
    }
    pub fn put_xmlspace(self: *const ISVGLangSpace, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_xmlspace(self, v);
    }
    pub fn get_xmlspace(self: *const ISVGLangSpace, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_xmlspace(self, p);
    }
};

const IID_ISVGExternalResourcesRequired_Value = Guid.initString("305104df-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGExternalResourcesRequired = &IID_ISVGExternalResourcesRequired_Value;
pub const ISVGExternalResourcesRequired = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_externalResourcesRequired: *const fn(
            self: *const ISVGExternalResourcesRequired,
            p: ?*?*ISVGAnimatedBoolean,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_externalResourcesRequired(self: *const ISVGExternalResourcesRequired, p: ?*?*ISVGAnimatedBoolean) callconv(.@"inline") HRESULT {
        return self.vtable.get_externalResourcesRequired(self, p);
    }
};

const IID_ISVGFitToViewBox_Value = Guid.initString("305104e0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGFitToViewBox = &IID_ISVGFitToViewBox_Value;
pub const ISVGFitToViewBox = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_viewBox: *const fn(
            self: *const ISVGFitToViewBox,
            p: ?*?*ISVGAnimatedRect,
        ) callconv(.winapi) HRESULT,
        putref_preserveAspectRatio: *const fn(
            self: *const ISVGFitToViewBox,
            v: ?*ISVGAnimatedPreserveAspectRatio,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_preserveAspectRatio: *const fn(
            self: *const ISVGFitToViewBox,
            p: ?*?*ISVGAnimatedPreserveAspectRatio,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_viewBox(self: *const ISVGFitToViewBox, p: ?*?*ISVGAnimatedRect) callconv(.@"inline") HRESULT {
        return self.vtable.get_viewBox(self, p);
    }
    pub fn putref_preserveAspectRatio(self: *const ISVGFitToViewBox, v: ?*ISVGAnimatedPreserveAspectRatio) callconv(.@"inline") HRESULT {
        return self.vtable.putref_preserveAspectRatio(self, v);
    }
    pub fn get_preserveAspectRatio(self: *const ISVGFitToViewBox, p: ?*?*ISVGAnimatedPreserveAspectRatio) callconv(.@"inline") HRESULT {
        return self.vtable.get_preserveAspectRatio(self, p);
    }
};

const IID_ISVGZoomAndPan_Value = Guid.initString("305104e1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGZoomAndPan = &IID_ISVGZoomAndPan_Value;
pub const ISVGZoomAndPan = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zoomAndPan: *const fn(
            self: *const ISVGZoomAndPan,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_zoomAndPan(self: *const ISVGZoomAndPan, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_zoomAndPan(self, p);
    }
};

const IID_ISVGURIReference_Value = Guid.initString("305104e3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGURIReference = &IID_ISVGURIReference_Value;
pub const ISVGURIReference = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_href: *const fn(
            self: *const ISVGURIReference,
            p: ?*?*ISVGAnimatedString,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_href(self: *const ISVGURIReference, p: ?*?*ISVGAnimatedString) callconv(.@"inline") HRESULT {
        return self.vtable.get_href(self, p);
    }
};

const IID_ISVGAnimatedAngle_Value = Guid.initString("305104d4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedAngle = &IID_ISVGAnimatedAngle_Value;
pub const ISVGAnimatedAngle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_baseVal: *const fn(
            self: *const ISVGAnimatedAngle,
            v: ?*ISVGAngle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedAngle,
            p: ?*?*ISVGAngle,
        ) callconv(.winapi) HRESULT,
        putref_animVal: *const fn(
            self: *const ISVGAnimatedAngle,
            v: ?*ISVGAngle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedAngle,
            p: ?*?*ISVGAngle,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_baseVal(self: *const ISVGAnimatedAngle, v: ?*ISVGAngle) callconv(.@"inline") HRESULT {
        return self.vtable.putref_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedAngle, p: ?*?*ISVGAngle) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn putref_animVal(self: *const ISVGAnimatedAngle, v: ?*ISVGAngle) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedAngle, p: ?*?*ISVGAngle) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGTransformList_Value = Guid.initString("305104f8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTransformList = &IID_ISVGTransformList_Value;
pub const ISVGTransformList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_numberOfItems: *const fn(
            self: *const ISVGTransformList,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_numberOfItems: *const fn(
            self: *const ISVGTransformList,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const ISVGTransformList,
        ) callconv(.winapi) HRESULT,
        initialize: *const fn(
            self: *const ISVGTransformList,
            newItem: ?*ISVGTransform,
            ppResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        getItem: *const fn(
            self: *const ISVGTransformList,
            index: i32,
            ppResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        insertItemBefore: *const fn(
            self: *const ISVGTransformList,
            newItem: ?*ISVGTransform,
            index: i32,
            ppResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        replaceItem: *const fn(
            self: *const ISVGTransformList,
            newItem: ?*ISVGTransform,
            index: i32,
            ppResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        removeItem: *const fn(
            self: *const ISVGTransformList,
            index: i32,
            ppResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        appendItem: *const fn(
            self: *const ISVGTransformList,
            newItem: ?*ISVGTransform,
            ppResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        createSVGTransformFromMatrix: *const fn(
            self: *const ISVGTransformList,
            newItem: ?*ISVGMatrix,
            ppResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
        consolidate: *const fn(
            self: *const ISVGTransformList,
            ppResult: ?*?*ISVGTransform,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_numberOfItems(self: *const ISVGTransformList, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_numberOfItems(self, v);
    }
    pub fn get_numberOfItems(self: *const ISVGTransformList, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_numberOfItems(self, p);
    }
    pub fn clear(self: *const ISVGTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
    pub fn initialize(self: *const ISVGTransformList, newItem: ?*ISVGTransform, ppResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.initialize(self, newItem, ppResult);
    }
    pub fn getItem(self: *const ISVGTransformList, index: i32, ppResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.getItem(self, index, ppResult);
    }
    pub fn insertItemBefore(self: *const ISVGTransformList, newItem: ?*ISVGTransform, index: i32, ppResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.insertItemBefore(self, newItem, index, ppResult);
    }
    pub fn replaceItem(self: *const ISVGTransformList, newItem: ?*ISVGTransform, index: i32, ppResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.replaceItem(self, newItem, index, ppResult);
    }
    pub fn removeItem(self: *const ISVGTransformList, index: i32, ppResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.removeItem(self, index, ppResult);
    }
    pub fn appendItem(self: *const ISVGTransformList, newItem: ?*ISVGTransform, ppResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.appendItem(self, newItem, ppResult);
    }
    pub fn createSVGTransformFromMatrix(self: *const ISVGTransformList, newItem: ?*ISVGMatrix, ppResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGTransformFromMatrix(self, newItem, ppResult);
    }
    pub fn consolidate(self: *const ISVGTransformList, ppResult: ?*?*ISVGTransform) callconv(.@"inline") HRESULT {
        return self.vtable.consolidate(self, ppResult);
    }
};

const IID_ISVGAnimatedEnumeration_Value = Guid.initString("305104c9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedEnumeration = &IID_ISVGAnimatedEnumeration_Value;
pub const ISVGAnimatedEnumeration = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseVal: *const fn(
            self: *const ISVGAnimatedEnumeration,
            v: u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedEnumeration,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animVal: *const fn(
            self: *const ISVGAnimatedEnumeration,
            v: u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedEnumeration,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_baseVal(self: *const ISVGAnimatedEnumeration, v: u16) callconv(.@"inline") HRESULT {
        return self.vtable.put_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedEnumeration, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn put_animVal(self: *const ISVGAnimatedEnumeration, v: u16) callconv(.@"inline") HRESULT {
        return self.vtable.put_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedEnumeration, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGAnimatedInteger_Value = Guid.initString("305104ca-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedInteger = &IID_ISVGAnimatedInteger_Value;
pub const ISVGAnimatedInteger = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseVal: *const fn(
            self: *const ISVGAnimatedInteger,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedInteger,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animVal: *const fn(
            self: *const ISVGAnimatedInteger,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedInteger,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_baseVal(self: *const ISVGAnimatedInteger, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedInteger, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn put_animVal(self: *const ISVGAnimatedInteger, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedInteger, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGLength_Value = Guid.initString("305104cf-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGLength = &IID_ISVGLength_Value;
pub const ISVGLength = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_unitType: *const fn(
            self: *const ISVGLength,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unitType: *const fn(
            self: *const ISVGLength,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const ISVGLength,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const ISVGLength,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_valueInSpecifiedUnits: *const fn(
            self: *const ISVGLength,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_valueInSpecifiedUnits: *const fn(
            self: *const ISVGLength,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_valueAsString: *const fn(
            self: *const ISVGLength,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_valueAsString: *const fn(
            self: *const ISVGLength,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        newValueSpecifiedUnits: *const fn(
            self: *const ISVGLength,
            unitType: i16,
            valueInSpecifiedUnits: f32,
        ) callconv(.winapi) HRESULT,
        convertToSpecifiedUnits: *const fn(
            self: *const ISVGLength,
            unitType: i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_unitType(self: *const ISVGLength, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_unitType(self, v);
    }
    pub fn get_unitType(self: *const ISVGLength, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_unitType(self, p);
    }
    pub fn put_value(self: *const ISVGLength, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const ISVGLength, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_valueInSpecifiedUnits(self: *const ISVGLength, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_valueInSpecifiedUnits(self, v);
    }
    pub fn get_valueInSpecifiedUnits(self: *const ISVGLength, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_valueInSpecifiedUnits(self, p);
    }
    pub fn put_valueAsString(self: *const ISVGLength, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_valueAsString(self, v);
    }
    pub fn get_valueAsString(self: *const ISVGLength, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_valueAsString(self, p);
    }
    pub fn newValueSpecifiedUnits(self: *const ISVGLength, unitType: i16, valueInSpecifiedUnits: f32) callconv(.@"inline") HRESULT {
        return self.vtable.newValueSpecifiedUnits(self, unitType, valueInSpecifiedUnits);
    }
    pub fn convertToSpecifiedUnits(self: *const ISVGLength, unitType: i16) callconv(.@"inline") HRESULT {
        return self.vtable.convertToSpecifiedUnits(self, unitType);
    }
};

const IID_ISVGAnimatedLength_Value = Guid.initString("305104d0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedLength = &IID_ISVGAnimatedLength_Value;
pub const ISVGAnimatedLength = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_baseVal: *const fn(
            self: *const ISVGAnimatedLength,
            v: ?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedLength,
            p: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        putref_animVal: *const fn(
            self: *const ISVGAnimatedLength,
            v: ?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedLength,
            p: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_baseVal(self: *const ISVGAnimatedLength, v: ?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedLength, p: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn putref_animVal(self: *const ISVGAnimatedLength, v: ?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedLength, p: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGLengthList_Value = Guid.initString("305104d1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGLengthList = &IID_ISVGLengthList_Value;
pub const ISVGLengthList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_numberOfItems: *const fn(
            self: *const ISVGLengthList,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_numberOfItems: *const fn(
            self: *const ISVGLengthList,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const ISVGLengthList,
        ) callconv(.winapi) HRESULT,
        initialize: *const fn(
            self: *const ISVGLengthList,
            newItem: ?*ISVGLength,
            ppResult: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        getItem: *const fn(
            self: *const ISVGLengthList,
            index: i32,
            ppResult: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        insertItemBefore: *const fn(
            self: *const ISVGLengthList,
            newItem: ?*ISVGLength,
            index: i32,
            ppResult: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        replaceItem: *const fn(
            self: *const ISVGLengthList,
            newItem: ?*ISVGLength,
            index: i32,
            ppResult: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        removeItem: *const fn(
            self: *const ISVGLengthList,
            index: i32,
            ppResult: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
        appendItem: *const fn(
            self: *const ISVGLengthList,
            newItem: ?*ISVGLength,
            ppResult: ?*?*ISVGLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_numberOfItems(self: *const ISVGLengthList, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_numberOfItems(self, v);
    }
    pub fn get_numberOfItems(self: *const ISVGLengthList, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_numberOfItems(self, p);
    }
    pub fn clear(self: *const ISVGLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
    pub fn initialize(self: *const ISVGLengthList, newItem: ?*ISVGLength, ppResult: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.initialize(self, newItem, ppResult);
    }
    pub fn getItem(self: *const ISVGLengthList, index: i32, ppResult: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.getItem(self, index, ppResult);
    }
    pub fn insertItemBefore(self: *const ISVGLengthList, newItem: ?*ISVGLength, index: i32, ppResult: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.insertItemBefore(self, newItem, index, ppResult);
    }
    pub fn replaceItem(self: *const ISVGLengthList, newItem: ?*ISVGLength, index: i32, ppResult: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.replaceItem(self, newItem, index, ppResult);
    }
    pub fn removeItem(self: *const ISVGLengthList, index: i32, ppResult: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.removeItem(self, index, ppResult);
    }
    pub fn appendItem(self: *const ISVGLengthList, newItem: ?*ISVGLength, ppResult: ?*?*ISVGLength) callconv(.@"inline") HRESULT {
        return self.vtable.appendItem(self, newItem, ppResult);
    }
};

const IID_ISVGAnimatedLengthList_Value = Guid.initString("305104d2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedLengthList = &IID_ISVGAnimatedLengthList_Value;
pub const ISVGAnimatedLengthList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_baseVal: *const fn(
            self: *const ISVGAnimatedLengthList,
            v: ?*ISVGLengthList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedLengthList,
            p: ?*?*ISVGLengthList,
        ) callconv(.winapi) HRESULT,
        putref_animVal: *const fn(
            self: *const ISVGAnimatedLengthList,
            v: ?*ISVGLengthList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedLengthList,
            p: ?*?*ISVGLengthList,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_baseVal(self: *const ISVGAnimatedLengthList, v: ?*ISVGLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedLengthList, p: ?*?*ISVGLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn putref_animVal(self: *const ISVGAnimatedLengthList, v: ?*ISVGLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedLengthList, p: ?*?*ISVGLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGNumber_Value = Guid.initString("305104cb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGNumber = &IID_ISVGNumber_Value;
pub const ISVGNumber = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const ISVGNumber,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const ISVGNumber,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_value(self: *const ISVGNumber, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const ISVGNumber, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
};

const IID_ISVGAnimatedNumber_Value = Guid.initString("305104cc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedNumber = &IID_ISVGAnimatedNumber_Value;
pub const ISVGAnimatedNumber = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseVal: *const fn(
            self: *const ISVGAnimatedNumber,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedNumber,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_animVal: *const fn(
            self: *const ISVGAnimatedNumber,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedNumber,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_baseVal(self: *const ISVGAnimatedNumber, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedNumber, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn put_animVal(self: *const ISVGAnimatedNumber, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedNumber, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGNumberList_Value = Guid.initString("305104cd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGNumberList = &IID_ISVGNumberList_Value;
pub const ISVGNumberList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_numberOfItems: *const fn(
            self: *const ISVGNumberList,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_numberOfItems: *const fn(
            self: *const ISVGNumberList,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const ISVGNumberList,
        ) callconv(.winapi) HRESULT,
        initialize: *const fn(
            self: *const ISVGNumberList,
            newItem: ?*ISVGNumber,
            ppResult: ?*?*ISVGNumber,
        ) callconv(.winapi) HRESULT,
        getItem: *const fn(
            self: *const ISVGNumberList,
            index: i32,
            ppResult: ?*?*ISVGNumber,
        ) callconv(.winapi) HRESULT,
        insertItemBefore: *const fn(
            self: *const ISVGNumberList,
            newItem: ?*ISVGNumber,
            index: i32,
            ppResult: ?*?*ISVGNumber,
        ) callconv(.winapi) HRESULT,
        replaceItem: *const fn(
            self: *const ISVGNumberList,
            newItem: ?*ISVGNumber,
            index: i32,
            ppResult: ?*?*ISVGNumber,
        ) callconv(.winapi) HRESULT,
        removeItem: *const fn(
            self: *const ISVGNumberList,
            index: i32,
            ppResult: ?*?*ISVGNumber,
        ) callconv(.winapi) HRESULT,
        appendItem: *const fn(
            self: *const ISVGNumberList,
            newItem: ?*ISVGNumber,
            ppResult: ?*?*ISVGNumber,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_numberOfItems(self: *const ISVGNumberList, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_numberOfItems(self, v);
    }
    pub fn get_numberOfItems(self: *const ISVGNumberList, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_numberOfItems(self, p);
    }
    pub fn clear(self: *const ISVGNumberList) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
    pub fn initialize(self: *const ISVGNumberList, newItem: ?*ISVGNumber, ppResult: ?*?*ISVGNumber) callconv(.@"inline") HRESULT {
        return self.vtable.initialize(self, newItem, ppResult);
    }
    pub fn getItem(self: *const ISVGNumberList, index: i32, ppResult: ?*?*ISVGNumber) callconv(.@"inline") HRESULT {
        return self.vtable.getItem(self, index, ppResult);
    }
    pub fn insertItemBefore(self: *const ISVGNumberList, newItem: ?*ISVGNumber, index: i32, ppResult: ?*?*ISVGNumber) callconv(.@"inline") HRESULT {
        return self.vtable.insertItemBefore(self, newItem, index, ppResult);
    }
    pub fn replaceItem(self: *const ISVGNumberList, newItem: ?*ISVGNumber, index: i32, ppResult: ?*?*ISVGNumber) callconv(.@"inline") HRESULT {
        return self.vtable.replaceItem(self, newItem, index, ppResult);
    }
    pub fn removeItem(self: *const ISVGNumberList, index: i32, ppResult: ?*?*ISVGNumber) callconv(.@"inline") HRESULT {
        return self.vtable.removeItem(self, index, ppResult);
    }
    pub fn appendItem(self: *const ISVGNumberList, newItem: ?*ISVGNumber, ppResult: ?*?*ISVGNumber) callconv(.@"inline") HRESULT {
        return self.vtable.appendItem(self, newItem, ppResult);
    }
};

const IID_ISVGAnimatedNumberList_Value = Guid.initString("305104ce-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedNumberList = &IID_ISVGAnimatedNumberList_Value;
pub const ISVGAnimatedNumberList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_baseVal: *const fn(
            self: *const ISVGAnimatedNumberList,
            v: ?*ISVGNumberList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseVal: *const fn(
            self: *const ISVGAnimatedNumberList,
            p: ?*?*ISVGNumberList,
        ) callconv(.winapi) HRESULT,
        putref_animVal: *const fn(
            self: *const ISVGAnimatedNumberList,
            v: ?*ISVGNumberList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animVal: *const fn(
            self: *const ISVGAnimatedNumberList,
            p: ?*?*ISVGNumberList,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_baseVal(self: *const ISVGAnimatedNumberList, v: ?*ISVGNumberList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_baseVal(self, v);
    }
    pub fn get_baseVal(self: *const ISVGAnimatedNumberList, p: ?*?*ISVGNumberList) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseVal(self, p);
    }
    pub fn putref_animVal(self: *const ISVGAnimatedNumberList, v: ?*ISVGNumberList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animVal(self, v);
    }
    pub fn get_animVal(self: *const ISVGAnimatedNumberList, p: ?*?*ISVGNumberList) callconv(.@"inline") HRESULT {
        return self.vtable.get_animVal(self, p);
    }
};

const IID_ISVGClipPathElement_Value = Guid.initString("3051052d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGClipPathElement = &IID_ISVGClipPathElement_Value;
pub const ISVGClipPathElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_clipPathUnits: *const fn(
            self: *const ISVGClipPathElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_clipPathUnits: *const fn(
            self: *const ISVGClipPathElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_clipPathUnits(self: *const ISVGClipPathElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_clipPathUnits(self, v);
    }
    pub fn get_clipPathUnits(self: *const ISVGClipPathElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_clipPathUnits(self, p);
    }
};

const IID_DispSVGClipPathElement_Value = Guid.initString("3059003b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGClipPathElement = &IID_DispSVGClipPathElement_Value;
pub const DispSVGClipPathElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGDocument_Value = Guid.initString("305104e6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGDocument = &IID_ISVGDocument_Value;
pub const ISVGDocument = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rootElement: *const fn(
            self: *const ISVGDocument,
            p: ?*?*ISVGSVGElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_rootElement(self: *const ISVGDocument, p: ?*?*ISVGSVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_rootElement(self, p);
    }
};

const IID_IGetSVGDocument_Value = Guid.initString("305105ab-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IGetSVGDocument = &IID_IGetSVGDocument_Value;
pub const IGetSVGDocument = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getSVGDocument: *const fn(
            self: *const IGetSVGDocument,
            ppSVGDocument: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getSVGDocument(self: *const IGetSVGDocument, ppSVGDocument: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.getSVGDocument(self, ppSVGDocument);
    }
};

const IID_DispSVGElement_Value = Guid.initString("30590000-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGElement = &IID_DispSVGElement_Value;
pub const DispSVGElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IICCSVGColor_Value = Guid.initString("305104d6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IICCSVGColor = &IID_IICCSVGColor_Value;
pub const IICCSVGColor = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGPaint_Value = Guid.initString("30510524-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPaint = &IID_ISVGPaint_Value;
pub const ISVGPaint = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGPatternElement_Value = Guid.initString("3051052c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPatternElement = &IID_ISVGPatternElement_Value;
pub const ISVGPatternElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_patternUnits: *const fn(
            self: *const ISVGPatternElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_patternUnits: *const fn(
            self: *const ISVGPatternElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        putref_patternContentUnits: *const fn(
            self: *const ISVGPatternElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_patternContentUnits: *const fn(
            self: *const ISVGPatternElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        putref_patternTransform: *const fn(
            self: *const ISVGPatternElement,
            v: ?*ISVGAnimatedTransformList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_patternTransform: *const fn(
            self: *const ISVGPatternElement,
            p: ?*?*ISVGAnimatedTransformList,
        ) callconv(.winapi) HRESULT,
        putref_x: *const fn(
            self: *const ISVGPatternElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPatternElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y: *const fn(
            self: *const ISVGPatternElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPatternElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_width: *const fn(
            self: *const ISVGPatternElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ISVGPatternElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_height: *const fn(
            self: *const ISVGPatternElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const ISVGPatternElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_patternUnits(self: *const ISVGPatternElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_patternUnits(self, v);
    }
    pub fn get_patternUnits(self: *const ISVGPatternElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_patternUnits(self, p);
    }
    pub fn putref_patternContentUnits(self: *const ISVGPatternElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_patternContentUnits(self, v);
    }
    pub fn get_patternContentUnits(self: *const ISVGPatternElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_patternContentUnits(self, p);
    }
    pub fn putref_patternTransform(self: *const ISVGPatternElement, v: ?*ISVGAnimatedTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_patternTransform(self, v);
    }
    pub fn get_patternTransform(self: *const ISVGPatternElement, p: ?*?*ISVGAnimatedTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.get_patternTransform(self, p);
    }
    pub fn putref_x(self: *const ISVGPatternElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x(self, v);
    }
    pub fn get_x(self: *const ISVGPatternElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn putref_y(self: *const ISVGPatternElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y(self, v);
    }
    pub fn get_y(self: *const ISVGPatternElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn putref_width(self: *const ISVGPatternElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_width(self, v);
    }
    pub fn get_width(self: *const ISVGPatternElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn putref_height(self: *const ISVGPatternElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_height(self, v);
    }
    pub fn get_height(self: *const ISVGPatternElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
};

const IID_DispSVGPatternElement_Value = Guid.initString("3059002c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPatternElement = &IID_DispSVGPatternElement_Value;
pub const DispSVGPatternElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGPathSeg_Value = Guid.initString("305104fc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSeg = &IID_ISVGPathSeg_Value;
pub const ISVGPathSeg = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pathSegType: *const fn(
            self: *const ISVGPathSeg,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pathSegType: *const fn(
            self: *const ISVGPathSeg,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pathSegTypeAsLetter: *const fn(
            self: *const ISVGPathSeg,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_pathSegType(self: *const ISVGPathSeg, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_pathSegType(self, v);
    }
    pub fn get_pathSegType(self: *const ISVGPathSeg, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_pathSegType(self, p);
    }
    pub fn get_pathSegTypeAsLetter(self: *const ISVGPathSeg, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_pathSegTypeAsLetter(self, p);
    }
};

const IID_ISVGPathSegArcAbs_Value = Guid.initString("30510506-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegArcAbs = &IID_ISVGPathSegArcAbs_Value;
pub const ISVGPathSegArcAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegArcAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegArcAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegArcAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegArcAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_r1: *const fn(
            self: *const ISVGPathSegArcAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_r1: *const fn(
            self: *const ISVGPathSegArcAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_r2: *const fn(
            self: *const ISVGPathSegArcAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_r2: *const fn(
            self: *const ISVGPathSegArcAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_angle: *const fn(
            self: *const ISVGPathSegArcAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_angle: *const fn(
            self: *const ISVGPathSegArcAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_largeArcFlag: *const fn(
            self: *const ISVGPathSegArcAbs,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_largeArcFlag: *const fn(
            self: *const ISVGPathSegArcAbs,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_sweepFlag: *const fn(
            self: *const ISVGPathSegArcAbs,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sweepFlag: *const fn(
            self: *const ISVGPathSegArcAbs,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegArcAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegArcAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegArcAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegArcAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_r1(self: *const ISVGPathSegArcAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_r1(self, v);
    }
    pub fn get_r1(self: *const ISVGPathSegArcAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_r1(self, p);
    }
    pub fn put_r2(self: *const ISVGPathSegArcAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_r2(self, v);
    }
    pub fn get_r2(self: *const ISVGPathSegArcAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_r2(self, p);
    }
    pub fn put_angle(self: *const ISVGPathSegArcAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_angle(self, v);
    }
    pub fn get_angle(self: *const ISVGPathSegArcAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_angle(self, p);
    }
    pub fn put_largeArcFlag(self: *const ISVGPathSegArcAbs, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_largeArcFlag(self, v);
    }
    pub fn get_largeArcFlag(self: *const ISVGPathSegArcAbs, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_largeArcFlag(self, p);
    }
    pub fn put_sweepFlag(self: *const ISVGPathSegArcAbs, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_sweepFlag(self, v);
    }
    pub fn get_sweepFlag(self: *const ISVGPathSegArcAbs, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_sweepFlag(self, p);
    }
};

const IID_ISVGPathSegArcRel_Value = Guid.initString("30510507-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegArcRel = &IID_ISVGPathSegArcRel_Value;
pub const ISVGPathSegArcRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegArcRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegArcRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegArcRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegArcRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_r1: *const fn(
            self: *const ISVGPathSegArcRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_r1: *const fn(
            self: *const ISVGPathSegArcRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_r2: *const fn(
            self: *const ISVGPathSegArcRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_r2: *const fn(
            self: *const ISVGPathSegArcRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_angle: *const fn(
            self: *const ISVGPathSegArcRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_angle: *const fn(
            self: *const ISVGPathSegArcRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_largeArcFlag: *const fn(
            self: *const ISVGPathSegArcRel,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_largeArcFlag: *const fn(
            self: *const ISVGPathSegArcRel,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_sweepFlag: *const fn(
            self: *const ISVGPathSegArcRel,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sweepFlag: *const fn(
            self: *const ISVGPathSegArcRel,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegArcRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegArcRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegArcRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegArcRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_r1(self: *const ISVGPathSegArcRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_r1(self, v);
    }
    pub fn get_r1(self: *const ISVGPathSegArcRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_r1(self, p);
    }
    pub fn put_r2(self: *const ISVGPathSegArcRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_r2(self, v);
    }
    pub fn get_r2(self: *const ISVGPathSegArcRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_r2(self, p);
    }
    pub fn put_angle(self: *const ISVGPathSegArcRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_angle(self, v);
    }
    pub fn get_angle(self: *const ISVGPathSegArcRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_angle(self, p);
    }
    pub fn put_largeArcFlag(self: *const ISVGPathSegArcRel, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_largeArcFlag(self, v);
    }
    pub fn get_largeArcFlag(self: *const ISVGPathSegArcRel, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_largeArcFlag(self, p);
    }
    pub fn put_sweepFlag(self: *const ISVGPathSegArcRel, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_sweepFlag(self, v);
    }
    pub fn get_sweepFlag(self: *const ISVGPathSegArcRel, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_sweepFlag(self, p);
    }
};

const IID_ISVGPathSegClosePath_Value = Guid.initString("305104fd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegClosePath = &IID_ISVGPathSegClosePath_Value;
pub const ISVGPathSegClosePath = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGPathSegMovetoAbs_Value = Guid.initString("305104fe-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegMovetoAbs = &IID_ISVGPathSegMovetoAbs_Value;
pub const ISVGPathSegMovetoAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegMovetoAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegMovetoAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegMovetoAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegMovetoAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegMovetoAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegMovetoAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegMovetoAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegMovetoAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
};

const IID_ISVGPathSegMovetoRel_Value = Guid.initString("305104ff-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegMovetoRel = &IID_ISVGPathSegMovetoRel_Value;
pub const ISVGPathSegMovetoRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegMovetoRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegMovetoRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegMovetoRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegMovetoRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegMovetoRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegMovetoRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegMovetoRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegMovetoRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
};

const IID_ISVGPathSegLinetoAbs_Value = Guid.initString("30510500-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegLinetoAbs = &IID_ISVGPathSegLinetoAbs_Value;
pub const ISVGPathSegLinetoAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegLinetoAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegLinetoAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegLinetoAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegLinetoAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegLinetoAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegLinetoAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegLinetoAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegLinetoAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
};

const IID_ISVGPathSegLinetoRel_Value = Guid.initString("30510501-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegLinetoRel = &IID_ISVGPathSegLinetoRel_Value;
pub const ISVGPathSegLinetoRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegLinetoRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegLinetoRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegLinetoRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegLinetoRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegLinetoRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegLinetoRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegLinetoRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegLinetoRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
};

const IID_ISVGPathSegCurvetoCubicAbs_Value = Guid.initString("30510502-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegCurvetoCubicAbs = &IID_ISVGPathSegCurvetoCubicAbs_Value;
pub const ISVGPathSegCurvetoCubicAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x1: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x1: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y1: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y1: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x2: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x2: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y2: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y2: *const fn(
            self: *const ISVGPathSegCurvetoCubicAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegCurvetoCubicAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegCurvetoCubicAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegCurvetoCubicAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegCurvetoCubicAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_x1(self: *const ISVGPathSegCurvetoCubicAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x1(self, v);
    }
    pub fn get_x1(self: *const ISVGPathSegCurvetoCubicAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x1(self, p);
    }
    pub fn put_y1(self: *const ISVGPathSegCurvetoCubicAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y1(self, v);
    }
    pub fn get_y1(self: *const ISVGPathSegCurvetoCubicAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y1(self, p);
    }
    pub fn put_x2(self: *const ISVGPathSegCurvetoCubicAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x2(self, v);
    }
    pub fn get_x2(self: *const ISVGPathSegCurvetoCubicAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x2(self, p);
    }
    pub fn put_y2(self: *const ISVGPathSegCurvetoCubicAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y2(self, v);
    }
    pub fn get_y2(self: *const ISVGPathSegCurvetoCubicAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y2(self, p);
    }
};

const IID_ISVGPathSegCurvetoCubicRel_Value = Guid.initString("30510503-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegCurvetoCubicRel = &IID_ISVGPathSegCurvetoCubicRel_Value;
pub const ISVGPathSegCurvetoCubicRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x1: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x1: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y1: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y1: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x2: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x2: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y2: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y2: *const fn(
            self: *const ISVGPathSegCurvetoCubicRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegCurvetoCubicRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegCurvetoCubicRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegCurvetoCubicRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegCurvetoCubicRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_x1(self: *const ISVGPathSegCurvetoCubicRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x1(self, v);
    }
    pub fn get_x1(self: *const ISVGPathSegCurvetoCubicRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x1(self, p);
    }
    pub fn put_y1(self: *const ISVGPathSegCurvetoCubicRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y1(self, v);
    }
    pub fn get_y1(self: *const ISVGPathSegCurvetoCubicRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y1(self, p);
    }
    pub fn put_x2(self: *const ISVGPathSegCurvetoCubicRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x2(self, v);
    }
    pub fn get_x2(self: *const ISVGPathSegCurvetoCubicRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x2(self, p);
    }
    pub fn put_y2(self: *const ISVGPathSegCurvetoCubicRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y2(self, v);
    }
    pub fn get_y2(self: *const ISVGPathSegCurvetoCubicRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y2(self, p);
    }
};

const IID_ISVGPathSegCurvetoCubicSmoothAbs_Value = Guid.initString("3051050c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegCurvetoCubicSmoothAbs = &IID_ISVGPathSegCurvetoCubicSmoothAbs_Value;
pub const ISVGPathSegCurvetoCubicSmoothAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x2: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x2: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y2: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y2: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegCurvetoCubicSmoothAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegCurvetoCubicSmoothAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegCurvetoCubicSmoothAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegCurvetoCubicSmoothAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_x2(self: *const ISVGPathSegCurvetoCubicSmoothAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x2(self, v);
    }
    pub fn get_x2(self: *const ISVGPathSegCurvetoCubicSmoothAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x2(self, p);
    }
    pub fn put_y2(self: *const ISVGPathSegCurvetoCubicSmoothAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y2(self, v);
    }
    pub fn get_y2(self: *const ISVGPathSegCurvetoCubicSmoothAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y2(self, p);
    }
};

const IID_ISVGPathSegCurvetoCubicSmoothRel_Value = Guid.initString("3051050d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegCurvetoCubicSmoothRel = &IID_ISVGPathSegCurvetoCubicSmoothRel_Value;
pub const ISVGPathSegCurvetoCubicSmoothRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x2: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x2: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y2: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y2: *const fn(
            self: *const ISVGPathSegCurvetoCubicSmoothRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegCurvetoCubicSmoothRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegCurvetoCubicSmoothRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegCurvetoCubicSmoothRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegCurvetoCubicSmoothRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_x2(self: *const ISVGPathSegCurvetoCubicSmoothRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x2(self, v);
    }
    pub fn get_x2(self: *const ISVGPathSegCurvetoCubicSmoothRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x2(self, p);
    }
    pub fn put_y2(self: *const ISVGPathSegCurvetoCubicSmoothRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y2(self, v);
    }
    pub fn get_y2(self: *const ISVGPathSegCurvetoCubicSmoothRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y2(self, p);
    }
};

const IID_ISVGPathSegCurvetoQuadraticAbs_Value = Guid.initString("30510504-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegCurvetoQuadraticAbs = &IID_ISVGPathSegCurvetoQuadraticAbs_Value;
pub const ISVGPathSegCurvetoQuadraticAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x1: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x1: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y1: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y1: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegCurvetoQuadraticAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegCurvetoQuadraticAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegCurvetoQuadraticAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegCurvetoQuadraticAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_x1(self: *const ISVGPathSegCurvetoQuadraticAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x1(self, v);
    }
    pub fn get_x1(self: *const ISVGPathSegCurvetoQuadraticAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x1(self, p);
    }
    pub fn put_y1(self: *const ISVGPathSegCurvetoQuadraticAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y1(self, v);
    }
    pub fn get_y1(self: *const ISVGPathSegCurvetoQuadraticAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y1(self, p);
    }
};

const IID_ISVGPathSegCurvetoQuadraticRel_Value = Guid.initString("30510505-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegCurvetoQuadraticRel = &IID_ISVGPathSegCurvetoQuadraticRel_Value;
pub const ISVGPathSegCurvetoQuadraticRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x1: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x1: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y1: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y1: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegCurvetoQuadraticRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegCurvetoQuadraticRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegCurvetoQuadraticRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegCurvetoQuadraticRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn put_x1(self: *const ISVGPathSegCurvetoQuadraticRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x1(self, v);
    }
    pub fn get_x1(self: *const ISVGPathSegCurvetoQuadraticRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x1(self, p);
    }
    pub fn put_y1(self: *const ISVGPathSegCurvetoQuadraticRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y1(self, v);
    }
    pub fn get_y1(self: *const ISVGPathSegCurvetoQuadraticRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y1(self, p);
    }
};

const IID_ISVGPathSegCurvetoQuadraticSmoothAbs_Value = Guid.initString("3051050e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegCurvetoQuadraticSmoothAbs = &IID_ISVGPathSegCurvetoQuadraticSmoothAbs_Value;
pub const ISVGPathSegCurvetoQuadraticSmoothAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticSmoothAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticSmoothAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticSmoothAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticSmoothAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegCurvetoQuadraticSmoothAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegCurvetoQuadraticSmoothAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegCurvetoQuadraticSmoothAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegCurvetoQuadraticSmoothAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
};

const IID_ISVGPathSegCurvetoQuadraticSmoothRel_Value = Guid.initString("3051050f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegCurvetoQuadraticSmoothRel = &IID_ISVGPathSegCurvetoQuadraticSmoothRel_Value;
pub const ISVGPathSegCurvetoQuadraticSmoothRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticSmoothRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticSmoothRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticSmoothRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegCurvetoQuadraticSmoothRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegCurvetoQuadraticSmoothRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegCurvetoQuadraticSmoothRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPathSegCurvetoQuadraticSmoothRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegCurvetoQuadraticSmoothRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
};

const IID_ISVGPathSegLinetoHorizontalAbs_Value = Guid.initString("30510508-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegLinetoHorizontalAbs = &IID_ISVGPathSegLinetoHorizontalAbs_Value;
pub const ISVGPathSegLinetoHorizontalAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegLinetoHorizontalAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegLinetoHorizontalAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegLinetoHorizontalAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegLinetoHorizontalAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
};

const IID_ISVGPathSegLinetoHorizontalRel_Value = Guid.initString("30510509-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegLinetoHorizontalRel = &IID_ISVGPathSegLinetoHorizontalRel_Value;
pub const ISVGPathSegLinetoHorizontalRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPathSegLinetoHorizontalRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPathSegLinetoHorizontalRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPathSegLinetoHorizontalRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPathSegLinetoHorizontalRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
};

const IID_ISVGPathSegLinetoVerticalAbs_Value = Guid.initString("3051050a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegLinetoVerticalAbs = &IID_ISVGPathSegLinetoVerticalAbs_Value;
pub const ISVGPathSegLinetoVerticalAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegLinetoVerticalAbs,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegLinetoVerticalAbs,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_y(self: *const ISVGPathSegLinetoVerticalAbs, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegLinetoVerticalAbs, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
};

const IID_ISVGPathSegLinetoVerticalRel_Value = Guid.initString("3051050b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegLinetoVerticalRel = &IID_ISVGPathSegLinetoVerticalRel_Value;
pub const ISVGPathSegLinetoVerticalRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPathSegLinetoVerticalRel,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPathSegLinetoVerticalRel,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_y(self: *const ISVGPathSegLinetoVerticalRel, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPathSegLinetoVerticalRel, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
};

const IID_DispSVGPathSegArcAbs_Value = Guid.initString("30590013-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegArcAbs = &IID_DispSVGPathSegArcAbs_Value;
pub const DispSVGPathSegArcAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegArcRel_Value = Guid.initString("30590014-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegArcRel = &IID_DispSVGPathSegArcRel_Value;
pub const DispSVGPathSegArcRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegClosePath_Value = Guid.initString("30590015-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegClosePath = &IID_DispSVGPathSegClosePath_Value;
pub const DispSVGPathSegClosePath = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegMovetoAbs_Value = Guid.initString("30590024-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegMovetoAbs = &IID_DispSVGPathSegMovetoAbs_Value;
pub const DispSVGPathSegMovetoAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegMovetoRel_Value = Guid.initString("30590025-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegMovetoRel = &IID_DispSVGPathSegMovetoRel_Value;
pub const DispSVGPathSegMovetoRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegLinetoAbs_Value = Guid.initString("3059001e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegLinetoAbs = &IID_DispSVGPathSegLinetoAbs_Value;
pub const DispSVGPathSegLinetoAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegLinetoRel_Value = Guid.initString("30590021-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegLinetoRel = &IID_DispSVGPathSegLinetoRel_Value;
pub const DispSVGPathSegLinetoRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegCurvetoCubicAbs_Value = Guid.initString("30590016-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegCurvetoCubicAbs = &IID_DispSVGPathSegCurvetoCubicAbs_Value;
pub const DispSVGPathSegCurvetoCubicAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegCurvetoCubicRel_Value = Guid.initString("30590017-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegCurvetoCubicRel = &IID_DispSVGPathSegCurvetoCubicRel_Value;
pub const DispSVGPathSegCurvetoCubicRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegCurvetoCubicSmoothAbs_Value = Guid.initString("30590018-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegCurvetoCubicSmoothAbs = &IID_DispSVGPathSegCurvetoCubicSmoothAbs_Value;
pub const DispSVGPathSegCurvetoCubicSmoothAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegCurvetoCubicSmoothRel_Value = Guid.initString("30590019-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegCurvetoCubicSmoothRel = &IID_DispSVGPathSegCurvetoCubicSmoothRel_Value;
pub const DispSVGPathSegCurvetoCubicSmoothRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegCurvetoQuadraticAbs_Value = Guid.initString("3059001a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegCurvetoQuadraticAbs = &IID_DispSVGPathSegCurvetoQuadraticAbs_Value;
pub const DispSVGPathSegCurvetoQuadraticAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegCurvetoQuadraticRel_Value = Guid.initString("3059001b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegCurvetoQuadraticRel = &IID_DispSVGPathSegCurvetoQuadraticRel_Value;
pub const DispSVGPathSegCurvetoQuadraticRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegCurvetoQuadraticSmoothAbs_Value = Guid.initString("3059001c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegCurvetoQuadraticSmoothAbs = &IID_DispSVGPathSegCurvetoQuadraticSmoothAbs_Value;
pub const DispSVGPathSegCurvetoQuadraticSmoothAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegCurvetoQuadraticSmoothRel_Value = Guid.initString("3059001d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegCurvetoQuadraticSmoothRel = &IID_DispSVGPathSegCurvetoQuadraticSmoothRel_Value;
pub const DispSVGPathSegCurvetoQuadraticSmoothRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegLinetoHorizontalAbs_Value = Guid.initString("3059001f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegLinetoHorizontalAbs = &IID_DispSVGPathSegLinetoHorizontalAbs_Value;
pub const DispSVGPathSegLinetoHorizontalAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegLinetoHorizontalRel_Value = Guid.initString("30590020-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegLinetoHorizontalRel = &IID_DispSVGPathSegLinetoHorizontalRel_Value;
pub const DispSVGPathSegLinetoHorizontalRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegLinetoVerticalAbs_Value = Guid.initString("30590022-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegLinetoVerticalAbs = &IID_DispSVGPathSegLinetoVerticalAbs_Value;
pub const DispSVGPathSegLinetoVerticalAbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPathSegLinetoVerticalRel_Value = Guid.initString("30590023-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathSegLinetoVerticalRel = &IID_DispSVGPathSegLinetoVerticalRel_Value;
pub const DispSVGPathSegLinetoVerticalRel = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGPathSegList_Value = Guid.initString("30510510-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathSegList = &IID_ISVGPathSegList_Value;
pub const ISVGPathSegList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_numberOfItems: *const fn(
            self: *const ISVGPathSegList,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_numberOfItems: *const fn(
            self: *const ISVGPathSegList,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
        initialize: *const fn(
            self: *const ISVGPathSegList,
            newItem: ?*ISVGPathSeg,
            ppResult: ?*?*ISVGPathSeg,
        ) callconv(.winapi) HRESULT,
        getItem: *const fn(
            self: *const ISVGPathSegList,
            index: i32,
            ppResult: ?*?*ISVGPathSeg,
        ) callconv(.winapi) HRESULT,
        insertItemBefore: *const fn(
            self: *const ISVGPathSegList,
            newItem: ?*ISVGPathSeg,
            index: i32,
            ppResult: ?*?*ISVGPathSeg,
        ) callconv(.winapi) HRESULT,
        replaceItem: *const fn(
            self: *const ISVGPathSegList,
            newItem: ?*ISVGPathSeg,
            index: i32,
            ppResult: ?*?*ISVGPathSeg,
        ) callconv(.winapi) HRESULT,
        removeItem: *const fn(
            self: *const ISVGPathSegList,
            index: i32,
            ppResult: ?*?*ISVGPathSeg,
        ) callconv(.winapi) HRESULT,
        appendItem: *const fn(
            self: *const ISVGPathSegList,
            newItem: ?*ISVGPathSeg,
            ppResult: ?*?*ISVGPathSeg,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_numberOfItems(self: *const ISVGPathSegList, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_numberOfItems(self, v);
    }
    pub fn get_numberOfItems(self: *const ISVGPathSegList, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_numberOfItems(self, p);
    }
    pub fn clear(self: *const ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
    pub fn initialize(self: *const ISVGPathSegList, newItem: ?*ISVGPathSeg, ppResult: ?*?*ISVGPathSeg) callconv(.@"inline") HRESULT {
        return self.vtable.initialize(self, newItem, ppResult);
    }
    pub fn getItem(self: *const ISVGPathSegList, index: i32, ppResult: ?*?*ISVGPathSeg) callconv(.@"inline") HRESULT {
        return self.vtable.getItem(self, index, ppResult);
    }
    pub fn insertItemBefore(self: *const ISVGPathSegList, newItem: ?*ISVGPathSeg, index: i32, ppResult: ?*?*ISVGPathSeg) callconv(.@"inline") HRESULT {
        return self.vtable.insertItemBefore(self, newItem, index, ppResult);
    }
    pub fn replaceItem(self: *const ISVGPathSegList, newItem: ?*ISVGPathSeg, index: i32, ppResult: ?*?*ISVGPathSeg) callconv(.@"inline") HRESULT {
        return self.vtable.replaceItem(self, newItem, index, ppResult);
    }
    pub fn removeItem(self: *const ISVGPathSegList, index: i32, ppResult: ?*?*ISVGPathSeg) callconv(.@"inline") HRESULT {
        return self.vtable.removeItem(self, index, ppResult);
    }
    pub fn appendItem(self: *const ISVGPathSegList, newItem: ?*ISVGPathSeg, ppResult: ?*?*ISVGPathSeg) callconv(.@"inline") HRESULT {
        return self.vtable.appendItem(self, newItem, ppResult);
    }
};

const IID_ISVGPoint_Value = Guid.initString("305104f4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPoint = &IID_ISVGPoint_Value;
pub const ISVGPoint = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_x: *const fn(
            self: *const ISVGPoint,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGPoint,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_y: *const fn(
            self: *const ISVGPoint,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGPoint,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        matrixTransform: *const fn(
            self: *const ISVGPoint,
            pMatrix: ?*ISVGMatrix,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_x(self: *const ISVGPoint, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_x(self, v);
    }
    pub fn get_x(self: *const ISVGPoint, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn put_y(self: *const ISVGPoint, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_y(self, v);
    }
    pub fn get_y(self: *const ISVGPoint, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn matrixTransform(self: *const ISVGPoint, pMatrix: ?*ISVGMatrix, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.matrixTransform(self, pMatrix, ppResult);
    }
};

const IID_ISVGPointList_Value = Guid.initString("305104f5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPointList = &IID_ISVGPointList_Value;
pub const ISVGPointList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_numberOfItems: *const fn(
            self: *const ISVGPointList,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_numberOfItems: *const fn(
            self: *const ISVGPointList,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        clear: *const fn(
            self: *const ISVGPointList,
        ) callconv(.winapi) HRESULT,
        initialize: *const fn(
            self: *const ISVGPointList,
            pNewItem: ?*ISVGPoint,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        getItem: *const fn(
            self: *const ISVGPointList,
            index: i32,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        insertItemBefore: *const fn(
            self: *const ISVGPointList,
            pNewItem: ?*ISVGPoint,
            index: i32,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        replaceItem: *const fn(
            self: *const ISVGPointList,
            pNewItem: ?*ISVGPoint,
            index: i32,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        removeItem: *const fn(
            self: *const ISVGPointList,
            index: i32,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        appendItem: *const fn(
            self: *const ISVGPointList,
            pNewItem: ?*ISVGPoint,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_numberOfItems(self: *const ISVGPointList, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_numberOfItems(self, v);
    }
    pub fn get_numberOfItems(self: *const ISVGPointList, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_numberOfItems(self, p);
    }
    pub fn clear(self: *const ISVGPointList) callconv(.@"inline") HRESULT {
        return self.vtable.clear(self);
    }
    pub fn initialize(self: *const ISVGPointList, pNewItem: ?*ISVGPoint, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.initialize(self, pNewItem, ppResult);
    }
    pub fn getItem(self: *const ISVGPointList, index: i32, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.getItem(self, index, ppResult);
    }
    pub fn insertItemBefore(self: *const ISVGPointList, pNewItem: ?*ISVGPoint, index: i32, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.insertItemBefore(self, pNewItem, index, ppResult);
    }
    pub fn replaceItem(self: *const ISVGPointList, pNewItem: ?*ISVGPoint, index: i32, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.replaceItem(self, pNewItem, index, ppResult);
    }
    pub fn removeItem(self: *const ISVGPointList, index: i32, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.removeItem(self, index, ppResult);
    }
    pub fn appendItem(self: *const ISVGPointList, pNewItem: ?*ISVGPoint, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.appendItem(self, pNewItem, ppResult);
    }
};

const IID_ISVGViewSpec_Value = Guid.initString("305104e2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGViewSpec = &IID_ISVGViewSpec_Value;
pub const ISVGViewSpec = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGTransform_Value = Guid.initString("305104f7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTransform = &IID_ISVGTransform_Value;
pub const ISVGTransform = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const ISVGTransform,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const ISVGTransform,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        putref_matrix: *const fn(
            self: *const ISVGTransform,
            v: ?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_matrix: *const fn(
            self: *const ISVGTransform,
            p: ?*?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_angle: *const fn(
            self: *const ISVGTransform,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_angle: *const fn(
            self: *const ISVGTransform,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        setMatrix: *const fn(
            self: *const ISVGTransform,
            matrix: ?*ISVGMatrix,
        ) callconv(.winapi) HRESULT,
        setTranslate: *const fn(
            self: *const ISVGTransform,
            tx: f32,
            ty: f32,
        ) callconv(.winapi) HRESULT,
        setScale: *const fn(
            self: *const ISVGTransform,
            sx: f32,
            sy: f32,
        ) callconv(.winapi) HRESULT,
        setRotate: *const fn(
            self: *const ISVGTransform,
            angle: f32,
            cx: f32,
            cy: f32,
        ) callconv(.winapi) HRESULT,
        setSkewX: *const fn(
            self: *const ISVGTransform,
            angle: f32,
        ) callconv(.winapi) HRESULT,
        setSkewY: *const fn(
            self: *const ISVGTransform,
            angle: f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_type(self: *const ISVGTransform, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const ISVGTransform, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn putref_matrix(self: *const ISVGTransform, v: ?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.putref_matrix(self, v);
    }
    pub fn get_matrix(self: *const ISVGTransform, p: ?*?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.get_matrix(self, p);
    }
    pub fn put_angle(self: *const ISVGTransform, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_angle(self, v);
    }
    pub fn get_angle(self: *const ISVGTransform, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_angle(self, p);
    }
    pub fn setMatrix(self: *const ISVGTransform, matrix: ?*ISVGMatrix) callconv(.@"inline") HRESULT {
        return self.vtable.setMatrix(self, matrix);
    }
    pub fn setTranslate(self: *const ISVGTransform, tx: f32, ty: f32) callconv(.@"inline") HRESULT {
        return self.vtable.setTranslate(self, tx, ty);
    }
    pub fn setScale(self: *const ISVGTransform, sx: f32, sy: f32) callconv(.@"inline") HRESULT {
        return self.vtable.setScale(self, sx, sy);
    }
    pub fn setRotate(self: *const ISVGTransform, angle: f32, cx: f32, cy: f32) callconv(.@"inline") HRESULT {
        return self.vtable.setRotate(self, angle, cx, cy);
    }
    pub fn setSkewX(self: *const ISVGTransform, angle: f32) callconv(.@"inline") HRESULT {
        return self.vtable.setSkewX(self, angle);
    }
    pub fn setSkewY(self: *const ISVGTransform, angle: f32) callconv(.@"inline") HRESULT {
        return self.vtable.setSkewY(self, angle);
    }
};

const IID_DispSVGSVGElement_Value = Guid.initString("30590001-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGSVGElement = &IID_DispSVGSVGElement_Value;
pub const DispSVGSVGElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGElementInstance_Value = Guid.initString("305104ee-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGElementInstance = &IID_ISVGElementInstance_Value;
pub const ISVGElementInstance = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_correspondingElement: *const fn(
            self: *const ISVGElementInstance,
            p: ?*?*ISVGElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_correspondingUseElement: *const fn(
            self: *const ISVGElementInstance,
            p: ?*?*ISVGUseElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentNode: *const fn(
            self: *const ISVGElementInstance,
            p: ?*?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_childNodes: *const fn(
            self: *const ISVGElementInstance,
            p: ?*?*ISVGElementInstanceList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_firstChild: *const fn(
            self: *const ISVGElementInstance,
            p: ?*?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastChild: *const fn(
            self: *const ISVGElementInstance,
            p: ?*?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_previousSibling: *const fn(
            self: *const ISVGElementInstance,
            p: ?*?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextSibling: *const fn(
            self: *const ISVGElementInstance,
            p: ?*?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_correspondingElement(self: *const ISVGElementInstance, p: ?*?*ISVGElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_correspondingElement(self, p);
    }
    pub fn get_correspondingUseElement(self: *const ISVGElementInstance, p: ?*?*ISVGUseElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_correspondingUseElement(self, p);
    }
    pub fn get_parentNode(self: *const ISVGElementInstance, p: ?*?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.get_parentNode(self, p);
    }
    pub fn get_childNodes(self: *const ISVGElementInstance, p: ?*?*ISVGElementInstanceList) callconv(.@"inline") HRESULT {
        return self.vtable.get_childNodes(self, p);
    }
    pub fn get_firstChild(self: *const ISVGElementInstance, p: ?*?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.get_firstChild(self, p);
    }
    pub fn get_lastChild(self: *const ISVGElementInstance, p: ?*?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.get_lastChild(self, p);
    }
    pub fn get_previousSibling(self: *const ISVGElementInstance, p: ?*?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.get_previousSibling(self, p);
    }
    pub fn get_nextSibling(self: *const ISVGElementInstance, p: ?*?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.get_nextSibling(self, p);
    }
};

const IID_ISVGUseElement_Value = Guid.initString("305104ed-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGUseElement = &IID_ISVGUseElement_Value;
pub const ISVGUseElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_x: *const fn(
            self: *const ISVGUseElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGUseElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y: *const fn(
            self: *const ISVGUseElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGUseElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_width: *const fn(
            self: *const ISVGUseElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ISVGUseElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_height: *const fn(
            self: *const ISVGUseElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const ISVGUseElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_instanceRoot: *const fn(
            self: *const ISVGUseElement,
            v: ?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_instanceRoot: *const fn(
            self: *const ISVGUseElement,
            p: ?*?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
        putref_animatedInstanceRoot: *const fn(
            self: *const ISVGUseElement,
            v: ?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animatedInstanceRoot: *const fn(
            self: *const ISVGUseElement,
            p: ?*?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_x(self: *const ISVGUseElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x(self, v);
    }
    pub fn get_x(self: *const ISVGUseElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn putref_y(self: *const ISVGUseElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y(self, v);
    }
    pub fn get_y(self: *const ISVGUseElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn putref_width(self: *const ISVGUseElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_width(self, v);
    }
    pub fn get_width(self: *const ISVGUseElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn putref_height(self: *const ISVGUseElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_height(self, v);
    }
    pub fn get_height(self: *const ISVGUseElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn putref_instanceRoot(self: *const ISVGUseElement, v: ?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.putref_instanceRoot(self, v);
    }
    pub fn get_instanceRoot(self: *const ISVGUseElement, p: ?*?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.get_instanceRoot(self, p);
    }
    pub fn putref_animatedInstanceRoot(self: *const ISVGUseElement, v: ?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animatedInstanceRoot(self, v);
    }
    pub fn get_animatedInstanceRoot(self: *const ISVGUseElement, p: ?*?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.get_animatedInstanceRoot(self, p);
    }
};

const IID_DispSVGUseElement_Value = Guid.initString("30590010-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGUseElement = &IID_DispSVGUseElement_Value;
pub const DispSVGUseElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLStyleSheetRulesAppliedCollection_Value = Guid.initString("305104c0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLStyleSheetRulesAppliedCollection = &IID_IHTMLStyleSheetRulesAppliedCollection_Value;
pub const IHTMLStyleSheetRulesAppliedCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        item: *const fn(
            self: *const IHTMLStyleSheetRulesAppliedCollection,
            index: i32,
            ppHTMLStyleSheetRule: ?*?*IHTMLStyleSheetRule,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLStyleSheetRulesAppliedCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        propertyAppliedBy: *const fn(
            self: *const IHTMLStyleSheetRulesAppliedCollection,
            name: ?BSTR,
            ppRule: ?*?*IHTMLStyleSheetRule,
        ) callconv(.winapi) HRESULT,
        propertyAppliedTrace: *const fn(
            self: *const IHTMLStyleSheetRulesAppliedCollection,
            name: ?BSTR,
            index: i32,
            ppRule: ?*?*IHTMLStyleSheetRule,
        ) callconv(.winapi) HRESULT,
        propertyAppliedTraceLength: *const fn(
            self: *const IHTMLStyleSheetRulesAppliedCollection,
            name: ?BSTR,
            pLength: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn item(self: *const IHTMLStyleSheetRulesAppliedCollection, index: i32, ppHTMLStyleSheetRule: ?*?*IHTMLStyleSheetRule) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppHTMLStyleSheetRule);
    }
    pub fn get_length(self: *const IHTMLStyleSheetRulesAppliedCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn propertyAppliedBy(self: *const IHTMLStyleSheetRulesAppliedCollection, name: ?BSTR, ppRule: ?*?*IHTMLStyleSheetRule) callconv(.@"inline") HRESULT {
        return self.vtable.propertyAppliedBy(self, name, ppRule);
    }
    pub fn propertyAppliedTrace(self: *const IHTMLStyleSheetRulesAppliedCollection, name: ?BSTR, index: i32, ppRule: ?*?*IHTMLStyleSheetRule) callconv(.@"inline") HRESULT {
        return self.vtable.propertyAppliedTrace(self, name, index, ppRule);
    }
    pub fn propertyAppliedTraceLength(self: *const IHTMLStyleSheetRulesAppliedCollection, name: ?BSTR, pLength: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.propertyAppliedTraceLength(self, name, pLength);
    }
};

const IID_IRulesApplied_Value = Guid.initString("305104bf-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IRulesApplied = &IID_IRulesApplied_Value;
pub const IRulesApplied = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_element: *const fn(
            self: *const IRulesApplied,
            p: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_inlineStyles: *const fn(
            self: *const IRulesApplied,
            p: ?*?*IHTMLStyle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_appliedRules: *const fn(
            self: *const IRulesApplied,
            p: ?*?*IHTMLStyleSheetRulesAppliedCollection,
        ) callconv(.winapi) HRESULT,
        propertyIsInline: *const fn(
            self: *const IRulesApplied,
            name: ?BSTR,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        propertyIsInheritable: *const fn(
            self: *const IRulesApplied,
            name: ?BSTR,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        hasInheritableProperty: *const fn(
            self: *const IRulesApplied,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_element(self: *const IRulesApplied, p: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_element(self, p);
    }
    pub fn get_inlineStyles(self: *const IRulesApplied, p: ?*?*IHTMLStyle) callconv(.@"inline") HRESULT {
        return self.vtable.get_inlineStyles(self, p);
    }
    pub fn get_appliedRules(self: *const IRulesApplied, p: ?*?*IHTMLStyleSheetRulesAppliedCollection) callconv(.@"inline") HRESULT {
        return self.vtable.get_appliedRules(self, p);
    }
    pub fn propertyIsInline(self: *const IRulesApplied, name: ?BSTR, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.propertyIsInline(self, name, p);
    }
    pub fn propertyIsInheritable(self: *const IRulesApplied, name: ?BSTR, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.propertyIsInheritable(self, name, p);
    }
    pub fn hasInheritableProperty(self: *const IRulesApplied, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.hasInheritableProperty(self, p);
    }
};

const IID_DispHTMLStyleSheetRulesAppliedCollection_Value = Guid.initString("3050f5a6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLStyleSheetRulesAppliedCollection = &IID_DispHTMLStyleSheetRulesAppliedCollection_Value;
pub const DispHTMLStyleSheetRulesAppliedCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispRulesApplied_Value = Guid.initString("3050f5a5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispRulesApplied = &IID_DispRulesApplied_Value;
pub const DispRulesApplied = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispRulesAppliedCollection_Value = Guid.initString("3050f5a4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispRulesAppliedCollection = &IID_DispRulesAppliedCollection_Value;
pub const DispRulesAppliedCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLW3CComputedStyle_Value = Guid.initString("30590070-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLW3CComputedStyle = &IID_DispHTMLW3CComputedStyle_Value;
pub const DispHTMLW3CComputedStyle = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGAnimatedPoints_Value = Guid.initString("30510517-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedPoints = &IID_ISVGAnimatedPoints_Value;
pub const ISVGAnimatedPoints = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_points: *const fn(
            self: *const ISVGAnimatedPoints,
            v: ?*ISVGPointList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_points: *const fn(
            self: *const ISVGAnimatedPoints,
            p: ?*?*ISVGPointList,
        ) callconv(.winapi) HRESULT,
        putref_animatedPoints: *const fn(
            self: *const ISVGAnimatedPoints,
            v: ?*ISVGPointList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animatedPoints: *const fn(
            self: *const ISVGAnimatedPoints,
            p: ?*?*ISVGPointList,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_points(self: *const ISVGAnimatedPoints, v: ?*ISVGPointList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_points(self, v);
    }
    pub fn get_points(self: *const ISVGAnimatedPoints, p: ?*?*ISVGPointList) callconv(.@"inline") HRESULT {
        return self.vtable.get_points(self, p);
    }
    pub fn putref_animatedPoints(self: *const ISVGAnimatedPoints, v: ?*ISVGPointList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animatedPoints(self, v);
    }
    pub fn get_animatedPoints(self: *const ISVGAnimatedPoints, p: ?*?*ISVGPointList) callconv(.@"inline") HRESULT {
        return self.vtable.get_animatedPoints(self, p);
    }
};

const IID_ISVGCircleElement_Value = Guid.initString("30510514-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGCircleElement = &IID_ISVGCircleElement_Value;
pub const ISVGCircleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_cx: *const fn(
            self: *const ISVGCircleElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cx: *const fn(
            self: *const ISVGCircleElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_cy: *const fn(
            self: *const ISVGCircleElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cy: *const fn(
            self: *const ISVGCircleElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_r: *const fn(
            self: *const ISVGCircleElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_r: *const fn(
            self: *const ISVGCircleElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_cx(self: *const ISVGCircleElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_cx(self, v);
    }
    pub fn get_cx(self: *const ISVGCircleElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_cx(self, p);
    }
    pub fn putref_cy(self: *const ISVGCircleElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_cy(self, v);
    }
    pub fn get_cy(self: *const ISVGCircleElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_cy(self, p);
    }
    pub fn putref_r(self: *const ISVGCircleElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_r(self, v);
    }
    pub fn get_r(self: *const ISVGCircleElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_r(self, p);
    }
};

const IID_ISVGEllipseElement_Value = Guid.initString("30510515-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGEllipseElement = &IID_ISVGEllipseElement_Value;
pub const ISVGEllipseElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_cx: *const fn(
            self: *const ISVGEllipseElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cx: *const fn(
            self: *const ISVGEllipseElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_cy: *const fn(
            self: *const ISVGEllipseElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cy: *const fn(
            self: *const ISVGEllipseElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_rx: *const fn(
            self: *const ISVGEllipseElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rx: *const fn(
            self: *const ISVGEllipseElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_ry: *const fn(
            self: *const ISVGEllipseElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ry: *const fn(
            self: *const ISVGEllipseElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_cx(self: *const ISVGEllipseElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_cx(self, v);
    }
    pub fn get_cx(self: *const ISVGEllipseElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_cx(self, p);
    }
    pub fn putref_cy(self: *const ISVGEllipseElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_cy(self, v);
    }
    pub fn get_cy(self: *const ISVGEllipseElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_cy(self, p);
    }
    pub fn putref_rx(self: *const ISVGEllipseElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_rx(self, v);
    }
    pub fn get_rx(self: *const ISVGEllipseElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_rx(self, p);
    }
    pub fn putref_ry(self: *const ISVGEllipseElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_ry(self, v);
    }
    pub fn get_ry(self: *const ISVGEllipseElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_ry(self, p);
    }
};

const IID_ISVGLineElement_Value = Guid.initString("30510516-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGLineElement = &IID_ISVGLineElement_Value;
pub const ISVGLineElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_x1: *const fn(
            self: *const ISVGLineElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x1: *const fn(
            self: *const ISVGLineElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y1: *const fn(
            self: *const ISVGLineElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y1: *const fn(
            self: *const ISVGLineElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_x2: *const fn(
            self: *const ISVGLineElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x2: *const fn(
            self: *const ISVGLineElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y2: *const fn(
            self: *const ISVGLineElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y2: *const fn(
            self: *const ISVGLineElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_x1(self: *const ISVGLineElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x1(self, v);
    }
    pub fn get_x1(self: *const ISVGLineElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x1(self, p);
    }
    pub fn putref_y1(self: *const ISVGLineElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y1(self, v);
    }
    pub fn get_y1(self: *const ISVGLineElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y1(self, p);
    }
    pub fn putref_x2(self: *const ISVGLineElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x2(self, v);
    }
    pub fn get_x2(self: *const ISVGLineElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x2(self, p);
    }
    pub fn putref_y2(self: *const ISVGLineElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y2(self, v);
    }
    pub fn get_y2(self: *const ISVGLineElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y2(self, p);
    }
};

const IID_ISVGRectElement_Value = Guid.initString("30510513-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGRectElement = &IID_ISVGRectElement_Value;
pub const ISVGRectElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_x: *const fn(
            self: *const ISVGRectElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGRectElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y: *const fn(
            self: *const ISVGRectElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGRectElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_width: *const fn(
            self: *const ISVGRectElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ISVGRectElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_height: *const fn(
            self: *const ISVGRectElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const ISVGRectElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_rx: *const fn(
            self: *const ISVGRectElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rx: *const fn(
            self: *const ISVGRectElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_ry: *const fn(
            self: *const ISVGRectElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ry: *const fn(
            self: *const ISVGRectElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_x(self: *const ISVGRectElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x(self, v);
    }
    pub fn get_x(self: *const ISVGRectElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn putref_y(self: *const ISVGRectElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y(self, v);
    }
    pub fn get_y(self: *const ISVGRectElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn putref_width(self: *const ISVGRectElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_width(self, v);
    }
    pub fn get_width(self: *const ISVGRectElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn putref_height(self: *const ISVGRectElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_height(self, v);
    }
    pub fn get_height(self: *const ISVGRectElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn putref_rx(self: *const ISVGRectElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_rx(self, v);
    }
    pub fn get_rx(self: *const ISVGRectElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_rx(self, p);
    }
    pub fn putref_ry(self: *const ISVGRectElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_ry(self, v);
    }
    pub fn get_ry(self: *const ISVGRectElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_ry(self, p);
    }
};

const IID_ISVGPolygonElement_Value = Guid.initString("30510519-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPolygonElement = &IID_ISVGPolygonElement_Value;
pub const ISVGPolygonElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGPolylineElement_Value = Guid.initString("30510518-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPolylineElement = &IID_ISVGPolylineElement_Value;
pub const ISVGPolylineElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGCircleElement_Value = Guid.initString("3059000a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGCircleElement = &IID_DispSVGCircleElement_Value;
pub const DispSVGCircleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGEllipseElement_Value = Guid.initString("3059000b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGEllipseElement = &IID_DispSVGEllipseElement_Value;
pub const DispSVGEllipseElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGLineElement_Value = Guid.initString("3059000c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGLineElement = &IID_DispSVGLineElement_Value;
pub const DispSVGLineElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGRectElement_Value = Guid.initString("30590009-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGRectElement = &IID_DispSVGRectElement_Value;
pub const DispSVGRectElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPolygonElement_Value = Guid.initString("3059000d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPolygonElement = &IID_DispSVGPolygonElement_Value;
pub const DispSVGPolygonElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGPolylineElement_Value = Guid.initString("3059000e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPolylineElement = &IID_DispSVGPolylineElement_Value;
pub const DispSVGPolylineElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGGElement_Value = Guid.initString("305104e8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGGElement = &IID_ISVGGElement_Value;
pub const ISVGGElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGGElement_Value = Guid.initString("30590002-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGGElement = &IID_DispSVGGElement_Value;
pub const DispSVGGElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGSymbolElement_Value = Guid.initString("305104ec-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGSymbolElement = &IID_ISVGSymbolElement_Value;
pub const ISVGSymbolElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGSymbolElement_Value = Guid.initString("30590004-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGSymbolElement = &IID_DispSVGSymbolElement_Value;
pub const DispSVGSymbolElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGDefsElement_Value = Guid.initString("305104e9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGDefsElement = &IID_ISVGDefsElement_Value;
pub const ISVGDefsElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGDefsElement_Value = Guid.initString("30590003-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGDefsElement = &IID_DispSVGDefsElement_Value;
pub const DispSVGDefsElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGAnimatedPathData_Value = Guid.initString("30510511-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAnimatedPathData = &IID_ISVGAnimatedPathData_Value;
pub const ISVGAnimatedPathData = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_pathSegList: *const fn(
            self: *const ISVGAnimatedPathData,
            v: ?*ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pathSegList: *const fn(
            self: *const ISVGAnimatedPathData,
            p: ?*?*ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
        putref_normalizedPathSegList: *const fn(
            self: *const ISVGAnimatedPathData,
            v: ?*ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_normalizedPathSegList: *const fn(
            self: *const ISVGAnimatedPathData,
            p: ?*?*ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
        putref_animatedPathSegList: *const fn(
            self: *const ISVGAnimatedPathData,
            v: ?*ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animatedPathSegList: *const fn(
            self: *const ISVGAnimatedPathData,
            p: ?*?*ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
        putref_animatedNormalizedPathSegList: *const fn(
            self: *const ISVGAnimatedPathData,
            v: ?*ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animatedNormalizedPathSegList: *const fn(
            self: *const ISVGAnimatedPathData,
            p: ?*?*ISVGPathSegList,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_pathSegList(self: *const ISVGAnimatedPathData, v: ?*ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_pathSegList(self, v);
    }
    pub fn get_pathSegList(self: *const ISVGAnimatedPathData, p: ?*?*ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.get_pathSegList(self, p);
    }
    pub fn putref_normalizedPathSegList(self: *const ISVGAnimatedPathData, v: ?*ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_normalizedPathSegList(self, v);
    }
    pub fn get_normalizedPathSegList(self: *const ISVGAnimatedPathData, p: ?*?*ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.get_normalizedPathSegList(self, p);
    }
    pub fn putref_animatedPathSegList(self: *const ISVGAnimatedPathData, v: ?*ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animatedPathSegList(self, v);
    }
    pub fn get_animatedPathSegList(self: *const ISVGAnimatedPathData, p: ?*?*ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.get_animatedPathSegList(self, p);
    }
    pub fn putref_animatedNormalizedPathSegList(self: *const ISVGAnimatedPathData, v: ?*ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_animatedNormalizedPathSegList(self, v);
    }
    pub fn get_animatedNormalizedPathSegList(self: *const ISVGAnimatedPathData, p: ?*?*ISVGPathSegList) callconv(.@"inline") HRESULT {
        return self.vtable.get_animatedNormalizedPathSegList(self, p);
    }
};

const IID_ISVGPathElement_Value = Guid.initString("30510512-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPathElement = &IID_ISVGPathElement_Value;
pub const ISVGPathElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_pathLength: *const fn(
            self: *const ISVGPathElement,
            v: ?*ISVGAnimatedNumber,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pathLength: *const fn(
            self: *const ISVGPathElement,
            p: ?*?*ISVGAnimatedNumber,
        ) callconv(.winapi) HRESULT,
        getTotalLength: *const fn(
            self: *const ISVGPathElement,
            pfltResult: ?*f32,
        ) callconv(.winapi) HRESULT,
        getPointAtLength: *const fn(
            self: *const ISVGPathElement,
            fltdistance: f32,
            ppPointResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        getPathSegAtLength: *const fn(
            self: *const ISVGPathElement,
            fltdistance: f32,
            plResult: ?*i32,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegClosePath: *const fn(
            self: *const ISVGPathElement,
            ppResult: ?*?*ISVGPathSegClosePath,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegMovetoAbs: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            ppResult: ?*?*ISVGPathSegMovetoAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegMovetoRel: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            ppResult: ?*?*ISVGPathSegMovetoRel,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegLinetoAbs: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            ppResult: ?*?*ISVGPathSegLinetoAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegLinetoRel: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            ppResult: ?*?*ISVGPathSegLinetoRel,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegCurvetoCubicAbs: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            x1: f32,
            y1: f32,
            x2: f32,
            y2: f32,
            ppResult: ?*?*ISVGPathSegCurvetoCubicAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegCurvetoCubicRel: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            x1: f32,
            y1: f32,
            x2: f32,
            y2: f32,
            ppResult: ?*?*ISVGPathSegCurvetoCubicRel,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegCurvetoQuadraticAbs: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            x1: f32,
            y1: f32,
            ppResult: ?*?*ISVGPathSegCurvetoQuadraticAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegCurvetoQuadraticRel: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            x1: f32,
            y1: f32,
            ppResult: ?*?*ISVGPathSegCurvetoQuadraticRel,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegArcAbs: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            r1: f32,
            r2: f32,
            angle: f32,
            largeArcFlag: i16,
            sweepFlag: i16,
            ppResult: ?*?*ISVGPathSegArcAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegArcRel: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            r1: f32,
            r2: f32,
            angle: f32,
            largeArcFlag: i16,
            sweepFlag: i16,
            ppResult: ?*?*ISVGPathSegArcRel,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegLinetoHorizontalAbs: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            ppResult: ?*?*ISVGPathSegLinetoHorizontalAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegLinetoHorizontalRel: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            ppResult: ?*?*ISVGPathSegLinetoHorizontalRel,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegLinetoVerticalAbs: *const fn(
            self: *const ISVGPathElement,
            y: f32,
            ppResult: ?*?*ISVGPathSegLinetoVerticalAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegLinetoVerticalRel: *const fn(
            self: *const ISVGPathElement,
            y: f32,
            ppResult: ?*?*ISVGPathSegLinetoVerticalRel,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegCurvetoCubicSmoothAbs: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            x2: f32,
            y2: f32,
            ppResult: ?*?*ISVGPathSegCurvetoCubicSmoothAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegCurvetoCubicSmoothRel: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            x2: f32,
            y2: f32,
            ppResult: ?*?*ISVGPathSegCurvetoCubicSmoothRel,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegCurvetoQuadraticSmoothAbs: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            ppResult: ?*?*ISVGPathSegCurvetoQuadraticSmoothAbs,
        ) callconv(.winapi) HRESULT,
        createSVGPathSegCurvetoQuadraticSmoothRel: *const fn(
            self: *const ISVGPathElement,
            x: f32,
            y: f32,
            ppResult: ?*?*ISVGPathSegCurvetoQuadraticSmoothRel,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_pathLength(self: *const ISVGPathElement, v: ?*ISVGAnimatedNumber) callconv(.@"inline") HRESULT {
        return self.vtable.putref_pathLength(self, v);
    }
    pub fn get_pathLength(self: *const ISVGPathElement, p: ?*?*ISVGAnimatedNumber) callconv(.@"inline") HRESULT {
        return self.vtable.get_pathLength(self, p);
    }
    pub fn getTotalLength(self: *const ISVGPathElement, pfltResult: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.getTotalLength(self, pfltResult);
    }
    pub fn getPointAtLength(self: *const ISVGPathElement, fltdistance: f32, ppPointResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.getPointAtLength(self, fltdistance, ppPointResult);
    }
    pub fn getPathSegAtLength(self: *const ISVGPathElement, fltdistance: f32, plResult: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.getPathSegAtLength(self, fltdistance, plResult);
    }
    pub fn createSVGPathSegClosePath(self: *const ISVGPathElement, ppResult: ?*?*ISVGPathSegClosePath) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegClosePath(self, ppResult);
    }
    pub fn createSVGPathSegMovetoAbs(self: *const ISVGPathElement, x: f32, y: f32, ppResult: ?*?*ISVGPathSegMovetoAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegMovetoAbs(self, x, y, ppResult);
    }
    pub fn createSVGPathSegMovetoRel(self: *const ISVGPathElement, x: f32, y: f32, ppResult: ?*?*ISVGPathSegMovetoRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegMovetoRel(self, x, y, ppResult);
    }
    pub fn createSVGPathSegLinetoAbs(self: *const ISVGPathElement, x: f32, y: f32, ppResult: ?*?*ISVGPathSegLinetoAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegLinetoAbs(self, x, y, ppResult);
    }
    pub fn createSVGPathSegLinetoRel(self: *const ISVGPathElement, x: f32, y: f32, ppResult: ?*?*ISVGPathSegLinetoRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegLinetoRel(self, x, y, ppResult);
    }
    pub fn createSVGPathSegCurvetoCubicAbs(self: *const ISVGPathElement, x: f32, y: f32, x1: f32, y1: f32, x2: f32, y2: f32, ppResult: ?*?*ISVGPathSegCurvetoCubicAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegCurvetoCubicAbs(self, x, y, x1, y1, x2, y2, ppResult);
    }
    pub fn createSVGPathSegCurvetoCubicRel(self: *const ISVGPathElement, x: f32, y: f32, x1: f32, y1: f32, x2: f32, y2: f32, ppResult: ?*?*ISVGPathSegCurvetoCubicRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegCurvetoCubicRel(self, x, y, x1, y1, x2, y2, ppResult);
    }
    pub fn createSVGPathSegCurvetoQuadraticAbs(self: *const ISVGPathElement, x: f32, y: f32, x1: f32, y1: f32, ppResult: ?*?*ISVGPathSegCurvetoQuadraticAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegCurvetoQuadraticAbs(self, x, y, x1, y1, ppResult);
    }
    pub fn createSVGPathSegCurvetoQuadraticRel(self: *const ISVGPathElement, x: f32, y: f32, x1: f32, y1: f32, ppResult: ?*?*ISVGPathSegCurvetoQuadraticRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegCurvetoQuadraticRel(self, x, y, x1, y1, ppResult);
    }
    pub fn createSVGPathSegArcAbs(self: *const ISVGPathElement, x: f32, y: f32, r1: f32, r2: f32, angle: f32, largeArcFlag: i16, sweepFlag: i16, ppResult: ?*?*ISVGPathSegArcAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegArcAbs(self, x, y, r1, r2, angle, largeArcFlag, sweepFlag, ppResult);
    }
    pub fn createSVGPathSegArcRel(self: *const ISVGPathElement, x: f32, y: f32, r1: f32, r2: f32, angle: f32, largeArcFlag: i16, sweepFlag: i16, ppResult: ?*?*ISVGPathSegArcRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegArcRel(self, x, y, r1, r2, angle, largeArcFlag, sweepFlag, ppResult);
    }
    pub fn createSVGPathSegLinetoHorizontalAbs(self: *const ISVGPathElement, x: f32, ppResult: ?*?*ISVGPathSegLinetoHorizontalAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegLinetoHorizontalAbs(self, x, ppResult);
    }
    pub fn createSVGPathSegLinetoHorizontalRel(self: *const ISVGPathElement, x: f32, ppResult: ?*?*ISVGPathSegLinetoHorizontalRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegLinetoHorizontalRel(self, x, ppResult);
    }
    pub fn createSVGPathSegLinetoVerticalAbs(self: *const ISVGPathElement, y: f32, ppResult: ?*?*ISVGPathSegLinetoVerticalAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegLinetoVerticalAbs(self, y, ppResult);
    }
    pub fn createSVGPathSegLinetoVerticalRel(self: *const ISVGPathElement, y: f32, ppResult: ?*?*ISVGPathSegLinetoVerticalRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegLinetoVerticalRel(self, y, ppResult);
    }
    pub fn createSVGPathSegCurvetoCubicSmoothAbs(self: *const ISVGPathElement, x: f32, y: f32, x2: f32, y2: f32, ppResult: ?*?*ISVGPathSegCurvetoCubicSmoothAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegCurvetoCubicSmoothAbs(self, x, y, x2, y2, ppResult);
    }
    pub fn createSVGPathSegCurvetoCubicSmoothRel(self: *const ISVGPathElement, x: f32, y: f32, x2: f32, y2: f32, ppResult: ?*?*ISVGPathSegCurvetoCubicSmoothRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegCurvetoCubicSmoothRel(self, x, y, x2, y2, ppResult);
    }
    pub fn createSVGPathSegCurvetoQuadraticSmoothAbs(self: *const ISVGPathElement, x: f32, y: f32, ppResult: ?*?*ISVGPathSegCurvetoQuadraticSmoothAbs) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegCurvetoQuadraticSmoothAbs(self, x, y, ppResult);
    }
    pub fn createSVGPathSegCurvetoQuadraticSmoothRel(self: *const ISVGPathElement, x: f32, y: f32, ppResult: ?*?*ISVGPathSegCurvetoQuadraticSmoothRel) callconv(.@"inline") HRESULT {
        return self.vtable.createSVGPathSegCurvetoQuadraticSmoothRel(self, x, y, ppResult);
    }
};

const IID_DispSVGPathElement_Value = Guid.initString("30590011-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGPathElement = &IID_DispSVGPathElement_Value;
pub const DispSVGPathElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGPreserveAspectRatio_Value = Guid.initString("305104fa-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGPreserveAspectRatio = &IID_ISVGPreserveAspectRatio_Value;
pub const ISVGPreserveAspectRatio = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_align: *const fn(
            self: *const ISVGPreserveAspectRatio,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_align: *const fn(
            self: *const ISVGPreserveAspectRatio,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_meetOrSlice: *const fn(
            self: *const ISVGPreserveAspectRatio,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_meetOrSlice: *const fn(
            self: *const ISVGPreserveAspectRatio,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_align(self: *const ISVGPreserveAspectRatio, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_align(self, v);
    }
    pub fn get_align(self: *const ISVGPreserveAspectRatio, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_align(self, p);
    }
    pub fn put_meetOrSlice(self: *const ISVGPreserveAspectRatio, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_meetOrSlice(self, v);
    }
    pub fn get_meetOrSlice(self: *const ISVGPreserveAspectRatio, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_meetOrSlice(self, p);
    }
};

const IID_ISVGTextElement_Value = Guid.initString("3051051c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTextElement = &IID_ISVGTextElement_Value;
pub const ISVGTextElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGTextElement_Value = Guid.initString("30590037-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGTextElement = &IID_DispSVGTextElement_Value;
pub const DispSVGTextElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGImageElement_Value = Guid.initString("305104f0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGImageElement = &IID_ISVGImageElement_Value;
pub const ISVGImageElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_x: *const fn(
            self: *const ISVGImageElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGImageElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y: *const fn(
            self: *const ISVGImageElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGImageElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_width: *const fn(
            self: *const ISVGImageElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ISVGImageElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_height: *const fn(
            self: *const ISVGImageElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const ISVGImageElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_x(self: *const ISVGImageElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x(self, v);
    }
    pub fn get_x(self: *const ISVGImageElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn putref_y(self: *const ISVGImageElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y(self, v);
    }
    pub fn get_y(self: *const ISVGImageElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn putref_width(self: *const ISVGImageElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_width(self, v);
    }
    pub fn get_width(self: *const ISVGImageElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn putref_height(self: *const ISVGImageElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_height(self, v);
    }
    pub fn get_height(self: *const ISVGImageElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
};

const IID_DispSVGImageElement_Value = Guid.initString("30590027-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGImageElement = &IID_DispSVGImageElement_Value;
pub const DispSVGImageElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGStopElement_Value = Guid.initString("3051052b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGStopElement = &IID_ISVGStopElement_Value;
pub const ISVGStopElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_offset: *const fn(
            self: *const ISVGStopElement,
            v: ?*ISVGAnimatedNumber,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_offset: *const fn(
            self: *const ISVGStopElement,
            p: ?*?*ISVGAnimatedNumber,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_offset(self: *const ISVGStopElement, v: ?*ISVGAnimatedNumber) callconv(.@"inline") HRESULT {
        return self.vtable.putref_offset(self, v);
    }
    pub fn get_offset(self: *const ISVGStopElement, p: ?*?*ISVGAnimatedNumber) callconv(.@"inline") HRESULT {
        return self.vtable.get_offset(self, p);
    }
};

const IID_DispSVGStopElement_Value = Guid.initString("3059002d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGStopElement = &IID_DispSVGStopElement_Value;
pub const DispSVGStopElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGGradientElement_Value = Guid.initString("30510528-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGGradientElement = &IID_ISVGGradientElement_Value;
pub const ISVGGradientElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_gradientUnits: *const fn(
            self: *const ISVGGradientElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_gradientUnits: *const fn(
            self: *const ISVGGradientElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        putref_gradientTransform: *const fn(
            self: *const ISVGGradientElement,
            v: ?*ISVGAnimatedTransformList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_gradientTransform: *const fn(
            self: *const ISVGGradientElement,
            p: ?*?*ISVGAnimatedTransformList,
        ) callconv(.winapi) HRESULT,
        putref_spreadMethod: *const fn(
            self: *const ISVGGradientElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_spreadMethod: *const fn(
            self: *const ISVGGradientElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_gradientUnits(self: *const ISVGGradientElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_gradientUnits(self, v);
    }
    pub fn get_gradientUnits(self: *const ISVGGradientElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_gradientUnits(self, p);
    }
    pub fn putref_gradientTransform(self: *const ISVGGradientElement, v: ?*ISVGAnimatedTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_gradientTransform(self, v);
    }
    pub fn get_gradientTransform(self: *const ISVGGradientElement, p: ?*?*ISVGAnimatedTransformList) callconv(.@"inline") HRESULT {
        return self.vtable.get_gradientTransform(self, p);
    }
    pub fn putref_spreadMethod(self: *const ISVGGradientElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_spreadMethod(self, v);
    }
    pub fn get_spreadMethod(self: *const ISVGGradientElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_spreadMethod(self, p);
    }
};

const IID_DispSVGGradientElement_Value = Guid.initString("3059002e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGGradientElement = &IID_DispSVGGradientElement_Value;
pub const DispSVGGradientElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGLinearGradientElement_Value = Guid.initString("30510529-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGLinearGradientElement = &IID_ISVGLinearGradientElement_Value;
pub const ISVGLinearGradientElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_x1: *const fn(
            self: *const ISVGLinearGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x1: *const fn(
            self: *const ISVGLinearGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y1: *const fn(
            self: *const ISVGLinearGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y1: *const fn(
            self: *const ISVGLinearGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_x2: *const fn(
            self: *const ISVGLinearGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x2: *const fn(
            self: *const ISVGLinearGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y2: *const fn(
            self: *const ISVGLinearGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y2: *const fn(
            self: *const ISVGLinearGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_x1(self: *const ISVGLinearGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x1(self, v);
    }
    pub fn get_x1(self: *const ISVGLinearGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x1(self, p);
    }
    pub fn putref_y1(self: *const ISVGLinearGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y1(self, v);
    }
    pub fn get_y1(self: *const ISVGLinearGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y1(self, p);
    }
    pub fn putref_x2(self: *const ISVGLinearGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x2(self, v);
    }
    pub fn get_x2(self: *const ISVGLinearGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x2(self, p);
    }
    pub fn putref_y2(self: *const ISVGLinearGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y2(self, v);
    }
    pub fn get_y2(self: *const ISVGLinearGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y2(self, p);
    }
};

const IID_DispSVGLinearGradientElement_Value = Guid.initString("3059002a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGLinearGradientElement = &IID_DispSVGLinearGradientElement_Value;
pub const DispSVGLinearGradientElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGRadialGradientElement_Value = Guid.initString("3051052a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGRadialGradientElement = &IID_ISVGRadialGradientElement_Value;
pub const ISVGRadialGradientElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_cx: *const fn(
            self: *const ISVGRadialGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cx: *const fn(
            self: *const ISVGRadialGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_cy: *const fn(
            self: *const ISVGRadialGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cy: *const fn(
            self: *const ISVGRadialGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_r: *const fn(
            self: *const ISVGRadialGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_r: *const fn(
            self: *const ISVGRadialGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_fx: *const fn(
            self: *const ISVGRadialGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fx: *const fn(
            self: *const ISVGRadialGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_fy: *const fn(
            self: *const ISVGRadialGradientElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fy: *const fn(
            self: *const ISVGRadialGradientElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_cx(self: *const ISVGRadialGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_cx(self, v);
    }
    pub fn get_cx(self: *const ISVGRadialGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_cx(self, p);
    }
    pub fn putref_cy(self: *const ISVGRadialGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_cy(self, v);
    }
    pub fn get_cy(self: *const ISVGRadialGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_cy(self, p);
    }
    pub fn putref_r(self: *const ISVGRadialGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_r(self, v);
    }
    pub fn get_r(self: *const ISVGRadialGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_r(self, p);
    }
    pub fn putref_fx(self: *const ISVGRadialGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_fx(self, v);
    }
    pub fn get_fx(self: *const ISVGRadialGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_fx(self, p);
    }
    pub fn putref_fy(self: *const ISVGRadialGradientElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_fy(self, v);
    }
    pub fn get_fy(self: *const ISVGRadialGradientElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_fy(self, p);
    }
};

const IID_DispSVGRadialGradientElement_Value = Guid.initString("3059002b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGRadialGradientElement = &IID_DispSVGRadialGradientElement_Value;
pub const DispSVGRadialGradientElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGMaskElement_Value = Guid.initString("3051052e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGMaskElement = &IID_ISVGMaskElement_Value;
pub const ISVGMaskElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_maskUnits: *const fn(
            self: *const ISVGMaskElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maskUnits: *const fn(
            self: *const ISVGMaskElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        putref_maskContentUnits: *const fn(
            self: *const ISVGMaskElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maskContentUnits: *const fn(
            self: *const ISVGMaskElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        putref_x: *const fn(
            self: *const ISVGMaskElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGMaskElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_y: *const fn(
            self: *const ISVGMaskElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGMaskElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_width: *const fn(
            self: *const ISVGMaskElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const ISVGMaskElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_height: *const fn(
            self: *const ISVGMaskElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const ISVGMaskElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_maskUnits(self: *const ISVGMaskElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_maskUnits(self, v);
    }
    pub fn get_maskUnits(self: *const ISVGMaskElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_maskUnits(self, p);
    }
    pub fn putref_maskContentUnits(self: *const ISVGMaskElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_maskContentUnits(self, v);
    }
    pub fn get_maskContentUnits(self: *const ISVGMaskElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_maskContentUnits(self, p);
    }
    pub fn putref_x(self: *const ISVGMaskElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x(self, v);
    }
    pub fn get_x(self: *const ISVGMaskElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn putref_y(self: *const ISVGMaskElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y(self, v);
    }
    pub fn get_y(self: *const ISVGMaskElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn putref_width(self: *const ISVGMaskElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_width(self, v);
    }
    pub fn get_width(self: *const ISVGMaskElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn putref_height(self: *const ISVGMaskElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_height(self, v);
    }
    pub fn get_height(self: *const ISVGMaskElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
};

const IID_DispSVGMaskElement_Value = Guid.initString("3059003c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGMaskElement = &IID_DispSVGMaskElement_Value;
pub const DispSVGMaskElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGMarkerElement_Value = Guid.initString("30510525-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGMarkerElement = &IID_ISVGMarkerElement_Value;
pub const ISVGMarkerElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_refX: *const fn(
            self: *const ISVGMarkerElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_refX: *const fn(
            self: *const ISVGMarkerElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_refY: *const fn(
            self: *const ISVGMarkerElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_refY: *const fn(
            self: *const ISVGMarkerElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_markerUnits: *const fn(
            self: *const ISVGMarkerElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_markerUnits: *const fn(
            self: *const ISVGMarkerElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        putref_markerWidth: *const fn(
            self: *const ISVGMarkerElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_markerWidth: *const fn(
            self: *const ISVGMarkerElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_markerHeight: *const fn(
            self: *const ISVGMarkerElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_markerHeight: *const fn(
            self: *const ISVGMarkerElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_orientType: *const fn(
            self: *const ISVGMarkerElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_orientType: *const fn(
            self: *const ISVGMarkerElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        putref_orientAngle: *const fn(
            self: *const ISVGMarkerElement,
            v: ?*ISVGAnimatedAngle,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_orientAngle: *const fn(
            self: *const ISVGMarkerElement,
            p: ?*?*ISVGAnimatedAngle,
        ) callconv(.winapi) HRESULT,
        setOrientToAuto: *const fn(
            self: *const ISVGMarkerElement,
        ) callconv(.winapi) HRESULT,
        setOrientToAngle: *const fn(
            self: *const ISVGMarkerElement,
            pSVGAngle: ?*ISVGAngle,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_refX(self: *const ISVGMarkerElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_refX(self, v);
    }
    pub fn get_refX(self: *const ISVGMarkerElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_refX(self, p);
    }
    pub fn putref_refY(self: *const ISVGMarkerElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_refY(self, v);
    }
    pub fn get_refY(self: *const ISVGMarkerElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_refY(self, p);
    }
    pub fn putref_markerUnits(self: *const ISVGMarkerElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_markerUnits(self, v);
    }
    pub fn get_markerUnits(self: *const ISVGMarkerElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_markerUnits(self, p);
    }
    pub fn putref_markerWidth(self: *const ISVGMarkerElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_markerWidth(self, v);
    }
    pub fn get_markerWidth(self: *const ISVGMarkerElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_markerWidth(self, p);
    }
    pub fn putref_markerHeight(self: *const ISVGMarkerElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_markerHeight(self, v);
    }
    pub fn get_markerHeight(self: *const ISVGMarkerElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_markerHeight(self, p);
    }
    pub fn putref_orientType(self: *const ISVGMarkerElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_orientType(self, v);
    }
    pub fn get_orientType(self: *const ISVGMarkerElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_orientType(self, p);
    }
    pub fn putref_orientAngle(self: *const ISVGMarkerElement, v: ?*ISVGAnimatedAngle) callconv(.@"inline") HRESULT {
        return self.vtable.putref_orientAngle(self, v);
    }
    pub fn get_orientAngle(self: *const ISVGMarkerElement, p: ?*?*ISVGAnimatedAngle) callconv(.@"inline") HRESULT {
        return self.vtable.get_orientAngle(self, p);
    }
    pub fn setOrientToAuto(self: *const ISVGMarkerElement) callconv(.@"inline") HRESULT {
        return self.vtable.setOrientToAuto(self);
    }
    pub fn setOrientToAngle(self: *const ISVGMarkerElement, pSVGAngle: ?*ISVGAngle) callconv(.@"inline") HRESULT {
        return self.vtable.setOrientToAngle(self, pSVGAngle);
    }
};

const IID_DispSVGMarkerElement_Value = Guid.initString("30590036-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGMarkerElement = &IID_DispSVGMarkerElement_Value;
pub const DispSVGMarkerElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGZoomEvent_Value = Guid.initString("3051054e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGZoomEvent = &IID_ISVGZoomEvent_Value;
pub const ISVGZoomEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_zoomRectScreen: *const fn(
            self: *const ISVGZoomEvent,
            p: ?*?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_previousScale: *const fn(
            self: *const ISVGZoomEvent,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_previousTranslate: *const fn(
            self: *const ISVGZoomEvent,
            p: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_newScale: *const fn(
            self: *const ISVGZoomEvent,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_newTranslate: *const fn(
            self: *const ISVGZoomEvent,
            p: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_zoomRectScreen(self: *const ISVGZoomEvent, p: ?*?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.get_zoomRectScreen(self, p);
    }
    pub fn get_previousScale(self: *const ISVGZoomEvent, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_previousScale(self, p);
    }
    pub fn get_previousTranslate(self: *const ISVGZoomEvent, p: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.get_previousTranslate(self, p);
    }
    pub fn get_newScale(self: *const ISVGZoomEvent, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_newScale(self, p);
    }
    pub fn get_newTranslate(self: *const ISVGZoomEvent, p: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.get_newTranslate(self, p);
    }
};

const IID_DispSVGZoomEvent_Value = Guid.initString("30590031-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGZoomEvent = &IID_DispSVGZoomEvent_Value;
pub const DispSVGZoomEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGAElement_Value = Guid.initString("3051054b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGAElement = &IID_ISVGAElement_Value;
pub const ISVGAElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_target: *const fn(
            self: *const ISVGAElement,
            v: ?*ISVGAnimatedString,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const ISVGAElement,
            p: ?*?*ISVGAnimatedString,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_target(self: *const ISVGAElement, v: ?*ISVGAnimatedString) callconv(.@"inline") HRESULT {
        return self.vtable.putref_target(self, v);
    }
    pub fn get_target(self: *const ISVGAElement, p: ?*?*ISVGAnimatedString) callconv(.@"inline") HRESULT {
        return self.vtable.get_target(self, p);
    }
};

const IID_DispSVGAElement_Value = Guid.initString("30590033-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGAElement = &IID_DispSVGAElement_Value;
pub const DispSVGAElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGViewElement_Value = Guid.initString("3051054c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGViewElement = &IID_ISVGViewElement_Value;
pub const ISVGViewElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_viewTarget: *const fn(
            self: *const ISVGViewElement,
            v: ?*ISVGStringList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_viewTarget: *const fn(
            self: *const ISVGViewElement,
            p: ?*?*ISVGStringList,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_viewTarget(self: *const ISVGViewElement, v: ?*ISVGStringList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_viewTarget(self, v);
    }
    pub fn get_viewTarget(self: *const ISVGViewElement, p: ?*?*ISVGStringList) callconv(.@"inline") HRESULT {
        return self.vtable.get_viewTarget(self, p);
    }
};

const IID_DispSVGViewElement_Value = Guid.initString("30590034-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGViewElement = &IID_DispSVGViewElement_Value;
pub const DispSVGViewElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLMediaError_Value = Guid.initString("30510704-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMediaError = &IID_IHTMLMediaError_Value;
pub const IHTMLMediaError = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_code: *const fn(
            self: *const IHTMLMediaError,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_code(self: *const IHTMLMediaError, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_code(self, p);
    }
};

const IID_IHTMLTimeRanges_Value = Guid.initString("30510705-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTimeRanges = &IID_IHTMLTimeRanges_Value;
pub const IHTMLTimeRanges = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLTimeRanges,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        start: *const fn(
            self: *const IHTMLTimeRanges,
            index: i32,
            startTime: ?*f32,
        ) callconv(.winapi) HRESULT,
        end: *const fn(
            self: *const IHTMLTimeRanges,
            index: i32,
            endTime: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLTimeRanges, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn start(self: *const IHTMLTimeRanges, index: i32, startTime: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.start(self, index, startTime);
    }
    pub fn end(self: *const IHTMLTimeRanges, index: i32, endTime: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.end(self, index, endTime);
    }
};

const IID_IHTMLTimeRanges2_Value = Guid.initString("3051080b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLTimeRanges2 = &IID_IHTMLTimeRanges2_Value;
pub const IHTMLTimeRanges2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        startDouble: *const fn(
            self: *const IHTMLTimeRanges2,
            index: i32,
            startTime: ?*f64,
        ) callconv(.winapi) HRESULT,
        endDouble: *const fn(
            self: *const IHTMLTimeRanges2,
            index: i32,
            endTime: ?*f64,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn startDouble(self: *const IHTMLTimeRanges2, index: i32, startTime: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.startDouble(self, index, startTime);
    }
    pub fn endDouble(self: *const IHTMLTimeRanges2, index: i32, endTime: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.endDouble(self, index, endTime);
    }
};

const IID_IHTMLMediaElement_Value = Guid.initString("30510706-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMediaElement = &IID_IHTMLMediaElement_Value;
pub const IHTMLMediaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_error: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*?*IHTMLMediaError,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLMediaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentSrc: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_networkState: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_preload: *const fn(
            self: *const IHTMLMediaElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_preload: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_buffered: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*?*IHTMLTimeRanges,
        ) callconv(.winapi) HRESULT,
        load: *const fn(
            self: *const IHTMLMediaElement,
        ) callconv(.winapi) HRESULT,
        canPlayType: *const fn(
            self: *const IHTMLMediaElement,
            type: ?BSTR,
            canPlay: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_seeking: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentTime: *const fn(
            self: *const IHTMLMediaElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentTime: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_initialTime: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_duration: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_paused: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultPlaybackRate: *const fn(
            self: *const IHTMLMediaElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultPlaybackRate: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_playbackRate: *const fn(
            self: *const IHTMLMediaElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_playbackRate: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_played: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*?*IHTMLTimeRanges,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_seekable: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*?*IHTMLTimeRanges,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ended: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_autoplay: *const fn(
            self: *const IHTMLMediaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_autoplay: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_loop: *const fn(
            self: *const IHTMLMediaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loop: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        play: *const fn(
            self: *const IHTMLMediaElement,
        ) callconv(.winapi) HRESULT,
        pause: *const fn(
            self: *const IHTMLMediaElement,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_controls: *const fn(
            self: *const IHTMLMediaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_controls: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_volume: *const fn(
            self: *const IHTMLMediaElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_volume: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_muted: *const fn(
            self: *const IHTMLMediaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_muted: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_autobuffer: *const fn(
            self: *const IHTMLMediaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_autobuffer: *const fn(
            self: *const IHTMLMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_error(self: *const IHTMLMediaElement, p: ?*?*IHTMLMediaError) callconv(.@"inline") HRESULT {
        return self.vtable.get_error(self, p);
    }
    pub fn put_src(self: *const IHTMLMediaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLMediaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn get_currentSrc(self: *const IHTMLMediaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentSrc(self, p);
    }
    pub fn get_networkState(self: *const IHTMLMediaElement, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_networkState(self, p);
    }
    pub fn put_preload(self: *const IHTMLMediaElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_preload(self, v);
    }
    pub fn get_preload(self: *const IHTMLMediaElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_preload(self, p);
    }
    pub fn get_buffered(self: *const IHTMLMediaElement, p: ?*?*IHTMLTimeRanges) callconv(.@"inline") HRESULT {
        return self.vtable.get_buffered(self, p);
    }
    pub fn load(self: *const IHTMLMediaElement) callconv(.@"inline") HRESULT {
        return self.vtable.load(self);
    }
    pub fn canPlayType(self: *const IHTMLMediaElement, @"type": ?BSTR, canPlay: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.canPlayType(self, @"type", canPlay);
    }
    pub fn get_seeking(self: *const IHTMLMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_seeking(self, p);
    }
    pub fn put_currentTime(self: *const IHTMLMediaElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_currentTime(self, v);
    }
    pub fn get_currentTime(self: *const IHTMLMediaElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentTime(self, p);
    }
    pub fn get_initialTime(self: *const IHTMLMediaElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_initialTime(self, p);
    }
    pub fn get_duration(self: *const IHTMLMediaElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_duration(self, p);
    }
    pub fn get_paused(self: *const IHTMLMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_paused(self, p);
    }
    pub fn put_defaultPlaybackRate(self: *const IHTMLMediaElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultPlaybackRate(self, v);
    }
    pub fn get_defaultPlaybackRate(self: *const IHTMLMediaElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultPlaybackRate(self, p);
    }
    pub fn put_playbackRate(self: *const IHTMLMediaElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_playbackRate(self, v);
    }
    pub fn get_playbackRate(self: *const IHTMLMediaElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_playbackRate(self, p);
    }
    pub fn get_played(self: *const IHTMLMediaElement, p: ?*?*IHTMLTimeRanges) callconv(.@"inline") HRESULT {
        return self.vtable.get_played(self, p);
    }
    pub fn get_seekable(self: *const IHTMLMediaElement, p: ?*?*IHTMLTimeRanges) callconv(.@"inline") HRESULT {
        return self.vtable.get_seekable(self, p);
    }
    pub fn get_ended(self: *const IHTMLMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_ended(self, p);
    }
    pub fn put_autoplay(self: *const IHTMLMediaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_autoplay(self, v);
    }
    pub fn get_autoplay(self: *const IHTMLMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_autoplay(self, p);
    }
    pub fn put_loop(self: *const IHTMLMediaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_loop(self, v);
    }
    pub fn get_loop(self: *const IHTMLMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_loop(self, p);
    }
    pub fn play(self: *const IHTMLMediaElement) callconv(.@"inline") HRESULT {
        return self.vtable.play(self);
    }
    pub fn pause(self: *const IHTMLMediaElement) callconv(.@"inline") HRESULT {
        return self.vtable.pause(self);
    }
    pub fn put_controls(self: *const IHTMLMediaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_controls(self, v);
    }
    pub fn get_controls(self: *const IHTMLMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_controls(self, p);
    }
    pub fn put_volume(self: *const IHTMLMediaElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_volume(self, v);
    }
    pub fn get_volume(self: *const IHTMLMediaElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_volume(self, p);
    }
    pub fn put_muted(self: *const IHTMLMediaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_muted(self, v);
    }
    pub fn get_muted(self: *const IHTMLMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_muted(self, p);
    }
    pub fn put_autobuffer(self: *const IHTMLMediaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_autobuffer(self, v);
    }
    pub fn get_autobuffer(self: *const IHTMLMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_autobuffer(self, p);
    }
};

const IID_IHTMLMediaElement2_Value = Guid.initString("30510809-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMediaElement2 = &IID_IHTMLMediaElement2_Value;
pub const IHTMLMediaElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentTimeDouble: *const fn(
            self: *const IHTMLMediaElement2,
            v: f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentTimeDouble: *const fn(
            self: *const IHTMLMediaElement2,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_initialTimeDouble: *const fn(
            self: *const IHTMLMediaElement2,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_durationDouble: *const fn(
            self: *const IHTMLMediaElement2,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultPlaybackRateDouble: *const fn(
            self: *const IHTMLMediaElement2,
            v: f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultPlaybackRateDouble: *const fn(
            self: *const IHTMLMediaElement2,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_playbackRateDouble: *const fn(
            self: *const IHTMLMediaElement2,
            v: f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_playbackRateDouble: *const fn(
            self: *const IHTMLMediaElement2,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_volumeDouble: *const fn(
            self: *const IHTMLMediaElement2,
            v: f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_volumeDouble: *const fn(
            self: *const IHTMLMediaElement2,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_currentTimeDouble(self: *const IHTMLMediaElement2, v: f64) callconv(.@"inline") HRESULT {
        return self.vtable.put_currentTimeDouble(self, v);
    }
    pub fn get_currentTimeDouble(self: *const IHTMLMediaElement2, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentTimeDouble(self, p);
    }
    pub fn get_initialTimeDouble(self: *const IHTMLMediaElement2, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_initialTimeDouble(self, p);
    }
    pub fn get_durationDouble(self: *const IHTMLMediaElement2, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_durationDouble(self, p);
    }
    pub fn put_defaultPlaybackRateDouble(self: *const IHTMLMediaElement2, v: f64) callconv(.@"inline") HRESULT {
        return self.vtable.put_defaultPlaybackRateDouble(self, v);
    }
    pub fn get_defaultPlaybackRateDouble(self: *const IHTMLMediaElement2, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_defaultPlaybackRateDouble(self, p);
    }
    pub fn put_playbackRateDouble(self: *const IHTMLMediaElement2, v: f64) callconv(.@"inline") HRESULT {
        return self.vtable.put_playbackRateDouble(self, v);
    }
    pub fn get_playbackRateDouble(self: *const IHTMLMediaElement2, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_playbackRateDouble(self, p);
    }
    pub fn put_volumeDouble(self: *const IHTMLMediaElement2, v: f64) callconv(.@"inline") HRESULT {
        return self.vtable.put_volumeDouble(self, v);
    }
    pub fn get_volumeDouble(self: *const IHTMLMediaElement2, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_volumeDouble(self, p);
    }
};

const IID_IHTMLMSMediaElement_Value = Guid.initString("30510792-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLMSMediaElement = &IID_IHTMLMSMediaElement_Value;
pub const IHTMLMSMediaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msPlayToDisabled: *const fn(
            self: *const IHTMLMSMediaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msPlayToDisabled: *const fn(
            self: *const IHTMLMSMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_msPlayToPrimary: *const fn(
            self: *const IHTMLMSMediaElement,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msPlayToPrimary: *const fn(
            self: *const IHTMLMSMediaElement,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_msPlayToDisabled(self: *const IHTMLMSMediaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_msPlayToDisabled(self, v);
    }
    pub fn get_msPlayToDisabled(self: *const IHTMLMSMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_msPlayToDisabled(self, p);
    }
    pub fn put_msPlayToPrimary(self: *const IHTMLMSMediaElement, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_msPlayToPrimary(self, v);
    }
    pub fn get_msPlayToPrimary(self: *const IHTMLMSMediaElement, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_msPlayToPrimary(self, p);
    }
};

const IID_IHTMLSourceElement_Value = Guid.initString("30510707-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLSourceElement = &IID_IHTMLSourceElement_Value;
pub const IHTMLSourceElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_src: *const fn(
            self: *const IHTMLSourceElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_src: *const fn(
            self: *const IHTMLSourceElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const IHTMLSourceElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLSourceElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_media: *const fn(
            self: *const IHTMLSourceElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const IHTMLSourceElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_src(self: *const IHTMLSourceElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_src(self, v);
    }
    pub fn get_src(self: *const IHTMLSourceElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_src(self, p);
    }
    pub fn put_type(self: *const IHTMLSourceElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const IHTMLSourceElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_media(self: *const IHTMLSourceElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_media(self, v);
    }
    pub fn get_media(self: *const IHTMLSourceElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
};

const IID_IHTMLAudioElement_Value = Guid.initString("30510708-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAudioElement = &IID_IHTMLAudioElement_Value;
pub const IHTMLAudioElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLVideoElement_Value = Guid.initString("30510709-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLVideoElement = &IID_IHTMLVideoElement_Value;
pub const IHTMLVideoElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_width: *const fn(
            self: *const IHTMLVideoElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IHTMLVideoElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_height: *const fn(
            self: *const IHTMLVideoElement,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IHTMLVideoElement,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_videoWidth: *const fn(
            self: *const IHTMLVideoElement,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_videoHeight: *const fn(
            self: *const IHTMLVideoElement,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_poster: *const fn(
            self: *const IHTMLVideoElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_poster: *const fn(
            self: *const IHTMLVideoElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_width(self: *const IHTMLVideoElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_width(self, v);
    }
    pub fn get_width(self: *const IHTMLVideoElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn put_height(self: *const IHTMLVideoElement, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_height(self, v);
    }
    pub fn get_height(self: *const IHTMLVideoElement, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn get_videoWidth(self: *const IHTMLVideoElement, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_videoWidth(self, p);
    }
    pub fn get_videoHeight(self: *const IHTMLVideoElement, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_videoHeight(self, p);
    }
    pub fn put_poster(self: *const IHTMLVideoElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_poster(self, v);
    }
    pub fn get_poster(self: *const IHTMLVideoElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_poster(self, p);
    }
};

const IID_IHTMLAudioElementFactory_Value = Guid.initString("305107eb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAudioElementFactory = &IID_IHTMLAudioElementFactory_Value;
pub const IHTMLAudioElementFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        create: *const fn(
            self: *const IHTMLAudioElementFactory,
            src: VARIANT,
            __MIDL__IHTMLAudioElementFactory0000: ?*?*IHTMLAudioElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn create(self: *const IHTMLAudioElementFactory, src: VARIANT, __MIDL__IHTMLAudioElementFactory0000: ?*?*IHTMLAudioElement) callconv(.@"inline") HRESULT {
        return self.vtable.create(self, src, __MIDL__IHTMLAudioElementFactory0000);
    }
};

const IID_DispHTMLMediaError_Value = Guid.initString("30590086-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLMediaError = &IID_DispHTMLMediaError_Value;
pub const DispHTMLMediaError = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLTimeRanges_Value = Guid.initString("30590087-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLTimeRanges = &IID_DispHTMLTimeRanges_Value;
pub const DispHTMLTimeRanges = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLMediaElement_Value = Guid.initString("30590088-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLMediaElement = &IID_DispHTMLMediaElement_Value;
pub const DispHTMLMediaElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLSourceElement_Value = Guid.initString("30590089-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLSourceElement = &IID_DispHTMLSourceElement_Value;
pub const DispHTMLSourceElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLAudioElement_Value = Guid.initString("3059008a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLAudioElement = &IID_DispHTMLAudioElement_Value;
pub const DispHTMLAudioElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLVideoElement_Value = Guid.initString("3059008b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLVideoElement = &IID_DispHTMLVideoElement_Value;
pub const DispHTMLVideoElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGSwitchElement_Value = Guid.initString("305104f1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGSwitchElement = &IID_ISVGSwitchElement_Value;
pub const ISVGSwitchElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGSwitchElement_Value = Guid.initString("30590030-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGSwitchElement = &IID_DispSVGSwitchElement_Value;
pub const DispSVGSwitchElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGDescElement_Value = Guid.initString("305104ea-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGDescElement = &IID_ISVGDescElement_Value;
pub const ISVGDescElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGDescElement_Value = Guid.initString("30590005-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGDescElement = &IID_DispSVGDescElement_Value;
pub const DispSVGDescElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGTitleElement_Value = Guid.initString("305104eb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTitleElement = &IID_ISVGTitleElement_Value;
pub const ISVGTitleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGTitleElement_Value = Guid.initString("30590006-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGTitleElement = &IID_DispSVGTitleElement_Value;
pub const DispSVGTitleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGMetadataElement_Value = Guid.initString("30510560-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGMetadataElement = &IID_ISVGMetadataElement_Value;
pub const ISVGMetadataElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGMetadataElement_Value = Guid.initString("3059002f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGMetadataElement = &IID_DispSVGMetadataElement_Value;
pub const DispSVGMetadataElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGElementInstanceList_Value = Guid.initString("305104ef-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGElementInstanceList = &IID_ISVGElementInstanceList_Value;
pub const ISVGElementInstanceList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const ISVGElementInstanceList,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const ISVGElementInstanceList,
            index: i32,
            ppResult: ?*?*ISVGElementInstance,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const ISVGElementInstanceList, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const ISVGElementInstanceList, index: i32, ppResult: ?*?*ISVGElementInstance) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppResult);
    }
};

const IID_DispSVGElementInstance_Value = Guid.initString("30590007-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGElementInstance = &IID_DispSVGElementInstance_Value;
pub const DispSVGElementInstance = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGElementInstanceList_Value = Guid.initString("30590008-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGElementInstanceList = &IID_DispSVGElementInstanceList_Value;
pub const DispSVGElementInstanceList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMException_Value = Guid.initString("3051072b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMException = &IID_IDOMException_Value;
pub const IDOMException = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_code: *const fn(
            self: *const IDOMException,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_code: *const fn(
            self: *const IDOMException,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_message: *const fn(
            self: *const IDOMException,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_code(self: *const IDOMException, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_code(self, v);
    }
    pub fn get_code(self: *const IDOMException, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_code(self, p);
    }
    pub fn get_message(self: *const IDOMException, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_message(self, p);
    }
};

const IID_DispDOMException_Value = Guid.initString("30590094-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMException = &IID_DispDOMException_Value;
pub const DispDOMException = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRangeException_Value = Guid.initString("3051072d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IRangeException = &IID_IRangeException_Value;
pub const IRangeException = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_code: *const fn(
            self: *const IRangeException,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_code: *const fn(
            self: *const IRangeException,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_message: *const fn(
            self: *const IRangeException,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_code(self: *const IRangeException, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_code(self, v);
    }
    pub fn get_code(self: *const IRangeException, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_code(self, p);
    }
    pub fn get_message(self: *const IRangeException, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_message(self, p);
    }
};

const IID_DispRangeException_Value = Guid.initString("30590095-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispRangeException = &IID_DispRangeException_Value;
pub const DispRangeException = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGException_Value = Guid.initString("3051072f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGException = &IID_ISVGException_Value;
pub const ISVGException = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_code: *const fn(
            self: *const ISVGException,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_code: *const fn(
            self: *const ISVGException,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_message: *const fn(
            self: *const ISVGException,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_code(self: *const ISVGException, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_code(self, v);
    }
    pub fn get_code(self: *const ISVGException, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_code(self, p);
    }
    pub fn get_message(self: *const ISVGException, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_message(self, p);
    }
};

const IID_DispSVGException_Value = Guid.initString("30590096-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGException = &IID_DispSVGException_Value;
pub const DispSVGException = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IEventException_Value = Guid.initString("3051073a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IEventException = &IID_IEventException_Value;
pub const IEventException = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_code: *const fn(
            self: *const IEventException,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_code: *const fn(
            self: *const IEventException,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_message: *const fn(
            self: *const IEventException,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_code(self: *const IEventException, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_code(self, v);
    }
    pub fn get_code(self: *const IEventException, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_code(self, p);
    }
    pub fn get_message(self: *const IEventException, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_message(self, p);
    }
};

const IID_DispEventException_Value = Guid.initString("30590099-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispEventException = &IID_DispEventException_Value;
pub const DispEventException = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGScriptElement_Value = Guid.initString("3051054d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGScriptElement = &IID_ISVGScriptElement_Value;
pub const ISVGScriptElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const ISVGScriptElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const ISVGScriptElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_type(self: *const ISVGScriptElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const ISVGScriptElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
};

const IID_DispSVGScriptElement_Value = Guid.initString("30590039-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGScriptElement = &IID_DispSVGScriptElement_Value;
pub const DispSVGScriptElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGStyleElement_Value = Guid.initString("305104f3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGStyleElement = &IID_ISVGStyleElement_Value;
pub const ISVGStyleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_type: *const fn(
            self: *const ISVGStyleElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const ISVGStyleElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_media: *const fn(
            self: *const ISVGStyleElement,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_media: *const fn(
            self: *const ISVGStyleElement,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_type(self: *const ISVGStyleElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_type(self, v);
    }
    pub fn get_type(self: *const ISVGStyleElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn put_media(self: *const ISVGStyleElement, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_media(self, v);
    }
    pub fn get_media(self: *const ISVGStyleElement, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_media(self, p);
    }
};

const IID_DispSVGStyleElement_Value = Guid.initString("30590029-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGStyleElement = &IID_DispSVGStyleElement_Value;
pub const DispSVGStyleElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGTextContentElement_Value = Guid.initString("3051051a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTextContentElement = &IID_ISVGTextContentElement_Value;
pub const ISVGTextContentElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_textLength: *const fn(
            self: *const ISVGTextContentElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textLength: *const fn(
            self: *const ISVGTextContentElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_lengthAdjust: *const fn(
            self: *const ISVGTextContentElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lengthAdjust: *const fn(
            self: *const ISVGTextContentElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        getNumberOfChars: *const fn(
            self: *const ISVGTextContentElement,
            pResult: ?*i32,
        ) callconv(.winapi) HRESULT,
        getComputedTextLength: *const fn(
            self: *const ISVGTextContentElement,
            pResult: ?*f32,
        ) callconv(.winapi) HRESULT,
        getSubStringLength: *const fn(
            self: *const ISVGTextContentElement,
            charnum: i32,
            nchars: i32,
            pResult: ?*f32,
        ) callconv(.winapi) HRESULT,
        getStartPositionOfChar: *const fn(
            self: *const ISVGTextContentElement,
            charnum: i32,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        getEndPositionOfChar: *const fn(
            self: *const ISVGTextContentElement,
            charnum: i32,
            ppResult: ?*?*ISVGPoint,
        ) callconv(.winapi) HRESULT,
        getExtentOfChar: *const fn(
            self: *const ISVGTextContentElement,
            charnum: i32,
            ppResult: ?*?*ISVGRect,
        ) callconv(.winapi) HRESULT,
        getRotationOfChar: *const fn(
            self: *const ISVGTextContentElement,
            charnum: i32,
            pResult: ?*f32,
        ) callconv(.winapi) HRESULT,
        getCharNumAtPosition: *const fn(
            self: *const ISVGTextContentElement,
            point: ?*ISVGPoint,
            pResult: ?*i32,
        ) callconv(.winapi) HRESULT,
        selectSubString: *const fn(
            self: *const ISVGTextContentElement,
            charnum: i32,
            nchars: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_textLength(self: *const ISVGTextContentElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_textLength(self, v);
    }
    pub fn get_textLength(self: *const ISVGTextContentElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_textLength(self, p);
    }
    pub fn putref_lengthAdjust(self: *const ISVGTextContentElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_lengthAdjust(self, v);
    }
    pub fn get_lengthAdjust(self: *const ISVGTextContentElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_lengthAdjust(self, p);
    }
    pub fn getNumberOfChars(self: *const ISVGTextContentElement, pResult: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.getNumberOfChars(self, pResult);
    }
    pub fn getComputedTextLength(self: *const ISVGTextContentElement, pResult: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.getComputedTextLength(self, pResult);
    }
    pub fn getSubStringLength(self: *const ISVGTextContentElement, charnum: i32, nchars: i32, pResult: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.getSubStringLength(self, charnum, nchars, pResult);
    }
    pub fn getStartPositionOfChar(self: *const ISVGTextContentElement, charnum: i32, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.getStartPositionOfChar(self, charnum, ppResult);
    }
    pub fn getEndPositionOfChar(self: *const ISVGTextContentElement, charnum: i32, ppResult: ?*?*ISVGPoint) callconv(.@"inline") HRESULT {
        return self.vtable.getEndPositionOfChar(self, charnum, ppResult);
    }
    pub fn getExtentOfChar(self: *const ISVGTextContentElement, charnum: i32, ppResult: ?*?*ISVGRect) callconv(.@"inline") HRESULT {
        return self.vtable.getExtentOfChar(self, charnum, ppResult);
    }
    pub fn getRotationOfChar(self: *const ISVGTextContentElement, charnum: i32, pResult: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.getRotationOfChar(self, charnum, pResult);
    }
    pub fn getCharNumAtPosition(self: *const ISVGTextContentElement, point: ?*ISVGPoint, pResult: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.getCharNumAtPosition(self, point, pResult);
    }
    pub fn selectSubString(self: *const ISVGTextContentElement, charnum: i32, nchars: i32) callconv(.@"inline") HRESULT {
        return self.vtable.selectSubString(self, charnum, nchars);
    }
};

const IID_DispSVGTextContentElement_Value = Guid.initString("30590035-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGTextContentElement = &IID_DispSVGTextContentElement_Value;
pub const DispSVGTextContentElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGTextPositioningElement_Value = Guid.initString("3051051b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTextPositioningElement = &IID_ISVGTextPositioningElement_Value;
pub const ISVGTextPositioningElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_x: *const fn(
            self: *const ISVGTextPositioningElement,
            v: ?*ISVGAnimatedLengthList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ISVGTextPositioningElement,
            p: ?*?*ISVGAnimatedLengthList,
        ) callconv(.winapi) HRESULT,
        putref_y: *const fn(
            self: *const ISVGTextPositioningElement,
            v: ?*ISVGAnimatedLengthList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_y: *const fn(
            self: *const ISVGTextPositioningElement,
            p: ?*?*ISVGAnimatedLengthList,
        ) callconv(.winapi) HRESULT,
        putref_dx: *const fn(
            self: *const ISVGTextPositioningElement,
            v: ?*ISVGAnimatedLengthList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dx: *const fn(
            self: *const ISVGTextPositioningElement,
            p: ?*?*ISVGAnimatedLengthList,
        ) callconv(.winapi) HRESULT,
        putref_dy: *const fn(
            self: *const ISVGTextPositioningElement,
            v: ?*ISVGAnimatedLengthList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dy: *const fn(
            self: *const ISVGTextPositioningElement,
            p: ?*?*ISVGAnimatedLengthList,
        ) callconv(.winapi) HRESULT,
        putref_rotate: *const fn(
            self: *const ISVGTextPositioningElement,
            v: ?*ISVGAnimatedNumberList,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rotate: *const fn(
            self: *const ISVGTextPositioningElement,
            p: ?*?*ISVGAnimatedNumberList,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_x(self: *const ISVGTextPositioningElement, v: ?*ISVGAnimatedLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_x(self, v);
    }
    pub fn get_x(self: *const ISVGTextPositioningElement, p: ?*?*ISVGAnimatedLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn putref_y(self: *const ISVGTextPositioningElement, v: ?*ISVGAnimatedLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_y(self, v);
    }
    pub fn get_y(self: *const ISVGTextPositioningElement, p: ?*?*ISVGAnimatedLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.get_y(self, p);
    }
    pub fn putref_dx(self: *const ISVGTextPositioningElement, v: ?*ISVGAnimatedLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_dx(self, v);
    }
    pub fn get_dx(self: *const ISVGTextPositioningElement, p: ?*?*ISVGAnimatedLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.get_dx(self, p);
    }
    pub fn putref_dy(self: *const ISVGTextPositioningElement, v: ?*ISVGAnimatedLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_dy(self, v);
    }
    pub fn get_dy(self: *const ISVGTextPositioningElement, p: ?*?*ISVGAnimatedLengthList) callconv(.@"inline") HRESULT {
        return self.vtable.get_dy(self, p);
    }
    pub fn putref_rotate(self: *const ISVGTextPositioningElement, v: ?*ISVGAnimatedNumberList) callconv(.@"inline") HRESULT {
        return self.vtable.putref_rotate(self, v);
    }
    pub fn get_rotate(self: *const ISVGTextPositioningElement, p: ?*?*ISVGAnimatedNumberList) callconv(.@"inline") HRESULT {
        return self.vtable.get_rotate(self, p);
    }
};

const IID_DispSVGTextPositioningElement_Value = Guid.initString("30590038-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGTextPositioningElement = &IID_DispSVGTextPositioningElement_Value;
pub const DispSVGTextPositioningElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispDOMDocumentType_Value = Guid.initString("30590098-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMDocumentType = &IID_DispDOMDocumentType_Value;
pub const DispDOMDocumentType = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispNodeIterator_Value = Guid.initString("3059009c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispNodeIterator = &IID_DispNodeIterator_Value;
pub const DispNodeIterator = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispTreeWalker_Value = Guid.initString("3059009d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispTreeWalker = &IID_DispTreeWalker_Value;
pub const DispTreeWalker = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispDOMProcessingInstruction_Value = Guid.initString("3059009b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMProcessingInstruction = &IID_DispDOMProcessingInstruction_Value;
pub const DispDOMProcessingInstruction = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLPerformanceNavigation_Value = Guid.initString("30510750-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPerformanceNavigation = &IID_IHTMLPerformanceNavigation_Value;
pub const IHTMLPerformanceNavigation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IHTMLPerformanceNavigation,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_redirectCount: *const fn(
            self: *const IHTMLPerformanceNavigation,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLPerformanceNavigation,
            string: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        toJSON: *const fn(
            self: *const IHTMLPerformanceNavigation,
            pVar: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const IHTMLPerformanceNavigation, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_type(self, p);
    }
    pub fn get_redirectCount(self: *const IHTMLPerformanceNavigation, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_redirectCount(self, p);
    }
    pub fn toString(self: *const IHTMLPerformanceNavigation, string: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, string);
    }
    pub fn toJSON(self: *const IHTMLPerformanceNavigation, pVar: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.toJSON(self, pVar);
    }
};

const IID_IHTMLPerformanceTiming_Value = Guid.initString("30510752-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPerformanceTiming = &IID_IHTMLPerformanceTiming_Value;
pub const IHTMLPerformanceTiming = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_navigationStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unloadEventStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unloadEventEnd: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_redirectStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_redirectEnd: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fetchStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domainLookupStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domainLookupEnd: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_connectStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_connectEnd: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_requestStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseEnd: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domLoading: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domInteractive: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domContentLoadedEventStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domContentLoadedEventEnd: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domComplete: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loadEventStart: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_loadEventEnd: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_msFirstPaint: *const fn(
            self: *const IHTMLPerformanceTiming,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLPerformanceTiming,
            string: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        toJSON: *const fn(
            self: *const IHTMLPerformanceTiming,
            pVar: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_navigationStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_navigationStart(self, p);
    }
    pub fn get_unloadEventStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_unloadEventStart(self, p);
    }
    pub fn get_unloadEventEnd(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_unloadEventEnd(self, p);
    }
    pub fn get_redirectStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_redirectStart(self, p);
    }
    pub fn get_redirectEnd(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_redirectEnd(self, p);
    }
    pub fn get_fetchStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_fetchStart(self, p);
    }
    pub fn get_domainLookupStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_domainLookupStart(self, p);
    }
    pub fn get_domainLookupEnd(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_domainLookupEnd(self, p);
    }
    pub fn get_connectStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_connectStart(self, p);
    }
    pub fn get_connectEnd(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_connectEnd(self, p);
    }
    pub fn get_requestStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_requestStart(self, p);
    }
    pub fn get_responseStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_responseStart(self, p);
    }
    pub fn get_responseEnd(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_responseEnd(self, p);
    }
    pub fn get_domLoading(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_domLoading(self, p);
    }
    pub fn get_domInteractive(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_domInteractive(self, p);
    }
    pub fn get_domContentLoadedEventStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_domContentLoadedEventStart(self, p);
    }
    pub fn get_domContentLoadedEventEnd(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_domContentLoadedEventEnd(self, p);
    }
    pub fn get_domComplete(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_domComplete(self, p);
    }
    pub fn get_loadEventStart(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_loadEventStart(self, p);
    }
    pub fn get_loadEventEnd(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_loadEventEnd(self, p);
    }
    pub fn get_msFirstPaint(self: *const IHTMLPerformanceTiming, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_msFirstPaint(self, p);
    }
    pub fn toString(self: *const IHTMLPerformanceTiming, string: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, string);
    }
    pub fn toJSON(self: *const IHTMLPerformanceTiming, pVar: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.toJSON(self, pVar);
    }
};

const IID_DispHTMLPerformance_Value = Guid.initString("3059009f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLPerformance = &IID_DispHTMLPerformance_Value;
pub const DispHTMLPerformance = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLPerformanceNavigation_Value = Guid.initString("305900a0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLPerformanceNavigation = &IID_DispHTMLPerformanceNavigation_Value;
pub const DispHTMLPerformanceNavigation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLPerformanceTiming_Value = Guid.initString("305900a1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLPerformanceTiming = &IID_DispHTMLPerformanceTiming_Value;
pub const DispHTMLPerformanceTiming = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGTSpanElement_Value = Guid.initString("3051051d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTSpanElement = &IID_ISVGTSpanElement_Value;
pub const ISVGTSpanElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispSVGTSpanElement_Value = Guid.initString("3059003a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGTSpanElement = &IID_DispSVGTSpanElement_Value;
pub const DispSVGTSpanElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ITemplatePrinter_Value = Guid.initString("3050f6b4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITemplatePrinter = &IID_ITemplatePrinter_Value;
pub const ITemplatePrinter = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        startDoc: *const fn(
            self: *const ITemplatePrinter,
            bstrTitle: ?BSTR,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        stopDoc: *const fn(
            self: *const ITemplatePrinter,
        ) callconv(.winapi) HRESULT,
        printBlankPage: *const fn(
            self: *const ITemplatePrinter,
        ) callconv(.winapi) HRESULT,
        printPage: *const fn(
            self: *const ITemplatePrinter,
            pElemDisp: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        ensurePrintDialogDefaults: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        showPrintDialog: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        showPageSetupDialog: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        printNonNative: *const fn(
            self: *const ITemplatePrinter,
            pMarkup: ?*IUnknown,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        printNonNativeFrames: *const fn(
            self: *const ITemplatePrinter,
            pMarkup: ?*IUnknown,
            fActiveFrame: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_framesetDocument: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_framesetDocument: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameActive: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameActive: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameAsShown: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameAsShown: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selection: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selection: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectedPages: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectedPages: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentPage: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentPage: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentPageAvail: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentPageAvail: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_collate: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_collate: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_duplex: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_copies: *const fn(
            self: *const ITemplatePrinter,
            v: u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_copies: *const fn(
            self: *const ITemplatePrinter,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageFrom: *const fn(
            self: *const ITemplatePrinter,
            v: u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageFrom: *const fn(
            self: *const ITemplatePrinter,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageTo: *const fn(
            self: *const ITemplatePrinter,
            v: u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageTo: *const fn(
            self: *const ITemplatePrinter,
            p: ?*u16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tableOfLinks: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tableOfLinks: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_allLinkedDocuments: *const fn(
            self: *const ITemplatePrinter,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_allLinkedDocuments: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_header: *const fn(
            self: *const ITemplatePrinter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_header: *const fn(
            self: *const ITemplatePrinter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_footer: *const fn(
            self: *const ITemplatePrinter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_footer: *const fn(
            self: *const ITemplatePrinter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginLeft: *const fn(
            self: *const ITemplatePrinter,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginLeft: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginRight: *const fn(
            self: *const ITemplatePrinter,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginRight: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginTop: *const fn(
            self: *const ITemplatePrinter,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginTop: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_marginBottom: *const fn(
            self: *const ITemplatePrinter,
            v: i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_marginBottom: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageWidth: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageHeight: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unprintableLeft: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unprintableTop: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unprintableRight: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unprintableBottom: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        updatePageStatus: *const fn(
            self: *const ITemplatePrinter,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn startDoc(self: *const ITemplatePrinter, bstrTitle: ?BSTR, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.startDoc(self, bstrTitle, p);
    }
    pub fn stopDoc(self: *const ITemplatePrinter) callconv(.@"inline") HRESULT {
        return self.vtable.stopDoc(self);
    }
    pub fn printBlankPage(self: *const ITemplatePrinter) callconv(.@"inline") HRESULT {
        return self.vtable.printBlankPage(self);
    }
    pub fn printPage(self: *const ITemplatePrinter, pElemDisp: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.printPage(self, pElemDisp);
    }
    pub fn ensurePrintDialogDefaults(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.ensurePrintDialogDefaults(self, p);
    }
    pub fn showPrintDialog(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.showPrintDialog(self, p);
    }
    pub fn showPageSetupDialog(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.showPageSetupDialog(self, p);
    }
    pub fn printNonNative(self: *const ITemplatePrinter, pMarkup: ?*IUnknown, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.printNonNative(self, pMarkup, p);
    }
    pub fn printNonNativeFrames(self: *const ITemplatePrinter, pMarkup: ?*IUnknown, fActiveFrame: i16) callconv(.@"inline") HRESULT {
        return self.vtable.printNonNativeFrames(self, pMarkup, fActiveFrame);
    }
    pub fn put_framesetDocument(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_framesetDocument(self, v);
    }
    pub fn get_framesetDocument(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_framesetDocument(self, p);
    }
    pub fn put_frameActive(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameActive(self, v);
    }
    pub fn get_frameActive(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameActive(self, p);
    }
    pub fn put_frameAsShown(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameAsShown(self, v);
    }
    pub fn get_frameAsShown(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameAsShown(self, p);
    }
    pub fn put_selection(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_selection(self, v);
    }
    pub fn get_selection(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_selection(self, p);
    }
    pub fn put_selectedPages(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectedPages(self, v);
    }
    pub fn get_selectedPages(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectedPages(self, p);
    }
    pub fn put_currentPage(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_currentPage(self, v);
    }
    pub fn get_currentPage(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentPage(self, p);
    }
    pub fn put_currentPageAvail(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_currentPageAvail(self, v);
    }
    pub fn get_currentPageAvail(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentPageAvail(self, p);
    }
    pub fn put_collate(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_collate(self, v);
    }
    pub fn get_collate(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_collate(self, p);
    }
    pub fn get_duplex(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_duplex(self, p);
    }
    pub fn put_copies(self: *const ITemplatePrinter, v: u16) callconv(.@"inline") HRESULT {
        return self.vtable.put_copies(self, v);
    }
    pub fn get_copies(self: *const ITemplatePrinter, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_copies(self, p);
    }
    pub fn put_pageFrom(self: *const ITemplatePrinter, v: u16) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageFrom(self, v);
    }
    pub fn get_pageFrom(self: *const ITemplatePrinter, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageFrom(self, p);
    }
    pub fn put_pageTo(self: *const ITemplatePrinter, v: u16) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageTo(self, v);
    }
    pub fn get_pageTo(self: *const ITemplatePrinter, p: ?*u16) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageTo(self, p);
    }
    pub fn put_tableOfLinks(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_tableOfLinks(self, v);
    }
    pub fn get_tableOfLinks(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_tableOfLinks(self, p);
    }
    pub fn put_allLinkedDocuments(self: *const ITemplatePrinter, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_allLinkedDocuments(self, v);
    }
    pub fn get_allLinkedDocuments(self: *const ITemplatePrinter, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_allLinkedDocuments(self, p);
    }
    pub fn put_header(self: *const ITemplatePrinter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_header(self, v);
    }
    pub fn get_header(self: *const ITemplatePrinter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_header(self, p);
    }
    pub fn put_footer(self: *const ITemplatePrinter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_footer(self, v);
    }
    pub fn get_footer(self: *const ITemplatePrinter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_footer(self, p);
    }
    pub fn put_marginLeft(self: *const ITemplatePrinter, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginLeft(self, v);
    }
    pub fn get_marginLeft(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginLeft(self, p);
    }
    pub fn put_marginRight(self: *const ITemplatePrinter, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginRight(self, v);
    }
    pub fn get_marginRight(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginRight(self, p);
    }
    pub fn put_marginTop(self: *const ITemplatePrinter, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginTop(self, v);
    }
    pub fn get_marginTop(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginTop(self, p);
    }
    pub fn put_marginBottom(self: *const ITemplatePrinter, v: i32) callconv(.@"inline") HRESULT {
        return self.vtable.put_marginBottom(self, v);
    }
    pub fn get_marginBottom(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_marginBottom(self, p);
    }
    pub fn get_pageWidth(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageWidth(self, p);
    }
    pub fn get_pageHeight(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageHeight(self, p);
    }
    pub fn get_unprintableLeft(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_unprintableLeft(self, p);
    }
    pub fn get_unprintableTop(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_unprintableTop(self, p);
    }
    pub fn get_unprintableRight(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_unprintableRight(self, p);
    }
    pub fn get_unprintableBottom(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_unprintableBottom(self, p);
    }
    pub fn updatePageStatus(self: *const ITemplatePrinter, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.updatePageStatus(self, p);
    }
};

const IID_ITemplatePrinter2_Value = Guid.initString("3050f83f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITemplatePrinter2 = &IID_ITemplatePrinter2_Value;
pub const ITemplatePrinter2 = extern union {
    pub const VTable = extern struct {
        base: ITemplatePrinter.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selectionEnabled: *const fn(
            self: *const ITemplatePrinter2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selectionEnabled: *const fn(
            self: *const ITemplatePrinter2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_frameActiveEnabled: *const fn(
            self: *const ITemplatePrinter2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameActiveEnabled: *const fn(
            self: *const ITemplatePrinter2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_orientation: *const fn(
            self: *const ITemplatePrinter2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_orientation: *const fn(
            self: *const ITemplatePrinter2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_usePrinterCopyCollate: *const fn(
            self: *const ITemplatePrinter2,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_usePrinterCopyCollate: *const fn(
            self: *const ITemplatePrinter2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        deviceSupports: *const fn(
            self: *const ITemplatePrinter2,
            bstrProperty: ?BSTR,
            pvar: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    ITemplatePrinter: ITemplatePrinter,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_selectionEnabled(self: *const ITemplatePrinter2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_selectionEnabled(self, v);
    }
    pub fn get_selectionEnabled(self: *const ITemplatePrinter2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_selectionEnabled(self, p);
    }
    pub fn put_frameActiveEnabled(self: *const ITemplatePrinter2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_frameActiveEnabled(self, v);
    }
    pub fn get_frameActiveEnabled(self: *const ITemplatePrinter2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_frameActiveEnabled(self, p);
    }
    pub fn put_orientation(self: *const ITemplatePrinter2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_orientation(self, v);
    }
    pub fn get_orientation(self: *const ITemplatePrinter2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_orientation(self, p);
    }
    pub fn put_usePrinterCopyCollate(self: *const ITemplatePrinter2, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_usePrinterCopyCollate(self, v);
    }
    pub fn get_usePrinterCopyCollate(self: *const ITemplatePrinter2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_usePrinterCopyCollate(self, p);
    }
    pub fn deviceSupports(self: *const ITemplatePrinter2, bstrProperty: ?BSTR, pvar: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.deviceSupports(self, bstrProperty, pvar);
    }
};

const IID_ITemplatePrinter3_Value = Guid.initString("305104a3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITemplatePrinter3 = &IID_ITemplatePrinter3_Value;
pub const ITemplatePrinter3 = extern union {
    pub const VTable = extern struct {
        base: ITemplatePrinter2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_headerFooterFont: *const fn(
            self: *const ITemplatePrinter3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_headerFooterFont: *const fn(
            self: *const ITemplatePrinter3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        getPageMarginTop: *const fn(
            self: *const ITemplatePrinter3,
            pageRule: ?*IDispatch,
            pageWidth: i32,
            pageHeight: i32,
            pMargin: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getPageMarginRight: *const fn(
            self: *const ITemplatePrinter3,
            pageRule: ?*IDispatch,
            pageWidth: i32,
            pageHeight: i32,
            pMargin: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getPageMarginBottom: *const fn(
            self: *const ITemplatePrinter3,
            pageRule: ?*IDispatch,
            pageWidth: i32,
            pageHeight: i32,
            pMargin: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getPageMarginLeft: *const fn(
            self: *const ITemplatePrinter3,
            pageRule: ?*IDispatch,
            pageWidth: i32,
            pageHeight: i32,
            pMargin: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getPageMarginTopImportant: *const fn(
            self: *const ITemplatePrinter3,
            pageRule: ?*IDispatch,
            pbImportant: ?*i16,
        ) callconv(.winapi) HRESULT,
        getPageMarginRightImportant: *const fn(
            self: *const ITemplatePrinter3,
            pageRule: ?*IDispatch,
            pbImportant: ?*i16,
        ) callconv(.winapi) HRESULT,
        getPageMarginBottomImportant: *const fn(
            self: *const ITemplatePrinter3,
            pageRule: ?*IDispatch,
            pbImportant: ?*i16,
        ) callconv(.winapi) HRESULT,
        getPageMarginLeftImportant: *const fn(
            self: *const ITemplatePrinter3,
            pageRule: ?*IDispatch,
            pbImportant: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    ITemplatePrinter2: ITemplatePrinter2,
    ITemplatePrinter: ITemplatePrinter,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_headerFooterFont(self: *const ITemplatePrinter3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_headerFooterFont(self, v);
    }
    pub fn get_headerFooterFont(self: *const ITemplatePrinter3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_headerFooterFont(self, p);
    }
    pub fn getPageMarginTop(self: *const ITemplatePrinter3, pageRule: ?*IDispatch, pageWidth: i32, pageHeight: i32, pMargin: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getPageMarginTop(self, pageRule, pageWidth, pageHeight, pMargin);
    }
    pub fn getPageMarginRight(self: *const ITemplatePrinter3, pageRule: ?*IDispatch, pageWidth: i32, pageHeight: i32, pMargin: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getPageMarginRight(self, pageRule, pageWidth, pageHeight, pMargin);
    }
    pub fn getPageMarginBottom(self: *const ITemplatePrinter3, pageRule: ?*IDispatch, pageWidth: i32, pageHeight: i32, pMargin: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getPageMarginBottom(self, pageRule, pageWidth, pageHeight, pMargin);
    }
    pub fn getPageMarginLeft(self: *const ITemplatePrinter3, pageRule: ?*IDispatch, pageWidth: i32, pageHeight: i32, pMargin: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getPageMarginLeft(self, pageRule, pageWidth, pageHeight, pMargin);
    }
    pub fn getPageMarginTopImportant(self: *const ITemplatePrinter3, pageRule: ?*IDispatch, pbImportant: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.getPageMarginTopImportant(self, pageRule, pbImportant);
    }
    pub fn getPageMarginRightImportant(self: *const ITemplatePrinter3, pageRule: ?*IDispatch, pbImportant: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.getPageMarginRightImportant(self, pageRule, pbImportant);
    }
    pub fn getPageMarginBottomImportant(self: *const ITemplatePrinter3, pageRule: ?*IDispatch, pbImportant: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.getPageMarginBottomImportant(self, pageRule, pbImportant);
    }
    pub fn getPageMarginLeftImportant(self: *const ITemplatePrinter3, pageRule: ?*IDispatch, pbImportant: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.getPageMarginLeftImportant(self, pageRule, pbImportant);
    }
};

const IID_IPrintManagerTemplatePrinter_Value = Guid.initString("f633be14-9eff-4c4d-929e-05717b21b3e6");
pub const IID_IPrintManagerTemplatePrinter = &IID_IPrintManagerTemplatePrinter_Value;
pub const IPrintManagerTemplatePrinter = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        startPrint: *const fn(
            self: *const IPrintManagerTemplatePrinter,
        ) callconv(.winapi) HRESULT,
        drawPreviewPage: *const fn(
            self: *const IPrintManagerTemplatePrinter,
            pElemDisp: ?*IDispatch,
            nPage: i32,
        ) callconv(.winapi) HRESULT,
        setPageCount: *const fn(
            self: *const IPrintManagerTemplatePrinter,
            nPage: i32,
        ) callconv(.winapi) HRESULT,
        invalidatePreview: *const fn(
            self: *const IPrintManagerTemplatePrinter,
        ) callconv(.winapi) HRESULT,
        getPrintTaskOptionValue: *const fn(
            self: *const IPrintManagerTemplatePrinter,
            bstrKey: ?BSTR,
            pvarin: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        endPrint: *const fn(
            self: *const IPrintManagerTemplatePrinter,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn startPrint(self: *const IPrintManagerTemplatePrinter) callconv(.@"inline") HRESULT {
        return self.vtable.startPrint(self);
    }
    pub fn drawPreviewPage(self: *const IPrintManagerTemplatePrinter, pElemDisp: ?*IDispatch, nPage: i32) callconv(.@"inline") HRESULT {
        return self.vtable.drawPreviewPage(self, pElemDisp, nPage);
    }
    pub fn setPageCount(self: *const IPrintManagerTemplatePrinter, nPage: i32) callconv(.@"inline") HRESULT {
        return self.vtable.setPageCount(self, nPage);
    }
    pub fn invalidatePreview(self: *const IPrintManagerTemplatePrinter) callconv(.@"inline") HRESULT {
        return self.vtable.invalidatePreview(self);
    }
    pub fn getPrintTaskOptionValue(self: *const IPrintManagerTemplatePrinter, bstrKey: ?BSTR, pvarin: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getPrintTaskOptionValue(self, bstrKey, pvarin);
    }
    pub fn endPrint(self: *const IPrintManagerTemplatePrinter) callconv(.@"inline") HRESULT {
        return self.vtable.endPrint(self);
    }
};

const IID_IPrintManagerTemplatePrinter2_Value = Guid.initString("c6403497-7493-4f09-8016-54b03e9bda69");
pub const IID_IPrintManagerTemplatePrinter2 = &IID_IPrintManagerTemplatePrinter2_Value;
pub const IPrintManagerTemplatePrinter2 = extern union {
    pub const VTable = extern struct {
        base: IPrintManagerTemplatePrinter.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_showHeaderFooter: *const fn(
            self: *const IPrintManagerTemplatePrinter2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_shrinkToFit: *const fn(
            self: *const IPrintManagerTemplatePrinter2,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_percentScale: *const fn(
            self: *const IPrintManagerTemplatePrinter2,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IPrintManagerTemplatePrinter: IPrintManagerTemplatePrinter,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_showHeaderFooter(self: *const IPrintManagerTemplatePrinter2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_showHeaderFooter(self, p);
    }
    pub fn get_shrinkToFit(self: *const IPrintManagerTemplatePrinter2, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_shrinkToFit(self, p);
    }
    pub fn get_percentScale(self: *const IPrintManagerTemplatePrinter2, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_percentScale(self, p);
    }
};

const IID_DispCPrintManagerTemplatePrinter_Value = Guid.initString("305900e9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispCPrintManagerTemplatePrinter = &IID_DispCPrintManagerTemplatePrinter_Value;
pub const DispCPrintManagerTemplatePrinter = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ISVGTextPathElement_Value = Guid.initString("3051051f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISVGTextPathElement = &IID_ISVGTextPathElement_Value;
pub const ISVGTextPathElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_startOffset: *const fn(
            self: *const ISVGTextPathElement,
            v: ?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_startOffset: *const fn(
            self: *const ISVGTextPathElement,
            p: ?*?*ISVGAnimatedLength,
        ) callconv(.winapi) HRESULT,
        putref_method: *const fn(
            self: *const ISVGTextPathElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_method: *const fn(
            self: *const ISVGTextPathElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        putref_spacing: *const fn(
            self: *const ISVGTextPathElement,
            v: ?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_spacing: *const fn(
            self: *const ISVGTextPathElement,
            p: ?*?*ISVGAnimatedEnumeration,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_startOffset(self: *const ISVGTextPathElement, v: ?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.putref_startOffset(self, v);
    }
    pub fn get_startOffset(self: *const ISVGTextPathElement, p: ?*?*ISVGAnimatedLength) callconv(.@"inline") HRESULT {
        return self.vtable.get_startOffset(self, p);
    }
    pub fn putref_method(self: *const ISVGTextPathElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_method(self, v);
    }
    pub fn get_method(self: *const ISVGTextPathElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_method(self, p);
    }
    pub fn putref_spacing(self: *const ISVGTextPathElement, v: ?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.putref_spacing(self, v);
    }
    pub fn get_spacing(self: *const ISVGTextPathElement, p: ?*?*ISVGAnimatedEnumeration) callconv(.@"inline") HRESULT {
        return self.vtable.get_spacing(self, p);
    }
};

const IID_DispSVGTextPathElement_Value = Guid.initString("3059003d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispSVGTextPathElement = &IID_DispSVGTextPathElement_Value;
pub const DispSVGTextPathElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMXmlSerializer_Value = Guid.initString("3051077d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMXmlSerializer = &IID_IDOMXmlSerializer_Value;
pub const IDOMXmlSerializer = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        serializeToString: *const fn(
            self: *const IDOMXmlSerializer,
            pNode: ?*IHTMLDOMNode,
            pString: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn serializeToString(self: *const IDOMXmlSerializer, pNode: ?*IHTMLDOMNode, pString: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.serializeToString(self, pNode, pString);
    }
};

const IID_IDOMParser_Value = Guid.initString("30510781-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMParser = &IID_IDOMParser_Value;
pub const IDOMParser = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        parseFromString: *const fn(
            self: *const IDOMParser,
            xmlSource: ?BSTR,
            mimeType: ?BSTR,
            ppNode: ?*?*IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn parseFromString(self: *const IDOMParser, xmlSource: ?BSTR, mimeType: ?BSTR, ppNode: ?*?*IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.parseFromString(self, xmlSource, mimeType, ppNode);
    }
};

const IID_DispXMLSerializer_Value = Guid.initString("305900ad-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispXMLSerializer = &IID_DispXMLSerializer_Value;
pub const DispXMLSerializer = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispDOMParser_Value = Guid.initString("305900ae-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMParser = &IID_DispDOMParser_Value;
pub const DispDOMParser = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMXmlSerializerFactory_Value = Guid.initString("3051077f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMXmlSerializerFactory = &IID_IDOMXmlSerializerFactory_Value;
pub const IDOMXmlSerializerFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        create: *const fn(
            self: *const IDOMXmlSerializerFactory,
            __MIDL__IDOMXmlSerializerFactory0000: ?*?*IDOMXmlSerializer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn create(self: *const IDOMXmlSerializerFactory, __MIDL__IDOMXmlSerializerFactory0000: ?*?*IDOMXmlSerializer) callconv(.@"inline") HRESULT {
        return self.vtable.create(self, __MIDL__IDOMXmlSerializerFactory0000);
    }
};

const IID_IDOMParserFactory_Value = Guid.initString("30510783-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMParserFactory = &IID_IDOMParserFactory_Value;
pub const IDOMParserFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        create: *const fn(
            self: *const IDOMParserFactory,
            __MIDL__IDOMParserFactory0000: ?*?*IDOMParser,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn create(self: *const IDOMParserFactory, __MIDL__IDOMParserFactory0000: ?*?*IDOMParser) callconv(.@"inline") HRESULT {
        return self.vtable.create(self, __MIDL__IDOMParserFactory0000);
    }
};

const IID_DispHTMLSemanticElement_Value = Guid.initString("305900ba-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLSemanticElement = &IID_DispHTMLSemanticElement_Value;
pub const DispHTMLSemanticElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLProgressElement_Value = Guid.initString("3050f2d6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLProgressElement = &IID_IHTMLProgressElement_Value;
pub const IHTMLProgressElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IHTMLProgressElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IHTMLProgressElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_max: *const fn(
            self: *const IHTMLProgressElement,
            v: f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_max: *const fn(
            self: *const IHTMLProgressElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_position: *const fn(
            self: *const IHTMLProgressElement,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_form: *const fn(
            self: *const IHTMLProgressElement,
            p: ?*?*IHTMLFormElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_value(self: *const IHTMLProgressElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_value(self, v);
    }
    pub fn get_value(self: *const IHTMLProgressElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_value(self, p);
    }
    pub fn put_max(self: *const IHTMLProgressElement, v: f32) callconv(.@"inline") HRESULT {
        return self.vtable.put_max(self, v);
    }
    pub fn get_max(self: *const IHTMLProgressElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_max(self, p);
    }
    pub fn get_position(self: *const IHTMLProgressElement, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_position(self, p);
    }
    pub fn get_form(self: *const IHTMLProgressElement, p: ?*?*IHTMLFormElement) callconv(.@"inline") HRESULT {
        return self.vtable.get_form(self, p);
    }
};

const IID_DispHTMLProgressElement_Value = Guid.initString("305900af-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLProgressElement = &IID_DispHTMLProgressElement_Value;
pub const DispHTMLProgressElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMMSTransitionEvent_Value = Guid.initString("305107b5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMMSTransitionEvent = &IID_IDOMMSTransitionEvent_Value;
pub const IDOMMSTransitionEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_propertyName: *const fn(
            self: *const IDOMMSTransitionEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_elapsedTime: *const fn(
            self: *const IDOMMSTransitionEvent,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        initMSTransitionEvent: *const fn(
            self: *const IDOMMSTransitionEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            propertyName: ?BSTR,
            elapsedTime: f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_propertyName(self: *const IDOMMSTransitionEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_propertyName(self, p);
    }
    pub fn get_elapsedTime(self: *const IDOMMSTransitionEvent, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_elapsedTime(self, p);
    }
    pub fn initMSTransitionEvent(self: *const IDOMMSTransitionEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, propertyName: ?BSTR, elapsedTime: f32) callconv(.@"inline") HRESULT {
        return self.vtable.initMSTransitionEvent(self, eventType, canBubble, cancelable, propertyName, elapsedTime);
    }
};

const IID_DispDOMMSTransitionEvent_Value = Guid.initString("305900bb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMMSTransitionEvent = &IID_DispDOMMSTransitionEvent_Value;
pub const DispDOMMSTransitionEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMMSAnimationEvent_Value = Guid.initString("305107b7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMMSAnimationEvent = &IID_IDOMMSAnimationEvent_Value;
pub const IDOMMSAnimationEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_animationName: *const fn(
            self: *const IDOMMSAnimationEvent,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_elapsedTime: *const fn(
            self: *const IDOMMSAnimationEvent,
            p: ?*f32,
        ) callconv(.winapi) HRESULT,
        initMSAnimationEvent: *const fn(
            self: *const IDOMMSAnimationEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            animationName: ?BSTR,
            elapsedTime: f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_animationName(self: *const IDOMMSAnimationEvent, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_animationName(self, p);
    }
    pub fn get_elapsedTime(self: *const IDOMMSAnimationEvent, p: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.get_elapsedTime(self, p);
    }
    pub fn initMSAnimationEvent(self: *const IDOMMSAnimationEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, animationName: ?BSTR, elapsedTime: f32) callconv(.@"inline") HRESULT {
        return self.vtable.initMSAnimationEvent(self, eventType, canBubble, cancelable, animationName, elapsedTime);
    }
};

const IID_DispDOMMSAnimationEvent_Value = Guid.initString("305900bc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMMSAnimationEvent = &IID_DispDOMMSAnimationEvent_Value;
pub const DispDOMMSAnimationEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IWebGeocoordinates_Value = Guid.initString("305107c7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IWebGeocoordinates = &IID_IWebGeocoordinates_Value;
pub const IWebGeocoordinates = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_latitude: *const fn(
            self: *const IWebGeocoordinates,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_longitude: *const fn(
            self: *const IWebGeocoordinates,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_altitude: *const fn(
            self: *const IWebGeocoordinates,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_accuracy: *const fn(
            self: *const IWebGeocoordinates,
            p: ?*f64,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_altitudeAccuracy: *const fn(
            self: *const IWebGeocoordinates,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_heading: *const fn(
            self: *const IWebGeocoordinates,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_speed: *const fn(
            self: *const IWebGeocoordinates,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_latitude(self: *const IWebGeocoordinates, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_latitude(self, p);
    }
    pub fn get_longitude(self: *const IWebGeocoordinates, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_longitude(self, p);
    }
    pub fn get_altitude(self: *const IWebGeocoordinates, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_altitude(self, p);
    }
    pub fn get_accuracy(self: *const IWebGeocoordinates, p: ?*f64) callconv(.@"inline") HRESULT {
        return self.vtable.get_accuracy(self, p);
    }
    pub fn get_altitudeAccuracy(self: *const IWebGeocoordinates, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_altitudeAccuracy(self, p);
    }
    pub fn get_heading(self: *const IWebGeocoordinates, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_heading(self, p);
    }
    pub fn get_speed(self: *const IWebGeocoordinates, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_speed(self, p);
    }
};

const IID_IWebGeopositionError_Value = Guid.initString("305107c9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IWebGeopositionError = &IID_IWebGeopositionError_Value;
pub const IWebGeopositionError = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_code: *const fn(
            self: *const IWebGeopositionError,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_message: *const fn(
            self: *const IWebGeopositionError,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_code(self: *const IWebGeopositionError, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_code(self, p);
    }
    pub fn get_message(self: *const IWebGeopositionError, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_message(self, p);
    }
};

const IID_IWebGeoposition_Value = Guid.initString("305107cd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IWebGeoposition = &IID_IWebGeoposition_Value;
pub const IWebGeoposition = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_coords: *const fn(
            self: *const IWebGeoposition,
            p: ?*?*IWebGeocoordinates,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_timestamp: *const fn(
            self: *const IWebGeoposition,
            p: ?*u64,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_coords(self: *const IWebGeoposition, p: ?*?*IWebGeocoordinates) callconv(.@"inline") HRESULT {
        return self.vtable.get_coords(self, p);
    }
    pub fn get_timestamp(self: *const IWebGeoposition, p: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.get_timestamp(self, p);
    }
};

const IID_DispWebGeolocation_Value = Guid.initString("305900bd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispWebGeolocation = &IID_DispWebGeolocation_Value;
pub const DispWebGeolocation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispWebGeocoordinates_Value = Guid.initString("305900be-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispWebGeocoordinates = &IID_DispWebGeocoordinates_Value;
pub const DispWebGeocoordinates = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispWebGeopositionError_Value = Guid.initString("305900bf-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispWebGeopositionError = &IID_DispWebGeopositionError_Value;
pub const DispWebGeopositionError = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispWebGeoposition_Value = Guid.initString("305900c1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispWebGeoposition = &IID_DispWebGeoposition_Value;
pub const DispWebGeoposition = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IClientCaps_Value = Guid.initString("7e8bc44d-aeff-11d1-89c2-00c04fb6bfc4");
pub const IID_IClientCaps = &IID_IClientCaps_Value;
pub const IClientCaps = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_javaEnabled: *const fn(
            self: *const IClientCaps,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cookieEnabled: *const fn(
            self: *const IClientCaps,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cpuClass: *const fn(
            self: *const IClientCaps,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemLanguage: *const fn(
            self: *const IClientCaps,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userLanguage: *const fn(
            self: *const IClientCaps,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_platform: *const fn(
            self: *const IClientCaps,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_connectionSpeed: *const fn(
            self: *const IClientCaps,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onLine: *const fn(
            self: *const IClientCaps,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_colorDepth: *const fn(
            self: *const IClientCaps,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bufferDepth: *const fn(
            self: *const IClientCaps,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_width: *const fn(
            self: *const IClientCaps,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_height: *const fn(
            self: *const IClientCaps,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_availHeight: *const fn(
            self: *const IClientCaps,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_availWidth: *const fn(
            self: *const IClientCaps,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_connectionType: *const fn(
            self: *const IClientCaps,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        isComponentInstalled: *const fn(
            self: *const IClientCaps,
            bstrName: ?BSTR,
            bstrUrl: ?BSTR,
            bStrVer: ?BSTR,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        getComponentVersion: *const fn(
            self: *const IClientCaps,
            bstrName: ?BSTR,
            bstrUrl: ?BSTR,
            pbstrVer: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        compareVersions: *const fn(
            self: *const IClientCaps,
            bstrVer1: ?BSTR,
            bstrVer2: ?BSTR,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        addComponentRequest: *const fn(
            self: *const IClientCaps,
            bstrName: ?BSTR,
            bstrUrl: ?BSTR,
            bStrVer: ?BSTR,
        ) callconv(.winapi) HRESULT,
        doComponentRequest: *const fn(
            self: *const IClientCaps,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        clearComponentRequest: *const fn(
            self: *const IClientCaps,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_javaEnabled(self: *const IClientCaps, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_javaEnabled(self, p);
    }
    pub fn get_cookieEnabled(self: *const IClientCaps, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_cookieEnabled(self, p);
    }
    pub fn get_cpuClass(self: *const IClientCaps, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_cpuClass(self, p);
    }
    pub fn get_systemLanguage(self: *const IClientCaps, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_systemLanguage(self, p);
    }
    pub fn get_userLanguage(self: *const IClientCaps, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_userLanguage(self, p);
    }
    pub fn get_platform(self: *const IClientCaps, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_platform(self, p);
    }
    pub fn get_connectionSpeed(self: *const IClientCaps, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_connectionSpeed(self, p);
    }
    pub fn get_onLine(self: *const IClientCaps, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_onLine(self, p);
    }
    pub fn get_colorDepth(self: *const IClientCaps, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_colorDepth(self, p);
    }
    pub fn get_bufferDepth(self: *const IClientCaps, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_bufferDepth(self, p);
    }
    pub fn get_width(self: *const IClientCaps, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_width(self, p);
    }
    pub fn get_height(self: *const IClientCaps, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_height(self, p);
    }
    pub fn get_availHeight(self: *const IClientCaps, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_availHeight(self, p);
    }
    pub fn get_availWidth(self: *const IClientCaps, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_availWidth(self, p);
    }
    pub fn get_connectionType(self: *const IClientCaps, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_connectionType(self, p);
    }
    pub fn isComponentInstalled(self: *const IClientCaps, bstrName: ?BSTR, bstrUrl: ?BSTR, bStrVer: ?BSTR, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isComponentInstalled(self, bstrName, bstrUrl, bStrVer, p);
    }
    pub fn getComponentVersion(self: *const IClientCaps, bstrName: ?BSTR, bstrUrl: ?BSTR, pbstrVer: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.getComponentVersion(self, bstrName, bstrUrl, pbstrVer);
    }
    pub fn compareVersions(self: *const IClientCaps, bstrVer1: ?BSTR, bstrVer2: ?BSTR, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.compareVersions(self, bstrVer1, bstrVer2, p);
    }
    pub fn addComponentRequest(self: *const IClientCaps, bstrName: ?BSTR, bstrUrl: ?BSTR, bStrVer: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.addComponentRequest(self, bstrName, bstrUrl, bStrVer);
    }
    pub fn doComponentRequest(self: *const IClientCaps, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.doComponentRequest(self, p);
    }
    pub fn clearComponentRequest(self: *const IClientCaps) callconv(.@"inline") HRESULT {
        return self.vtable.clearComponentRequest(self);
    }
};

const IID_IDOMMSManipulationEvent_Value = Guid.initString("30510816-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMMSManipulationEvent = &IID_IDOMMSManipulationEvent_Value;
pub const IDOMMSManipulationEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastState: *const fn(
            self: *const IDOMMSManipulationEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentState: *const fn(
            self: *const IDOMMSManipulationEvent,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        initMSManipulationEvent: *const fn(
            self: *const IDOMMSManipulationEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            viewArg: ?*IHTMLWindow2,
            detailArg: i32,
            lastState: i32,
            currentState: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_lastState(self: *const IDOMMSManipulationEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_lastState(self, p);
    }
    pub fn get_currentState(self: *const IDOMMSManipulationEvent, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_currentState(self, p);
    }
    pub fn initMSManipulationEvent(self: *const IDOMMSManipulationEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, viewArg: ?*IHTMLWindow2, detailArg: i32, lastState: i32, currentState: i32) callconv(.@"inline") HRESULT {
        return self.vtable.initMSManipulationEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, lastState, currentState);
    }
};

const IID_DispDOMMSManipulationEvent_Value = Guid.initString("305900e1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMMSManipulationEvent = &IID_DispDOMMSManipulationEvent_Value;
pub const DispDOMMSManipulationEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IDOMCloseEvent_Value = Guid.initString("305107ff-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMCloseEvent = &IID_IDOMCloseEvent_Value;
pub const IDOMCloseEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_wasClean: *const fn(
            self: *const IDOMCloseEvent,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        initCloseEvent: *const fn(
            self: *const IDOMCloseEvent,
            eventType: ?BSTR,
            canBubble: i16,
            cancelable: i16,
            wasClean: i16,
            code: i32,
            reason: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_wasClean(self: *const IDOMCloseEvent, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_wasClean(self, p);
    }
    pub fn initCloseEvent(self: *const IDOMCloseEvent, eventType: ?BSTR, canBubble: i16, cancelable: i16, wasClean: i16, code: i32, reason: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.initCloseEvent(self, eventType, canBubble, cancelable, wasClean, code, reason);
    }
};

const IID_DispDOMCloseEvent_Value = Guid.initString("305900dc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispDOMCloseEvent = &IID_DispDOMCloseEvent_Value;
pub const DispDOMCloseEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispApplicationCache_Value = Guid.initString("305900e4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispApplicationCache = &IID_DispApplicationCache_Value;
pub const DispApplicationCache = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ICSSFilterSite_Value = Guid.initString("3050f3ed-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICSSFilterSite = &IID_ICSSFilterSite_Value;
pub const ICSSFilterSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetElement: *const fn(
            self: *const ICSSFilterSite,
            Element: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        FireOnFilterChangeEvent: *const fn(
            self: *const ICSSFilterSite,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetElement(self: *const ICSSFilterSite, Element: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.GetElement(self, Element);
    }
    pub fn FireOnFilterChangeEvent(self: *const ICSSFilterSite) callconv(.@"inline") HRESULT {
        return self.vtable.FireOnFilterChangeEvent(self);
    }
};

const IID_IMarkupPointer_Value = Guid.initString("3050f49f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IMarkupPointer = &IID_IMarkupPointer_Value;
pub const IMarkupPointer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OwningDoc: *const fn(
            self: *const IMarkupPointer,
            ppDoc: ?*?*IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
        Gravity: *const fn(
            self: *const IMarkupPointer,
            pGravity: ?*POINTER_GRAVITY,
        ) callconv(.winapi) HRESULT,
        SetGravity: *const fn(
            self: *const IMarkupPointer,
            Gravity: POINTER_GRAVITY,
        ) callconv(.winapi) HRESULT,
        Cling: *const fn(
            self: *const IMarkupPointer,
            pfCling: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        SetCling: *const fn(
            self: *const IMarkupPointer,
            fCLing: BOOL,
        ) callconv(.winapi) HRESULT,
        Unposition: *const fn(
            self: *const IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        IsPositioned: *const fn(
            self: *const IMarkupPointer,
            pfPositioned: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        GetContainer: *const fn(
            self: *const IMarkupPointer,
            ppContainer: ?*?*IMarkupContainer,
        ) callconv(.winapi) HRESULT,
        MoveAdjacentToElement: *const fn(
            self: *const IMarkupPointer,
            pElement: ?*IHTMLElement,
            eAdj: ELEMENT_ADJACENCY,
        ) callconv(.winapi) HRESULT,
        MoveToPointer: *const fn(
            self: *const IMarkupPointer,
            pPointer: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        MoveToContainer: *const fn(
            self: *const IMarkupPointer,
            pContainer: ?*IMarkupContainer,
            fAtStart: BOOL,
        ) callconv(.winapi) HRESULT,
        Left: *const fn(
            self: *const IMarkupPointer,
            fMove: BOOL,
            pContext: ?*MARKUP_CONTEXT_TYPE,
            ppElement: ?*?*IHTMLElement,
            pcch: ?*i32,
            pchText: [*:0]u16,
        ) callconv(.winapi) HRESULT,
        Right: *const fn(
            self: *const IMarkupPointer,
            fMove: BOOL,
            pContext: ?*MARKUP_CONTEXT_TYPE,
            ppElement: ?*?*IHTMLElement,
            pcch: ?*i32,
            pchText: [*:0]u16,
        ) callconv(.winapi) HRESULT,
        CurrentScope: *const fn(
            self: *const IMarkupPointer,
            ppElemCurrent: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        IsLeftOf: *const fn(
            self: *const IMarkupPointer,
            pPointerThat: ?*IMarkupPointer,
            pfResult: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        IsLeftOfOrEqualTo: *const fn(
            self: *const IMarkupPointer,
            pPointerThat: ?*IMarkupPointer,
            pfResult: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        IsRightOf: *const fn(
            self: *const IMarkupPointer,
            pPointerThat: ?*IMarkupPointer,
            pfResult: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        IsRightOfOrEqualTo: *const fn(
            self: *const IMarkupPointer,
            pPointerThat: ?*IMarkupPointer,
            pfResult: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        IsEqualTo: *const fn(
            self: *const IMarkupPointer,
            pPointerThat: ?*IMarkupPointer,
            pfAreEqual: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        MoveUnit: *const fn(
            self: *const IMarkupPointer,
            muAction: MOVEUNIT_ACTION,
        ) callconv(.winapi) HRESULT,
        FindText: *const fn(
            self: *const IMarkupPointer,
            pchFindText: ?PWSTR,
            dwFlags: u32,
            pIEndMatch: ?*IMarkupPointer,
            pIEndSearch: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OwningDoc(self: *const IMarkupPointer, ppDoc: ?*?*IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.OwningDoc(self, ppDoc);
    }
    pub fn Gravity(self: *const IMarkupPointer, pGravity: ?*POINTER_GRAVITY) callconv(.@"inline") HRESULT {
        return self.vtable.Gravity(self, pGravity);
    }
    pub fn SetGravity(self: *const IMarkupPointer, _param_Gravity: POINTER_GRAVITY) callconv(.@"inline") HRESULT {
        return self.vtable.SetGravity(self, _param_Gravity);
    }
    pub fn Cling(self: *const IMarkupPointer, pfCling: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.Cling(self, pfCling);
    }
    pub fn SetCling(self: *const IMarkupPointer, fCLing: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.SetCling(self, fCLing);
    }
    pub fn Unposition(self: *const IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.Unposition(self);
    }
    pub fn IsPositioned(self: *const IMarkupPointer, pfPositioned: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsPositioned(self, pfPositioned);
    }
    pub fn GetContainer(self: *const IMarkupPointer, ppContainer: ?*?*IMarkupContainer) callconv(.@"inline") HRESULT {
        return self.vtable.GetContainer(self, ppContainer);
    }
    pub fn MoveAdjacentToElement(self: *const IMarkupPointer, pElement: ?*IHTMLElement, eAdj: ELEMENT_ADJACENCY) callconv(.@"inline") HRESULT {
        return self.vtable.MoveAdjacentToElement(self, pElement, eAdj);
    }
    pub fn MoveToPointer(self: *const IMarkupPointer, pPointer: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToPointer(self, pPointer);
    }
    pub fn MoveToContainer(self: *const IMarkupPointer, pContainer: ?*IMarkupContainer, fAtStart: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToContainer(self, pContainer, fAtStart);
    }
    pub fn Left(self: *const IMarkupPointer, fMove: BOOL, pContext: ?*MARKUP_CONTEXT_TYPE, ppElement: ?*?*IHTMLElement, pcch: ?*i32, pchText: [*:0]u16) callconv(.@"inline") HRESULT {
        return self.vtable.Left(self, fMove, pContext, ppElement, pcch, pchText);
    }
    pub fn Right(self: *const IMarkupPointer, fMove: BOOL, pContext: ?*MARKUP_CONTEXT_TYPE, ppElement: ?*?*IHTMLElement, pcch: ?*i32, pchText: [*:0]u16) callconv(.@"inline") HRESULT {
        return self.vtable.Right(self, fMove, pContext, ppElement, pcch, pchText);
    }
    pub fn CurrentScope(self: *const IMarkupPointer, ppElemCurrent: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.CurrentScope(self, ppElemCurrent);
    }
    pub fn IsLeftOf(self: *const IMarkupPointer, pPointerThat: ?*IMarkupPointer, pfResult: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsLeftOf(self, pPointerThat, pfResult);
    }
    pub fn IsLeftOfOrEqualTo(self: *const IMarkupPointer, pPointerThat: ?*IMarkupPointer, pfResult: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsLeftOfOrEqualTo(self, pPointerThat, pfResult);
    }
    pub fn IsRightOf(self: *const IMarkupPointer, pPointerThat: ?*IMarkupPointer, pfResult: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsRightOf(self, pPointerThat, pfResult);
    }
    pub fn IsRightOfOrEqualTo(self: *const IMarkupPointer, pPointerThat: ?*IMarkupPointer, pfResult: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsRightOfOrEqualTo(self, pPointerThat, pfResult);
    }
    pub fn IsEqualTo(self: *const IMarkupPointer, pPointerThat: ?*IMarkupPointer, pfAreEqual: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsEqualTo(self, pPointerThat, pfAreEqual);
    }
    pub fn MoveUnit(self: *const IMarkupPointer, muAction: MOVEUNIT_ACTION) callconv(.@"inline") HRESULT {
        return self.vtable.MoveUnit(self, muAction);
    }
    pub fn FindText(self: *const IMarkupPointer, pchFindText: ?PWSTR, dwFlags: u32, pIEndMatch: ?*IMarkupPointer, pIEndSearch: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.FindText(self, pchFindText, dwFlags, pIEndMatch, pIEndSearch);
    }
};

const IID_IMarkupContainer_Value = Guid.initString("3050f5f9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IMarkupContainer = &IID_IMarkupContainer_Value;
pub const IMarkupContainer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OwningDoc: *const fn(
            self: *const IMarkupContainer,
            ppDoc: ?*?*IHTMLDocument2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OwningDoc(self: *const IMarkupContainer, ppDoc: ?*?*IHTMLDocument2) callconv(.@"inline") HRESULT {
        return self.vtable.OwningDoc(self, ppDoc);
    }
};

const IID_IMarkupContainer2_Value = Guid.initString("3050f648-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IMarkupContainer2 = &IID_IMarkupContainer2_Value;
pub const IMarkupContainer2 = extern union {
    pub const VTable = extern struct {
        base: IMarkupContainer.VTable,
        CreateChangeLog: *const fn(
            self: *const IMarkupContainer2,
            pChangeSink: ?*IHTMLChangeSink,
            ppChangeLog: ?*?*IHTMLChangeLog,
            fForward: BOOL,
            fBackward: BOOL,
        ) callconv(.winapi) HRESULT,
        RegisterForDirtyRange: *const fn(
            self: *const IMarkupContainer2,
            pChangeSink: ?*IHTMLChangeSink,
            pdwCookie: ?*u32,
        ) callconv(.winapi) HRESULT,
        UnRegisterForDirtyRange: *const fn(
            self: *const IMarkupContainer2,
            dwCookie: u32,
        ) callconv(.winapi) HRESULT,
        GetAndClearDirtyRange: *const fn(
            self: *const IMarkupContainer2,
            dwCookie: u32,
            pIPointerBegin: ?*IMarkupPointer,
            pIPointerEnd: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        GetVersionNumber: *const fn(
            self: *const IMarkupContainer2,
        ) callconv(.winapi) i32,
        GetMasterElement: *const fn(
            self: *const IMarkupContainer2,
            ppElementMaster: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IMarkupContainer: IMarkupContainer,
    IUnknown: IUnknown,
    pub fn CreateChangeLog(self: *const IMarkupContainer2, pChangeSink: ?*IHTMLChangeSink, ppChangeLog: ?*?*IHTMLChangeLog, fForward: BOOL, fBackward: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.CreateChangeLog(self, pChangeSink, ppChangeLog, fForward, fBackward);
    }
    pub fn RegisterForDirtyRange(self: *const IMarkupContainer2, pChangeSink: ?*IHTMLChangeSink, pdwCookie: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.RegisterForDirtyRange(self, pChangeSink, pdwCookie);
    }
    pub fn UnRegisterForDirtyRange(self: *const IMarkupContainer2, dwCookie: u32) callconv(.@"inline") HRESULT {
        return self.vtable.UnRegisterForDirtyRange(self, dwCookie);
    }
    pub fn GetAndClearDirtyRange(self: *const IMarkupContainer2, dwCookie: u32, pIPointerBegin: ?*IMarkupPointer, pIPointerEnd: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.GetAndClearDirtyRange(self, dwCookie, pIPointerBegin, pIPointerEnd);
    }
    pub fn GetVersionNumber(self: *const IMarkupContainer2) callconv(.@"inline") i32 {
        return self.vtable.GetVersionNumber(self);
    }
    pub fn GetMasterElement(self: *const IMarkupContainer2, ppElementMaster: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.GetMasterElement(self, ppElementMaster);
    }
};

const IID_IHTMLChangeLog_Value = Guid.initString("3050f649-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLChangeLog = &IID_IHTMLChangeLog_Value;
pub const IHTMLChangeLog = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNextChange: *const fn(
            self: *const IHTMLChangeLog,
            pbBuffer: ?*u8,
            nBufferSize: i32,
            pnRecordLength: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetNextChange(self: *const IHTMLChangeLog, pbBuffer: ?*u8, nBufferSize: i32, pnRecordLength: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetNextChange(self, pbBuffer, nBufferSize, pnRecordLength);
    }
};

const IID_IHTMLChangeSink_Value = Guid.initString("3050f64a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLChangeSink = &IID_IHTMLChangeSink_Value;
pub const IHTMLChangeSink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Notify: *const fn(
            self: *const IHTMLChangeSink,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Notify(self: *const IHTMLChangeSink) callconv(.@"inline") HRESULT {
        return self.vtable.Notify(self);
    }
};

const IID_ISegmentList_Value = Guid.initString("3050f605-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISegmentList = &IID_ISegmentList_Value;
pub const ISegmentList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateIterator: *const fn(
            self: *const ISegmentList,
            ppIIter: ?*?*ISegmentListIterator,
        ) callconv(.winapi) HRESULT,
        GetType: *const fn(
            self: *const ISegmentList,
            peType: ?*SELECTION_TYPE,
        ) callconv(.winapi) HRESULT,
        IsEmpty: *const fn(
            self: *const ISegmentList,
            pfEmpty: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateIterator(self: *const ISegmentList, ppIIter: ?*?*ISegmentListIterator) callconv(.@"inline") HRESULT {
        return self.vtable.CreateIterator(self, ppIIter);
    }
    pub fn GetType(self: *const ISegmentList, peType: ?*SELECTION_TYPE) callconv(.@"inline") HRESULT {
        return self.vtable.GetType(self, peType);
    }
    pub fn IsEmpty(self: *const ISegmentList, pfEmpty: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsEmpty(self, pfEmpty);
    }
};

const IID_ISegmentListIterator_Value = Guid.initString("3050f692-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISegmentListIterator = &IID_ISegmentListIterator_Value;
pub const ISegmentListIterator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Current: *const fn(
            self: *const ISegmentListIterator,
            ppISegment: ?*?*ISegment,
        ) callconv(.winapi) HRESULT,
        First: *const fn(
            self: *const ISegmentListIterator,
        ) callconv(.winapi) HRESULT,
        IsDone: *const fn(
            self: *const ISegmentListIterator,
        ) callconv(.winapi) HRESULT,
        Advance: *const fn(
            self: *const ISegmentListIterator,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Current(self: *const ISegmentListIterator, ppISegment: ?*?*ISegment) callconv(.@"inline") HRESULT {
        return self.vtable.Current(self, ppISegment);
    }
    pub fn First(self: *const ISegmentListIterator) callconv(.@"inline") HRESULT {
        return self.vtable.First(self);
    }
    pub fn IsDone(self: *const ISegmentListIterator) callconv(.@"inline") HRESULT {
        return self.vtable.IsDone(self);
    }
    pub fn Advance(self: *const ISegmentListIterator) callconv(.@"inline") HRESULT {
        return self.vtable.Advance(self);
    }
};

const IID_IHTMLCaret_Value = Guid.initString("3050f604-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLCaret = &IID_IHTMLCaret_Value;
pub const IHTMLCaret = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveCaretToPointer: *const fn(
            self: *const IHTMLCaret,
            pDispPointer: ?*IDisplayPointer,
            fScrollIntoView: BOOL,
            eDir: CARET_DIRECTION,
        ) callconv(.winapi) HRESULT,
        MoveCaretToPointerEx: *const fn(
            self: *const IHTMLCaret,
            pDispPointer: ?*IDisplayPointer,
            fVisible: BOOL,
            fScrollIntoView: BOOL,
            eDir: CARET_DIRECTION,
        ) callconv(.winapi) HRESULT,
        MoveMarkupPointerToCaret: *const fn(
            self: *const IHTMLCaret,
            pIMarkupPointer: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        MoveDisplayPointerToCaret: *const fn(
            self: *const IHTMLCaret,
            pDispPointer: ?*IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        IsVisible: *const fn(
            self: *const IHTMLCaret,
            pIsVisible: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        Show: *const fn(
            self: *const IHTMLCaret,
            fScrollIntoView: BOOL,
        ) callconv(.winapi) HRESULT,
        Hide: *const fn(
            self: *const IHTMLCaret,
        ) callconv(.winapi) HRESULT,
        InsertText: *const fn(
            self: *const IHTMLCaret,
            pText: ?PWSTR,
            lLen: i32,
        ) callconv(.winapi) HRESULT,
        ScrollIntoView: *const fn(
            self: *const IHTMLCaret,
        ) callconv(.winapi) HRESULT,
        GetLocation: *const fn(
            self: *const IHTMLCaret,
            pPoint: ?*POINT,
            fTranslate: BOOL,
        ) callconv(.winapi) HRESULT,
        GetCaretDirection: *const fn(
            self: *const IHTMLCaret,
            peDir: ?*CARET_DIRECTION,
        ) callconv(.winapi) HRESULT,
        SetCaretDirection: *const fn(
            self: *const IHTMLCaret,
            eDir: CARET_DIRECTION,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MoveCaretToPointer(self: *const IHTMLCaret, pDispPointer: ?*IDisplayPointer, fScrollIntoView: BOOL, eDir: CARET_DIRECTION) callconv(.@"inline") HRESULT {
        return self.vtable.MoveCaretToPointer(self, pDispPointer, fScrollIntoView, eDir);
    }
    pub fn MoveCaretToPointerEx(self: *const IHTMLCaret, pDispPointer: ?*IDisplayPointer, fVisible: BOOL, fScrollIntoView: BOOL, eDir: CARET_DIRECTION) callconv(.@"inline") HRESULT {
        return self.vtable.MoveCaretToPointerEx(self, pDispPointer, fVisible, fScrollIntoView, eDir);
    }
    pub fn MoveMarkupPointerToCaret(self: *const IHTMLCaret, pIMarkupPointer: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveMarkupPointerToCaret(self, pIMarkupPointer);
    }
    pub fn MoveDisplayPointerToCaret(self: *const IHTMLCaret, pDispPointer: ?*IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveDisplayPointerToCaret(self, pDispPointer);
    }
    pub fn IsVisible(self: *const IHTMLCaret, pIsVisible: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsVisible(self, pIsVisible);
    }
    pub fn Show(self: *const IHTMLCaret, fScrollIntoView: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.Show(self, fScrollIntoView);
    }
    pub fn Hide(self: *const IHTMLCaret) callconv(.@"inline") HRESULT {
        return self.vtable.Hide(self);
    }
    pub fn InsertText(self: *const IHTMLCaret, pText: ?PWSTR, lLen: i32) callconv(.@"inline") HRESULT {
        return self.vtable.InsertText(self, pText, lLen);
    }
    pub fn ScrollIntoView(self: *const IHTMLCaret) callconv(.@"inline") HRESULT {
        return self.vtable.ScrollIntoView(self);
    }
    pub fn GetLocation(self: *const IHTMLCaret, pPoint: ?*POINT, fTranslate: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.GetLocation(self, pPoint, fTranslate);
    }
    pub fn GetCaretDirection(self: *const IHTMLCaret, peDir: ?*CARET_DIRECTION) callconv(.@"inline") HRESULT {
        return self.vtable.GetCaretDirection(self, peDir);
    }
    pub fn SetCaretDirection(self: *const IHTMLCaret, eDir: CARET_DIRECTION) callconv(.@"inline") HRESULT {
        return self.vtable.SetCaretDirection(self, eDir);
    }
};

const IID_ISegment_Value = Guid.initString("3050f683-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISegment = &IID_ISegment_Value;
pub const ISegment = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPointers: *const fn(
            self: *const ISegment,
            pIStart: ?*IMarkupPointer,
            pIEnd: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPointers(self: *const ISegment, pIStart: ?*IMarkupPointer, pIEnd: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.GetPointers(self, pIStart, pIEnd);
    }
};

const IID_IElementSegment_Value = Guid.initString("3050f68f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementSegment = &IID_IElementSegment_Value;
pub const IElementSegment = extern union {
    pub const VTable = extern struct {
        base: ISegment.VTable,
        GetElement: *const fn(
            self: *const IElementSegment,
            ppIElement: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        SetPrimary: *const fn(
            self: *const IElementSegment,
            fPrimary: BOOL,
        ) callconv(.winapi) HRESULT,
        IsPrimary: *const fn(
            self: *const IElementSegment,
            pfPrimary: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    ISegment: ISegment,
    IUnknown: IUnknown,
    pub fn GetElement(self: *const IElementSegment, ppIElement: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.GetElement(self, ppIElement);
    }
    pub fn SetPrimary(self: *const IElementSegment, fPrimary: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.SetPrimary(self, fPrimary);
    }
    pub fn IsPrimary(self: *const IElementSegment, pfPrimary: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsPrimary(self, pfPrimary);
    }
};

const IID_IHighlightSegment_Value = Guid.initString("3050f690-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHighlightSegment = &IID_IHighlightSegment_Value;
pub const IHighlightSegment = extern union {
    pub const VTable = extern struct {
        base: ISegment.VTable,
    };
    vtable: *const VTable,
    ISegment: ISegment,
    IUnknown: IUnknown,
};

const IID_IHighlightRenderingServices_Value = Guid.initString("3050f606-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHighlightRenderingServices = &IID_IHighlightRenderingServices_Value;
pub const IHighlightRenderingServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddSegment: *const fn(
            self: *const IHighlightRenderingServices,
            pDispPointerStart: ?*IDisplayPointer,
            pDispPointerEnd: ?*IDisplayPointer,
            pIRenderStyle: ?*IHTMLRenderStyle,
            ppISegment: ?*?*IHighlightSegment,
        ) callconv(.winapi) HRESULT,
        MoveSegmentToPointers: *const fn(
            self: *const IHighlightRenderingServices,
            pISegment: ?*IHighlightSegment,
            pDispPointerStart: ?*IDisplayPointer,
            pDispPointerEnd: ?*IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        RemoveSegment: *const fn(
            self: *const IHighlightRenderingServices,
            pISegment: ?*IHighlightSegment,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddSegment(self: *const IHighlightRenderingServices, pDispPointerStart: ?*IDisplayPointer, pDispPointerEnd: ?*IDisplayPointer, pIRenderStyle: ?*IHTMLRenderStyle, ppISegment: ?*?*IHighlightSegment) callconv(.@"inline") HRESULT {
        return self.vtable.AddSegment(self, pDispPointerStart, pDispPointerEnd, pIRenderStyle, ppISegment);
    }
    pub fn MoveSegmentToPointers(self: *const IHighlightRenderingServices, pISegment: ?*IHighlightSegment, pDispPointerStart: ?*IDisplayPointer, pDispPointerEnd: ?*IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveSegmentToPointers(self, pISegment, pDispPointerStart, pDispPointerEnd);
    }
    pub fn RemoveSegment(self: *const IHighlightRenderingServices, pISegment: ?*IHighlightSegment) callconv(.@"inline") HRESULT {
        return self.vtable.RemoveSegment(self, pISegment);
    }
};

const IID_ILineInfo_Value = Guid.initString("3050f7e2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ILineInfo = &IID_ILineInfo_Value;
pub const ILineInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_x: *const fn(
            self: *const ILineInfo,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseLine: *const fn(
            self: *const ILineInfo,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textDescent: *const fn(
            self: *const ILineInfo,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textHeight: *const fn(
            self: *const ILineInfo,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineDirection: *const fn(
            self: *const ILineInfo,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn get_x(self: *const ILineInfo, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_x(self, p);
    }
    pub fn get_baseLine(self: *const ILineInfo, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_baseLine(self, p);
    }
    pub fn get_textDescent(self: *const ILineInfo, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_textDescent(self, p);
    }
    pub fn get_textHeight(self: *const ILineInfo, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_textHeight(self, p);
    }
    pub fn get_lineDirection(self: *const ILineInfo, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_lineDirection(self, p);
    }
};

const IID_IDisplayPointer_Value = Guid.initString("3050f69e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDisplayPointer = &IID_IDisplayPointer_Value;
pub const IDisplayPointer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveToPoint: *const fn(
            self: *const IDisplayPointer,
            ptPoint: POINT,
            eCoordSystem: COORD_SYSTEM,
            pElementContext: ?*IHTMLElement,
            dwHitTestOptions: u32,
            pdwHitTestResults: ?*u32,
        ) callconv(.winapi) HRESULT,
        MoveUnit: *const fn(
            self: *const IDisplayPointer,
            eMoveUnit: DISPLAY_MOVEUNIT,
            lXPos: i32,
        ) callconv(.winapi) HRESULT,
        PositionMarkupPointer: *const fn(
            self: *const IDisplayPointer,
            pMarkupPointer: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        MoveToPointer: *const fn(
            self: *const IDisplayPointer,
            pDispPointer: ?*IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        SetPointerGravity: *const fn(
            self: *const IDisplayPointer,
            eGravity: POINTER_GRAVITY,
        ) callconv(.winapi) HRESULT,
        GetPointerGravity: *const fn(
            self: *const IDisplayPointer,
            peGravity: ?*POINTER_GRAVITY,
        ) callconv(.winapi) HRESULT,
        SetDisplayGravity: *const fn(
            self: *const IDisplayPointer,
            eGravity: DISPLAY_GRAVITY,
        ) callconv(.winapi) HRESULT,
        GetDisplayGravity: *const fn(
            self: *const IDisplayPointer,
            peGravity: ?*DISPLAY_GRAVITY,
        ) callconv(.winapi) HRESULT,
        IsPositioned: *const fn(
            self: *const IDisplayPointer,
            pfPositioned: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        Unposition: *const fn(
            self: *const IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        IsEqualTo: *const fn(
            self: *const IDisplayPointer,
            pDispPointer: ?*IDisplayPointer,
            pfIsEqual: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        IsLeftOf: *const fn(
            self: *const IDisplayPointer,
            pDispPointer: ?*IDisplayPointer,
            pfIsLeftOf: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        IsRightOf: *const fn(
            self: *const IDisplayPointer,
            pDispPointer: ?*IDisplayPointer,
            pfIsRightOf: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        IsAtBOL: *const fn(
            self: *const IDisplayPointer,
            pfBOL: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        MoveToMarkupPointer: *const fn(
            self: *const IDisplayPointer,
            pPointer: ?*IMarkupPointer,
            pDispLineContext: ?*IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        ScrollIntoView: *const fn(
            self: *const IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        GetLineInfo: *const fn(
            self: *const IDisplayPointer,
            ppLineInfo: ?*?*ILineInfo,
        ) callconv(.winapi) HRESULT,
        GetFlowElement: *const fn(
            self: *const IDisplayPointer,
            ppLayoutElement: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        QueryBreaks: *const fn(
            self: *const IDisplayPointer,
            pdwBreaks: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MoveToPoint(self: *const IDisplayPointer, ptPoint: POINT, eCoordSystem: COORD_SYSTEM, pElementContext: ?*IHTMLElement, dwHitTestOptions: u32, pdwHitTestResults: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToPoint(self, ptPoint, eCoordSystem, pElementContext, dwHitTestOptions, pdwHitTestResults);
    }
    pub fn MoveUnit(self: *const IDisplayPointer, eMoveUnit: DISPLAY_MOVEUNIT, lXPos: i32) callconv(.@"inline") HRESULT {
        return self.vtable.MoveUnit(self, eMoveUnit, lXPos);
    }
    pub fn PositionMarkupPointer(self: *const IDisplayPointer, pMarkupPointer: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.PositionMarkupPointer(self, pMarkupPointer);
    }
    pub fn MoveToPointer(self: *const IDisplayPointer, pDispPointer: ?*IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToPointer(self, pDispPointer);
    }
    pub fn SetPointerGravity(self: *const IDisplayPointer, eGravity: POINTER_GRAVITY) callconv(.@"inline") HRESULT {
        return self.vtable.SetPointerGravity(self, eGravity);
    }
    pub fn GetPointerGravity(self: *const IDisplayPointer, peGravity: ?*POINTER_GRAVITY) callconv(.@"inline") HRESULT {
        return self.vtable.GetPointerGravity(self, peGravity);
    }
    pub fn SetDisplayGravity(self: *const IDisplayPointer, eGravity: DISPLAY_GRAVITY) callconv(.@"inline") HRESULT {
        return self.vtable.SetDisplayGravity(self, eGravity);
    }
    pub fn GetDisplayGravity(self: *const IDisplayPointer, peGravity: ?*DISPLAY_GRAVITY) callconv(.@"inline") HRESULT {
        return self.vtable.GetDisplayGravity(self, peGravity);
    }
    pub fn IsPositioned(self: *const IDisplayPointer, pfPositioned: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsPositioned(self, pfPositioned);
    }
    pub fn Unposition(self: *const IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.Unposition(self);
    }
    pub fn IsEqualTo(self: *const IDisplayPointer, pDispPointer: ?*IDisplayPointer, pfIsEqual: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsEqualTo(self, pDispPointer, pfIsEqual);
    }
    pub fn IsLeftOf(self: *const IDisplayPointer, pDispPointer: ?*IDisplayPointer, pfIsLeftOf: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsLeftOf(self, pDispPointer, pfIsLeftOf);
    }
    pub fn IsRightOf(self: *const IDisplayPointer, pDispPointer: ?*IDisplayPointer, pfIsRightOf: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsRightOf(self, pDispPointer, pfIsRightOf);
    }
    pub fn IsAtBOL(self: *const IDisplayPointer, pfBOL: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsAtBOL(self, pfBOL);
    }
    pub fn MoveToMarkupPointer(self: *const IDisplayPointer, pPointer: ?*IMarkupPointer, pDispLineContext: ?*IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToMarkupPointer(self, pPointer, pDispLineContext);
    }
    pub fn ScrollIntoView(self: *const IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.ScrollIntoView(self);
    }
    pub fn GetLineInfo(self: *const IDisplayPointer, ppLineInfo: ?*?*ILineInfo) callconv(.@"inline") HRESULT {
        return self.vtable.GetLineInfo(self, ppLineInfo);
    }
    pub fn GetFlowElement(self: *const IDisplayPointer, ppLayoutElement: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.GetFlowElement(self, ppLayoutElement);
    }
    pub fn QueryBreaks(self: *const IDisplayPointer, pdwBreaks: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.QueryBreaks(self, pdwBreaks);
    }
};

const IID_IDisplayServices_Value = Guid.initString("3050f69d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDisplayServices = &IID_IDisplayServices_Value;
pub const IDisplayServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDisplayPointer: *const fn(
            self: *const IDisplayServices,
            ppDispPointer: ?*?*IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        TransformRect: *const fn(
            self: *const IDisplayServices,
            pRect: ?*RECT,
            eSource: COORD_SYSTEM,
            eDestination: COORD_SYSTEM,
            pIElement: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        TransformPoint: *const fn(
            self: *const IDisplayServices,
            pPoint: ?*POINT,
            eSource: COORD_SYSTEM,
            eDestination: COORD_SYSTEM,
            pIElement: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        GetCaret: *const fn(
            self: *const IDisplayServices,
            ppCaret: ?*?*IHTMLCaret,
        ) callconv(.winapi) HRESULT,
        GetComputedStyle: *const fn(
            self: *const IDisplayServices,
            pPointer: ?*IMarkupPointer,
            ppComputedStyle: ?*?*IHTMLComputedStyle,
        ) callconv(.winapi) HRESULT,
        ScrollRectIntoView: *const fn(
            self: *const IDisplayServices,
            pIElement: ?*IHTMLElement,
            rect: RECT,
        ) callconv(.winapi) HRESULT,
        HasFlowLayout: *const fn(
            self: *const IDisplayServices,
            pIElement: ?*IHTMLElement,
            pfHasFlowLayout: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateDisplayPointer(self: *const IDisplayServices, ppDispPointer: ?*?*IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.CreateDisplayPointer(self, ppDispPointer);
    }
    pub fn TransformRect(self: *const IDisplayServices, pRect: ?*RECT, eSource: COORD_SYSTEM, eDestination: COORD_SYSTEM, pIElement: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.TransformRect(self, pRect, eSource, eDestination, pIElement);
    }
    pub fn TransformPoint(self: *const IDisplayServices, pPoint: ?*POINT, eSource: COORD_SYSTEM, eDestination: COORD_SYSTEM, pIElement: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.TransformPoint(self, pPoint, eSource, eDestination, pIElement);
    }
    pub fn GetCaret(self: *const IDisplayServices, ppCaret: ?*?*IHTMLCaret) callconv(.@"inline") HRESULT {
        return self.vtable.GetCaret(self, ppCaret);
    }
    pub fn GetComputedStyle(self: *const IDisplayServices, pPointer: ?*IMarkupPointer, ppComputedStyle: ?*?*IHTMLComputedStyle) callconv(.@"inline") HRESULT {
        return self.vtable.GetComputedStyle(self, pPointer, ppComputedStyle);
    }
    pub fn ScrollRectIntoView(self: *const IDisplayServices, pIElement: ?*IHTMLElement, rect: RECT) callconv(.@"inline") HRESULT {
        return self.vtable.ScrollRectIntoView(self, pIElement, rect);
    }
    pub fn HasFlowLayout(self: *const IDisplayServices, pIElement: ?*IHTMLElement, pfHasFlowLayout: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.HasFlowLayout(self, pIElement, pfHasFlowLayout);
    }
};

const IID_IHtmlDlgSafeHelper_Value = Guid.initString("3050f81a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHtmlDlgSafeHelper = &IID_IHtmlDlgSafeHelper_Value;
pub const IHtmlDlgSafeHelper = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        choosecolordlg: *const fn(
            self: *const IHtmlDlgSafeHelper,
            initColor: VARIANT,
            rgbColor: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        getCharset: *const fn(
            self: *const IHtmlDlgSafeHelper,
            fontName: ?BSTR,
            charset: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Fonts: *const fn(
            self: *const IHtmlDlgSafeHelper,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BlockFormats: *const fn(
            self: *const IHtmlDlgSafeHelper,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn choosecolordlg(self: *const IHtmlDlgSafeHelper, initColor: VARIANT, rgbColor: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.choosecolordlg(self, initColor, rgbColor);
    }
    pub fn getCharset(self: *const IHtmlDlgSafeHelper, fontName: ?BSTR, charset: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getCharset(self, fontName, charset);
    }
    pub fn get_Fonts(self: *const IHtmlDlgSafeHelper, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Fonts(self, p);
    }
    pub fn get_BlockFormats(self: *const IHtmlDlgSafeHelper, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_BlockFormats(self, p);
    }
};

const IID_IBlockFormats_Value = Guid.initString("3050f830-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IBlockFormats = &IID_IBlockFormats_Value;
pub const IBlockFormats = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IBlockFormats,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IBlockFormats,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        Item: *const fn(
            self: *const IBlockFormats,
            pvarIndex: ?*VARIANT,
            pbstrBlockFormat: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IBlockFormats, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__NewEnum(self, p);
    }
    pub fn get_Count(self: *const IBlockFormats, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_Count(self, p);
    }
    pub fn Item(self: *const IBlockFormats, pvarIndex: ?*VARIANT, pbstrBlockFormat: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.Item(self, pvarIndex, pbstrBlockFormat);
    }
};

const IID_IFontNames_Value = Guid.initString("3050f839-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IFontNames = &IID_IFontNames_Value;
pub const IFontNames = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IFontNames,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IFontNames,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        Item: *const fn(
            self: *const IFontNames,
            pvarIndex: ?*VARIANT,
            pbstrFontName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IFontNames, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__NewEnum(self, p);
    }
    pub fn get_Count(self: *const IFontNames, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_Count(self, p);
    }
    pub fn Item(self: *const IFontNames, pvarIndex: ?*VARIANT, pbstrFontName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.Item(self, pvarIndex, pbstrFontName);
    }
};

const IID_ICSSFilter_Value = Guid.initString("3050f3ec-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICSSFilter = &IID_ICSSFilter_Value;
pub const ICSSFilter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSite: *const fn(
            self: *const ICSSFilter,
            pSink: ?*ICSSFilterSite,
        ) callconv(.winapi) HRESULT,
        OnAmbientPropertyChange: *const fn(
            self: *const ICSSFilter,
            dispid: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetSite(self: *const ICSSFilter, pSink: ?*ICSSFilterSite) callconv(.@"inline") HRESULT {
        return self.vtable.SetSite(self, pSink);
    }
    pub fn OnAmbientPropertyChange(self: *const ICSSFilter, dispid: i32) callconv(.@"inline") HRESULT {
        return self.vtable.OnAmbientPropertyChange(self, dispid);
    }
};

const IID_ISecureUrlHost_Value = Guid.initString("c81984c4-74c8-11d2-baa9-00c04fc2040e");
pub const IID_ISecureUrlHost = &IID_ISecureUrlHost_Value;
pub const ISecureUrlHost = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ValidateSecureUrl: *const fn(
            self: *const ISecureUrlHost,
            pfAllow: ?*BOOL,
            pchUrlInQuestion: ?PWSTR,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ValidateSecureUrl(self: *const ISecureUrlHost, pfAllow: ?*BOOL, pchUrlInQuestion: ?PWSTR, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.ValidateSecureUrl(self, pfAllow, pchUrlInQuestion, dwFlags);
    }
};

const IID_IMarkupServices_Value = Guid.initString("3050f4a0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IMarkupServices = &IID_IMarkupServices_Value;
pub const IMarkupServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateMarkupPointer: *const fn(
            self: *const IMarkupServices,
            ppPointer: ?*?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        CreateMarkupContainer: *const fn(
            self: *const IMarkupServices,
            ppMarkupContainer: ?*?*IMarkupContainer,
        ) callconv(.winapi) HRESULT,
        CreateElement: *const fn(
            self: *const IMarkupServices,
            tagID: ELEMENT_TAG_ID,
            pchAttributes: ?PWSTR,
            ppElement: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        CloneElement: *const fn(
            self: *const IMarkupServices,
            pElemCloneThis: ?*IHTMLElement,
            ppElementTheClone: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        InsertElement: *const fn(
            self: *const IMarkupServices,
            pElementInsert: ?*IHTMLElement,
            pPointerStart: ?*IMarkupPointer,
            pPointerFinish: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        RemoveElement: *const fn(
            self: *const IMarkupServices,
            pElementRemove: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        Remove: *const fn(
            self: *const IMarkupServices,
            pPointerStart: ?*IMarkupPointer,
            pPointerFinish: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        Copy: *const fn(
            self: *const IMarkupServices,
            pPointerSourceStart: ?*IMarkupPointer,
            pPointerSourceFinish: ?*IMarkupPointer,
            pPointerTarget: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        Move: *const fn(
            self: *const IMarkupServices,
            pPointerSourceStart: ?*IMarkupPointer,
            pPointerSourceFinish: ?*IMarkupPointer,
            pPointerTarget: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        InsertText: *const fn(
            self: *const IMarkupServices,
            pchText: ?PWSTR,
            cch: i32,
            pPointerTarget: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        ParseString: *const fn(
            self: *const IMarkupServices,
            pchHTML: ?PWSTR,
            dwFlags: u32,
            ppContainerResult: ?*?*IMarkupContainer,
            ppPointerStart: ?*IMarkupPointer,
            ppPointerFinish: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        ParseGlobal: *const fn(
            self: *const IMarkupServices,
            hglobalHTML: isize,
            dwFlags: u32,
            ppContainerResult: ?*?*IMarkupContainer,
            pPointerStart: ?*IMarkupPointer,
            pPointerFinish: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        IsScopedElement: *const fn(
            self: *const IMarkupServices,
            pElement: ?*IHTMLElement,
            pfScoped: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        GetElementTagId: *const fn(
            self: *const IMarkupServices,
            pElement: ?*IHTMLElement,
            ptagId: ?*ELEMENT_TAG_ID,
        ) callconv(.winapi) HRESULT,
        GetTagIDForName: *const fn(
            self: *const IMarkupServices,
            bstrName: ?BSTR,
            ptagId: ?*ELEMENT_TAG_ID,
        ) callconv(.winapi) HRESULT,
        GetNameForTagID: *const fn(
            self: *const IMarkupServices,
            tagId: ELEMENT_TAG_ID,
            pbstrName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        MovePointersToRange: *const fn(
            self: *const IMarkupServices,
            pIRange: ?*IHTMLTxtRange,
            pPointerStart: ?*IMarkupPointer,
            pPointerFinish: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        MoveRangeToPointers: *const fn(
            self: *const IMarkupServices,
            pPointerStart: ?*IMarkupPointer,
            pPointerFinish: ?*IMarkupPointer,
            pIRange: ?*IHTMLTxtRange,
        ) callconv(.winapi) HRESULT,
        BeginUndoUnit: *const fn(
            self: *const IMarkupServices,
            pchTitle: ?PWSTR,
        ) callconv(.winapi) HRESULT,
        EndUndoUnit: *const fn(
            self: *const IMarkupServices,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateMarkupPointer(self: *const IMarkupServices, ppPointer: ?*?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.CreateMarkupPointer(self, ppPointer);
    }
    pub fn CreateMarkupContainer(self: *const IMarkupServices, ppMarkupContainer: ?*?*IMarkupContainer) callconv(.@"inline") HRESULT {
        return self.vtable.CreateMarkupContainer(self, ppMarkupContainer);
    }
    pub fn CreateElement(self: *const IMarkupServices, tagID: ELEMENT_TAG_ID, pchAttributes: ?PWSTR, ppElement: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.CreateElement(self, tagID, pchAttributes, ppElement);
    }
    pub fn CloneElement(self: *const IMarkupServices, pElemCloneThis: ?*IHTMLElement, ppElementTheClone: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.CloneElement(self, pElemCloneThis, ppElementTheClone);
    }
    pub fn InsertElement(self: *const IMarkupServices, pElementInsert: ?*IHTMLElement, pPointerStart: ?*IMarkupPointer, pPointerFinish: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.InsertElement(self, pElementInsert, pPointerStart, pPointerFinish);
    }
    pub fn RemoveElement(self: *const IMarkupServices, pElementRemove: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.RemoveElement(self, pElementRemove);
    }
    pub fn Remove(self: *const IMarkupServices, pPointerStart: ?*IMarkupPointer, pPointerFinish: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.Remove(self, pPointerStart, pPointerFinish);
    }
    pub fn Copy(self: *const IMarkupServices, pPointerSourceStart: ?*IMarkupPointer, pPointerSourceFinish: ?*IMarkupPointer, pPointerTarget: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.Copy(self, pPointerSourceStart, pPointerSourceFinish, pPointerTarget);
    }
    pub fn Move(self: *const IMarkupServices, pPointerSourceStart: ?*IMarkupPointer, pPointerSourceFinish: ?*IMarkupPointer, pPointerTarget: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.Move(self, pPointerSourceStart, pPointerSourceFinish, pPointerTarget);
    }
    pub fn InsertText(self: *const IMarkupServices, pchText: ?PWSTR, cch: i32, pPointerTarget: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.InsertText(self, pchText, cch, pPointerTarget);
    }
    pub fn ParseString(self: *const IMarkupServices, pchHTML: ?PWSTR, dwFlags: u32, ppContainerResult: ?*?*IMarkupContainer, ppPointerStart: ?*IMarkupPointer, ppPointerFinish: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.ParseString(self, pchHTML, dwFlags, ppContainerResult, ppPointerStart, ppPointerFinish);
    }
    pub fn ParseGlobal(self: *const IMarkupServices, hglobalHTML: isize, dwFlags: u32, ppContainerResult: ?*?*IMarkupContainer, pPointerStart: ?*IMarkupPointer, pPointerFinish: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.ParseGlobal(self, hglobalHTML, dwFlags, ppContainerResult, pPointerStart, pPointerFinish);
    }
    pub fn IsScopedElement(self: *const IMarkupServices, pElement: ?*IHTMLElement, pfScoped: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsScopedElement(self, pElement, pfScoped);
    }
    pub fn GetElementTagId(self: *const IMarkupServices, pElement: ?*IHTMLElement, ptagId: ?*ELEMENT_TAG_ID) callconv(.@"inline") HRESULT {
        return self.vtable.GetElementTagId(self, pElement, ptagId);
    }
    pub fn GetTagIDForName(self: *const IMarkupServices, bstrName: ?BSTR, ptagId: ?*ELEMENT_TAG_ID) callconv(.@"inline") HRESULT {
        return self.vtable.GetTagIDForName(self, bstrName, ptagId);
    }
    pub fn GetNameForTagID(self: *const IMarkupServices, tagId: ELEMENT_TAG_ID, pbstrName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetNameForTagID(self, tagId, pbstrName);
    }
    pub fn MovePointersToRange(self: *const IMarkupServices, pIRange: ?*IHTMLTxtRange, pPointerStart: ?*IMarkupPointer, pPointerFinish: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MovePointersToRange(self, pIRange, pPointerStart, pPointerFinish);
    }
    pub fn MoveRangeToPointers(self: *const IMarkupServices, pPointerStart: ?*IMarkupPointer, pPointerFinish: ?*IMarkupPointer, pIRange: ?*IHTMLTxtRange) callconv(.@"inline") HRESULT {
        return self.vtable.MoveRangeToPointers(self, pPointerStart, pPointerFinish, pIRange);
    }
    pub fn BeginUndoUnit(self: *const IMarkupServices, pchTitle: ?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.BeginUndoUnit(self, pchTitle);
    }
    pub fn EndUndoUnit(self: *const IMarkupServices) callconv(.@"inline") HRESULT {
        return self.vtable.EndUndoUnit(self);
    }
};

const IID_IMarkupServices2_Value = Guid.initString("3050f682-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IMarkupServices2 = &IID_IMarkupServices2_Value;
pub const IMarkupServices2 = extern union {
    pub const VTable = extern struct {
        base: IMarkupServices.VTable,
        ParseGlobalEx: *const fn(
            self: *const IMarkupServices2,
            hglobalHTML: isize,
            dwFlags: u32,
            pContext: ?*IMarkupContainer,
            ppContainerResult: ?*?*IMarkupContainer,
            pPointerStart: ?*IMarkupPointer,
            pPointerFinish: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        ValidateElements: *const fn(
            self: *const IMarkupServices2,
            pPointerStart: ?*IMarkupPointer,
            pPointerFinish: ?*IMarkupPointer,
            pPointerTarget: ?*IMarkupPointer,
            pPointerStatus: ?*IMarkupPointer,
            ppElemFailBottom: ?*?*IHTMLElement,
            ppElemFailTop: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        SaveSegmentsToClipboard: *const fn(
            self: *const IMarkupServices2,
            pSegmentList: ?*ISegmentList,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IMarkupServices: IMarkupServices,
    IUnknown: IUnknown,
    pub fn ParseGlobalEx(self: *const IMarkupServices2, hglobalHTML: isize, dwFlags: u32, pContext: ?*IMarkupContainer, ppContainerResult: ?*?*IMarkupContainer, pPointerStart: ?*IMarkupPointer, pPointerFinish: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.ParseGlobalEx(self, hglobalHTML, dwFlags, pContext, ppContainerResult, pPointerStart, pPointerFinish);
    }
    pub fn ValidateElements(self: *const IMarkupServices2, pPointerStart: ?*IMarkupPointer, pPointerFinish: ?*IMarkupPointer, pPointerTarget: ?*IMarkupPointer, pPointerStatus: ?*IMarkupPointer, ppElemFailBottom: ?*?*IHTMLElement, ppElemFailTop: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.ValidateElements(self, pPointerStart, pPointerFinish, pPointerTarget, pPointerStatus, ppElemFailBottom, ppElemFailTop);
    }
    pub fn SaveSegmentsToClipboard(self: *const IMarkupServices2, pSegmentList: ?*ISegmentList, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SaveSegmentsToClipboard(self, pSegmentList, dwFlags);
    }
};

const IID_IHTMLChangePlayback_Value = Guid.initString("3050f6e0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLChangePlayback = &IID_IHTMLChangePlayback_Value;
pub const IHTMLChangePlayback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ExecChange: *const fn(
            self: *const IHTMLChangePlayback,
            pbRecord: ?*u8,
            fForward: BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ExecChange(self: *const IHTMLChangePlayback, pbRecord: ?*u8, fForward: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.ExecChange(self, pbRecord, fForward);
    }
};

const IID_IMarkupPointer2_Value = Guid.initString("3050f675-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IMarkupPointer2 = &IID_IMarkupPointer2_Value;
pub const IMarkupPointer2 = extern union {
    pub const VTable = extern struct {
        base: IMarkupPointer.VTable,
        IsAtWordBreak: *const fn(
            self: *const IMarkupPointer2,
            pfAtBreak: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        GetMarkupPosition: *const fn(
            self: *const IMarkupPointer2,
            plMP: ?*i32,
        ) callconv(.winapi) HRESULT,
        MoveToMarkupPosition: *const fn(
            self: *const IMarkupPointer2,
            pContainer: ?*IMarkupContainer,
            lMP: i32,
        ) callconv(.winapi) HRESULT,
        MoveUnitBounded: *const fn(
            self: *const IMarkupPointer2,
            muAction: MOVEUNIT_ACTION,
            pIBoundary: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        IsInsideURL: *const fn(
            self: *const IMarkupPointer2,
            pRight: ?*IMarkupPointer,
            pfResult: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        MoveToContent: *const fn(
            self: *const IMarkupPointer2,
            pIElement: ?*IHTMLElement,
            fAtStart: BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IMarkupPointer: IMarkupPointer,
    IUnknown: IUnknown,
    pub fn IsAtWordBreak(self: *const IMarkupPointer2, pfAtBreak: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsAtWordBreak(self, pfAtBreak);
    }
    pub fn GetMarkupPosition(self: *const IMarkupPointer2, plMP: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetMarkupPosition(self, plMP);
    }
    pub fn MoveToMarkupPosition(self: *const IMarkupPointer2, pContainer: ?*IMarkupContainer, lMP: i32) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToMarkupPosition(self, pContainer, lMP);
    }
    pub fn MoveUnitBounded(self: *const IMarkupPointer2, muAction: MOVEUNIT_ACTION, pIBoundary: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveUnitBounded(self, muAction, pIBoundary);
    }
    pub fn IsInsideURL(self: *const IMarkupPointer2, pRight: ?*IMarkupPointer, pfResult: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsInsideURL(self, pRight, pfResult);
    }
    pub fn MoveToContent(self: *const IMarkupPointer2, pIElement: ?*IHTMLElement, fAtStart: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToContent(self, pIElement, fAtStart);
    }
};

const IID_IMarkupTextFrags_Value = Guid.initString("3050f5fa-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IMarkupTextFrags = &IID_IMarkupTextFrags_Value;
pub const IMarkupTextFrags = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTextFragCount: *const fn(
            self: *const IMarkupTextFrags,
            pcFrags: ?*i32,
        ) callconv(.winapi) HRESULT,
        GetTextFrag: *const fn(
            self: *const IMarkupTextFrags,
            iFrag: i32,
            pbstrFrag: ?*?BSTR,
            pPointerFrag: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        RemoveTextFrag: *const fn(
            self: *const IMarkupTextFrags,
            iFrag: i32,
        ) callconv(.winapi) HRESULT,
        InsertTextFrag: *const fn(
            self: *const IMarkupTextFrags,
            iFrag: i32,
            bstrInsert: ?BSTR,
            pPointerInsert: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        FindTextFragFromMarkupPointer: *const fn(
            self: *const IMarkupTextFrags,
            pPointerFind: ?*IMarkupPointer,
            piFrag: ?*i32,
            pfFragFound: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTextFragCount(self: *const IMarkupTextFrags, pcFrags: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetTextFragCount(self, pcFrags);
    }
    pub fn GetTextFrag(self: *const IMarkupTextFrags, iFrag: i32, pbstrFrag: ?*?BSTR, pPointerFrag: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.GetTextFrag(self, iFrag, pbstrFrag, pPointerFrag);
    }
    pub fn RemoveTextFrag(self: *const IMarkupTextFrags, iFrag: i32) callconv(.@"inline") HRESULT {
        return self.vtable.RemoveTextFrag(self, iFrag);
    }
    pub fn InsertTextFrag(self: *const IMarkupTextFrags, iFrag: i32, bstrInsert: ?BSTR, pPointerInsert: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.InsertTextFrag(self, iFrag, bstrInsert, pPointerInsert);
    }
    pub fn FindTextFragFromMarkupPointer(self: *const IMarkupTextFrags, pPointerFind: ?*IMarkupPointer, piFrag: ?*i32, pfFragFound: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.FindTextFragFromMarkupPointer(self, pPointerFind, piFrag, pfFragFound);
    }
};

const IID_IXMLGenericParse_Value = Guid.initString("e4e23071-4d07-11d2-ae76-0080c73bc199");
pub const IID_IXMLGenericParse = &IID_IXMLGenericParse_Value;
pub const IXMLGenericParse = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetGenericParse: *const fn(
            self: *const IXMLGenericParse,
            fDoGeneric: i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetGenericParse(self: *const IXMLGenericParse, fDoGeneric: i16) callconv(.@"inline") HRESULT {
        return self.vtable.SetGenericParse(self, fDoGeneric);
    }
};

const IID_IHTMLEditHost_Value = Guid.initString("3050f6a0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEditHost = &IID_IHTMLEditHost_Value;
pub const IHTMLEditHost = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SnapRect: *const fn(
            self: *const IHTMLEditHost,
            pIElement: ?*IHTMLElement,
            prcNew: ?*RECT,
            eHandle: ELEMENT_CORNER,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SnapRect(self: *const IHTMLEditHost, pIElement: ?*IHTMLElement, prcNew: ?*RECT, eHandle: ELEMENT_CORNER) callconv(.@"inline") HRESULT {
        return self.vtable.SnapRect(self, pIElement, prcNew, eHandle);
    }
};

const IID_IHTMLEditHost2_Value = Guid.initString("3050f848-98b5-11cf-bb82-00aa00bdce0d");
pub const IID_IHTMLEditHost2 = &IID_IHTMLEditHost2_Value;
pub const IHTMLEditHost2 = extern union {
    pub const VTable = extern struct {
        base: IHTMLEditHost.VTable,
        PreDrag: *const fn(
            self: *const IHTMLEditHost2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IHTMLEditHost: IHTMLEditHost,
    IUnknown: IUnknown,
    pub fn PreDrag(self: *const IHTMLEditHost2) callconv(.@"inline") HRESULT {
        return self.vtable.PreDrag(self);
    }
};

const IID_ISequenceNumber_Value = Guid.initString("3050f6c1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISequenceNumber = &IID_ISequenceNumber_Value;
pub const ISequenceNumber = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSequenceNumber: *const fn(
            self: *const ISequenceNumber,
            nCurrent: i32,
            pnNew: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSequenceNumber(self: *const ISequenceNumber, nCurrent: i32, pnNew: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetSequenceNumber(self, nCurrent, pnNew);
    }
};

const IID_IIMEServices_Value = Guid.initString("3050f6ca-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IIMEServices = &IID_IIMEServices_Value;
pub const IIMEServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetActiveIMM: *const fn(
            self: *const IIMEServices,
            ppActiveIMM: ?*?*IActiveIMMApp,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetActiveIMM(self: *const IIMEServices, ppActiveIMM: ?*?*IActiveIMMApp) callconv(.@"inline") HRESULT {
        return self.vtable.GetActiveIMM(self, ppActiveIMM);
    }
};

const IID_ISelectionServicesListener_Value = Guid.initString("3050f699-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISelectionServicesListener = &IID_ISelectionServicesListener_Value;
pub const ISelectionServicesListener = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginSelectionUndo: *const fn(
            self: *const ISelectionServicesListener,
        ) callconv(.winapi) HRESULT,
        EndSelectionUndo: *const fn(
            self: *const ISelectionServicesListener,
        ) callconv(.winapi) HRESULT,
        OnSelectedElementExit: *const fn(
            self: *const ISelectionServicesListener,
            pIElementStart: ?*IMarkupPointer,
            pIElementEnd: ?*IMarkupPointer,
            pIElementContentStart: ?*IMarkupPointer,
            pIElementContentEnd: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        OnChangeType: *const fn(
            self: *const ISelectionServicesListener,
            eType: SELECTION_TYPE,
            pIListener: ?*ISelectionServicesListener,
        ) callconv(.winapi) HRESULT,
        GetTypeDetail: *const fn(
            self: *const ISelectionServicesListener,
            pTypeDetail: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn BeginSelectionUndo(self: *const ISelectionServicesListener) callconv(.@"inline") HRESULT {
        return self.vtable.BeginSelectionUndo(self);
    }
    pub fn EndSelectionUndo(self: *const ISelectionServicesListener) callconv(.@"inline") HRESULT {
        return self.vtable.EndSelectionUndo(self);
    }
    pub fn OnSelectedElementExit(self: *const ISelectionServicesListener, pIElementStart: ?*IMarkupPointer, pIElementEnd: ?*IMarkupPointer, pIElementContentStart: ?*IMarkupPointer, pIElementContentEnd: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.OnSelectedElementExit(self, pIElementStart, pIElementEnd, pIElementContentStart, pIElementContentEnd);
    }
    pub fn OnChangeType(self: *const ISelectionServicesListener, eType: SELECTION_TYPE, pIListener: ?*ISelectionServicesListener) callconv(.@"inline") HRESULT {
        return self.vtable.OnChangeType(self, eType, pIListener);
    }
    pub fn GetTypeDetail(self: *const ISelectionServicesListener, pTypeDetail: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetTypeDetail(self, pTypeDetail);
    }
};

const IID_ISelectionServices_Value = Guid.initString("3050f684-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISelectionServices = &IID_ISelectionServices_Value;
pub const ISelectionServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSelectionType: *const fn(
            self: *const ISelectionServices,
            eType: SELECTION_TYPE,
            pIListener: ?*ISelectionServicesListener,
        ) callconv(.winapi) HRESULT,
        GetMarkupContainer: *const fn(
            self: *const ISelectionServices,
            ppIContainer: ?*?*IMarkupContainer,
        ) callconv(.winapi) HRESULT,
        AddSegment: *const fn(
            self: *const ISelectionServices,
            pIStart: ?*IMarkupPointer,
            pIEnd: ?*IMarkupPointer,
            ppISegmentAdded: ?*?*ISegment,
        ) callconv(.winapi) HRESULT,
        AddElementSegment: *const fn(
            self: *const ISelectionServices,
            pIElement: ?*IHTMLElement,
            ppISegmentAdded: ?*?*IElementSegment,
        ) callconv(.winapi) HRESULT,
        RemoveSegment: *const fn(
            self: *const ISelectionServices,
            pISegment: ?*ISegment,
        ) callconv(.winapi) HRESULT,
        GetSelectionServicesListener: *const fn(
            self: *const ISelectionServices,
            ppISelectionServicesListener: ?*?*ISelectionServicesListener,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetSelectionType(self: *const ISelectionServices, eType: SELECTION_TYPE, pIListener: ?*ISelectionServicesListener) callconv(.@"inline") HRESULT {
        return self.vtable.SetSelectionType(self, eType, pIListener);
    }
    pub fn GetMarkupContainer(self: *const ISelectionServices, ppIContainer: ?*?*IMarkupContainer) callconv(.@"inline") HRESULT {
        return self.vtable.GetMarkupContainer(self, ppIContainer);
    }
    pub fn AddSegment(self: *const ISelectionServices, pIStart: ?*IMarkupPointer, pIEnd: ?*IMarkupPointer, ppISegmentAdded: ?*?*ISegment) callconv(.@"inline") HRESULT {
        return self.vtable.AddSegment(self, pIStart, pIEnd, ppISegmentAdded);
    }
    pub fn AddElementSegment(self: *const ISelectionServices, pIElement: ?*IHTMLElement, ppISegmentAdded: ?*?*IElementSegment) callconv(.@"inline") HRESULT {
        return self.vtable.AddElementSegment(self, pIElement, ppISegmentAdded);
    }
    pub fn RemoveSegment(self: *const ISelectionServices, pISegment: ?*ISegment) callconv(.@"inline") HRESULT {
        return self.vtable.RemoveSegment(self, pISegment);
    }
    pub fn GetSelectionServicesListener(self: *const ISelectionServices, ppISelectionServicesListener: ?*?*ISelectionServicesListener) callconv(.@"inline") HRESULT {
        return self.vtable.GetSelectionServicesListener(self, ppISelectionServicesListener);
    }
};

const IID_IHTMLEditDesigner_Value = Guid.initString("3050f662-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEditDesigner = &IID_IHTMLEditDesigner_Value;
pub const IHTMLEditDesigner = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PreHandleEvent: *const fn(
            self: *const IHTMLEditDesigner,
            inEvtDispId: i32,
            pIEventObj: ?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
        PostHandleEvent: *const fn(
            self: *const IHTMLEditDesigner,
            inEvtDispId: i32,
            pIEventObj: ?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
        TranslateAccelerator: *const fn(
            self: *const IHTMLEditDesigner,
            inEvtDispId: i32,
            pIEventObj: ?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
        PostEditorEventNotify: *const fn(
            self: *const IHTMLEditDesigner,
            inEvtDispId: i32,
            pIEventObj: ?*IHTMLEventObj,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn PreHandleEvent(self: *const IHTMLEditDesigner, inEvtDispId: i32, pIEventObj: ?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.PreHandleEvent(self, inEvtDispId, pIEventObj);
    }
    pub fn PostHandleEvent(self: *const IHTMLEditDesigner, inEvtDispId: i32, pIEventObj: ?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.PostHandleEvent(self, inEvtDispId, pIEventObj);
    }
    pub fn TranslateAccelerator(self: *const IHTMLEditDesigner, inEvtDispId: i32, pIEventObj: ?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.TranslateAccelerator(self, inEvtDispId, pIEventObj);
    }
    pub fn PostEditorEventNotify(self: *const IHTMLEditDesigner, inEvtDispId: i32, pIEventObj: ?*IHTMLEventObj) callconv(.@"inline") HRESULT {
        return self.vtable.PostEditorEventNotify(self, inEvtDispId, pIEventObj);
    }
};

const IID_IHTMLEditServices_Value = Guid.initString("3050f663-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEditServices = &IID_IHTMLEditServices_Value;
pub const IHTMLEditServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddDesigner: *const fn(
            self: *const IHTMLEditServices,
            pIDesigner: ?*IHTMLEditDesigner,
        ) callconv(.winapi) HRESULT,
        RemoveDesigner: *const fn(
            self: *const IHTMLEditServices,
            pIDesigner: ?*IHTMLEditDesigner,
        ) callconv(.winapi) HRESULT,
        GetSelectionServices: *const fn(
            self: *const IHTMLEditServices,
            pIContainer: ?*IMarkupContainer,
            ppSelSvc: ?*?*ISelectionServices,
        ) callconv(.winapi) HRESULT,
        MoveToSelectionAnchor: *const fn(
            self: *const IHTMLEditServices,
            pIStartAnchor: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        MoveToSelectionEnd: *const fn(
            self: *const IHTMLEditServices,
            pIEndAnchor: ?*IMarkupPointer,
        ) callconv(.winapi) HRESULT,
        SelectRange: *const fn(
            self: *const IHTMLEditServices,
            pStart: ?*IMarkupPointer,
            pEnd: ?*IMarkupPointer,
            eType: SELECTION_TYPE,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddDesigner(self: *const IHTMLEditServices, pIDesigner: ?*IHTMLEditDesigner) callconv(.@"inline") HRESULT {
        return self.vtable.AddDesigner(self, pIDesigner);
    }
    pub fn RemoveDesigner(self: *const IHTMLEditServices, pIDesigner: ?*IHTMLEditDesigner) callconv(.@"inline") HRESULT {
        return self.vtable.RemoveDesigner(self, pIDesigner);
    }
    pub fn GetSelectionServices(self: *const IHTMLEditServices, pIContainer: ?*IMarkupContainer, ppSelSvc: ?*?*ISelectionServices) callconv(.@"inline") HRESULT {
        return self.vtable.GetSelectionServices(self, pIContainer, ppSelSvc);
    }
    pub fn MoveToSelectionAnchor(self: *const IHTMLEditServices, pIStartAnchor: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToSelectionAnchor(self, pIStartAnchor);
    }
    pub fn MoveToSelectionEnd(self: *const IHTMLEditServices, pIEndAnchor: ?*IMarkupPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToSelectionEnd(self, pIEndAnchor);
    }
    pub fn SelectRange(self: *const IHTMLEditServices, pStart: ?*IMarkupPointer, pEnd: ?*IMarkupPointer, eType: SELECTION_TYPE) callconv(.@"inline") HRESULT {
        return self.vtable.SelectRange(self, pStart, pEnd, eType);
    }
};

const IID_IHTMLEditServices2_Value = Guid.initString("3050f812-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLEditServices2 = &IID_IHTMLEditServices2_Value;
pub const IHTMLEditServices2 = extern union {
    pub const VTable = extern struct {
        base: IHTMLEditServices.VTable,
        MoveToSelectionAnchorEx: *const fn(
            self: *const IHTMLEditServices2,
            pIStartAnchor: ?*IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        MoveToSelectionEndEx: *const fn(
            self: *const IHTMLEditServices2,
            pIEndAnchor: ?*IDisplayPointer,
        ) callconv(.winapi) HRESULT,
        FreezeVirtualCaretPos: *const fn(
            self: *const IHTMLEditServices2,
            fReCompute: BOOL,
        ) callconv(.winapi) HRESULT,
        UnFreezeVirtualCaretPos: *const fn(
            self: *const IHTMLEditServices2,
            fReset: BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IHTMLEditServices: IHTMLEditServices,
    IUnknown: IUnknown,
    pub fn MoveToSelectionAnchorEx(self: *const IHTMLEditServices2, pIStartAnchor: ?*IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToSelectionAnchorEx(self, pIStartAnchor);
    }
    pub fn MoveToSelectionEndEx(self: *const IHTMLEditServices2, pIEndAnchor: ?*IDisplayPointer) callconv(.@"inline") HRESULT {
        return self.vtable.MoveToSelectionEndEx(self, pIEndAnchor);
    }
    pub fn FreezeVirtualCaretPos(self: *const IHTMLEditServices2, fReCompute: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.FreezeVirtualCaretPos(self, fReCompute);
    }
    pub fn UnFreezeVirtualCaretPos(self: *const IHTMLEditServices2, fReset: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.UnFreezeVirtualCaretPos(self, fReset);
    }
};

const IID_IHTMLComputedStyle_Value = Guid.initString("3050f6c3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLComputedStyle = &IID_IHTMLComputedStyle_Value;
pub const IHTMLComputedStyle = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bold: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_italic: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_underline: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_overline: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_strikeOut: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_subScript: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_superScript: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_explicitFace: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontWeight: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontSize: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fontName: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i8,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hasBgColor: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textColor: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_backgroundColor: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_preFormatted: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_direction: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_blockDirection: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OL: *const fn(
            self: *const IHTMLComputedStyle,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        IsEqual: *const fn(
            self: *const IHTMLComputedStyle,
            pComputedStyle: ?*IHTMLComputedStyle,
            pfEqual: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn get_bold(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_bold(self, p);
    }
    pub fn get_italic(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_italic(self, p);
    }
    pub fn get_underline(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_underline(self, p);
    }
    pub fn get_overline(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_overline(self, p);
    }
    pub fn get_strikeOut(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_strikeOut(self, p);
    }
    pub fn get_subScript(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_subScript(self, p);
    }
    pub fn get_superScript(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_superScript(self, p);
    }
    pub fn get_explicitFace(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_explicitFace(self, p);
    }
    pub fn get_fontWeight(self: *const IHTMLComputedStyle, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontWeight(self, p);
    }
    pub fn get_fontSize(self: *const IHTMLComputedStyle, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontSize(self, p);
    }
    pub fn get_fontName(self: *const IHTMLComputedStyle, p: ?*i8) callconv(.@"inline") HRESULT {
        return self.vtable.get_fontName(self, p);
    }
    pub fn get_hasBgColor(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_hasBgColor(self, p);
    }
    pub fn get_textColor(self: *const IHTMLComputedStyle, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_textColor(self, p);
    }
    pub fn get_backgroundColor(self: *const IHTMLComputedStyle, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_backgroundColor(self, p);
    }
    pub fn get_preFormatted(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_preFormatted(self, p);
    }
    pub fn get_direction(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_direction(self, p);
    }
    pub fn get_blockDirection(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_blockDirection(self, p);
    }
    pub fn get_OL(self: *const IHTMLComputedStyle, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_OL(self, p);
    }
    pub fn IsEqual(self: *const IHTMLComputedStyle, pComputedStyle: ?*IHTMLComputedStyle, pfEqual: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.IsEqual(self, pComputedStyle, pfEqual);
    }
};

const IID_IDeveloperConsoleMessageReceiver_Value = Guid.initString("30510808-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDeveloperConsoleMessageReceiver = &IID_IDeveloperConsoleMessageReceiver_Value;
pub const IDeveloperConsoleMessageReceiver = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Write: *const fn(
            self: *const IDeveloperConsoleMessageReceiver,
            source: ?[*:0]const u16,
            level: DEV_CONSOLE_MESSAGE_LEVEL,
            messageId: i32,
            messageText: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        WriteWithUrl: *const fn(
            self: *const IDeveloperConsoleMessageReceiver,
            source: ?[*:0]const u16,
            level: DEV_CONSOLE_MESSAGE_LEVEL,
            messageId: i32,
            messageText: ?[*:0]const u16,
            fileUrl: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        WriteWithUrlAndLine: *const fn(
            self: *const IDeveloperConsoleMessageReceiver,
            source: ?[*:0]const u16,
            level: DEV_CONSOLE_MESSAGE_LEVEL,
            messageId: i32,
            messageText: ?[*:0]const u16,
            fileUrl: ?[*:0]const u16,
            line: u32,
        ) callconv(.winapi) HRESULT,
        WriteWithUrlLineAndColumn: *const fn(
            self: *const IDeveloperConsoleMessageReceiver,
            source: ?[*:0]const u16,
            level: DEV_CONSOLE_MESSAGE_LEVEL,
            messageId: i32,
            messageText: ?[*:0]const u16,
            fileUrl: ?[*:0]const u16,
            line: u32,
            column: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Write(self: *const IDeveloperConsoleMessageReceiver, source: ?[*:0]const u16, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: i32, messageText: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.Write(self, source, level, messageId, messageText);
    }
    pub fn WriteWithUrl(self: *const IDeveloperConsoleMessageReceiver, source: ?[*:0]const u16, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: i32, messageText: ?[*:0]const u16, fileUrl: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.WriteWithUrl(self, source, level, messageId, messageText, fileUrl);
    }
    pub fn WriteWithUrlAndLine(self: *const IDeveloperConsoleMessageReceiver, source: ?[*:0]const u16, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: i32, messageText: ?[*:0]const u16, fileUrl: ?[*:0]const u16, line: u32) callconv(.@"inline") HRESULT {
        return self.vtable.WriteWithUrlAndLine(self, source, level, messageId, messageText, fileUrl, line);
    }
    pub fn WriteWithUrlLineAndColumn(self: *const IDeveloperConsoleMessageReceiver, source: ?[*:0]const u16, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: i32, messageText: ?[*:0]const u16, fileUrl: ?[*:0]const u16, line: u32, column: u32) callconv(.@"inline") HRESULT {
        return self.vtable.WriteWithUrlLineAndColumn(self, source, level, messageId, messageText, fileUrl, line, column);
    }
};

const IID_IScriptEventHandler_Value = Guid.initString("3051083a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IScriptEventHandler = &IID_IScriptEventHandler_Value;
pub const IScriptEventHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FunctionName: *const fn(
            self: *const IScriptEventHandler,
            pbstrFunctionName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        DebugDocumentContext: *const fn(
            self: *const IScriptEventHandler,
            ppDebugDocumentContext: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        EventHandlerDispatch: *const fn(
            self: *const IScriptEventHandler,
            ppDispHandler: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        UsesCapture: *const fn(
            self: *const IScriptEventHandler,
            pfUsesCapture: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        Cookie: *const fn(
            self: *const IScriptEventHandler,
            pullCookie: ?*u64,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FunctionName(self: *const IScriptEventHandler, pbstrFunctionName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.FunctionName(self, pbstrFunctionName);
    }
    pub fn DebugDocumentContext(self: *const IScriptEventHandler, ppDebugDocumentContext: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.DebugDocumentContext(self, ppDebugDocumentContext);
    }
    pub fn EventHandlerDispatch(self: *const IScriptEventHandler, ppDispHandler: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.EventHandlerDispatch(self, ppDispHandler);
    }
    pub fn UsesCapture(self: *const IScriptEventHandler, pfUsesCapture: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.UsesCapture(self, pfUsesCapture);
    }
    pub fn Cookie(self: *const IScriptEventHandler, pullCookie: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.Cookie(self, pullCookie);
    }
};

const IID_IDebugCallbackNotificationHandler_Value = Guid.initString("30510842-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDebugCallbackNotificationHandler = &IID_IDebugCallbackNotificationHandler_Value;
pub const IDebugCallbackNotificationHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestedCallbackTypes: *const fn(
            self: *const IDebugCallbackNotificationHandler,
            pCallbackMask: ?*u32,
        ) callconv(.winapi) HRESULT,
        BeforeDispatchEvent: *const fn(
            self: *const IDebugCallbackNotificationHandler,
            pEvent: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        DispatchEventComplete: *const fn(
            self: *const IDebugCallbackNotificationHandler,
            pEvent: ?*IUnknown,
            propagationStatus: u32,
        ) callconv(.winapi) HRESULT,
        BeforeInvokeDomCallback: *const fn(
            self: *const IDebugCallbackNotificationHandler,
            pEvent: ?*IUnknown,
            pCallback: ?*IScriptEventHandler,
            eStage: DOM_EVENT_PHASE,
            propagationStatus: u32,
        ) callconv(.winapi) HRESULT,
        InvokeDomCallbackComplete: *const fn(
            self: *const IDebugCallbackNotificationHandler,
            pEvent: ?*IUnknown,
            pCallback: ?*IScriptEventHandler,
            eStage: DOM_EVENT_PHASE,
            propagationStatus: u32,
        ) callconv(.winapi) HRESULT,
        BeforeInvokeCallback: *const fn(
            self: *const IDebugCallbackNotificationHandler,
            eCallbackType: SCRIPT_TIMER_TYPE,
            callbackCookie: u32,
            pDispHandler: ?*IDispatch,
            ullHandlerCookie: u64,
            functionName: ?BSTR,
            line: u32,
            column: u32,
            cchLength: u32,
            pDebugDocumentContext: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        InvokeCallbackComplete: *const fn(
            self: *const IDebugCallbackNotificationHandler,
            eCallbackType: SCRIPT_TIMER_TYPE,
            callbackCookie: u32,
            pDispHandler: ?*IDispatch,
            ullHandlerCookie: u64,
            functionName: ?BSTR,
            line: u32,
            column: u32,
            cchLength: u32,
            pDebugDocumentContext: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RequestedCallbackTypes(self: *const IDebugCallbackNotificationHandler, pCallbackMask: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.RequestedCallbackTypes(self, pCallbackMask);
    }
    pub fn BeforeDispatchEvent(self: *const IDebugCallbackNotificationHandler, pEvent: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.BeforeDispatchEvent(self, pEvent);
    }
    pub fn DispatchEventComplete(self: *const IDebugCallbackNotificationHandler, pEvent: ?*IUnknown, propagationStatus: u32) callconv(.@"inline") HRESULT {
        return self.vtable.DispatchEventComplete(self, pEvent, propagationStatus);
    }
    pub fn BeforeInvokeDomCallback(self: *const IDebugCallbackNotificationHandler, pEvent: ?*IUnknown, pCallback: ?*IScriptEventHandler, eStage: DOM_EVENT_PHASE, propagationStatus: u32) callconv(.@"inline") HRESULT {
        return self.vtable.BeforeInvokeDomCallback(self, pEvent, pCallback, eStage, propagationStatus);
    }
    pub fn InvokeDomCallbackComplete(self: *const IDebugCallbackNotificationHandler, pEvent: ?*IUnknown, pCallback: ?*IScriptEventHandler, eStage: DOM_EVENT_PHASE, propagationStatus: u32) callconv(.@"inline") HRESULT {
        return self.vtable.InvokeDomCallbackComplete(self, pEvent, pCallback, eStage, propagationStatus);
    }
    pub fn BeforeInvokeCallback(self: *const IDebugCallbackNotificationHandler, eCallbackType: SCRIPT_TIMER_TYPE, callbackCookie: u32, pDispHandler: ?*IDispatch, ullHandlerCookie: u64, functionName: ?BSTR, line: u32, column: u32, cchLength: u32, pDebugDocumentContext: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.BeforeInvokeCallback(self, eCallbackType, callbackCookie, pDispHandler, ullHandlerCookie, functionName, line, column, cchLength, pDebugDocumentContext);
    }
    pub fn InvokeCallbackComplete(self: *const IDebugCallbackNotificationHandler, eCallbackType: SCRIPT_TIMER_TYPE, callbackCookie: u32, pDispHandler: ?*IDispatch, ullHandlerCookie: u64, functionName: ?BSTR, line: u32, column: u32, cchLength: u32, pDebugDocumentContext: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.InvokeCallbackComplete(self, eCallbackType, callbackCookie, pDispHandler, ullHandlerCookie, functionName, line, column, cchLength, pDebugDocumentContext);
    }
};

const IID_IScriptEventHandlerSourceInfo_Value = Guid.initString("30510841-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IScriptEventHandlerSourceInfo = &IID_IScriptEventHandlerSourceInfo_Value;
pub const IScriptEventHandlerSourceInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSourceInfo: *const fn(
            self: *const IScriptEventHandlerSourceInfo,
            pbstrFunctionName: ?*?BSTR,
            line: ?*u32,
            column: ?*u32,
            cchLength: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSourceInfo(self: *const IScriptEventHandlerSourceInfo, pbstrFunctionName: ?*?BSTR, line: ?*u32, column: ?*u32, cchLength: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetSourceInfo(self, pbstrFunctionName, line, column, cchLength);
    }
};

const IID_IDOMEventRegistrationCallback_Value = Guid.initString("3051083b-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDOMEventRegistrationCallback = &IID_IDOMEventRegistrationCallback_Value;
pub const IDOMEventRegistrationCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDOMEventListenerAdded: *const fn(
            self: *const IDOMEventRegistrationCallback,
            pszEventType: ?[*:0]const u16,
            pHandler: ?*IScriptEventHandler,
        ) callconv(.winapi) HRESULT,
        OnDOMEventListenerRemoved: *const fn(
            self: *const IDOMEventRegistrationCallback,
            ullCookie: u64,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnDOMEventListenerAdded(self: *const IDOMEventRegistrationCallback, pszEventType: ?[*:0]const u16, pHandler: ?*IScriptEventHandler) callconv(.@"inline") HRESULT {
        return self.vtable.OnDOMEventListenerAdded(self, pszEventType, pHandler);
    }
    pub fn OnDOMEventListenerRemoved(self: *const IDOMEventRegistrationCallback, ullCookie: u64) callconv(.@"inline") HRESULT {
        return self.vtable.OnDOMEventListenerRemoved(self, ullCookie);
    }
};

const IID_IEventTarget2_Value = Guid.initString("30510839-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IEventTarget2 = &IID_IEventTarget2_Value;
pub const IEventTarget2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRegisteredEventTypes: *const fn(
            self: *const IEventTarget2,
            ppEventTypeArray: ?*?*SAFEARRAY,
        ) callconv(.winapi) HRESULT,
        GetListenersForType: *const fn(
            self: *const IEventTarget2,
            pszEventType: ?[*:0]const u16,
            ppEventHandlerArray: ?*?*SAFEARRAY,
        ) callconv(.winapi) HRESULT,
        RegisterForDOMEventListeners: *const fn(
            self: *const IEventTarget2,
            pCallback: ?*IDOMEventRegistrationCallback,
        ) callconv(.winapi) HRESULT,
        UnregisterForDOMEventListeners: *const fn(
            self: *const IEventTarget2,
            pCallback: ?*IDOMEventRegistrationCallback,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetRegisteredEventTypes(self: *const IEventTarget2, ppEventTypeArray: ?*?*SAFEARRAY) callconv(.@"inline") HRESULT {
        return self.vtable.GetRegisteredEventTypes(self, ppEventTypeArray);
    }
    pub fn GetListenersForType(self: *const IEventTarget2, pszEventType: ?[*:0]const u16, ppEventHandlerArray: ?*?*SAFEARRAY) callconv(.@"inline") HRESULT {
        return self.vtable.GetListenersForType(self, pszEventType, ppEventHandlerArray);
    }
    pub fn RegisterForDOMEventListeners(self: *const IEventTarget2, pCallback: ?*IDOMEventRegistrationCallback) callconv(.@"inline") HRESULT {
        return self.vtable.RegisterForDOMEventListeners(self, pCallback);
    }
    pub fn UnregisterForDOMEventListeners(self: *const IEventTarget2, pCallback: ?*IDOMEventRegistrationCallback) callconv(.@"inline") HRESULT {
        return self.vtable.UnregisterForDOMEventListeners(self, pCallback);
    }
};

const IID_HTMLNamespaceEvents_Value = Guid.initString("3050f6bd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_HTMLNamespaceEvents = &IID_HTMLNamespaceEvents_Value;
pub const HTMLNamespaceEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLNamespace_Value = Guid.initString("3050f6bb-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLNamespace = &IID_IHTMLNamespace_Value;
pub const IHTMLNamespace = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IHTMLNamespace,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_urn: *const fn(
            self: *const IHTMLNamespace,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagNames: *const fn(
            self: *const IHTMLNamespace,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IHTMLNamespace,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IHTMLNamespace,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_onreadystatechange: *const fn(
            self: *const IHTMLNamespace,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        doImport: *const fn(
            self: *const IHTMLNamespace,
            bstrImplementationUrl: ?BSTR,
        ) callconv(.winapi) HRESULT,
        attachEvent: *const fn(
            self: *const IHTMLNamespace,
            event: ?BSTR,
            pDisp: ?*IDispatch,
            pfResult: ?*i16,
        ) callconv(.winapi) HRESULT,
        detachEvent: *const fn(
            self: *const IHTMLNamespace,
            event: ?BSTR,
            pDisp: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_name(self: *const IHTMLNamespace, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_name(self, p);
    }
    pub fn get_urn(self: *const IHTMLNamespace, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_urn(self, p);
    }
    pub fn get_tagNames(self: *const IHTMLNamespace, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_tagNames(self, p);
    }
    pub fn get_readyState(self: *const IHTMLNamespace, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_readyState(self, p);
    }
    pub fn put_onreadystatechange(self: *const IHTMLNamespace, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_onreadystatechange(self, v);
    }
    pub fn get_onreadystatechange(self: *const IHTMLNamespace, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_onreadystatechange(self, p);
    }
    pub fn doImport(self: *const IHTMLNamespace, bstrImplementationUrl: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.doImport(self, bstrImplementationUrl);
    }
    pub fn attachEvent(self: *const IHTMLNamespace, event: ?BSTR, pDisp: ?*IDispatch, pfResult: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.attachEvent(self, event, pDisp, pfResult);
    }
    pub fn detachEvent(self: *const IHTMLNamespace, event: ?BSTR, pDisp: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.detachEvent(self, event, pDisp);
    }
};

const IID_IHTMLNamespaceCollection_Value = Guid.initString("3050f6b8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLNamespaceCollection = &IID_IHTMLNamespaceCollection_Value;
pub const IHTMLNamespaceCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLNamespaceCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLNamespaceCollection,
            index: VARIANT,
            ppNamespace: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        add: *const fn(
            self: *const IHTMLNamespaceCollection,
            bstrNamespace: ?BSTR,
            bstrUrn: ?BSTR,
            implementationUrl: VARIANT,
            ppNamespace: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLNamespaceCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn item(self: *const IHTMLNamespaceCollection, index: VARIANT, ppNamespace: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppNamespace);
    }
    pub fn add(self: *const IHTMLNamespaceCollection, bstrNamespace: ?BSTR, bstrUrn: ?BSTR, implementationUrl: VARIANT, ppNamespace: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.add(self, bstrNamespace, bstrUrn, implementationUrl, ppNamespace);
    }
};

const IID_DispHTMLNamespace_Value = Guid.initString("3050f54f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLNamespace = &IID_DispHTMLNamespace_Value;
pub const DispHTMLNamespace = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispHTMLNamespaceCollection_Value = Guid.initString("3050f550-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLNamespaceCollection = &IID_DispHTMLNamespaceCollection_Value;
pub const DispHTMLNamespaceCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLPainter_Value = Guid.initString("3050f6a6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPainter = &IID_IHTMLPainter_Value;
pub const IHTMLPainter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Draw: *const fn(
            self: *const IHTMLPainter,
            rcBounds: RECT,
            rcUpdate: RECT,
            lDrawFlags: i32,
            hdc: ?HDC,
            pvDrawObject: ?*anyopaque,
        ) callconv(.winapi) HRESULT,
        OnResize: *const fn(
            self: *const IHTMLPainter,
            size: SIZE,
        ) callconv(.winapi) HRESULT,
        GetPainterInfo: *const fn(
            self: *const IHTMLPainter,
            pInfo: ?*HTML_PAINTER_INFO,
        ) callconv(.winapi) HRESULT,
        HitTestPoint: *const fn(
            self: *const IHTMLPainter,
            pt: POINT,
            pbHit: ?*BOOL,
            plPartID: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Draw(self: *const IHTMLPainter, rcBounds: RECT, rcUpdate: RECT, lDrawFlags: i32, hdc: ?HDC, pvDrawObject: ?*anyopaque) callconv(.@"inline") HRESULT {
        return self.vtable.Draw(self, rcBounds, rcUpdate, lDrawFlags, hdc, pvDrawObject);
    }
    pub fn OnResize(self: *const IHTMLPainter, size: SIZE) callconv(.@"inline") HRESULT {
        return self.vtable.OnResize(self, size);
    }
    pub fn GetPainterInfo(self: *const IHTMLPainter, pInfo: ?*HTML_PAINTER_INFO) callconv(.@"inline") HRESULT {
        return self.vtable.GetPainterInfo(self, pInfo);
    }
    pub fn HitTestPoint(self: *const IHTMLPainter, pt: POINT, pbHit: ?*BOOL, plPartID: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.HitTestPoint(self, pt, pbHit, plPartID);
    }
};

const IID_IHTMLPaintSite_Value = Guid.initString("3050f6a7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPaintSite = &IID_IHTMLPaintSite_Value;
pub const IHTMLPaintSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InvalidatePainterInfo: *const fn(
            self: *const IHTMLPaintSite,
        ) callconv(.winapi) HRESULT,
        InvalidateRect: *const fn(
            self: *const IHTMLPaintSite,
            prcInvalid: ?*RECT,
        ) callconv(.winapi) HRESULT,
        InvalidateRegion: *const fn(
            self: *const IHTMLPaintSite,
            rgnInvalid: ?HRGN,
        ) callconv(.winapi) HRESULT,
        GetDrawInfo: *const fn(
            self: *const IHTMLPaintSite,
            lFlags: i32,
            pDrawInfo: ?*HTML_PAINT_DRAW_INFO,
        ) callconv(.winapi) HRESULT,
        TransformGlobalToLocal: *const fn(
            self: *const IHTMLPaintSite,
            ptGlobal: POINT,
            pptLocal: ?*POINT,
        ) callconv(.winapi) HRESULT,
        TransformLocalToGlobal: *const fn(
            self: *const IHTMLPaintSite,
            ptLocal: POINT,
            pptGlobal: ?*POINT,
        ) callconv(.winapi) HRESULT,
        GetHitTestCookie: *const fn(
            self: *const IHTMLPaintSite,
            plCookie: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn InvalidatePainterInfo(self: *const IHTMLPaintSite) callconv(.@"inline") HRESULT {
        return self.vtable.InvalidatePainterInfo(self);
    }
    pub fn InvalidateRect(self: *const IHTMLPaintSite, prcInvalid: ?*RECT) callconv(.@"inline") HRESULT {
        return self.vtable.InvalidateRect(self, prcInvalid);
    }
    pub fn InvalidateRegion(self: *const IHTMLPaintSite, rgnInvalid: ?HRGN) callconv(.@"inline") HRESULT {
        return self.vtable.InvalidateRegion(self, rgnInvalid);
    }
    pub fn GetDrawInfo(self: *const IHTMLPaintSite, lFlags: i32, pDrawInfo: ?*HTML_PAINT_DRAW_INFO) callconv(.@"inline") HRESULT {
        return self.vtable.GetDrawInfo(self, lFlags, pDrawInfo);
    }
    pub fn TransformGlobalToLocal(self: *const IHTMLPaintSite, ptGlobal: POINT, pptLocal: ?*POINT) callconv(.@"inline") HRESULT {
        return self.vtable.TransformGlobalToLocal(self, ptGlobal, pptLocal);
    }
    pub fn TransformLocalToGlobal(self: *const IHTMLPaintSite, ptLocal: POINT, pptGlobal: ?*POINT) callconv(.@"inline") HRESULT {
        return self.vtable.TransformLocalToGlobal(self, ptLocal, pptGlobal);
    }
    pub fn GetHitTestCookie(self: *const IHTMLPaintSite, plCookie: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetHitTestCookie(self, plCookie);
    }
};

const IID_IHTMLPainterEventInfo_Value = Guid.initString("3050f6df-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPainterEventInfo = &IID_IHTMLPainterEventInfo_Value;
pub const IHTMLPainterEventInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEventInfoFlags: *const fn(
            self: *const IHTMLPainterEventInfo,
            plEventInfoFlags: ?*i32,
        ) callconv(.winapi) HRESULT,
        GetEventTarget: *const fn(
            self: *const IHTMLPainterEventInfo,
            ppElement: ?*?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        SetCursor: *const fn(
            self: *const IHTMLPainterEventInfo,
            lPartID: i32,
        ) callconv(.winapi) HRESULT,
        StringFromPartID: *const fn(
            self: *const IHTMLPainterEventInfo,
            lPartID: i32,
            pbstrPart: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetEventInfoFlags(self: *const IHTMLPainterEventInfo, plEventInfoFlags: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetEventInfoFlags(self, plEventInfoFlags);
    }
    pub fn GetEventTarget(self: *const IHTMLPainterEventInfo, ppElement: ?*?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.GetEventTarget(self, ppElement);
    }
    pub fn SetCursor(self: *const IHTMLPainterEventInfo, lPartID: i32) callconv(.@"inline") HRESULT {
        return self.vtable.SetCursor(self, lPartID);
    }
    pub fn StringFromPartID(self: *const IHTMLPainterEventInfo, lPartID: i32, pbstrPart: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.StringFromPartID(self, lPartID, pbstrPart);
    }
};

const IID_IHTMLPainterOverlay_Value = Guid.initString("3050f7e3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPainterOverlay = &IID_IHTMLPainterOverlay_Value;
pub const IHTMLPainterOverlay = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnMove: *const fn(
            self: *const IHTMLPainterOverlay,
            rcDevice: RECT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnMove(self: *const IHTMLPainterOverlay, rcDevice: RECT) callconv(.@"inline") HRESULT {
        return self.vtable.OnMove(self, rcDevice);
    }
};

const IID_IHTMLIPrintCollection_Value = Guid.initString("3050f6b5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLIPrintCollection = &IID_IHTMLIPrintCollection_Value;
pub const IHTMLIPrintCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IHTMLIPrintCollection,
            p: ?*i32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IHTMLIPrintCollection,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        item: *const fn(
            self: *const IHTMLIPrintCollection,
            index: i32,
            ppIPrint: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IHTMLIPrintCollection, p: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IHTMLIPrintCollection, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get__newEnum(self, p);
    }
    pub fn item(self: *const IHTMLIPrintCollection, index: i32, ppIPrint: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.item(self, index, ppIPrint);
    }
};

const IID_IEnumPrivacyRecords_Value = Guid.initString("3050f844-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IEnumPrivacyRecords = &IID_IEnumPrivacyRecords_Value;
pub const IEnumPrivacyRecords = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn(
            self: *const IEnumPrivacyRecords,
        ) callconv(.winapi) HRESULT,
        GetSize: *const fn(
            self: *const IEnumPrivacyRecords,
            pSize: ?*u32,
        ) callconv(.winapi) HRESULT,
        GetPrivacyImpacted: *const fn(
            self: *const IEnumPrivacyRecords,
            pState: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        Next: *const fn(
            self: *const IEnumPrivacyRecords,
            pbstrUrl: ?*?BSTR,
            pbstrPolicyRef: ?*?BSTR,
            pdwReserved: ?*i32,
            pdwPrivacyFlags: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Reset(self: *const IEnumPrivacyRecords) callconv(.@"inline") HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn GetSize(self: *const IEnumPrivacyRecords, pSize: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetSize(self, pSize);
    }
    pub fn GetPrivacyImpacted(self: *const IEnumPrivacyRecords, pState: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.GetPrivacyImpacted(self, pState);
    }
    pub fn Next(self: *const IEnumPrivacyRecords, pbstrUrl: ?*?BSTR, pbstrPolicyRef: ?*?BSTR, pdwReserved: ?*i32, pdwPrivacyFlags: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.Next(self, pbstrUrl, pbstrPolicyRef, pdwReserved, pdwPrivacyFlags);
    }
};

const IID_IWPCBlockedUrls_Value = Guid.initString("30510413-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IWPCBlockedUrls = &IID_IWPCBlockedUrls_Value;
pub const IWPCBlockedUrls = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const IWPCBlockedUrls,
            pdwCount: ?*u32,
        ) callconv(.winapi) HRESULT,
        GetUrl: *const fn(
            self: *const IWPCBlockedUrls,
            dwIdx: u32,
            pbstrUrl: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const IWPCBlockedUrls, pdwCount: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetCount(self, pdwCount);
    }
    pub fn GetUrl(self: *const IWPCBlockedUrls, dwIdx: u32, pbstrUrl: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetUrl(self, dwIdx, pbstrUrl);
    }
};

const IID_IHTMLDOMConstructorCollection_Value = Guid.initString("3051049c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDOMConstructorCollection = &IID_IHTMLDOMConstructorCollection_Value;
pub const IHTMLDOMConstructorCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attr: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BehaviorUrnsCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BookmarkCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CompatibleInfo: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CompatibleInfoCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ControlRangeCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSSCurrentStyleDeclaration: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSSRuleList: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSSRuleStyleDeclaration: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSSStyleDeclaration: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSSStyleRule: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSSStyleSheet: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataTransfer: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DOMImplementation: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Element: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_History: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTCElementBehaviorDefaults: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLAnchorElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLAreaElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLAreasCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLBaseElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLBaseFontElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLBGSoundElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLBlockElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLBodyElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLBRElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLButtonElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLCommentElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLDDElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLDivElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLDocument: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLDListElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLDTElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLEmbedElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLFieldSetElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLFontElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLFormElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLFrameElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLFrameSetElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLGenericElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLHeadElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLHeadingElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLHRElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLHtmlElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLIFrameElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLImageElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLInputElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLIsIndexElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLLabelElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLLegendElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLLIElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLLinkElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLMapElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLMarqueeElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLMetaElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLModelessDialog: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLNamespaceInfo: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLNamespaceInfoCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLNextIdElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLNoShowElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLObjectElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLOListElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLOptionElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLParagraphElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLParamElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLPhraseElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLPluginsCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLPopup: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLScriptElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLSelectElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLSpanElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLStyleElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTableCaptionElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTableCellElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTableColElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTableElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTableRowElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTableSectionElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTextAreaElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTextElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLTitleElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLUListElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HTMLUnknownElement: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Image: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Location: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NamedNodeMap: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Navigator: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NodeList: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Option: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Screen: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StaticNodeList: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Storage: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StyleSheetList: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StyleSheetPage: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StyleSheetPageList: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Text: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TextRange: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TextRangeCollection: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TextRectangle: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TextRectangleList: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Window: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XDomainRequest: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XMLHttpRequest: *const fn(
            self: *const IHTMLDOMConstructorCollection,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Attr(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Attr(self, p);
    }
    pub fn get_BehaviorUrnsCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_BehaviorUrnsCollection(self, p);
    }
    pub fn get_BookmarkCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_BookmarkCollection(self, p);
    }
    pub fn get_CompatibleInfo(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_CompatibleInfo(self, p);
    }
    pub fn get_CompatibleInfoCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_CompatibleInfoCollection(self, p);
    }
    pub fn get_ControlRangeCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_ControlRangeCollection(self, p);
    }
    pub fn get_CSSCurrentStyleDeclaration(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_CSSCurrentStyleDeclaration(self, p);
    }
    pub fn get_CSSRuleList(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_CSSRuleList(self, p);
    }
    pub fn get_CSSRuleStyleDeclaration(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_CSSRuleStyleDeclaration(self, p);
    }
    pub fn get_CSSStyleDeclaration(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_CSSStyleDeclaration(self, p);
    }
    pub fn get_CSSStyleRule(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_CSSStyleRule(self, p);
    }
    pub fn get_CSSStyleSheet(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_CSSStyleSheet(self, p);
    }
    pub fn get_DataTransfer(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_DataTransfer(self, p);
    }
    pub fn get_DOMImplementation(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_DOMImplementation(self, p);
    }
    pub fn get_Element(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Element(self, p);
    }
    pub fn get_Event(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Event(self, p);
    }
    pub fn get_History(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_History(self, p);
    }
    pub fn get_HTCElementBehaviorDefaults(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTCElementBehaviorDefaults(self, p);
    }
    pub fn get_HTMLAnchorElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLAnchorElement(self, p);
    }
    pub fn get_HTMLAreaElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLAreaElement(self, p);
    }
    pub fn get_HTMLAreasCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLAreasCollection(self, p);
    }
    pub fn get_HTMLBaseElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLBaseElement(self, p);
    }
    pub fn get_HTMLBaseFontElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLBaseFontElement(self, p);
    }
    pub fn get_HTMLBGSoundElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLBGSoundElement(self, p);
    }
    pub fn get_HTMLBlockElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLBlockElement(self, p);
    }
    pub fn get_HTMLBodyElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLBodyElement(self, p);
    }
    pub fn get_HTMLBRElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLBRElement(self, p);
    }
    pub fn get_HTMLButtonElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLButtonElement(self, p);
    }
    pub fn get_HTMLCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLCollection(self, p);
    }
    pub fn get_HTMLCommentElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLCommentElement(self, p);
    }
    pub fn get_HTMLDDElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLDDElement(self, p);
    }
    pub fn get_HTMLDivElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLDivElement(self, p);
    }
    pub fn get_HTMLDocument(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLDocument(self, p);
    }
    pub fn get_HTMLDListElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLDListElement(self, p);
    }
    pub fn get_HTMLDTElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLDTElement(self, p);
    }
    pub fn get_HTMLEmbedElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLEmbedElement(self, p);
    }
    pub fn get_HTMLFieldSetElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLFieldSetElement(self, p);
    }
    pub fn get_HTMLFontElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLFontElement(self, p);
    }
    pub fn get_HTMLFormElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLFormElement(self, p);
    }
    pub fn get_HTMLFrameElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLFrameElement(self, p);
    }
    pub fn get_HTMLFrameSetElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLFrameSetElement(self, p);
    }
    pub fn get_HTMLGenericElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLGenericElement(self, p);
    }
    pub fn get_HTMLHeadElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLHeadElement(self, p);
    }
    pub fn get_HTMLHeadingElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLHeadingElement(self, p);
    }
    pub fn get_HTMLHRElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLHRElement(self, p);
    }
    pub fn get_HTMLHtmlElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLHtmlElement(self, p);
    }
    pub fn get_HTMLIFrameElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLIFrameElement(self, p);
    }
    pub fn get_HTMLImageElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLImageElement(self, p);
    }
    pub fn get_HTMLInputElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLInputElement(self, p);
    }
    pub fn get_HTMLIsIndexElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLIsIndexElement(self, p);
    }
    pub fn get_HTMLLabelElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLLabelElement(self, p);
    }
    pub fn get_HTMLLegendElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLLegendElement(self, p);
    }
    pub fn get_HTMLLIElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLLIElement(self, p);
    }
    pub fn get_HTMLLinkElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLLinkElement(self, p);
    }
    pub fn get_HTMLMapElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLMapElement(self, p);
    }
    pub fn get_HTMLMarqueeElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLMarqueeElement(self, p);
    }
    pub fn get_HTMLMetaElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLMetaElement(self, p);
    }
    pub fn get_HTMLModelessDialog(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLModelessDialog(self, p);
    }
    pub fn get_HTMLNamespaceInfo(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLNamespaceInfo(self, p);
    }
    pub fn get_HTMLNamespaceInfoCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLNamespaceInfoCollection(self, p);
    }
    pub fn get_HTMLNextIdElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLNextIdElement(self, p);
    }
    pub fn get_HTMLNoShowElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLNoShowElement(self, p);
    }
    pub fn get_HTMLObjectElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLObjectElement(self, p);
    }
    pub fn get_HTMLOListElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLOListElement(self, p);
    }
    pub fn get_HTMLOptionElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLOptionElement(self, p);
    }
    pub fn get_HTMLParagraphElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLParagraphElement(self, p);
    }
    pub fn get_HTMLParamElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLParamElement(self, p);
    }
    pub fn get_HTMLPhraseElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLPhraseElement(self, p);
    }
    pub fn get_HTMLPluginsCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLPluginsCollection(self, p);
    }
    pub fn get_HTMLPopup(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLPopup(self, p);
    }
    pub fn get_HTMLScriptElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLScriptElement(self, p);
    }
    pub fn get_HTMLSelectElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLSelectElement(self, p);
    }
    pub fn get_HTMLSpanElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLSpanElement(self, p);
    }
    pub fn get_HTMLStyleElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLStyleElement(self, p);
    }
    pub fn get_HTMLTableCaptionElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTableCaptionElement(self, p);
    }
    pub fn get_HTMLTableCellElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTableCellElement(self, p);
    }
    pub fn get_HTMLTableColElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTableColElement(self, p);
    }
    pub fn get_HTMLTableElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTableElement(self, p);
    }
    pub fn get_HTMLTableRowElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTableRowElement(self, p);
    }
    pub fn get_HTMLTableSectionElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTableSectionElement(self, p);
    }
    pub fn get_HTMLTextAreaElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTextAreaElement(self, p);
    }
    pub fn get_HTMLTextElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTextElement(self, p);
    }
    pub fn get_HTMLTitleElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLTitleElement(self, p);
    }
    pub fn get_HTMLUListElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLUListElement(self, p);
    }
    pub fn get_HTMLUnknownElement(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_HTMLUnknownElement(self, p);
    }
    pub fn get_Image(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Image(self, p);
    }
    pub fn get_Location(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Location(self, p);
    }
    pub fn get_NamedNodeMap(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_NamedNodeMap(self, p);
    }
    pub fn get_Navigator(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Navigator(self, p);
    }
    pub fn get_NodeList(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_NodeList(self, p);
    }
    pub fn get_Option(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Option(self, p);
    }
    pub fn get_Screen(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Screen(self, p);
    }
    pub fn get_Selection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Selection(self, p);
    }
    pub fn get_StaticNodeList(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_StaticNodeList(self, p);
    }
    pub fn get_Storage(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Storage(self, p);
    }
    pub fn get_StyleSheetList(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_StyleSheetList(self, p);
    }
    pub fn get_StyleSheetPage(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_StyleSheetPage(self, p);
    }
    pub fn get_StyleSheetPageList(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_StyleSheetPageList(self, p);
    }
    pub fn get_Text(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Text(self, p);
    }
    pub fn get_TextRange(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_TextRange(self, p);
    }
    pub fn get_TextRangeCollection(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_TextRangeCollection(self, p);
    }
    pub fn get_TextRectangle(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_TextRectangle(self, p);
    }
    pub fn get_TextRectangleList(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_TextRectangleList(self, p);
    }
    pub fn get_Window(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_Window(self, p);
    }
    pub fn get_XDomainRequest(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_XDomainRequest(self, p);
    }
    pub fn get_XMLHttpRequest(self: *const IHTMLDOMConstructorCollection, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_XMLHttpRequest(self, p);
    }
};

const IID_IHTMLDialog_Value = Guid.initString("3050f216-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDialog = &IID_IHTMLDialog_Value;
pub const IHTMLDialog = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dialogTop: *const fn(
            self: *const IHTMLDialog,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dialogTop: *const fn(
            self: *const IHTMLDialog,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dialogLeft: *const fn(
            self: *const IHTMLDialog,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dialogLeft: *const fn(
            self: *const IHTMLDialog,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dialogWidth: *const fn(
            self: *const IHTMLDialog,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dialogWidth: *const fn(
            self: *const IHTMLDialog,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dialogHeight: *const fn(
            self: *const IHTMLDialog,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dialogHeight: *const fn(
            self: *const IHTMLDialog,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dialogArguments: *const fn(
            self: *const IHTMLDialog,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_menuArguments: *const fn(
            self: *const IHTMLDialog,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_returnValue: *const fn(
            self: *const IHTMLDialog,
            v: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_returnValue: *const fn(
            self: *const IHTMLDialog,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        close: *const fn(
            self: *const IHTMLDialog,
        ) callconv(.winapi) HRESULT,
        toString: *const fn(
            self: *const IHTMLDialog,
            String: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_dialogTop(self: *const IHTMLDialog, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_dialogTop(self, v);
    }
    pub fn get_dialogTop(self: *const IHTMLDialog, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_dialogTop(self, p);
    }
    pub fn put_dialogLeft(self: *const IHTMLDialog, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_dialogLeft(self, v);
    }
    pub fn get_dialogLeft(self: *const IHTMLDialog, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_dialogLeft(self, p);
    }
    pub fn put_dialogWidth(self: *const IHTMLDialog, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_dialogWidth(self, v);
    }
    pub fn get_dialogWidth(self: *const IHTMLDialog, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_dialogWidth(self, p);
    }
    pub fn put_dialogHeight(self: *const IHTMLDialog, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_dialogHeight(self, v);
    }
    pub fn get_dialogHeight(self: *const IHTMLDialog, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_dialogHeight(self, p);
    }
    pub fn get_dialogArguments(self: *const IHTMLDialog, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_dialogArguments(self, p);
    }
    pub fn get_menuArguments(self: *const IHTMLDialog, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_menuArguments(self, p);
    }
    pub fn put_returnValue(self: *const IHTMLDialog, v: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_returnValue(self, v);
    }
    pub fn get_returnValue(self: *const IHTMLDialog, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_returnValue(self, p);
    }
    pub fn close(self: *const IHTMLDialog) callconv(.@"inline") HRESULT {
        return self.vtable.close(self);
    }
    pub fn toString(self: *const IHTMLDialog, String: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.toString(self, String);
    }
};

const IID_IHTMLDialog2_Value = Guid.initString("3050f5e0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDialog2 = &IID_IHTMLDialog2_Value;
pub const IHTMLDialog2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_status: *const fn(
            self: *const IHTMLDialog2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IHTMLDialog2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_resizable: *const fn(
            self: *const IHTMLDialog2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_resizable: *const fn(
            self: *const IHTMLDialog2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_status(self: *const IHTMLDialog2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_status(self, v);
    }
    pub fn get_status(self: *const IHTMLDialog2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_status(self, p);
    }
    pub fn put_resizable(self: *const IHTMLDialog2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_resizable(self, v);
    }
    pub fn get_resizable(self: *const IHTMLDialog2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_resizable(self, p);
    }
};

const IID_IHTMLDialog3_Value = Guid.initString("3050f388-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLDialog3 = &IID_IHTMLDialog3_Value;
pub const IHTMLDialog3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_unadorned: *const fn(
            self: *const IHTMLDialog3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unadorned: *const fn(
            self: *const IHTMLDialog3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dialogHide: *const fn(
            self: *const IHTMLDialog3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dialogHide: *const fn(
            self: *const IHTMLDialog3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_unadorned(self: *const IHTMLDialog3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_unadorned(self, v);
    }
    pub fn get_unadorned(self: *const IHTMLDialog3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_unadorned(self, p);
    }
    pub fn put_dialogHide(self: *const IHTMLDialog3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dialogHide(self, v);
    }
    pub fn get_dialogHide(self: *const IHTMLDialog3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dialogHide(self, p);
    }
};

const IID_IHTMLModelessInit_Value = Guid.initString("3050f5e4-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLModelessInit = &IID_IHTMLModelessInit_Value;
pub const IHTMLModelessInit = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parameters: *const fn(
            self: *const IHTMLModelessInit,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_optionString: *const fn(
            self: *const IHTMLModelessInit,
            p: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_moniker: *const fn(
            self: *const IHTMLModelessInit,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_document: *const fn(
            self: *const IHTMLModelessInit,
            p: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_parameters(self: *const IHTMLModelessInit, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_parameters(self, p);
    }
    pub fn get_optionString(self: *const IHTMLModelessInit, p: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_optionString(self, p);
    }
    pub fn get_moniker(self: *const IHTMLModelessInit, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get_moniker(self, p);
    }
    pub fn get_document(self: *const IHTMLModelessInit, p: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.get_document(self, p);
    }
};

const IID_IHTMLPopup_Value = Guid.initString("3050f666-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPopup = &IID_IHTMLPopup_Value;
pub const IHTMLPopup = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        show: *const fn(
            self: *const IHTMLPopup,
            x: i32,
            y: i32,
            w: i32,
            h: i32,
            pElement: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        hide: *const fn(
            self: *const IHTMLPopup,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_document: *const fn(
            self: *const IHTMLPopup,
            p: ?*?*IHTMLDocument,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isOpen: *const fn(
            self: *const IHTMLPopup,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn show(self: *const IHTMLPopup, x: i32, y: i32, w: i32, h: i32, pElement: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.show(self, x, y, w, h, pElement);
    }
    pub fn hide(self: *const IHTMLPopup) callconv(.@"inline") HRESULT {
        return self.vtable.hide(self);
    }
    pub fn get_document(self: *const IHTMLPopup, p: ?*?*IHTMLDocument) callconv(.@"inline") HRESULT {
        return self.vtable.get_document(self, p);
    }
    pub fn get_isOpen(self: *const IHTMLPopup, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_isOpen(self, p);
    }
};

const IID_DispHTMLPopup_Value = Guid.initString("3050f589-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLPopup = &IID_DispHTMLPopup_Value;
pub const DispHTMLPopup = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHTMLAppBehavior_Value = Guid.initString("3050f5ca-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAppBehavior = &IID_IHTMLAppBehavior_Value;
pub const IHTMLAppBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_applicationName: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_applicationName: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_version: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_icon: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_icon: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_singleInstance: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_singleInstance: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_minimizeButton: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minimizeButton: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maximizeButton: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maximizeButton: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_border: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_border: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_borderStyle: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_borderStyle: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_sysMenu: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sysMenu: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_caption: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_caption: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_windowState: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_windowState: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_showInTaskBar: *const fn(
            self: *const IHTMLAppBehavior,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_showInTaskBar: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_commandLine: *const fn(
            self: *const IHTMLAppBehavior,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_applicationName(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_applicationName(self, v);
    }
    pub fn get_applicationName(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_applicationName(self, p);
    }
    pub fn put_version(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_version(self, v);
    }
    pub fn get_version(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_version(self, p);
    }
    pub fn put_icon(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_icon(self, v);
    }
    pub fn get_icon(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_icon(self, p);
    }
    pub fn put_singleInstance(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_singleInstance(self, v);
    }
    pub fn get_singleInstance(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_singleInstance(self, p);
    }
    pub fn put_minimizeButton(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_minimizeButton(self, v);
    }
    pub fn get_minimizeButton(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_minimizeButton(self, p);
    }
    pub fn put_maximizeButton(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_maximizeButton(self, v);
    }
    pub fn get_maximizeButton(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_maximizeButton(self, p);
    }
    pub fn put_border(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_border(self, v);
    }
    pub fn get_border(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_border(self, p);
    }
    pub fn put_borderStyle(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_borderStyle(self, v);
    }
    pub fn get_borderStyle(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_borderStyle(self, p);
    }
    pub fn put_sysMenu(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_sysMenu(self, v);
    }
    pub fn get_sysMenu(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_sysMenu(self, p);
    }
    pub fn put_caption(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_caption(self, v);
    }
    pub fn get_caption(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_caption(self, p);
    }
    pub fn put_windowState(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_windowState(self, v);
    }
    pub fn get_windowState(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_windowState(self, p);
    }
    pub fn put_showInTaskBar(self: *const IHTMLAppBehavior, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_showInTaskBar(self, v);
    }
    pub fn get_showInTaskBar(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_showInTaskBar(self, p);
    }
    pub fn get_commandLine(self: *const IHTMLAppBehavior, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_commandLine(self, p);
    }
};

const IID_IHTMLAppBehavior2_Value = Guid.initString("3050f5c9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAppBehavior2 = &IID_IHTMLAppBehavior2_Value;
pub const IHTMLAppBehavior2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_contextMenu: *const fn(
            self: *const IHTMLAppBehavior2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contextMenu: *const fn(
            self: *const IHTMLAppBehavior2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_innerBorder: *const fn(
            self: *const IHTMLAppBehavior2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_innerBorder: *const fn(
            self: *const IHTMLAppBehavior2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scroll: *const fn(
            self: *const IHTMLAppBehavior2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scroll: *const fn(
            self: *const IHTMLAppBehavior2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_scrollFlat: *const fn(
            self: *const IHTMLAppBehavior2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scrollFlat: *const fn(
            self: *const IHTMLAppBehavior2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_selection: *const fn(
            self: *const IHTMLAppBehavior2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selection: *const fn(
            self: *const IHTMLAppBehavior2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_contextMenu(self: *const IHTMLAppBehavior2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_contextMenu(self, v);
    }
    pub fn get_contextMenu(self: *const IHTMLAppBehavior2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_contextMenu(self, p);
    }
    pub fn put_innerBorder(self: *const IHTMLAppBehavior2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_innerBorder(self, v);
    }
    pub fn get_innerBorder(self: *const IHTMLAppBehavior2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_innerBorder(self, p);
    }
    pub fn put_scroll(self: *const IHTMLAppBehavior2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_scroll(self, v);
    }
    pub fn get_scroll(self: *const IHTMLAppBehavior2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_scroll(self, p);
    }
    pub fn put_scrollFlat(self: *const IHTMLAppBehavior2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_scrollFlat(self, v);
    }
    pub fn get_scrollFlat(self: *const IHTMLAppBehavior2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_scrollFlat(self, p);
    }
    pub fn put_selection(self: *const IHTMLAppBehavior2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_selection(self, v);
    }
    pub fn get_selection(self: *const IHTMLAppBehavior2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_selection(self, p);
    }
};

const IID_IHTMLAppBehavior3_Value = Guid.initString("3050f5cd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLAppBehavior3 = &IID_IHTMLAppBehavior3_Value;
pub const IHTMLAppBehavior3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_navigable: *const fn(
            self: *const IHTMLAppBehavior3,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_navigable: *const fn(
            self: *const IHTMLAppBehavior3,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_navigable(self: *const IHTMLAppBehavior3, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_navigable(self, v);
    }
    pub fn get_navigable(self: *const IHTMLAppBehavior3, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_navigable(self, p);
    }
};

const IID_DispHTMLAppBehavior_Value = Guid.initString("3050f57c-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispHTMLAppBehavior = &IID_DispHTMLAppBehavior_Value;
pub const DispHTMLAppBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispIHTMLInputButtonElement_Value = Guid.initString("3050f51e-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispIHTMLInputButtonElement = &IID_DispIHTMLInputButtonElement_Value;
pub const DispIHTMLInputButtonElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispIHTMLInputTextElement_Value = Guid.initString("3050f520-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispIHTMLInputTextElement = &IID_DispIHTMLInputTextElement_Value;
pub const DispIHTMLInputTextElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispIHTMLInputFileElement_Value = Guid.initString("3050f542-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispIHTMLInputFileElement = &IID_DispIHTMLInputFileElement_Value;
pub const DispIHTMLInputFileElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispIHTMLOptionButtonElement_Value = Guid.initString("3050f509-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispIHTMLOptionButtonElement = &IID_DispIHTMLOptionButtonElement_Value;
pub const DispIHTMLOptionButtonElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DispIHTMLInputImage_Value = Guid.initString("3050f51d-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_DispIHTMLInputImage = &IID_DispIHTMLInputImage_Value;
pub const DispIHTMLInputImage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IElementNamespace_Value = Guid.initString("3050f671-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementNamespace = &IID_IElementNamespace_Value;
pub const IElementNamespace = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTag: *const fn(
            self: *const IElementNamespace,
            bstrTagName: ?BSTR,
            lFlags: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddTag(self: *const IElementNamespace, bstrTagName: ?BSTR, lFlags: i32) callconv(.@"inline") HRESULT {
        return self.vtable.AddTag(self, bstrTagName, lFlags);
    }
};

const IID_IElementNamespaceTable_Value = Guid.initString("3050f670-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementNamespaceTable = &IID_IElementNamespaceTable_Value;
pub const IElementNamespaceTable = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddNamespace: *const fn(
            self: *const IElementNamespaceTable,
            bstrNamespace: ?BSTR,
            bstrUrn: ?BSTR,
            lFlags: i32,
            pvarFactory: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddNamespace(self: *const IElementNamespaceTable, bstrNamespace: ?BSTR, bstrUrn: ?BSTR, lFlags: i32, pvarFactory: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.AddNamespace(self, bstrNamespace, bstrUrn, lFlags, pvarFactory);
    }
};

const IID_IElementNamespaceFactory_Value = Guid.initString("3050f672-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementNamespaceFactory = &IID_IElementNamespaceFactory_Value;
pub const IElementNamespaceFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn(
            self: *const IElementNamespaceFactory,
            pNamespace: ?*IElementNamespace,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Create(self: *const IElementNamespaceFactory, pNamespace: ?*IElementNamespace) callconv(.@"inline") HRESULT {
        return self.vtable.Create(self, pNamespace);
    }
};

const IID_IElementNamespaceFactory2_Value = Guid.initString("3050f805-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementNamespaceFactory2 = &IID_IElementNamespaceFactory2_Value;
pub const IElementNamespaceFactory2 = extern union {
    pub const VTable = extern struct {
        base: IElementNamespaceFactory.VTable,
        CreateWithImplementation: *const fn(
            self: *const IElementNamespaceFactory2,
            pNamespace: ?*IElementNamespace,
            bstrImplementation: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IElementNamespaceFactory: IElementNamespaceFactory,
    IUnknown: IUnknown,
    pub fn CreateWithImplementation(self: *const IElementNamespaceFactory2, pNamespace: ?*IElementNamespace, bstrImplementation: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.CreateWithImplementation(self, pNamespace, bstrImplementation);
    }
};

const IID_IElementNamespaceFactoryCallback_Value = Guid.initString("3050f7fd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementNamespaceFactoryCallback = &IID_IElementNamespaceFactoryCallback_Value;
pub const IElementNamespaceFactoryCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Resolve: *const fn(
            self: *const IElementNamespaceFactoryCallback,
            bstrNamespace: ?BSTR,
            bstrTagName: ?BSTR,
            bstrAttrs: ?BSTR,
            pNamespace: ?*IElementNamespace,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Resolve(self: *const IElementNamespaceFactoryCallback, bstrNamespace: ?BSTR, bstrTagName: ?BSTR, bstrAttrs: ?BSTR, pNamespace: ?*IElementNamespace) callconv(.@"inline") HRESULT {
        return self.vtable.Resolve(self, bstrNamespace, bstrTagName, bstrAttrs, pNamespace);
    }
};

const IID_IElementBehaviorSiteOM2_Value = Guid.initString("3050f659-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorSiteOM2 = &IID_IElementBehaviorSiteOM2_Value;
pub const IElementBehaviorSiteOM2 = extern union {
    pub const VTable = extern struct {
        base: IElementBehaviorSiteOM.VTable,
        GetDefaults: *const fn(
            self: *const IElementBehaviorSiteOM2,
            ppDefaults: ?*?*IHTMLElementDefaults,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IElementBehaviorSiteOM: IElementBehaviorSiteOM,
    IUnknown: IUnknown,
    pub fn GetDefaults(self: *const IElementBehaviorSiteOM2, ppDefaults: ?*?*IHTMLElementDefaults) callconv(.@"inline") HRESULT {
        return self.vtable.GetDefaults(self, ppDefaults);
    }
};

const IID_IElementBehaviorCategory_Value = Guid.initString("3050f4ed-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorCategory = &IID_IElementBehaviorCategory_Value;
pub const IElementBehaviorCategory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCategory: *const fn(
            self: *const IElementBehaviorCategory,
            ppchCategory: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCategory(self: *const IElementBehaviorCategory, ppchCategory: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetCategory(self, ppchCategory);
    }
};

const IID_IElementBehaviorSiteCategory_Value = Guid.initString("3050f4ee-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorSiteCategory = &IID_IElementBehaviorSiteCategory_Value;
pub const IElementBehaviorSiteCategory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRelatedBehaviors: *const fn(
            self: *const IElementBehaviorSiteCategory,
            lDirection: i32,
            pchCategory: ?PWSTR,
            ppEnumerator: ?*?*IEnumUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetRelatedBehaviors(self: *const IElementBehaviorSiteCategory, lDirection: i32, pchCategory: ?PWSTR, ppEnumerator: ?*?*IEnumUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.GetRelatedBehaviors(self, lDirection, pchCategory, ppEnumerator);
    }
};

const IID_IElementBehaviorSubmit_Value = Guid.initString("3050f646-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorSubmit = &IID_IElementBehaviorSubmit_Value;
pub const IElementBehaviorSubmit = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSubmitInfo: *const fn(
            self: *const IElementBehaviorSubmit,
            pSubmitData: ?*IHTMLSubmitData,
        ) callconv(.winapi) HRESULT,
        Reset: *const fn(
            self: *const IElementBehaviorSubmit,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSubmitInfo(self: *const IElementBehaviorSubmit, pSubmitData: ?*IHTMLSubmitData) callconv(.@"inline") HRESULT {
        return self.vtable.GetSubmitInfo(self, pSubmitData);
    }
    pub fn Reset(self: *const IElementBehaviorSubmit) callconv(.@"inline") HRESULT {
        return self.vtable.Reset(self);
    }
};

const IID_IElementBehaviorFocus_Value = Guid.initString("3050f6b6-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorFocus = &IID_IElementBehaviorFocus_Value;
pub const IElementBehaviorFocus = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFocusRect: *const fn(
            self: *const IElementBehaviorFocus,
            pRect: ?*RECT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFocusRect(self: *const IElementBehaviorFocus, pRect: ?*RECT) callconv(.@"inline") HRESULT {
        return self.vtable.GetFocusRect(self, pRect);
    }
};

const IID_IElementBehaviorLayout_Value = Guid.initString("3050f6ba-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorLayout = &IID_IElementBehaviorLayout_Value;
pub const IElementBehaviorLayout = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSize: *const fn(
            self: *const IElementBehaviorLayout,
            dwFlags: i32,
            sizeContent: SIZE,
            pptTranslateBy: ?*POINT,
            pptTopLeft: ?*POINT,
            psizeProposed: ?*SIZE,
        ) callconv(.winapi) HRESULT,
        GetLayoutInfo: *const fn(
            self: *const IElementBehaviorLayout,
            plLayoutInfo: ?*i32,
        ) callconv(.winapi) HRESULT,
        GetPosition: *const fn(
            self: *const IElementBehaviorLayout,
            lFlags: i32,
            pptTopLeft: ?*POINT,
        ) callconv(.winapi) HRESULT,
        MapSize: *const fn(
            self: *const IElementBehaviorLayout,
            psizeIn: ?*SIZE,
            prcOut: ?*RECT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSize(self: *const IElementBehaviorLayout, dwFlags: i32, sizeContent: SIZE, pptTranslateBy: ?*POINT, pptTopLeft: ?*POINT, psizeProposed: ?*SIZE) callconv(.@"inline") HRESULT {
        return self.vtable.GetSize(self, dwFlags, sizeContent, pptTranslateBy, pptTopLeft, psizeProposed);
    }
    pub fn GetLayoutInfo(self: *const IElementBehaviorLayout, plLayoutInfo: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetLayoutInfo(self, plLayoutInfo);
    }
    pub fn GetPosition(self: *const IElementBehaviorLayout, lFlags: i32, pptTopLeft: ?*POINT) callconv(.@"inline") HRESULT {
        return self.vtable.GetPosition(self, lFlags, pptTopLeft);
    }
    pub fn MapSize(self: *const IElementBehaviorLayout, psizeIn: ?*SIZE, prcOut: ?*RECT) callconv(.@"inline") HRESULT {
        return self.vtable.MapSize(self, psizeIn, prcOut);
    }
};

const IID_IElementBehaviorLayout2_Value = Guid.initString("3050f846-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorLayout2 = &IID_IElementBehaviorLayout2_Value;
pub const IElementBehaviorLayout2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTextDescent: *const fn(
            self: *const IElementBehaviorLayout2,
            plDescent: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTextDescent(self: *const IElementBehaviorLayout2, plDescent: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.GetTextDescent(self, plDescent);
    }
};

const IID_IElementBehaviorSiteLayout_Value = Guid.initString("3050f6b7-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorSiteLayout = &IID_IElementBehaviorSiteLayout_Value;
pub const IElementBehaviorSiteLayout = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InvalidateLayoutInfo: *const fn(
            self: *const IElementBehaviorSiteLayout,
        ) callconv(.winapi) HRESULT,
        InvalidateSize: *const fn(
            self: *const IElementBehaviorSiteLayout,
        ) callconv(.winapi) HRESULT,
        GetMediaResolution: *const fn(
            self: *const IElementBehaviorSiteLayout,
            psizeResolution: ?*SIZE,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn InvalidateLayoutInfo(self: *const IElementBehaviorSiteLayout) callconv(.@"inline") HRESULT {
        return self.vtable.InvalidateLayoutInfo(self);
    }
    pub fn InvalidateSize(self: *const IElementBehaviorSiteLayout) callconv(.@"inline") HRESULT {
        return self.vtable.InvalidateSize(self);
    }
    pub fn GetMediaResolution(self: *const IElementBehaviorSiteLayout, psizeResolution: ?*SIZE) callconv(.@"inline") HRESULT {
        return self.vtable.GetMediaResolution(self, psizeResolution);
    }
};

const IID_IElementBehaviorSiteLayout2_Value = Guid.initString("3050f847-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IElementBehaviorSiteLayout2 = &IID_IElementBehaviorSiteLayout2_Value;
pub const IElementBehaviorSiteLayout2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontInfo: *const fn(
            self: *const IElementBehaviorSiteLayout2,
            plf: ?*LOGFONTW,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFontInfo(self: *const IElementBehaviorSiteLayout2, plf: ?*LOGFONTW) callconv(.@"inline") HRESULT {
        return self.vtable.GetFontInfo(self, plf);
    }
};

const IID_IHostBehaviorInit_Value = Guid.initString("3050f842-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHostBehaviorInit = &IID_IHostBehaviorInit_Value;
pub const IHostBehaviorInit = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PopulateNamespaceTable: *const fn(
            self: *const IHostBehaviorInit,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn PopulateNamespaceTable(self: *const IHostBehaviorInit) callconv(.@"inline") HRESULT {
        return self.vtable.PopulateNamespaceTable(self);
    }
};

const IID_ISurfacePresenter_Value = Guid.initString("305106e2-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISurfacePresenter = &IID_ISurfacePresenter_Value;
pub const ISurfacePresenter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Present: *const fn(
            self: *const ISurfacePresenter,
            uBuffer: u32,
            pDirty: ?*RECT,
        ) callconv(.winapi) HRESULT,
        GetBuffer: *const fn(
            self: *const ISurfacePresenter,
            backBufferIndex: u32,
            riid: ?*const Guid,
            ppBuffer: **anyopaque,
        ) callconv(.winapi) HRESULT,
        IsCurrent: *const fn(
            self: *const ISurfacePresenter,
            pIsCurrent: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Present(self: *const ISurfacePresenter, uBuffer: u32, pDirty: ?*RECT) callconv(.@"inline") HRESULT {
        return self.vtable.Present(self, uBuffer, pDirty);
    }
    pub fn GetBuffer(self: *const ISurfacePresenter, backBufferIndex: u32, riid: ?*const Guid, ppBuffer: **anyopaque) callconv(.@"inline") HRESULT {
        return self.vtable.GetBuffer(self, backBufferIndex, riid, ppBuffer);
    }
    pub fn IsCurrent(self: *const ISurfacePresenter, pIsCurrent: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsCurrent(self, pIsCurrent);
    }
};

const IID_IViewObjectPresentSite_Value = Guid.initString("305106e1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IViewObjectPresentSite = &IID_IViewObjectPresentSite_Value;
pub const IViewObjectPresentSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSurfacePresenter: *const fn(
            self: *const IViewObjectPresentSite,
            pDevice: ?*IUnknown,
            width: u32,
            height: u32,
            backBufferCount: u32,
            format: DXGI_FORMAT,
            mode: VIEW_OBJECT_ALPHA_MODE,
            ppQueue: ?*?*ISurfacePresenter,
        ) callconv(.winapi) HRESULT,
        IsHardwareComposition: *const fn(
            self: *const IViewObjectPresentSite,
            pIsHardwareComposition: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        SetCompositionMode: *const fn(
            self: *const IViewObjectPresentSite,
            mode: VIEW_OBJECT_COMPOSITION_MODE,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateSurfacePresenter(self: *const IViewObjectPresentSite, pDevice: ?*IUnknown, width: u32, height: u32, backBufferCount: u32, format: DXGI_FORMAT, mode: VIEW_OBJECT_ALPHA_MODE, ppQueue: ?*?*ISurfacePresenter) callconv(.@"inline") HRESULT {
        return self.vtable.CreateSurfacePresenter(self, pDevice, width, height, backBufferCount, format, mode, ppQueue);
    }
    pub fn IsHardwareComposition(self: *const IViewObjectPresentSite, pIsHardwareComposition: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsHardwareComposition(self, pIsHardwareComposition);
    }
    pub fn SetCompositionMode(self: *const IViewObjectPresentSite, mode: VIEW_OBJECT_COMPOSITION_MODE) callconv(.@"inline") HRESULT {
        return self.vtable.SetCompositionMode(self, mode);
    }
};

const IID_ICanvasPixelArrayData_Value = Guid.initString("305107f9-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICanvasPixelArrayData = &IID_ICanvasPixelArrayData_Value;
pub const ICanvasPixelArrayData = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBufferPointer: *const fn(
            self: *const ICanvasPixelArrayData,
            ppBuffer: ?*?*u8,
            pBufferLength: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetBufferPointer(self: *const ICanvasPixelArrayData, ppBuffer: ?*?*u8, pBufferLength: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetBufferPointer(self, ppBuffer, pBufferLength);
    }
};

const IID_IViewObjectPrint_Value = Guid.initString("305106e3-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IViewObjectPrint = &IID_IViewObjectPrint_Value;
pub const IViewObjectPrint = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPrintBitmap: *const fn(
            self: *const IViewObjectPrint,
            ppPrintBitmap: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPrintBitmap(self: *const IViewObjectPrint, ppPrintBitmap: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.GetPrintBitmap(self, ppPrintBitmap);
    }
};

const IID_IViewObjectPresentNotifySite_Value = Guid.initString("305107fa-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IViewObjectPresentNotifySite = &IID_IViewObjectPresentNotifySite_Value;
pub const IViewObjectPresentNotifySite = extern union {
    pub const VTable = extern struct {
        base: IViewObjectPresentSite.VTable,
        RequestFrame: *const fn(
            self: *const IViewObjectPresentNotifySite,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IViewObjectPresentSite: IViewObjectPresentSite,
    IUnknown: IUnknown,
    pub fn RequestFrame(self: *const IViewObjectPresentNotifySite) callconv(.@"inline") HRESULT {
        return self.vtable.RequestFrame(self);
    }
};

const IID_IViewObjectPresentNotify_Value = Guid.initString("305107f8-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IViewObjectPresentNotify = &IID_IViewObjectPresentNotify_Value;
pub const IViewObjectPresentNotify = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPreRender: *const fn(
            self: *const IViewObjectPresentNotify,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnPreRender(self: *const IViewObjectPresentNotify) callconv(.@"inline") HRESULT {
        return self.vtable.OnPreRender(self);
    }
};

const IID_ITrackingProtection_Value = Guid.initString("30510803-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITrackingProtection = &IID_ITrackingProtection_Value;
pub const ITrackingProtection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EvaluateUrl: *const fn(
            self: *const ITrackingProtection,
            bstrUrl: ?BSTR,
            pfAllowed: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        GetEnabled: *const fn(
            self: *const ITrackingProtection,
            pfEnabled: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EvaluateUrl(self: *const ITrackingProtection, bstrUrl: ?BSTR, pfAllowed: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.EvaluateUrl(self, bstrUrl, pfAllowed);
    }
    pub fn GetEnabled(self: *const ITrackingProtection, pfEnabled: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.GetEnabled(self, pfEnabled);
    }
};

const IID_IBFCacheable_Value = Guid.initString("30510861-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IBFCacheable = &IID_IBFCacheable_Value;
pub const IBFCacheable = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnterBFCache: *const fn(
            self: *const IBFCacheable,
        ) callconv(.winapi) HRESULT,
        ExitBFCache: *const fn(
            self: *const IBFCacheable,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnterBFCache(self: *const IBFCacheable) callconv(.@"inline") HRESULT {
        return self.vtable.EnterBFCache(self);
    }
    pub fn ExitBFCache(self: *const IBFCacheable) callconv(.@"inline") HRESULT {
        return self.vtable.ExitBFCache(self);
    }
};

const IID_IDocObjectService_Value = Guid.initString("3050f801-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDocObjectService = &IID_IDocObjectService_Value;
pub const IDocObjectService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FireBeforeNavigate2: *const fn(
            self: *const IDocObjectService,
            pDispatch: ?*IDispatch,
            lpszUrl: ?[*:0]const u16,
            dwFlags: u32,
            lpszFrameName: ?[*:0]const u16,
            pPostData: ?*u8,
            cbPostData: u32,
            lpszHeaders: ?[*:0]const u16,
            fPlayNavSound: BOOL,
            pfCancel: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        FireNavigateComplete2: *const fn(
            self: *const IDocObjectService,
            pHTMLWindow2: ?*IHTMLWindow2,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
        FireDownloadBegin: *const fn(
            self: *const IDocObjectService,
        ) callconv(.winapi) HRESULT,
        FireDownloadComplete: *const fn(
            self: *const IDocObjectService,
        ) callconv(.winapi) HRESULT,
        FireDocumentComplete: *const fn(
            self: *const IDocObjectService,
            pHTMLWindow: ?*IHTMLWindow2,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
        UpdateDesktopComponent: *const fn(
            self: *const IDocObjectService,
            pHTMLWindow: ?*IHTMLWindow2,
        ) callconv(.winapi) HRESULT,
        GetPendingUrl: *const fn(
            self: *const IDocObjectService,
            pbstrPendingUrl: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        ActiveElementChanged: *const fn(
            self: *const IDocObjectService,
            pHTMLElement: ?*IHTMLElement,
        ) callconv(.winapi) HRESULT,
        GetUrlSearchComponent: *const fn(
            self: *const IDocObjectService,
            pbstrSearch: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        IsErrorUrl: *const fn(
            self: *const IDocObjectService,
            lpszUrl: ?[*:0]const u16,
            pfIsError: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FireBeforeNavigate2(self: *const IDocObjectService, pDispatch: ?*IDispatch, lpszUrl: ?[*:0]const u16, dwFlags: u32, lpszFrameName: ?[*:0]const u16, pPostData: ?*u8, cbPostData: u32, lpszHeaders: ?[*:0]const u16, fPlayNavSound: BOOL, pfCancel: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.FireBeforeNavigate2(self, pDispatch, lpszUrl, dwFlags, lpszFrameName, pPostData, cbPostData, lpszHeaders, fPlayNavSound, pfCancel);
    }
    pub fn FireNavigateComplete2(self: *const IDocObjectService, pHTMLWindow2: ?*IHTMLWindow2, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.FireNavigateComplete2(self, pHTMLWindow2, dwFlags);
    }
    pub fn FireDownloadBegin(self: *const IDocObjectService) callconv(.@"inline") HRESULT {
        return self.vtable.FireDownloadBegin(self);
    }
    pub fn FireDownloadComplete(self: *const IDocObjectService) callconv(.@"inline") HRESULT {
        return self.vtable.FireDownloadComplete(self);
    }
    pub fn FireDocumentComplete(self: *const IDocObjectService, pHTMLWindow: ?*IHTMLWindow2, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.FireDocumentComplete(self, pHTMLWindow, dwFlags);
    }
    pub fn UpdateDesktopComponent(self: *const IDocObjectService, pHTMLWindow: ?*IHTMLWindow2) callconv(.@"inline") HRESULT {
        return self.vtable.UpdateDesktopComponent(self, pHTMLWindow);
    }
    pub fn GetPendingUrl(self: *const IDocObjectService, pbstrPendingUrl: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetPendingUrl(self, pbstrPendingUrl);
    }
    pub fn ActiveElementChanged(self: *const IDocObjectService, pHTMLElement: ?*IHTMLElement) callconv(.@"inline") HRESULT {
        return self.vtable.ActiveElementChanged(self, pHTMLElement);
    }
    pub fn GetUrlSearchComponent(self: *const IDocObjectService, pbstrSearch: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetUrlSearchComponent(self, pbstrSearch);
    }
    pub fn IsErrorUrl(self: *const IDocObjectService, lpszUrl: ?[*:0]const u16, pfIsError: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsErrorUrl(self, lpszUrl, pfIsError);
    }
};

const IID_IDownloadManager_Value = Guid.initString("988934a4-064b-11d3-bb80-00104b35e7f9");
pub const IID_IDownloadManager = &IID_IDownloadManager_Value;
pub const IDownloadManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Download: *const fn(
            self: *const IDownloadManager,
            pmk: ?*IMoniker,
            pbc: ?*IBindCtx,
            dwBindVerb: u32,
            grfBINDF: i32,
            pBindInfo: ?*BINDINFO,
            pszHeaders: ?[*:0]const u16,
            pszRedir: ?[*:0]const u16,
            uiCP: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Download(self: *const IDownloadManager, pmk: ?*IMoniker, pbc: ?*IBindCtx, dwBindVerb: u32, grfBINDF: i32, pBindInfo: ?*BINDINFO, pszHeaders: ?[*:0]const u16, pszRedir: ?[*:0]const u16, uiCP: u32) callconv(.@"inline") HRESULT {
        return self.vtable.Download(self, pmk, pbc, dwBindVerb, grfBINDF, pBindInfo, pszHeaders, pszRedir, uiCP);
    }
};

pub const ExtensionValidationContexts = enum(i32) {
    None = 0,
    Dynamic = 1,
    Parsed = 2,
};
pub const ExtensionValidationContextNone = ExtensionValidationContexts.None;
pub const ExtensionValidationContextDynamic = ExtensionValidationContexts.Dynamic;
pub const ExtensionValidationContextParsed = ExtensionValidationContexts.Parsed;

pub const ExtensionValidationResults = enum(i32) {
    None = 0,
    DoNotInstantiate = 1,
    ArrestPageLoad = 2,
};
pub const ExtensionValidationResultNone = ExtensionValidationResults.None;
pub const ExtensionValidationResultDoNotInstantiate = ExtensionValidationResults.DoNotInstantiate;
pub const ExtensionValidationResultArrestPageLoad = ExtensionValidationResults.ArrestPageLoad;

const IID_IExtensionValidation_Value = Guid.initString("7d33f73d-8525-4e0f-87db-830288baff44");
pub const IID_IExtensionValidation = &IID_IExtensionValidation_Value;
pub const IExtensionValidation = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Validate: *const fn(
            self: *const IExtensionValidation,
            extensionGuid: ?*const Guid,
            extensionModulePath: ?PWSTR,
            extensionFileVersionMS: u32,
            extensionFileVersionLS: u32,
            htmlDocumentTop: ?*IHTMLDocument2,
            htmlDocumentSubframe: ?*IHTMLDocument2,
            htmlElement: ?*IHTMLElement,
            contexts: ExtensionValidationContexts,
            results: ?*ExtensionValidationResults,
        ) callconv(.winapi) HRESULT,
        DisplayName: *const fn(
            self: *const IExtensionValidation,
            displayName: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Validate(self: *const IExtensionValidation, extensionGuid: ?*const Guid, extensionModulePath: ?PWSTR, extensionFileVersionMS: u32, extensionFileVersionLS: u32, htmlDocumentTop: ?*IHTMLDocument2, htmlDocumentSubframe: ?*IHTMLDocument2, htmlElement: ?*IHTMLElement, contexts: ExtensionValidationContexts, results: ?*ExtensionValidationResults) callconv(.@"inline") HRESULT {
        return self.vtable.Validate(self, extensionGuid, extensionModulePath, extensionFileVersionMS, extensionFileVersionLS, htmlDocumentTop, htmlDocumentSubframe, htmlElement, contexts, results);
    }
    pub fn DisplayName(self: *const IExtensionValidation, displayName: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.DisplayName(self, displayName);
    }
};

const CLSID_HomePageSetting_Value = Guid.initString("374cede0-873a-4c4f-bc86-bcc8cf5116a3");
pub const CLSID_HomePageSetting = &CLSID_HomePageSetting_Value;

const IID_IHomePageSetting_Value = Guid.initString("fdfc244f-18fa-4ff2-b08e-1d618f3ffbe4");
pub const IID_IHomePageSetting = &IID_IHomePageSetting_Value;
pub const IHomePageSetting = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHomePage: *const fn(
            self: *const IHomePageSetting,
            hwnd: ?HWND,
            homePageUri: ?[*:0]const u16,
            brandingMessage: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        IsHomePage: *const fn(
            self: *const IHomePageSetting,
            uri: ?[*:0]const u16,
            isDefault: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        SetHomePageToBrowserDefault: *const fn(
            self: *const IHomePageSetting,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetHomePage(self: *const IHomePageSetting, hwnd: ?HWND, homePageUri: ?[*:0]const u16, brandingMessage: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.SetHomePage(self, hwnd, homePageUri, brandingMessage);
    }
    pub fn IsHomePage(self: *const IHomePageSetting, uri: ?[*:0]const u16, isDefault: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsHomePage(self, uri, isDefault);
    }
    pub fn SetHomePageToBrowserDefault(self: *const IHomePageSetting) callconv(.@"inline") HRESULT {
        return self.vtable.SetHomePageToBrowserDefault(self);
    }
};

const IID_ITargetNotify_Value = Guid.initString("863a99a0-21bc-11d0-82b4-00a0c90c29c5");
pub const IID_ITargetNotify = &IID_ITargetNotify_Value;
pub const ITargetNotify = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCreate: *const fn(
            self: *const ITargetNotify,
            pUnkDestination: ?*IUnknown,
            cbCookie: u32,
        ) callconv(.winapi) HRESULT,
        OnReuse: *const fn(
            self: *const ITargetNotify,
            pUnkDestination: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnCreate(self: *const ITargetNotify, pUnkDestination: ?*IUnknown, cbCookie: u32) callconv(.@"inline") HRESULT {
        return self.vtable.OnCreate(self, pUnkDestination, cbCookie);
    }
    pub fn OnReuse(self: *const ITargetNotify, pUnkDestination: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.OnReuse(self, pUnkDestination);
    }
};

const IID_ITargetNotify2_Value = Guid.initString("3050f6b1-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITargetNotify2 = &IID_ITargetNotify2_Value;
pub const ITargetNotify2 = extern union {
    pub const VTable = extern struct {
        base: ITargetNotify.VTable,
        GetOptionString: *const fn(
            self: *const ITargetNotify2,
            pbstrOptions: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    ITargetNotify: ITargetNotify,
    IUnknown: IUnknown,
    pub fn GetOptionString(self: *const ITargetNotify2, pbstrOptions: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetOptionString(self, pbstrOptions);
    }
};

pub const FINDFRAME_FLAGS = enum(i32) {
    NONE = 0,
    JUSTTESTEXISTENCE = 1,
    INTERNAL = -2147483648,
};
pub const FINDFRAME_NONE = FINDFRAME_FLAGS.NONE;
pub const FINDFRAME_JUSTTESTEXISTENCE = FINDFRAME_FLAGS.JUSTTESTEXISTENCE;
pub const FINDFRAME_INTERNAL = FINDFRAME_FLAGS.INTERNAL;

pub const FRAMEOPTIONS_FLAGS = enum(i32) {
    SCROLL_YES = 1,
    SCROLL_NO = 2,
    SCROLL_AUTO = 4,
    NORESIZE = 8,
    NO3DBORDER = 16,
    DESKTOP = 32,
    BROWSERBAND = 64,
};
pub const FRAMEOPTIONS_SCROLL_YES = FRAMEOPTIONS_FLAGS.SCROLL_YES;
pub const FRAMEOPTIONS_SCROLL_NO = FRAMEOPTIONS_FLAGS.SCROLL_NO;
pub const FRAMEOPTIONS_SCROLL_AUTO = FRAMEOPTIONS_FLAGS.SCROLL_AUTO;
pub const FRAMEOPTIONS_NORESIZE = FRAMEOPTIONS_FLAGS.NORESIZE;
pub const FRAMEOPTIONS_NO3DBORDER = FRAMEOPTIONS_FLAGS.NO3DBORDER;
pub const FRAMEOPTIONS_DESKTOP = FRAMEOPTIONS_FLAGS.DESKTOP;
pub const FRAMEOPTIONS_BROWSERBAND = FRAMEOPTIONS_FLAGS.BROWSERBAND;

const IID_ITargetFrame2_Value = Guid.initString("86d52e11-94a8-11d0-82af-00c04fd5ae38");
pub const IID_ITargetFrame2 = &IID_ITargetFrame2_Value;
pub const ITargetFrame2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFrameName: *const fn(
            self: *const ITargetFrame2,
            pszFrameName: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetFrameName: *const fn(
            self: *const ITargetFrame2,
            ppszFrameName: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
        GetParentFrame: *const fn(
            self: *const ITargetFrame2,
            ppunkParent: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        SetFrameSrc: *const fn(
            self: *const ITargetFrame2,
            pszFrameSrc: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetFrameSrc: *const fn(
            self: *const ITargetFrame2,
            ppszFrameSrc: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
        GetFramesContainer: *const fn(
            self: *const ITargetFrame2,
            ppContainer: ?*?*IOleContainer,
        ) callconv(.winapi) HRESULT,
        SetFrameOptions: *const fn(
            self: *const ITargetFrame2,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
        GetFrameOptions: *const fn(
            self: *const ITargetFrame2,
            pdwFlags: ?*u32,
        ) callconv(.winapi) HRESULT,
        SetFrameMargins: *const fn(
            self: *const ITargetFrame2,
            dwWidth: u32,
            dwHeight: u32,
        ) callconv(.winapi) HRESULT,
        GetFrameMargins: *const fn(
            self: *const ITargetFrame2,
            pdwWidth: ?*u32,
            pdwHeight: ?*u32,
        ) callconv(.winapi) HRESULT,
        FindFrame: *const fn(
            self: *const ITargetFrame2,
            pszTargetName: ?[*:0]const u16,
            dwFlags: u32,
            ppunkTargetFrame: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        GetTargetAlias: *const fn(
            self: *const ITargetFrame2,
            pszTargetName: ?[*:0]const u16,
            ppszTargetAlias: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetFrameName(self: *const ITargetFrame2, pszFrameName: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.SetFrameName(self, pszFrameName);
    }
    pub fn GetFrameName(self: *const ITargetFrame2, ppszFrameName: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameName(self, ppszFrameName);
    }
    pub fn GetParentFrame(self: *const ITargetFrame2, ppunkParent: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.GetParentFrame(self, ppunkParent);
    }
    pub fn SetFrameSrc(self: *const ITargetFrame2, pszFrameSrc: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.SetFrameSrc(self, pszFrameSrc);
    }
    pub fn GetFrameSrc(self: *const ITargetFrame2, ppszFrameSrc: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameSrc(self, ppszFrameSrc);
    }
    pub fn GetFramesContainer(self: *const ITargetFrame2, ppContainer: ?*?*IOleContainer) callconv(.@"inline") HRESULT {
        return self.vtable.GetFramesContainer(self, ppContainer);
    }
    pub fn SetFrameOptions(self: *const ITargetFrame2, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SetFrameOptions(self, dwFlags);
    }
    pub fn GetFrameOptions(self: *const ITargetFrame2, pdwFlags: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameOptions(self, pdwFlags);
    }
    pub fn SetFrameMargins(self: *const ITargetFrame2, dwWidth: u32, dwHeight: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SetFrameMargins(self, dwWidth, dwHeight);
    }
    pub fn GetFrameMargins(self: *const ITargetFrame2, pdwWidth: ?*u32, pdwHeight: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameMargins(self, pdwWidth, pdwHeight);
    }
    pub fn FindFrame(self: *const ITargetFrame2, pszTargetName: ?[*:0]const u16, dwFlags: u32, ppunkTargetFrame: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.FindFrame(self, pszTargetName, dwFlags, ppunkTargetFrame);
    }
    pub fn GetTargetAlias(self: *const ITargetFrame2, pszTargetName: ?[*:0]const u16, ppszTargetAlias: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetTargetAlias(self, pszTargetName, ppszTargetAlias);
    }
};

const IID_ITargetContainer_Value = Guid.initString("7847ec01-2bec-11d0-82b4-00a0c90c29c5");
pub const IID_ITargetContainer = &IID_ITargetContainer_Value;
pub const ITargetContainer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFrameUrl: *const fn(
            self: *const ITargetContainer,
            ppszFrameSrc: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
        GetFramesContainer: *const fn(
            self: *const ITargetContainer,
            ppContainer: ?*?*IOleContainer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFrameUrl(self: *const ITargetContainer, ppszFrameSrc: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameUrl(self, ppszFrameSrc);
    }
    pub fn GetFramesContainer(self: *const ITargetContainer, ppContainer: ?*?*IOleContainer) callconv(.@"inline") HRESULT {
        return self.vtable.GetFramesContainer(self, ppContainer);
    }
};

pub const NAVIGATEFRAME_FLAGS = enum(i32) {
    RECORD = 1,
    POST = 2,
    NO_DOC_CACHE = 4,
    NO_IMAGE_CACHE = 8,
    AUTH_FAIL_CACHE_OK = 16,
    SENDING_FROM_FORM = 32,
    REALLY_SENDING_FROM_FORM = 64,
};
pub const NAVIGATEFRAME_FL_RECORD = NAVIGATEFRAME_FLAGS.RECORD;
pub const NAVIGATEFRAME_FL_POST = NAVIGATEFRAME_FLAGS.POST;
pub const NAVIGATEFRAME_FL_NO_DOC_CACHE = NAVIGATEFRAME_FLAGS.NO_DOC_CACHE;
pub const NAVIGATEFRAME_FL_NO_IMAGE_CACHE = NAVIGATEFRAME_FLAGS.NO_IMAGE_CACHE;
pub const NAVIGATEFRAME_FL_AUTH_FAIL_CACHE_OK = NAVIGATEFRAME_FLAGS.AUTH_FAIL_CACHE_OK;
pub const NAVIGATEFRAME_FL_SENDING_FROM_FORM = NAVIGATEFRAME_FLAGS.SENDING_FROM_FORM;
pub const NAVIGATEFRAME_FL_REALLY_SENDING_FROM_FORM = NAVIGATEFRAME_FLAGS.REALLY_SENDING_FROM_FORM;

pub const tagNavigateData = extern struct {
    ulTarget: u32,
    ulURL: u32,
    ulRefURL: u32,
    ulPostData: u32,
    dwFlags: u32,
};

const IID_ITargetFrame_Value = Guid.initString("d5f78c80-5252-11cf-90fa-00aa0042106e");
pub const IID_ITargetFrame = &IID_ITargetFrame_Value;
pub const ITargetFrame = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFrameName: *const fn(
            self: *const ITargetFrame,
            pszFrameName: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetFrameName: *const fn(
            self: *const ITargetFrame,
            ppszFrameName: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
        GetParentFrame: *const fn(
            self: *const ITargetFrame,
            ppunkParent: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        FindFrame: *const fn(
            self: *const ITargetFrame,
            pszTargetName: ?[*:0]const u16,
            ppunkContextFrame: ?*IUnknown,
            dwFlags: u32,
            ppunkTargetFrame: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        SetFrameSrc: *const fn(
            self: *const ITargetFrame,
            pszFrameSrc: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetFrameSrc: *const fn(
            self: *const ITargetFrame,
            ppszFrameSrc: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
        GetFramesContainer: *const fn(
            self: *const ITargetFrame,
            ppContainer: ?*?*IOleContainer,
        ) callconv(.winapi) HRESULT,
        SetFrameOptions: *const fn(
            self: *const ITargetFrame,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
        GetFrameOptions: *const fn(
            self: *const ITargetFrame,
            pdwFlags: ?*u32,
        ) callconv(.winapi) HRESULT,
        SetFrameMargins: *const fn(
            self: *const ITargetFrame,
            dwWidth: u32,
            dwHeight: u32,
        ) callconv(.winapi) HRESULT,
        GetFrameMargins: *const fn(
            self: *const ITargetFrame,
            pdwWidth: ?*u32,
            pdwHeight: ?*u32,
        ) callconv(.winapi) HRESULT,
        RemoteNavigate: *const fn(
            self: *const ITargetFrame,
            cLength: u32,
            pulData: [*]u32,
        ) callconv(.winapi) HRESULT,
        OnChildFrameActivate: *const fn(
            self: *const ITargetFrame,
            pUnkChildFrame: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        OnChildFrameDeactivate: *const fn(
            self: *const ITargetFrame,
            pUnkChildFrame: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetFrameName(self: *const ITargetFrame, pszFrameName: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.SetFrameName(self, pszFrameName);
    }
    pub fn GetFrameName(self: *const ITargetFrame, ppszFrameName: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameName(self, ppszFrameName);
    }
    pub fn GetParentFrame(self: *const ITargetFrame, ppunkParent: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.GetParentFrame(self, ppunkParent);
    }
    pub fn FindFrame(self: *const ITargetFrame, pszTargetName: ?[*:0]const u16, ppunkContextFrame: ?*IUnknown, dwFlags: u32, ppunkTargetFrame: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.FindFrame(self, pszTargetName, ppunkContextFrame, dwFlags, ppunkTargetFrame);
    }
    pub fn SetFrameSrc(self: *const ITargetFrame, pszFrameSrc: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.SetFrameSrc(self, pszFrameSrc);
    }
    pub fn GetFrameSrc(self: *const ITargetFrame, ppszFrameSrc: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameSrc(self, ppszFrameSrc);
    }
    pub fn GetFramesContainer(self: *const ITargetFrame, ppContainer: ?*?*IOleContainer) callconv(.@"inline") HRESULT {
        return self.vtable.GetFramesContainer(self, ppContainer);
    }
    pub fn SetFrameOptions(self: *const ITargetFrame, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SetFrameOptions(self, dwFlags);
    }
    pub fn GetFrameOptions(self: *const ITargetFrame, pdwFlags: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameOptions(self, pdwFlags);
    }
    pub fn SetFrameMargins(self: *const ITargetFrame, dwWidth: u32, dwHeight: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SetFrameMargins(self, dwWidth, dwHeight);
    }
    pub fn GetFrameMargins(self: *const ITargetFrame, pdwWidth: ?*u32, pdwHeight: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetFrameMargins(self, pdwWidth, pdwHeight);
    }
    pub fn RemoteNavigate(self: *const ITargetFrame, cLength: u32, pulData: [*]u32) callconv(.@"inline") HRESULT {
        return self.vtable.RemoteNavigate(self, cLength, pulData);
    }
    pub fn OnChildFrameActivate(self: *const ITargetFrame, pUnkChildFrame: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.OnChildFrameActivate(self, pUnkChildFrame);
    }
    pub fn OnChildFrameDeactivate(self: *const ITargetFrame, pUnkChildFrame: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.OnChildFrameDeactivate(self, pUnkChildFrame);
    }
};

const IID_ITargetEmbedding_Value = Guid.initString("548793c0-9e74-11cf-9655-00a0c9034923");
pub const IID_ITargetEmbedding = &IID_ITargetEmbedding_Value;
pub const ITargetEmbedding = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTargetFrame: *const fn(
            self: *const ITargetEmbedding,
            ppTargetFrame: ?*?*ITargetFrame,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTargetFrame(self: *const ITargetEmbedding, ppTargetFrame: ?*?*ITargetFrame) callconv(.@"inline") HRESULT {
        return self.vtable.GetTargetFrame(self, ppTargetFrame);
    }
};

const IID_ITargetFramePriv_Value = Guid.initString("9216e421-2bf5-11d0-82b4-00a0c90c29c5");
pub const IID_ITargetFramePriv = &IID_ITargetFramePriv_Value;
pub const ITargetFramePriv = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFrameDownwards: *const fn(
            self: *const ITargetFramePriv,
            pszTargetName: ?[*:0]const u16,
            dwFlags: u32,
            ppunkTargetFrame: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        FindFrameInContext: *const fn(
            self: *const ITargetFramePriv,
            pszTargetName: ?[*:0]const u16,
            punkContextFrame: ?*IUnknown,
            dwFlags: u32,
            ppunkTargetFrame: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        OnChildFrameActivate: *const fn(
            self: *const ITargetFramePriv,
            pUnkChildFrame: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        OnChildFrameDeactivate: *const fn(
            self: *const ITargetFramePriv,
            pUnkChildFrame: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        NavigateHack: *const fn(
            self: *const ITargetFramePriv,
            grfHLNF: u32,
            pbc: ?*IBindCtx,
            pibsc: ?*IBindStatusCallback,
            pszTargetName: ?[*:0]const u16,
            pszUrl: ?[*:0]const u16,
            pszLocation: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        FindBrowserByIndex: *const fn(
            self: *const ITargetFramePriv,
            dwID: u32,
            ppunkBrowser: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FindFrameDownwards(self: *const ITargetFramePriv, pszTargetName: ?[*:0]const u16, dwFlags: u32, ppunkTargetFrame: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.FindFrameDownwards(self, pszTargetName, dwFlags, ppunkTargetFrame);
    }
    pub fn FindFrameInContext(self: *const ITargetFramePriv, pszTargetName: ?[*:0]const u16, punkContextFrame: ?*IUnknown, dwFlags: u32, ppunkTargetFrame: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.FindFrameInContext(self, pszTargetName, punkContextFrame, dwFlags, ppunkTargetFrame);
    }
    pub fn OnChildFrameActivate(self: *const ITargetFramePriv, pUnkChildFrame: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.OnChildFrameActivate(self, pUnkChildFrame);
    }
    pub fn OnChildFrameDeactivate(self: *const ITargetFramePriv, pUnkChildFrame: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.OnChildFrameDeactivate(self, pUnkChildFrame);
    }
    pub fn NavigateHack(self: *const ITargetFramePriv, grfHLNF: u32, pbc: ?*IBindCtx, pibsc: ?*IBindStatusCallback, pszTargetName: ?[*:0]const u16, pszUrl: ?[*:0]const u16, pszLocation: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.NavigateHack(self, grfHLNF, pbc, pibsc, pszTargetName, pszUrl, pszLocation);
    }
    pub fn FindBrowserByIndex(self: *const ITargetFramePriv, dwID: u32, ppunkBrowser: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.FindBrowserByIndex(self, dwID, ppunkBrowser);
    }
};

const IID_ITargetFramePriv2_Value = Guid.initString("b2c867e6-69d6-46f2-a611-ded9a4bd7fef");
pub const IID_ITargetFramePriv2 = &IID_ITargetFramePriv2_Value;
pub const ITargetFramePriv2 = extern union {
    pub const VTable = extern struct {
        base: ITargetFramePriv.VTable,
        AggregatedNavigation2: *const fn(
            self: *const ITargetFramePriv2,
            grfHLNF: u32,
            pbc: ?*IBindCtx,
            pibsc: ?*IBindStatusCallback,
            pszTargetName: ?[*:0]const u16,
            pUri: ?*IUri,
            pszLocation: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    ITargetFramePriv: ITargetFramePriv,
    IUnknown: IUnknown,
    pub fn AggregatedNavigation2(self: *const ITargetFramePriv2, grfHLNF: u32, pbc: ?*IBindCtx, pibsc: ?*IBindStatusCallback, pszTargetName: ?[*:0]const u16, pUri: ?*IUri, pszLocation: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.AggregatedNavigation2(self, grfHLNF, pbc, pibsc, pszTargetName, pUri, pszLocation);
    }
};

const IID_ISurfacePresenterFlipBuffer_Value = Guid.initString("e43f4a08-8bbc-4665-ac92-c55ce61fd7e7");
pub const IID_ISurfacePresenterFlipBuffer = &IID_ISurfacePresenterFlipBuffer_Value;
pub const ISurfacePresenterFlipBuffer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginDraw: *const fn(
            self: *const ISurfacePresenterFlipBuffer,
            riid: ?*const Guid,
            ppBuffer: ?*?*anyopaque,
        ) callconv(.winapi) HRESULT,
        EndDraw: *const fn(
            self: *const ISurfacePresenterFlipBuffer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn BeginDraw(self: *const ISurfacePresenterFlipBuffer, riid: ?*const Guid, ppBuffer: ?*?*anyopaque) callconv(.@"inline") HRESULT {
        return self.vtable.BeginDraw(self, riid, ppBuffer);
    }
    pub fn EndDraw(self: *const ISurfacePresenterFlipBuffer) callconv(.@"inline") HRESULT {
        return self.vtable.EndDraw(self);
    }
};

const IID_ISurfacePresenterFlip_Value = Guid.initString("30510848-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISurfacePresenterFlip = &IID_ISurfacePresenterFlip_Value;
pub const ISurfacePresenterFlip = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Present: *const fn(
            self: *const ISurfacePresenterFlip,
        ) callconv(.winapi) HRESULT,
        GetBuffer: *const fn(
            self: *const ISurfacePresenterFlip,
            backBufferIndex: u32,
            riid: ?*const Guid,
            ppBuffer: ?*?*anyopaque,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Present(self: *const ISurfacePresenterFlip) callconv(.@"inline") HRESULT {
        return self.vtable.Present(self);
    }
    pub fn GetBuffer(self: *const ISurfacePresenterFlip, backBufferIndex: u32, riid: ?*const Guid, ppBuffer: ?*?*anyopaque) callconv(.@"inline") HRESULT {
        return self.vtable.GetBuffer(self, backBufferIndex, riid, ppBuffer);
    }
};

const IID_ISurfacePresenterFlip2_Value = Guid.initString("30510865-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ISurfacePresenterFlip2 = &IID_ISurfacePresenterFlip2_Value;
pub const ISurfacePresenterFlip2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetRotation: *const fn(
            self: *const ISurfacePresenterFlip2,
            dxgiRotation: DXGI_MODE_ROTATION,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetRotation(self: *const ISurfacePresenterFlip2, dxgiRotation: DXGI_MODE_ROTATION) callconv(.@"inline") HRESULT {
        return self.vtable.SetRotation(self, dxgiRotation);
    }
};

const IID_IViewObjectPresentFlipSite_Value = Guid.initString("30510846-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IViewObjectPresentFlipSite = &IID_IViewObjectPresentFlipSite_Value;
pub const IViewObjectPresentFlipSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSurfacePresenterFlip: *const fn(
            self: *const IViewObjectPresentFlipSite,
            pDevice: ?*IUnknown,
            width: u32,
            height: u32,
            backBufferCount: u32,
            format: DXGI_FORMAT,
            mode: VIEW_OBJECT_ALPHA_MODE,
            ppSPFlip: ?*?*ISurfacePresenterFlip,
        ) callconv(.winapi) HRESULT,
        GetDeviceLuid: *const fn(
            self: *const IViewObjectPresentFlipSite,
            pLuid: ?*LUID,
        ) callconv(.winapi) HRESULT,
        EnterFullScreen: *const fn(
            self: *const IViewObjectPresentFlipSite,
        ) callconv(.winapi) HRESULT,
        ExitFullScreen: *const fn(
            self: *const IViewObjectPresentFlipSite,
        ) callconv(.winapi) HRESULT,
        IsFullScreen: *const fn(
            self: *const IViewObjectPresentFlipSite,
            pfFullScreen: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        GetBoundingRect: *const fn(
            self: *const IViewObjectPresentFlipSite,
            pRect: ?*RECT,
        ) callconv(.winapi) HRESULT,
        GetMetrics: *const fn(
            self: *const IViewObjectPresentFlipSite,
            pPos: ?*POINT,
            pSize: ?*SIZE,
            pScaleX: ?*f32,
            pScaleY: ?*f32,
        ) callconv(.winapi) HRESULT,
        GetFullScreenSize: *const fn(
            self: *const IViewObjectPresentFlipSite,
            pSize: ?*SIZE,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateSurfacePresenterFlip(self: *const IViewObjectPresentFlipSite, pDevice: ?*IUnknown, width: u32, height: u32, backBufferCount: u32, format: DXGI_FORMAT, mode: VIEW_OBJECT_ALPHA_MODE, ppSPFlip: ?*?*ISurfacePresenterFlip) callconv(.@"inline") HRESULT {
        return self.vtable.CreateSurfacePresenterFlip(self, pDevice, width, height, backBufferCount, format, mode, ppSPFlip);
    }
    pub fn GetDeviceLuid(self: *const IViewObjectPresentFlipSite, pLuid: ?*LUID) callconv(.@"inline") HRESULT {
        return self.vtable.GetDeviceLuid(self, pLuid);
    }
    pub fn EnterFullScreen(self: *const IViewObjectPresentFlipSite) callconv(.@"inline") HRESULT {
        return self.vtable.EnterFullScreen(self);
    }
    pub fn ExitFullScreen(self: *const IViewObjectPresentFlipSite) callconv(.@"inline") HRESULT {
        return self.vtable.ExitFullScreen(self);
    }
    pub fn IsFullScreen(self: *const IViewObjectPresentFlipSite, pfFullScreen: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsFullScreen(self, pfFullScreen);
    }
    pub fn GetBoundingRect(self: *const IViewObjectPresentFlipSite, pRect: ?*RECT) callconv(.@"inline") HRESULT {
        return self.vtable.GetBoundingRect(self, pRect);
    }
    pub fn GetMetrics(self: *const IViewObjectPresentFlipSite, pPos: ?*POINT, pSize: ?*SIZE, pScaleX: ?*f32, pScaleY: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.GetMetrics(self, pPos, pSize, pScaleX, pScaleY);
    }
    pub fn GetFullScreenSize(self: *const IViewObjectPresentFlipSite, pSize: ?*SIZE) callconv(.@"inline") HRESULT {
        return self.vtable.GetFullScreenSize(self, pSize);
    }
};

const IID_IViewObjectPresentFlipSite2_Value = Guid.initString("aad0cbf1-e7fd-4f12-8902-c78132a8e01d");
pub const IID_IViewObjectPresentFlipSite2 = &IID_IViewObjectPresentFlipSite2_Value;
pub const IViewObjectPresentFlipSite2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRotationForCurrentOutput: *const fn(
            self: *const IViewObjectPresentFlipSite2,
            pDxgiRotation: ?*DXGI_MODE_ROTATION,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetRotationForCurrentOutput(self: *const IViewObjectPresentFlipSite2, pDxgiRotation: ?*DXGI_MODE_ROTATION) callconv(.@"inline") HRESULT {
        return self.vtable.GetRotationForCurrentOutput(self, pDxgiRotation);
    }
};

const IID_IViewObjectPresentFlip_Value = Guid.initString("30510847-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IViewObjectPresentFlip = &IID_IViewObjectPresentFlip_Value;
pub const IViewObjectPresentFlip = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NotifyRender: *const fn(
            self: *const IViewObjectPresentFlip,
            fRecreatePresenter: BOOL,
        ) callconv(.winapi) HRESULT,
        RenderObjectToBitmap: *const fn(
            self: *const IViewObjectPresentFlip,
            pBitmap: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        RenderObjectToSharedBuffer: *const fn(
            self: *const IViewObjectPresentFlip,
            pBuffer: ?*ISurfacePresenterFlipBuffer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn NotifyRender(self: *const IViewObjectPresentFlip, fRecreatePresenter: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.NotifyRender(self, fRecreatePresenter);
    }
    pub fn RenderObjectToBitmap(self: *const IViewObjectPresentFlip, pBitmap: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.RenderObjectToBitmap(self, pBitmap);
    }
    pub fn RenderObjectToSharedBuffer(self: *const IViewObjectPresentFlip, pBuffer: ?*ISurfacePresenterFlipBuffer) callconv(.@"inline") HRESULT {
        return self.vtable.RenderObjectToSharedBuffer(self, pBuffer);
    }
};

const IID_IViewObjectPresentFlip2_Value = Guid.initString("30510856-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IViewObjectPresentFlip2 = &IID_IViewObjectPresentFlip2_Value;
pub const IViewObjectPresentFlip2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NotifyLeavingView: *const fn(
            self: *const IViewObjectPresentFlip2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn NotifyLeavingView(self: *const IViewObjectPresentFlip2) callconv(.@"inline") HRESULT {
        return self.vtable.NotifyLeavingView(self);
    }
};

const IID_IActiveXUIHandlerSite2_Value = Guid.initString("7e3707b2-d087-4542-ac1f-a0d2fcd080fd");
pub const IID_IActiveXUIHandlerSite2 = &IID_IActiveXUIHandlerSite2_Value;
pub const IActiveXUIHandlerSite2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddSuspensionExemption: *const fn(
            self: *const IActiveXUIHandlerSite2,
            pullCookie: ?*u64,
        ) callconv(.winapi) HRESULT,
        RemoveSuspensionExemption: *const fn(
            self: *const IActiveXUIHandlerSite2,
            ullCookie: u64,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddSuspensionExemption(self: *const IActiveXUIHandlerSite2, pullCookie: ?*u64) callconv(.@"inline") HRESULT {
        return self.vtable.AddSuspensionExemption(self, pullCookie);
    }
    pub fn RemoveSuspensionExemption(self: *const IActiveXUIHandlerSite2, ullCookie: u64) callconv(.@"inline") HRESULT {
        return self.vtable.RemoveSuspensionExemption(self, ullCookie);
    }
};

const IID_ICaretPositionProvider_Value = Guid.initString("58da43a2-108e-4d5b-9f75-e5f74f93fff5");
pub const IID_ICaretPositionProvider = &IID_ICaretPositionProvider_Value;
pub const ICaretPositionProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCaretPosition: *const fn(
            self: *const ICaretPositionProvider,
            pptCaret: ?*POINT,
            pflHeight: ?*f32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCaretPosition(self: *const ICaretPositionProvider, pptCaret: ?*POINT, pflHeight: ?*f32) callconv(.@"inline") HRESULT {
        return self.vtable.GetCaretPosition(self, pptCaret, pflHeight);
    }
};

const IID_ITridentTouchInput_Value = Guid.initString("30510850-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITridentTouchInput = &IID_ITridentTouchInput_Value;
pub const ITridentTouchInput = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPointerMessage: *const fn(
            self: *const ITridentTouchInput,
            msg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            pfAllowManipulations: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnPointerMessage(self: *const ITridentTouchInput, msg: u32, wParam: WPARAM, lParam: LPARAM, pfAllowManipulations: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.OnPointerMessage(self, msg, wParam, lParam, pfAllowManipulations);
    }
};

const IID_ITridentTouchInputSite_Value = Guid.initString("30510849-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITridentTouchInputSite = &IID_ITridentTouchInputSite_Value;
pub const ITridentTouchInputSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetManipulationMode: *const fn(
            self: *const ITridentTouchInputSite,
            msTouchAction: styleMsTouchAction,
        ) callconv(.winapi) HRESULT,
        ZoomToPoint: *const fn(
            self: *const ITridentTouchInputSite,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetManipulationMode(self: *const ITridentTouchInputSite, msTouchAction: styleMsTouchAction) callconv(.@"inline") HRESULT {
        return self.vtable.SetManipulationMode(self, msTouchAction);
    }
    pub fn ZoomToPoint(self: *const ITridentTouchInputSite, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.ZoomToPoint(self, x, y);
    }
};

pub const MediaActivityNotifyType = enum(i32) {
    Playback = 0,
    Recording = 1,
    Casting = 2,
};
pub const MediaPlayback = MediaActivityNotifyType.Playback;
pub const MediaRecording = MediaActivityNotifyType.Recording;
pub const MediaCasting = MediaActivityNotifyType.Casting;

const IID_IMediaActivityNotifySite_Value = Guid.initString("8165cfef-179d-46c2-bc71-3fa726dc1f8d");
pub const IID_IMediaActivityNotifySite = &IID_IMediaActivityNotifySite_Value;
pub const IMediaActivityNotifySite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnMediaActivityStarted: *const fn(
            self: *const IMediaActivityNotifySite,
            mediaActivityType: MediaActivityNotifyType,
        ) callconv(.winapi) HRESULT,
        OnMediaActivityStopped: *const fn(
            self: *const IMediaActivityNotifySite,
            mediaActivityType: MediaActivityNotifyType,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnMediaActivityStarted(self: *const IMediaActivityNotifySite, mediaActivityType: MediaActivityNotifyType) callconv(.@"inline") HRESULT {
        return self.vtable.OnMediaActivityStarted(self, mediaActivityType);
    }
    pub fn OnMediaActivityStopped(self: *const IMediaActivityNotifySite, mediaActivityType: MediaActivityNotifyType) callconv(.@"inline") HRESULT {
        return self.vtable.OnMediaActivityStopped(self, mediaActivityType);
    }
};

const IID_IAudioSessionSite_Value = Guid.initString("d7d8b684-d02d-4517-b6b7-19e3dfe29c45");
pub const IID_IAudioSessionSite = &IID_IAudioSessionSite_Value;
pub const IAudioSessionSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAudioSessionGuid: *const fn(
            self: *const IAudioSessionSite,
            audioSessionGuid: ?*Guid,
        ) callconv(.winapi) HRESULT,
        OnAudioStreamCreated: *const fn(
            self: *const IAudioSessionSite,
            endpointID: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        OnAudioStreamDestroyed: *const fn(
            self: *const IAudioSessionSite,
            endpointID: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetAudioSessionGuid(self: *const IAudioSessionSite, audioSessionGuid: ?*Guid) callconv(.@"inline") HRESULT {
        return self.vtable.GetAudioSessionGuid(self, audioSessionGuid);
    }
    pub fn OnAudioStreamCreated(self: *const IAudioSessionSite, endpointID: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.OnAudioStreamCreated(self, endpointID);
    }
    pub fn OnAudioStreamDestroyed(self: *const IAudioSessionSite, endpointID: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.OnAudioStreamDestroyed(self, endpointID);
    }
};

const IID_IPrintTaskRequestHandler_Value = Guid.initString("191cd340-cf36-44ff-bd53-d1b701799d9b");
pub const IID_IPrintTaskRequestHandler = &IID_IPrintTaskRequestHandler_Value;
pub const IPrintTaskRequestHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HandlePrintTaskRequest: *const fn(
            self: *const IPrintTaskRequestHandler,
            pPrintTaskRequest: ?*IInspectable,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn HandlePrintTaskRequest(self: *const IPrintTaskRequestHandler, pPrintTaskRequest: ?*IInspectable) callconv(.@"inline") HRESULT {
        return self.vtable.HandlePrintTaskRequest(self, pPrintTaskRequest);
    }
};

const IID_IPrintTaskRequestFactory_Value = Guid.initString("bb516745-8c34-4f8b-9605-684dcb144be5");
pub const IID_IPrintTaskRequestFactory = &IID_IPrintTaskRequestFactory_Value;
pub const IPrintTaskRequestFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePrintTaskRequest: *const fn(
            self: *const IPrintTaskRequestFactory,
            pPrintTaskRequestHandler: ?*IPrintTaskRequestHandler,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreatePrintTaskRequest(self: *const IPrintTaskRequestFactory, pPrintTaskRequestHandler: ?*IPrintTaskRequestHandler) callconv(.@"inline") HRESULT {
        return self.vtable.CreatePrintTaskRequest(self, pPrintTaskRequestHandler);
    }
};

const IID_IScrollableContextMenu_Value = Guid.initString("30510854-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IScrollableContextMenu = &IID_IScrollableContextMenu_Value;
pub const IScrollableContextMenu = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddItem: *const fn(
            self: *const IScrollableContextMenu,
            itemText: ?[*:0]const u16,
            cmdID: u32,
        ) callconv(.winapi) HRESULT,
        ShowModal: *const fn(
            self: *const IScrollableContextMenu,
            x: i32,
            y: i32,
            cmdID: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddItem(self: *const IScrollableContextMenu, itemText: ?[*:0]const u16, cmdID: u32) callconv(.@"inline") HRESULT {
        return self.vtable.AddItem(self, itemText, cmdID);
    }
    pub fn ShowModal(self: *const IScrollableContextMenu, x: i32, y: i32, cmdID: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.ShowModal(self, x, y, cmdID);
    }
};

pub const SCROLLABLECONTEXTMENU_PLACEMENT = enum(i32) {
    TOP = 0,
    BOTTOM = 1,
    LEFT = 2,
    RIGHT = 3,
    FULL = 4,
};
pub const SCMP_TOP = SCROLLABLECONTEXTMENU_PLACEMENT.TOP;
pub const SCMP_BOTTOM = SCROLLABLECONTEXTMENU_PLACEMENT.BOTTOM;
pub const SCMP_LEFT = SCROLLABLECONTEXTMENU_PLACEMENT.LEFT;
pub const SCMP_RIGHT = SCROLLABLECONTEXTMENU_PLACEMENT.RIGHT;
pub const SCMP_FULL = SCROLLABLECONTEXTMENU_PLACEMENT.FULL;

const IID_IScrollableContextMenu2_Value = Guid.initString("f77e9056-8674-4936-924c-0e4a06fa634a");
pub const IID_IScrollableContextMenu2 = &IID_IScrollableContextMenu2_Value;
pub const IScrollableContextMenu2 = extern union {
    pub const VTable = extern struct {
        base: IScrollableContextMenu.VTable,
        AddSeparator: *const fn(
            self: *const IScrollableContextMenu2,
        ) callconv(.winapi) HRESULT,
        SetPlacement: *const fn(
            self: *const IScrollableContextMenu2,
            scmp: SCROLLABLECONTEXTMENU_PLACEMENT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IScrollableContextMenu: IScrollableContextMenu,
    IUnknown: IUnknown,
    pub fn AddSeparator(self: *const IScrollableContextMenu2) callconv(.@"inline") HRESULT {
        return self.vtable.AddSeparator(self);
    }
    pub fn SetPlacement(self: *const IScrollableContextMenu2, scmp: SCROLLABLECONTEXTMENU_PLACEMENT) callconv(.@"inline") HRESULT {
        return self.vtable.SetPlacement(self, scmp);
    }
};

const IID_IActiveXUIHandlerSite_Value = Guid.initString("30510853-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IActiveXUIHandlerSite = &IID_IActiveXUIHandlerSite_Value;
pub const IActiveXUIHandlerSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateScrollableContextMenu: *const fn(
            self: *const IActiveXUIHandlerSite,
            scrollableContextMenu: ?*?*IScrollableContextMenu,
        ) callconv(.winapi) HRESULT,
        PickFileAndGetResult: *const fn(
            self: *const IActiveXUIHandlerSite,
            filePicker: ?*IUnknown,
            allowMultipleSelections: BOOL,
            result: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateScrollableContextMenu(self: *const IActiveXUIHandlerSite, scrollableContextMenu: ?*?*IScrollableContextMenu) callconv(.@"inline") HRESULT {
        return self.vtable.CreateScrollableContextMenu(self, scrollableContextMenu);
    }
    pub fn PickFileAndGetResult(self: *const IActiveXUIHandlerSite, filePicker: ?*IUnknown, allowMultipleSelections: BOOL, result: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.PickFileAndGetResult(self, filePicker, allowMultipleSelections, result);
    }
};

const IID_IActiveXUIHandlerSite3_Value = Guid.initString("7904009a-1238-47f4-901c-871375c34608");
pub const IID_IActiveXUIHandlerSite3 = &IID_IActiveXUIHandlerSite3_Value;
pub const IActiveXUIHandlerSite3 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MessageBoxW: *const fn(
            self: *const IActiveXUIHandlerSite3,
            hwnd: ?HWND,
            text: ?[*:0]const u16,
            caption: ?[*:0]const u16,
            type: u32,
            result: ?*i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MessageBoxW(self: *const IActiveXUIHandlerSite3, hwnd: ?HWND, text: ?[*:0]const u16, caption: ?[*:0]const u16, @"type": u32, result: ?*i32) callconv(.@"inline") HRESULT {
        return self.vtable.MessageBoxW(self, hwnd, text, caption, @"type", result);
    }
};

const CLSID_InternetExplorerManager_Value = Guid.initString("df4fcc34-067a-4e0a-8352-4a1a5095346e");
pub const CLSID_InternetExplorerManager = &CLSID_InternetExplorerManager_Value;

pub const INTERNETEXPLORERCONFIGURATION = enum(i32) {
    HOST = 1,
    WEB_DRIVER = 2,
    WEB_DRIVER_EDGE = 4,
};
pub const INTERNETEXPLORERCONFIGURATION_HOST = INTERNETEXPLORERCONFIGURATION.HOST;
pub const INTERNETEXPLORERCONFIGURATION_WEB_DRIVER = INTERNETEXPLORERCONFIGURATION.WEB_DRIVER;
pub const INTERNETEXPLORERCONFIGURATION_WEB_DRIVER_EDGE = INTERNETEXPLORERCONFIGURATION.WEB_DRIVER_EDGE;

const IID_IEnumManagerFrames_Value = Guid.initString("3caa826a-9b1f-4a79-bc81-f0430ded1648");
pub const IID_IEnumManagerFrames = &IID_IEnumManagerFrames_Value;
pub const IEnumManagerFrames = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumManagerFrames,
            celt: u32,
            ppWindows: [*]?*?HWND,
            pceltFetched: ?*u32,
        ) callconv(.winapi) HRESULT,
        Count: *const fn(
            self: *const IEnumManagerFrames,
            pcelt: ?*u32,
        ) callconv(.winapi) HRESULT,
        Skip: *const fn(
            self: *const IEnumManagerFrames,
            celt: u32,
        ) callconv(.winapi) HRESULT,
        Reset: *const fn(
            self: *const IEnumManagerFrames,
        ) callconv(.winapi) HRESULT,
        Clone: *const fn(
            self: *const IEnumManagerFrames,
            ppEnum: ?*?*IEnumManagerFrames,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumManagerFrames, celt: u32, ppWindows: [*]?*?HWND, pceltFetched: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.Next(self, celt, ppWindows, pceltFetched);
    }
    pub fn Count(self: *const IEnumManagerFrames, pcelt: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.Count(self, pcelt);
    }
    pub fn Skip(self: *const IEnumManagerFrames, celt: u32) callconv(.@"inline") HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumManagerFrames) callconv(.@"inline") HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumManagerFrames, ppEnum: ?*?*IEnumManagerFrames) callconv(.@"inline") HRESULT {
        return self.vtable.Clone(self, ppEnum);
    }
};

const IID_IInternetExplorerManager_Value = Guid.initString("acc84351-04ff-44f9-b23f-655ed168c6d5");
pub const IID_IInternetExplorerManager = &IID_IInternetExplorerManager_Value;
pub const IInternetExplorerManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateObject: *const fn(
            self: *const IInternetExplorerManager,
            dwConfig: u32,
            pszURL: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateObject(self: *const IInternetExplorerManager, dwConfig: u32, pszURL: ?[*:0]const u16, riid: ?*const Guid, ppv: **anyopaque) callconv(.@"inline") HRESULT {
        return self.vtable.CreateObject(self, dwConfig, pszURL, riid, ppv);
    }
};

const IID_IInternetExplorerManager2_Value = Guid.initString("dfbb5136-9259-4895-b4a7-c1934429919a");
pub const IID_IInternetExplorerManager2 = &IID_IInternetExplorerManager2_Value;
pub const IInternetExplorerManager2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumFrameWindows: *const fn(
            self: *const IInternetExplorerManager2,
            ppEnum: ?*?*IEnumManagerFrames,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnumFrameWindows(self: *const IInternetExplorerManager2, ppEnum: ?*?*IEnumManagerFrames) callconv(.@"inline") HRESULT {
        return self.vtable.EnumFrameWindows(self, ppEnum);
    }
};

pub const IELAUNCHOPTION_FLAGS = enum(i32) {
    SCRIPTDEBUG = 1,
    FORCE_COMPAT = 2,
    FORCE_EDGE = 4,
    LOCK_ENGINE = 8,
};
pub const IELAUNCHOPTION_SCRIPTDEBUG = IELAUNCHOPTION_FLAGS.SCRIPTDEBUG;
pub const IELAUNCHOPTION_FORCE_COMPAT = IELAUNCHOPTION_FLAGS.FORCE_COMPAT;
pub const IELAUNCHOPTION_FORCE_EDGE = IELAUNCHOPTION_FLAGS.FORCE_EDGE;
pub const IELAUNCHOPTION_LOCK_ENGINE = IELAUNCHOPTION_FLAGS.LOCK_ENGINE;

pub const IELAUNCHURLINFO = extern struct {
    cbSize: u32,
    dwCreationFlags: u32,
    dwLaunchOptionFlags: u32,
};

const CLSID_IEWebDriverManager_Value = Guid.initString("90314af2-5250-47b3-89d8-6295fc23bc22");
pub const CLSID_IEWebDriverManager = &CLSID_IEWebDriverManager_Value;

const IID_IIEWebDriverSite_Value = Guid.initString("ffb84444-453d-4fbc-9f9d-8db5c471ec75");
pub const IID_IIEWebDriverSite = &IID_IIEWebDriverSite_Value;
pub const IIEWebDriverSite = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        WindowOperation: *const fn(
            self: *const IIEWebDriverSite,
            operationCode: u32,
            hWnd: u32,
        ) callconv(.winapi) HRESULT,
        DetachWebdriver: *const fn(
            self: *const IIEWebDriverSite,
            pUnkWD: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        GetCapabilityValue: *const fn(
            self: *const IIEWebDriverSite,
            pUnkWD: ?*IUnknown,
            capName: ?PWSTR,
            capValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn WindowOperation(self: *const IIEWebDriverSite, operationCode: u32, hWnd: u32) callconv(.@"inline") HRESULT {
        return self.vtable.WindowOperation(self, operationCode, hWnd);
    }
    pub fn DetachWebdriver(self: *const IIEWebDriverSite, pUnkWD: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.DetachWebdriver(self, pUnkWD);
    }
    pub fn GetCapabilityValue(self: *const IIEWebDriverSite, pUnkWD: ?*IUnknown, capName: ?PWSTR, capValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.GetCapabilityValue(self, pUnkWD, capName, capValue);
    }
};

const IID_IIEWebDriverManager_Value = Guid.initString("bd1dc630-6590-4ca2-a293-6bc72b2438d8");
pub const IID_IIEWebDriverManager = &IID_IIEWebDriverManager_Value;
pub const IIEWebDriverManager = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ExecuteCommand: *const fn(
            self: *const IIEWebDriverManager,
            command: ?PWSTR,
            response: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn ExecuteCommand(self: *const IIEWebDriverManager, command: ?PWSTR, response: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.ExecuteCommand(self, command, response);
    }
};

pub const HTMLPersistEvents = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const LayoutRectEvents = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

const CLSID_PeerFactory_Value = Guid.initString("3050f4cf-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_PeerFactory = &CLSID_PeerFactory_Value;

const CLSID_IntelliForms_Value = Guid.initString("613ab92e-16bf-11d2-bca5-00c04fd929db");
pub const CLSID_IntelliForms = &CLSID_IntelliForms_Value;

const CLSID_HomePage_Value = Guid.initString("766bf2ae-d650-11d1-9811-00c04fc31d2e");
pub const CLSID_HomePage = &CLSID_HomePage_Value;

const CLSID_CPersistUserData_Value = Guid.initString("3050f48e-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CPersistUserData = &CLSID_CPersistUserData_Value;

const CLSID_CPersistDataPeer_Value = Guid.initString("3050f487-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CPersistDataPeer = &CLSID_CPersistDataPeer_Value;

const CLSID_CPersistShortcut_Value = Guid.initString("3050f4c6-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CPersistShortcut = &CLSID_CPersistShortcut_Value;

const CLSID_CPersistHistory_Value = Guid.initString("3050f4c8-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CPersistHistory = &CLSID_CPersistHistory_Value;

const CLSID_CPersistSnapshot_Value = Guid.initString("3050f4c9-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CPersistSnapshot = &CLSID_CPersistSnapshot_Value;

const CLSID_CDownloadBehavior_Value = Guid.initString("3050f5be-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CDownloadBehavior = &CLSID_CDownloadBehavior_Value;

const CLSID_wfolders_Value = Guid.initString("bae31f9a-1b81-11d2-a97a-00c04f8ecb02");
pub const CLSID_wfolders = &CLSID_wfolders_Value;

const CLSID_AnchorClick_Value = Guid.initString("13d5413c-33b9-11d2-95a7-00c04f8ecb02");
pub const CLSID_AnchorClick = &CLSID_AnchorClick_Value;

const CLSID_CLayoutRect_Value = Guid.initString("3050f664-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CLayoutRect = &CLSID_CLayoutRect_Value;

const CLSID_CDeviceRect_Value = Guid.initString("3050f6d4-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CDeviceRect = &CLSID_CDeviceRect_Value;

const CLSID_CHeaderFooter_Value = Guid.initString("3050f6cd-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CHeaderFooter = &CLSID_CHeaderFooter_Value;

const IID_IPeerFactory_Value = Guid.initString("6663f9d3-b482-11d1-89c6-00c04fb6bfc4");
pub const IID_IPeerFactory = &IID_IPeerFactory_Value;
pub const IPeerFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
};

const IID_IHomePage_Value = Guid.initString("766bf2af-d650-11d1-9811-00c04fc31d2e");
pub const IID_IHomePage = &IID_IHomePage_Value;
pub const IHomePage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        navigateHomePage: *const fn(
            self: *const IHomePage,
        ) callconv(.winapi) HRESULT,
        setHomePage: *const fn(
            self: *const IHomePage,
            bstrURL: ?BSTR,
        ) callconv(.winapi) HRESULT,
        isHomePage: *const fn(
            self: *const IHomePage,
            bstrURL: ?BSTR,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn navigateHomePage(self: *const IHomePage) callconv(.@"inline") HRESULT {
        return self.vtable.navigateHomePage(self);
    }
    pub fn setHomePage(self: *const IHomePage, bstrURL: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.setHomePage(self, bstrURL);
    }
    pub fn isHomePage(self: *const IHomePage, bstrURL: ?BSTR, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.isHomePage(self, bstrURL, p);
    }
};

const IID_IIntelliForms_Value = Guid.initString("9b9f68e6-1aaa-11d2-bca5-00c04fd929db");
pub const IID_IIntelliForms = &IID_IIntelliForms_Value;
pub const IIntelliForms = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enabled: *const fn(
            self: *const IIntelliForms,
            pVal: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enabled: *const fn(
            self: *const IIntelliForms,
            bVal: i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_enabled(self: *const IIntelliForms, pVal: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_enabled(self, pVal);
    }
    pub fn put_enabled(self: *const IIntelliForms, bVal: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_enabled(self, bVal);
    }
};

const IID_Iwfolders_Value = Guid.initString("bae31f98-1b81-11d2-a97a-00c04f8ecb02");
pub const IID_Iwfolders = &IID_Iwfolders_Value;
pub const Iwfolders = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        navigate: *const fn(
            self: *const Iwfolders,
            bstrUrl: ?BSTR,
            pbstrRetVal: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        navigateFrame: *const fn(
            self: *const Iwfolders,
            bstrUrl: ?BSTR,
            bstrTargetFrame: ?BSTR,
            pbstrRetVal: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        navigateNoSite: *const fn(
            self: *const Iwfolders,
            bstrUrl: ?BSTR,
            bstrTargetFrame: ?BSTR,
            dwhwnd: u32,
            pwb: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn navigate(self: *const Iwfolders, bstrUrl: ?BSTR, pbstrRetVal: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.navigate(self, bstrUrl, pbstrRetVal);
    }
    pub fn navigateFrame(self: *const Iwfolders, bstrUrl: ?BSTR, bstrTargetFrame: ?BSTR, pbstrRetVal: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.navigateFrame(self, bstrUrl, bstrTargetFrame, pbstrRetVal);
    }
    pub fn navigateNoSite(self: *const Iwfolders, bstrUrl: ?BSTR, bstrTargetFrame: ?BSTR, dwhwnd: u32, pwb: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.navigateNoSite(self, bstrUrl, bstrTargetFrame, dwhwnd, pwb);
    }
};

const IID_IAnchorClick_Value = Guid.initString("13d5413b-33b9-11d2-95a7-00c04f8ecb02");
pub const IID_IAnchorClick = &IID_IAnchorClick_Value;
pub const IAnchorClick = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ProcOnClick: *const fn(
            self: *const IAnchorClick,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn ProcOnClick(self: *const IAnchorClick) callconv(.@"inline") HRESULT {
        return self.vtable.ProcOnClick(self);
    }
};

const IID_IHTMLUserDataOM_Value = Guid.initString("3050f48f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLUserDataOM = &IID_IHTMLUserDataOM_Value;
pub const IHTMLUserDataOM = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XMLDocument: *const fn(
            self: *const IHTMLUserDataOM,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        save: *const fn(
            self: *const IHTMLUserDataOM,
            strName: ?BSTR,
        ) callconv(.winapi) HRESULT,
        load: *const fn(
            self: *const IHTMLUserDataOM,
            strName: ?BSTR,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLUserDataOM,
            name: ?BSTR,
            pValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        setAttribute: *const fn(
            self: *const IHTMLUserDataOM,
            name: ?BSTR,
            value: VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttribute: *const fn(
            self: *const IHTMLUserDataOM,
            name: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_expires: *const fn(
            self: *const IHTMLUserDataOM,
            bstr: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_expires: *const fn(
            self: *const IHTMLUserDataOM,
            pbstr: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_XMLDocument(self: *const IHTMLUserDataOM, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_XMLDocument(self, p);
    }
    pub fn save(self: *const IHTMLUserDataOM, strName: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.save(self, strName);
    }
    pub fn load(self: *const IHTMLUserDataOM, strName: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.load(self, strName);
    }
    pub fn getAttribute(self: *const IHTMLUserDataOM, name: ?BSTR, pValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, name, pValue);
    }
    pub fn setAttribute(self: *const IHTMLUserDataOM, name: ?BSTR, value: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, name, value);
    }
    pub fn removeAttribute(self: *const IHTMLUserDataOM, name: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttribute(self, name);
    }
    pub fn put_expires(self: *const IHTMLUserDataOM, bstr: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_expires(self, bstr);
    }
    pub fn get_expires(self: *const IHTMLUserDataOM, pbstr: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_expires(self, pbstr);
    }
};

const IID_IHTMLPersistDataOM_Value = Guid.initString("3050f4c0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPersistDataOM = &IID_IHTMLPersistDataOM_Value;
pub const IHTMLPersistDataOM = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XMLDocument: *const fn(
            self: *const IHTMLPersistDataOM,
            p: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        getAttribute: *const fn(
            self: *const IHTMLPersistDataOM,
            name: ?BSTR,
            pValue: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        setAttribute: *const fn(
            self: *const IHTMLPersistDataOM,
            name: ?BSTR,
            value: VARIANT,
        ) callconv(.winapi) HRESULT,
        removeAttribute: *const fn(
            self: *const IHTMLPersistDataOM,
            name: ?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_XMLDocument(self: *const IHTMLPersistDataOM, p: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_XMLDocument(self, p);
    }
    pub fn getAttribute(self: *const IHTMLPersistDataOM, name: ?BSTR, pValue: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.getAttribute(self, name, pValue);
    }
    pub fn setAttribute(self: *const IHTMLPersistDataOM, name: ?BSTR, value: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.setAttribute(self, name, value);
    }
    pub fn removeAttribute(self: *const IHTMLPersistDataOM, name: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.removeAttribute(self, name);
    }
};

const IID_IHTMLPersistData_Value = Guid.initString("3050f4c5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLPersistData = &IID_IHTMLPersistData_Value;
pub const IHTMLPersistData = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        save: *const fn(
            self: *const IHTMLPersistData,
            pUnk: ?*IUnknown,
            lType: i32,
            fContinueBroacast: ?*i16,
        ) callconv(.winapi) HRESULT,
        load: *const fn(
            self: *const IHTMLPersistData,
            pUnk: ?*IUnknown,
            lType: i32,
            fDoDefault: ?*i16,
        ) callconv(.winapi) HRESULT,
        queryType: *const fn(
            self: *const IHTMLPersistData,
            lType: i32,
            pfSupportsType: ?*i16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn save(self: *const IHTMLPersistData, pUnk: ?*IUnknown, lType: i32, fContinueBroacast: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.save(self, pUnk, lType, fContinueBroacast);
    }
    pub fn load(self: *const IHTMLPersistData, pUnk: ?*IUnknown, lType: i32, fDoDefault: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.load(self, pUnk, lType, fDoDefault);
    }
    pub fn queryType(self: *const IHTMLPersistData, lType: i32, pfSupportsType: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.queryType(self, lType, pfSupportsType);
    }
};

const IID_IDownloadBehavior_Value = Guid.initString("3050f5bd-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDownloadBehavior = &IID_IDownloadBehavior_Value;
pub const IDownloadBehavior = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        startDownload: *const fn(
            self: *const IDownloadBehavior,
            bstrUrl: ?BSTR,
            pdispCallback: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn startDownload(self: *const IDownloadBehavior, bstrUrl: ?BSTR, pdispCallback: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.startDownload(self, bstrUrl, pdispCallback);
    }
};

const IID_ILayoutRect_Value = Guid.initString("3050f665-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ILayoutRect = &IID_ILayoutRect_Value;
pub const ILayoutRect = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nextRect: *const fn(
            self: *const ILayoutRect,
            bstrElementId: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextRect: *const fn(
            self: *const ILayoutRect,
            pbstrElementId: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_contentSrc: *const fn(
            self: *const ILayoutRect,
            varContentSrc: VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentSrc: *const fn(
            self: *const ILayoutRect,
            pvarContentSrc: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_honorPageBreaks: *const fn(
            self: *const ILayoutRect,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_honorPageBreaks: *const fn(
            self: *const ILayoutRect,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_honorPageRules: *const fn(
            self: *const ILayoutRect,
            v: i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_honorPageRules: *const fn(
            self: *const ILayoutRect,
            p: ?*i16,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nextRectElement: *const fn(
            self: *const ILayoutRect,
            pElem: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextRectElement: *const fn(
            self: *const ILayoutRect,
            ppElem: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentDocument: *const fn(
            self: *const ILayoutRect,
            pDoc: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_nextRect(self: *const ILayoutRect, bstrElementId: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_nextRect(self, bstrElementId);
    }
    pub fn get_nextRect(self: *const ILayoutRect, pbstrElementId: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_nextRect(self, pbstrElementId);
    }
    pub fn put_contentSrc(self: *const ILayoutRect, varContentSrc: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.put_contentSrc(self, varContentSrc);
    }
    pub fn get_contentSrc(self: *const ILayoutRect, pvarContentSrc: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentSrc(self, pvarContentSrc);
    }
    pub fn put_honorPageBreaks(self: *const ILayoutRect, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_honorPageBreaks(self, v);
    }
    pub fn get_honorPageBreaks(self: *const ILayoutRect, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_honorPageBreaks(self, p);
    }
    pub fn put_honorPageRules(self: *const ILayoutRect, v: i16) callconv(.@"inline") HRESULT {
        return self.vtable.put_honorPageRules(self, v);
    }
    pub fn get_honorPageRules(self: *const ILayoutRect, p: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.get_honorPageRules(self, p);
    }
    pub fn put_nextRectElement(self: *const ILayoutRect, pElem: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.put_nextRectElement(self, pElem);
    }
    pub fn get_nextRectElement(self: *const ILayoutRect, ppElem: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_nextRectElement(self, ppElem);
    }
    pub fn get_contentDocument(self: *const ILayoutRect, pDoc: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.get_contentDocument(self, pDoc);
    }
};

const IID_IDeviceRect_Value = Guid.initString("3050f6d5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDeviceRect = &IID_IDeviceRect_Value;
pub const IDeviceRect = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IHeaderFooter_Value = Guid.initString("3050f6ce-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHeaderFooter = &IID_IHeaderFooter_Value;
pub const IHeaderFooter = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_htmlHead: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_htmlFoot: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textHead: *const fn(
            self: *const IHeaderFooter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textHead: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_textFoot: *const fn(
            self: *const IHeaderFooter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_textFoot: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_page: *const fn(
            self: *const IHeaderFooter,
            v: u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_page: *const fn(
            self: *const IHeaderFooter,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_pageTotal: *const fn(
            self: *const IHeaderFooter,
            v: u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pageTotal: *const fn(
            self: *const IHeaderFooter,
            p: ?*u32,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URL: *const fn(
            self: *const IHeaderFooter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_title: *const fn(
            self: *const IHeaderFooter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_title: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dateShort: *const fn(
            self: *const IHeaderFooter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dateShort: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dateLong: *const fn(
            self: *const IHeaderFooter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dateLong: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_timeShort: *const fn(
            self: *const IHeaderFooter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_timeShort: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_timeLong: *const fn(
            self: *const IHeaderFooter,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_timeLong: *const fn(
            self: *const IHeaderFooter,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_htmlHead(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_htmlHead(self, p);
    }
    pub fn get_htmlFoot(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_htmlFoot(self, p);
    }
    pub fn put_textHead(self: *const IHeaderFooter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textHead(self, v);
    }
    pub fn get_textHead(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textHead(self, p);
    }
    pub fn put_textFoot(self: *const IHeaderFooter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_textFoot(self, v);
    }
    pub fn get_textFoot(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_textFoot(self, p);
    }
    pub fn put_page(self: *const IHeaderFooter, v: u32) callconv(.@"inline") HRESULT {
        return self.vtable.put_page(self, v);
    }
    pub fn get_page(self: *const IHeaderFooter, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_page(self, p);
    }
    pub fn put_pageTotal(self: *const IHeaderFooter, v: u32) callconv(.@"inline") HRESULT {
        return self.vtable.put_pageTotal(self, v);
    }
    pub fn get_pageTotal(self: *const IHeaderFooter, p: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.get_pageTotal(self, p);
    }
    pub fn put_URL(self: *const IHeaderFooter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_URL(self, v);
    }
    pub fn get_URL(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_URL(self, p);
    }
    pub fn put_title(self: *const IHeaderFooter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_title(self, v);
    }
    pub fn get_title(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_title(self, p);
    }
    pub fn put_dateShort(self: *const IHeaderFooter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dateShort(self, v);
    }
    pub fn get_dateShort(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dateShort(self, p);
    }
    pub fn put_dateLong(self: *const IHeaderFooter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_dateLong(self, v);
    }
    pub fn get_dateLong(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_dateLong(self, p);
    }
    pub fn put_timeShort(self: *const IHeaderFooter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_timeShort(self, v);
    }
    pub fn get_timeShort(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_timeShort(self, p);
    }
    pub fn put_timeLong(self: *const IHeaderFooter, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_timeLong(self, v);
    }
    pub fn get_timeLong(self: *const IHeaderFooter, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_timeLong(self, p);
    }
};

const IID_IHeaderFooter2_Value = Guid.initString("305104a5-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHeaderFooter2 = &IID_IHeaderFooter2_Value;
pub const IHeaderFooter2 = extern union {
    pub const VTable = extern struct {
        base: IHeaderFooter.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_font: *const fn(
            self: *const IHeaderFooter2,
            v: ?BSTR,
        ) callconv(.winapi) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_font: *const fn(
            self: *const IHeaderFooter2,
            p: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IHeaderFooter: IHeaderFooter,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_font(self: *const IHeaderFooter2, v: ?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.put_font(self, v);
    }
    pub fn get_font(self: *const IHeaderFooter2, p: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.get_font(self, p);
    }
};

pub const HostDialogHelper = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const SHOWHTMLDIALOGFN = *const fn(
    hwndParent: ?HWND,
    pmk: ?*IMoniker,
    pvarArgIn: ?*VARIANT,
    pchOptions: ?PWSTR,
    pvArgOut: ?*VARIANT,
) callconv(.winapi) HRESULT;

pub const SHOWHTMLDIALOGEXFN = *const fn(
    hwndParent: ?HWND,
    pmk: ?*IMoniker,
    dwDialogFlags: u32,
    pvarArgIn: ?*VARIANT,
    pchOptions: ?PWSTR,
    pvArgOut: ?*VARIANT,
) callconv(.winapi) HRESULT;

pub const SHOWMODELESSHTMLDIALOGFN = *const fn(
    hwndParent: ?HWND,
    pmk: ?*IMoniker,
    pvarArgIn: ?*VARIANT,
    pvarOptions: ?*VARIANT,
    ppWindow: ?*?*IHTMLWindow2,
) callconv(.winapi) HRESULT;

pub const IEREGISTERXMLNSFN = *const fn(
    lpszURI: ?[*:0]const u16,
    clsid: Guid,
    fMachine: BOOL,
) callconv(.winapi) HRESULT;

pub const IEISXMLNSREGISTEREDFN = *const fn(
    lpszURI: ?[*:0]const u16,
    pCLSID: ?*Guid,
) callconv(.winapi) HRESULT;

const IID_IHostDialogHelper_Value = Guid.initString("53dec138-a51e-11d2-861e-00c04fa35c89");
pub const IID_IHostDialogHelper = &IID_IHostDialogHelper_Value;
pub const IHostDialogHelper = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowHTMLDialog: *const fn(
            self: *const IHostDialogHelper,
            hwndParent: ?HWND,
            pMk: ?*IMoniker,
            pvarArgIn: ?*VARIANT,
            pchOptions: ?PWSTR,
            pvarArgOut: ?*VARIANT,
            punkHost: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ShowHTMLDialog(self: *const IHostDialogHelper, hwndParent: ?HWND, pMk: ?*IMoniker, pvarArgIn: ?*VARIANT, pchOptions: ?PWSTR, pvarArgOut: ?*VARIANT, punkHost: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.ShowHTMLDialog(self, hwndParent, pMk, pvarArgIn, pchOptions, pvarArgOut, punkHost);
    }
};

pub const DOCHOSTUITYPE = enum(i32) {
    BROWSE = 0,
    AUTHOR = 1,
};
pub const DOCHOSTUITYPE_BROWSE = DOCHOSTUITYPE.BROWSE;
pub const DOCHOSTUITYPE_AUTHOR = DOCHOSTUITYPE.AUTHOR;

pub const DOCHOSTUIDBLCLK = enum(i32) {
    DEFAULT = 0,
    SHOWPROPERTIES = 1,
    SHOWCODE = 2,
};
pub const DOCHOSTUIDBLCLK_DEFAULT = DOCHOSTUIDBLCLK.DEFAULT;
pub const DOCHOSTUIDBLCLK_SHOWPROPERTIES = DOCHOSTUIDBLCLK.SHOWPROPERTIES;
pub const DOCHOSTUIDBLCLK_SHOWCODE = DOCHOSTUIDBLCLK.SHOWCODE;

pub const DOCHOSTUIFLAG = enum(i32) {
    DIALOG = 1,
    DISABLE_HELP_MENU = 2,
    NO3DBORDER = 4,
    SCROLL_NO = 8,
    DISABLE_SCRIPT_INACTIVE = 16,
    OPENNEWWIN = 32,
    DISABLE_OFFSCREEN = 64,
    FLAT_SCROLLBAR = 128,
    DIV_BLOCKDEFAULT = 256,
    ACTIVATE_CLIENTHIT_ONLY = 512,
    OVERRIDEBEHAVIORFACTORY = 1024,
    CODEPAGELINKEDFONTS = 2048,
    URL_ENCODING_DISABLE_UTF8 = 4096,
    URL_ENCODING_ENABLE_UTF8 = 8192,
    ENABLE_FORMS_AUTOCOMPLETE = 16384,
    ENABLE_INPLACE_NAVIGATION = 65536,
    IME_ENABLE_RECONVERSION = 131072,
    THEME = 262144,
    NOTHEME = 524288,
    NOPICS = 1048576,
    NO3DOUTERBORDER = 2097152,
    DISABLE_EDIT_NS_FIXUP = 4194304,
    LOCAL_MACHINE_ACCESS_CHECK = 8388608,
    DISABLE_UNTRUSTEDPROTOCOL = 16777216,
    HOST_NAVIGATES = 33554432,
    ENABLE_REDIRECT_NOTIFICATION = 67108864,
    USE_WINDOWLESS_SELECTCONTROL = 134217728,
    USE_WINDOWED_SELECTCONTROL = 268435456,
    ENABLE_ACTIVEX_INACTIVATE_MODE = 536870912,
    DPI_AWARE = 1073741824,
};
pub const DOCHOSTUIFLAG_DIALOG = DOCHOSTUIFLAG.DIALOG;
pub const DOCHOSTUIFLAG_DISABLE_HELP_MENU = DOCHOSTUIFLAG.DISABLE_HELP_MENU;
pub const DOCHOSTUIFLAG_NO3DBORDER = DOCHOSTUIFLAG.NO3DBORDER;
pub const DOCHOSTUIFLAG_SCROLL_NO = DOCHOSTUIFLAG.SCROLL_NO;
pub const DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE = DOCHOSTUIFLAG.DISABLE_SCRIPT_INACTIVE;
pub const DOCHOSTUIFLAG_OPENNEWWIN = DOCHOSTUIFLAG.OPENNEWWIN;
pub const DOCHOSTUIFLAG_DISABLE_OFFSCREEN = DOCHOSTUIFLAG.DISABLE_OFFSCREEN;
pub const DOCHOSTUIFLAG_FLAT_SCROLLBAR = DOCHOSTUIFLAG.FLAT_SCROLLBAR;
pub const DOCHOSTUIFLAG_DIV_BLOCKDEFAULT = DOCHOSTUIFLAG.DIV_BLOCKDEFAULT;
pub const DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY = DOCHOSTUIFLAG.ACTIVATE_CLIENTHIT_ONLY;
pub const DOCHOSTUIFLAG_OVERRIDEBEHAVIORFACTORY = DOCHOSTUIFLAG.OVERRIDEBEHAVIORFACTORY;
pub const DOCHOSTUIFLAG_CODEPAGELINKEDFONTS = DOCHOSTUIFLAG.CODEPAGELINKEDFONTS;
pub const DOCHOSTUIFLAG_URL_ENCODING_DISABLE_UTF8 = DOCHOSTUIFLAG.URL_ENCODING_DISABLE_UTF8;
pub const DOCHOSTUIFLAG_URL_ENCODING_ENABLE_UTF8 = DOCHOSTUIFLAG.URL_ENCODING_ENABLE_UTF8;
pub const DOCHOSTUIFLAG_ENABLE_FORMS_AUTOCOMPLETE = DOCHOSTUIFLAG.ENABLE_FORMS_AUTOCOMPLETE;
pub const DOCHOSTUIFLAG_ENABLE_INPLACE_NAVIGATION = DOCHOSTUIFLAG.ENABLE_INPLACE_NAVIGATION;
pub const DOCHOSTUIFLAG_IME_ENABLE_RECONVERSION = DOCHOSTUIFLAG.IME_ENABLE_RECONVERSION;
pub const DOCHOSTUIFLAG_THEME = DOCHOSTUIFLAG.THEME;
pub const DOCHOSTUIFLAG_NOTHEME = DOCHOSTUIFLAG.NOTHEME;
pub const DOCHOSTUIFLAG_NOPICS = DOCHOSTUIFLAG.NOPICS;
pub const DOCHOSTUIFLAG_NO3DOUTERBORDER = DOCHOSTUIFLAG.NO3DOUTERBORDER;
pub const DOCHOSTUIFLAG_DISABLE_EDIT_NS_FIXUP = DOCHOSTUIFLAG.DISABLE_EDIT_NS_FIXUP;
pub const DOCHOSTUIFLAG_LOCAL_MACHINE_ACCESS_CHECK = DOCHOSTUIFLAG.LOCAL_MACHINE_ACCESS_CHECK;
pub const DOCHOSTUIFLAG_DISABLE_UNTRUSTEDPROTOCOL = DOCHOSTUIFLAG.DISABLE_UNTRUSTEDPROTOCOL;
pub const DOCHOSTUIFLAG_HOST_NAVIGATES = DOCHOSTUIFLAG.HOST_NAVIGATES;
pub const DOCHOSTUIFLAG_ENABLE_REDIRECT_NOTIFICATION = DOCHOSTUIFLAG.ENABLE_REDIRECT_NOTIFICATION;
pub const DOCHOSTUIFLAG_USE_WINDOWLESS_SELECTCONTROL = DOCHOSTUIFLAG.USE_WINDOWLESS_SELECTCONTROL;
pub const DOCHOSTUIFLAG_USE_WINDOWED_SELECTCONTROL = DOCHOSTUIFLAG.USE_WINDOWED_SELECTCONTROL;
pub const DOCHOSTUIFLAG_ENABLE_ACTIVEX_INACTIVATE_MODE = DOCHOSTUIFLAG.ENABLE_ACTIVEX_INACTIVATE_MODE;
pub const DOCHOSTUIFLAG_DPI_AWARE = DOCHOSTUIFLAG.DPI_AWARE;

pub const DOCHOSTUIINFO = extern struct {
    cbSize: u32,
    dwFlags: u32,
    dwDoubleClick: u32,
    pchHostCss: ?PWSTR,
    pchHostNS: ?PWSTR,
};

const IID_IDocHostUIHandler_Value = Guid.initString("bd3f23c0-d43e-11cf-893b-00aa00bdce1a");
pub const IID_IDocHostUIHandler = &IID_IDocHostUIHandler_Value;
pub const IDocHostUIHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowContextMenu: *const fn(
            self: *const IDocHostUIHandler,
            dwID: u32,
            ppt: ?*POINT,
            pcmdtReserved: ?*IUnknown,
            pdispReserved: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
        GetHostInfo: *const fn(
            self: *const IDocHostUIHandler,
            pInfo: ?*DOCHOSTUIINFO,
        ) callconv(.winapi) HRESULT,
        ShowUI: *const fn(
            self: *const IDocHostUIHandler,
            dwID: u32,
            pActiveObject: ?*IOleInPlaceActiveObject,
            pCommandTarget: ?*IOleCommandTarget,
            pFrame: ?*IOleInPlaceFrame,
            pDoc: ?*IOleInPlaceUIWindow,
        ) callconv(.winapi) HRESULT,
        HideUI: *const fn(
            self: *const IDocHostUIHandler,
        ) callconv(.winapi) HRESULT,
        UpdateUI: *const fn(
            self: *const IDocHostUIHandler,
        ) callconv(.winapi) HRESULT,
        EnableModeless: *const fn(
            self: *const IDocHostUIHandler,
            fEnable: BOOL,
        ) callconv(.winapi) HRESULT,
        OnDocWindowActivate: *const fn(
            self: *const IDocHostUIHandler,
            fActivate: BOOL,
        ) callconv(.winapi) HRESULT,
        OnFrameWindowActivate: *const fn(
            self: *const IDocHostUIHandler,
            fActivate: BOOL,
        ) callconv(.winapi) HRESULT,
        ResizeBorder: *const fn(
            self: *const IDocHostUIHandler,
            prcBorder: ?*RECT,
            pUIWindow: ?*IOleInPlaceUIWindow,
            fRameWindow: BOOL,
        ) callconv(.winapi) HRESULT,
        TranslateAccelerator: *const fn(
            self: *const IDocHostUIHandler,
            lpMsg: ?*MSG,
            pguidCmdGroup: ?*const Guid,
            nCmdID: u32,
        ) callconv(.winapi) HRESULT,
        GetOptionKeyPath: *const fn(
            self: *const IDocHostUIHandler,
            pchKey: ?*?PWSTR,
            dw: u32,
        ) callconv(.winapi) HRESULT,
        GetDropTarget: *const fn(
            self: *const IDocHostUIHandler,
            pDropTarget: ?*IDropTarget,
            ppDropTarget: ?*?*IDropTarget,
        ) callconv(.winapi) HRESULT,
        GetExternal: *const fn(
            self: *const IDocHostUIHandler,
            ppDispatch: ?*?*IDispatch,
        ) callconv(.winapi) HRESULT,
        TranslateUrl: *const fn(
            self: *const IDocHostUIHandler,
            dwTranslate: u32,
            pchURLIn: ?PWSTR,
            ppchURLOut: ?*?PWSTR,
        ) callconv(.winapi) HRESULT,
        FilterDataObject: *const fn(
            self: *const IDocHostUIHandler,
            pDO: ?*IDataObject,
            ppDORet: ?*?*IDataObject,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ShowContextMenu(self: *const IDocHostUIHandler, dwID: u32, ppt: ?*POINT, pcmdtReserved: ?*IUnknown, pdispReserved: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.ShowContextMenu(self, dwID, ppt, pcmdtReserved, pdispReserved);
    }
    pub fn GetHostInfo(self: *const IDocHostUIHandler, pInfo: ?*DOCHOSTUIINFO) callconv(.@"inline") HRESULT {
        return self.vtable.GetHostInfo(self, pInfo);
    }
    pub fn ShowUI(self: *const IDocHostUIHandler, dwID: u32, pActiveObject: ?*IOleInPlaceActiveObject, pCommandTarget: ?*IOleCommandTarget, pFrame: ?*IOleInPlaceFrame, pDoc: ?*IOleInPlaceUIWindow) callconv(.@"inline") HRESULT {
        return self.vtable.ShowUI(self, dwID, pActiveObject, pCommandTarget, pFrame, pDoc);
    }
    pub fn HideUI(self: *const IDocHostUIHandler) callconv(.@"inline") HRESULT {
        return self.vtable.HideUI(self);
    }
    pub fn UpdateUI(self: *const IDocHostUIHandler) callconv(.@"inline") HRESULT {
        return self.vtable.UpdateUI(self);
    }
    pub fn EnableModeless(self: *const IDocHostUIHandler, fEnable: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.EnableModeless(self, fEnable);
    }
    pub fn OnDocWindowActivate(self: *const IDocHostUIHandler, fActivate: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.OnDocWindowActivate(self, fActivate);
    }
    pub fn OnFrameWindowActivate(self: *const IDocHostUIHandler, fActivate: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.OnFrameWindowActivate(self, fActivate);
    }
    pub fn ResizeBorder(self: *const IDocHostUIHandler, prcBorder: ?*RECT, pUIWindow: ?*IOleInPlaceUIWindow, fRameWindow: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.ResizeBorder(self, prcBorder, pUIWindow, fRameWindow);
    }
    pub fn TranslateAccelerator(self: *const IDocHostUIHandler, lpMsg: ?*MSG, pguidCmdGroup: ?*const Guid, nCmdID: u32) callconv(.@"inline") HRESULT {
        return self.vtable.TranslateAccelerator(self, lpMsg, pguidCmdGroup, nCmdID);
    }
    pub fn GetOptionKeyPath(self: *const IDocHostUIHandler, pchKey: ?*?PWSTR, dw: u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetOptionKeyPath(self, pchKey, dw);
    }
    pub fn GetDropTarget(self: *const IDocHostUIHandler, pDropTarget: ?*IDropTarget, ppDropTarget: ?*?*IDropTarget) callconv(.@"inline") HRESULT {
        return self.vtable.GetDropTarget(self, pDropTarget, ppDropTarget);
    }
    pub fn GetExternal(self: *const IDocHostUIHandler, ppDispatch: ?*?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.GetExternal(self, ppDispatch);
    }
    pub fn TranslateUrl(self: *const IDocHostUIHandler, dwTranslate: u32, pchURLIn: ?PWSTR, ppchURLOut: ?*?PWSTR) callconv(.@"inline") HRESULT {
        return self.vtable.TranslateUrl(self, dwTranslate, pchURLIn, ppchURLOut);
    }
    pub fn FilterDataObject(self: *const IDocHostUIHandler, pDO: ?*IDataObject, ppDORet: ?*?*IDataObject) callconv(.@"inline") HRESULT {
        return self.vtable.FilterDataObject(self, pDO, ppDORet);
    }
};

const IID_IDocHostUIHandler2_Value = Guid.initString("3050f6d0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDocHostUIHandler2 = &IID_IDocHostUIHandler2_Value;
pub const IDocHostUIHandler2 = extern union {
    pub const VTable = extern struct {
        base: IDocHostUIHandler.VTable,
        GetOverrideKeyPath: *const fn(
            self: *const IDocHostUIHandler2,
            pchKey: ?*?PWSTR,
            dw: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IDocHostUIHandler: IDocHostUIHandler,
    IUnknown: IUnknown,
    pub fn GetOverrideKeyPath(self: *const IDocHostUIHandler2, pchKey: ?*?PWSTR, dw: u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetOverrideKeyPath(self, pchKey, dw);
    }
};

const IID_ICustomDoc_Value = Guid.initString("3050f3f0-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ICustomDoc = &IID_ICustomDoc_Value;
pub const ICustomDoc = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUIHandler: *const fn(
            self: *const ICustomDoc,
            pUIHandler: ?*IDocHostUIHandler,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetUIHandler(self: *const ICustomDoc, pUIHandler: ?*IDocHostUIHandler) callconv(.@"inline") HRESULT {
        return self.vtable.SetUIHandler(self, pUIHandler);
    }
};

const IID_IDocHostShowUI_Value = Guid.initString("c4d244b0-d43e-11cf-893b-00aa00bdce1a");
pub const IID_IDocHostShowUI = &IID_IDocHostShowUI_Value;
pub const IDocHostShowUI = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowMessage: *const fn(
            self: *const IDocHostShowUI,
            hwnd: ?HWND,
            lpstrText: ?PWSTR,
            lpstrCaption: ?PWSTR,
            dwType: u32,
            lpstrHelpFile: ?PWSTR,
            dwHelpContext: u32,
            plResult: ?*LRESULT,
        ) callconv(.winapi) HRESULT,
        ShowHelp: *const fn(
            self: *const IDocHostShowUI,
            hwnd: ?HWND,
            pszHelpFile: ?PWSTR,
            uCommand: u32,
            dwData: u32,
            ptMouse: POINT,
            pDispatchObjectHit: ?*IDispatch,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ShowMessage(self: *const IDocHostShowUI, hwnd: ?HWND, lpstrText: ?PWSTR, lpstrCaption: ?PWSTR, dwType: u32, lpstrHelpFile: ?PWSTR, dwHelpContext: u32, plResult: ?*LRESULT) callconv(.@"inline") HRESULT {
        return self.vtable.ShowMessage(self, hwnd, lpstrText, lpstrCaption, dwType, lpstrHelpFile, dwHelpContext, plResult);
    }
    pub fn ShowHelp(self: *const IDocHostShowUI, hwnd: ?HWND, pszHelpFile: ?PWSTR, uCommand: u32, dwData: u32, ptMouse: POINT, pDispatchObjectHit: ?*IDispatch) callconv(.@"inline") HRESULT {
        return self.vtable.ShowHelp(self, hwnd, pszHelpFile, uCommand, dwData, ptMouse, pDispatchObjectHit);
    }
};

const IID_IClassFactoryEx_Value = Guid.initString("342d1ea0-ae25-11d1-89c5-006008c3fbfc");
pub const IID_IClassFactoryEx = &IID_IClassFactoryEx_Value;
pub const IClassFactoryEx = extern union {
    pub const VTable = extern struct {
        base: IClassFactory.VTable,
        CreateInstanceWithContext: *const fn(
            self: *const IClassFactoryEx,
            punkContext: ?*IUnknown,
            punkOuter: ?*IUnknown,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IClassFactory: IClassFactory,
    IUnknown: IUnknown,
    pub fn CreateInstanceWithContext(self: *const IClassFactoryEx, punkContext: ?*IUnknown, punkOuter: ?*IUnknown, riid: ?*const Guid, ppv: **anyopaque) callconv(.@"inline") HRESULT {
        return self.vtable.CreateInstanceWithContext(self, punkContext, punkOuter, riid, ppv);
    }
};

const IID_IHTMLOMWindowServices_Value = Guid.initString("3050f5fc-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IHTMLOMWindowServices = &IID_IHTMLOMWindowServices_Value;
pub const IHTMLOMWindowServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        moveTo: *const fn(
            self: *const IHTMLOMWindowServices,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        moveBy: *const fn(
            self: *const IHTMLOMWindowServices,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        resizeTo: *const fn(
            self: *const IHTMLOMWindowServices,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
        resizeBy: *const fn(
            self: *const IHTMLOMWindowServices,
            x: i32,
            y: i32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn moveTo(self: *const IHTMLOMWindowServices, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.moveTo(self, x, y);
    }
    pub fn moveBy(self: *const IHTMLOMWindowServices, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.moveBy(self, x, y);
    }
    pub fn resizeTo(self: *const IHTMLOMWindowServices, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.resizeTo(self, x, y);
    }
    pub fn resizeBy(self: *const IHTMLOMWindowServices, x: i32, y: i32) callconv(.@"inline") HRESULT {
        return self.vtable.resizeBy(self, x, y);
    }
};

const IID_IDiagnosticsScriptEngineSite_Value = Guid.initString("30510858-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDiagnosticsScriptEngineSite = &IID_IDiagnosticsScriptEngineSite_Value;
pub const IDiagnosticsScriptEngineSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnMessage: *const fn(
            self: *const IDiagnosticsScriptEngineSite,
            pszData: [*]?PWSTR,
            ulDataCount: u32,
        ) callconv(.winapi) HRESULT,
        OnScriptError: *const fn(
            self: *const IDiagnosticsScriptEngineSite,
            pScriptError: ?*IActiveScriptError,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnMessage(self: *const IDiagnosticsScriptEngineSite, pszData: [*]?PWSTR, ulDataCount: u32) callconv(.@"inline") HRESULT {
        return self.vtable.OnMessage(self, pszData, ulDataCount);
    }
    pub fn OnScriptError(self: *const IDiagnosticsScriptEngineSite, pScriptError: ?*IActiveScriptError) callconv(.@"inline") HRESULT {
        return self.vtable.OnScriptError(self, pScriptError);
    }
};

const IID_IDiagnosticsScriptEngine_Value = Guid.initString("30510859-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDiagnosticsScriptEngine = &IID_IDiagnosticsScriptEngine_Value;
pub const IDiagnosticsScriptEngine = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EvaluateScript: *const fn(
            self: *const IDiagnosticsScriptEngine,
            pszScript: ?[*:0]const u16,
            pszScriptName: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        FireScriptMessageEvent: *const fn(
            self: *const IDiagnosticsScriptEngine,
            pszNames: [*]?PWSTR,
            pszValues: [*]?PWSTR,
            ulPropertyCount: u32,
        ) callconv(.winapi) HRESULT,
        Detach: *const fn(
            self: *const IDiagnosticsScriptEngine,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EvaluateScript(self: *const IDiagnosticsScriptEngine, pszScript: ?[*:0]const u16, pszScriptName: ?[*:0]const u16) callconv(.@"inline") HRESULT {
        return self.vtable.EvaluateScript(self, pszScript, pszScriptName);
    }
    pub fn FireScriptMessageEvent(self: *const IDiagnosticsScriptEngine, pszNames: [*]?PWSTR, pszValues: [*]?PWSTR, ulPropertyCount: u32) callconv(.@"inline") HRESULT {
        return self.vtable.FireScriptMessageEvent(self, pszNames, pszValues, ulPropertyCount);
    }
    pub fn Detach(self: *const IDiagnosticsScriptEngine) callconv(.@"inline") HRESULT {
        return self.vtable.Detach(self);
    }
};

const IID_IDiagnosticsScriptEngineProvider_Value = Guid.initString("3051085a-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_IDiagnosticsScriptEngineProvider = &IID_IDiagnosticsScriptEngineProvider_Value;
pub const IDiagnosticsScriptEngineProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDiagnosticsScriptEngine: *const fn(
            self: *const IDiagnosticsScriptEngineProvider,
            pScriptSite: ?*IDiagnosticsScriptEngineSite,
            fDebuggingEnabled: BOOL,
            ulProcessId: u32,
            ppEngine: ?*?*IDiagnosticsScriptEngine,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateDiagnosticsScriptEngine(self: *const IDiagnosticsScriptEngineProvider, pScriptSite: ?*IDiagnosticsScriptEngineSite, fDebuggingEnabled: BOOL, ulProcessId: u32, ppEngine: ?*?*IDiagnosticsScriptEngine) callconv(.@"inline") HRESULT {
        return self.vtable.CreateDiagnosticsScriptEngine(self, pScriptSite, fDebuggingEnabled, ulProcessId, ppEngine);
    }
};

const CLSID_OpenServiceManager_Value = Guid.initString("098870b6-39ea-480b-b8b5-dd0167c4db59");
pub const CLSID_OpenServiceManager = &CLSID_OpenServiceManager_Value;

const CLSID_OpenServiceActivityManager_Value = Guid.initString("c5efd803-50f8-43cd-9ab8-aafc1394c9e0");
pub const CLSID_OpenServiceActivityManager = &CLSID_OpenServiceActivityManager_Value;

pub const OpenServiceErrors = enum(i32) {
    NOTFOUND = -2147287038,
    NOTSUPPORTED = -2147467231,
    CANCELLED = -2147471631,
    GPDISABLED = -1072886820,
};
pub const OS_E_NOTFOUND = OpenServiceErrors.NOTFOUND;
pub const OS_E_NOTSUPPORTED = OpenServiceErrors.NOTSUPPORTED;
pub const OS_E_CANCELLED = OpenServiceErrors.CANCELLED;
pub const OS_E_GPDISABLED = OpenServiceErrors.GPDISABLED;

pub const OpenServiceActivityContentType = enum(i32) {
    None = -1,
    Document = 0,
    Selection = 1,
    Link = 2,
    Count = 3,
};
pub const ActivityContentNone = OpenServiceActivityContentType.None;
pub const ActivityContentDocument = OpenServiceActivityContentType.Document;
pub const ActivityContentSelection = OpenServiceActivityContentType.Selection;
pub const ActivityContentLink = OpenServiceActivityContentType.Link;
pub const ActivityContentCount = OpenServiceActivityContentType.Count;

const IID_IOpenServiceActivityInput_Value = Guid.initString("75cb4db9-6da0-4da3-83ce-422b6a433346");
pub const IID_IOpenServiceActivityInput = &IID_IOpenServiceActivityInput_Value;
pub const IOpenServiceActivityInput = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVariable: *const fn(
            self: *const IOpenServiceActivityInput,
            pwzVariableName: ?[*:0]const u16,
            pwzVariableType: ?[*:0]const u16,
            pbstrVariableContent: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        HasVariable: *const fn(
            self: *const IOpenServiceActivityInput,
            pwzVariableName: ?[*:0]const u16,
            pwzVariableType: ?[*:0]const u16,
            pfHasVariable: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        GetType: *const fn(
            self: *const IOpenServiceActivityInput,
            pType: ?*OpenServiceActivityContentType,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetVariable(self: *const IOpenServiceActivityInput, pwzVariableName: ?[*:0]const u16, pwzVariableType: ?[*:0]const u16, pbstrVariableContent: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetVariable(self, pwzVariableName, pwzVariableType, pbstrVariableContent);
    }
    pub fn HasVariable(self: *const IOpenServiceActivityInput, pwzVariableName: ?[*:0]const u16, pwzVariableType: ?[*:0]const u16, pfHasVariable: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.HasVariable(self, pwzVariableName, pwzVariableType, pfHasVariable);
    }
    pub fn GetType(self: *const IOpenServiceActivityInput, pType: ?*OpenServiceActivityContentType) callconv(.@"inline") HRESULT {
        return self.vtable.GetType(self, pType);
    }
};

const IID_IOpenServiceActivityOutputContext_Value = Guid.initString("e289deab-f709-49a9-b99e-282364074571");
pub const IID_IOpenServiceActivityOutputContext = &IID_IOpenServiceActivityOutputContext_Value;
pub const IOpenServiceActivityOutputContext = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Navigate: *const fn(
            self: *const IOpenServiceActivityOutputContext,
            pwzUri: ?[*:0]const u16,
            pwzMethod: ?[*:0]const u16,
            pwzHeaders: ?[*:0]const u16,
            pPostData: ?*IStream,
        ) callconv(.winapi) HRESULT,
        CanNavigate: *const fn(
            self: *const IOpenServiceActivityOutputContext,
            pwzUri: ?[*:0]const u16,
            pwzMethod: ?[*:0]const u16,
            pwzHeaders: ?[*:0]const u16,
            pPostData: ?*IStream,
            pfCanNavigate: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Navigate(self: *const IOpenServiceActivityOutputContext, pwzUri: ?[*:0]const u16, pwzMethod: ?[*:0]const u16, pwzHeaders: ?[*:0]const u16, pPostData: ?*IStream) callconv(.@"inline") HRESULT {
        return self.vtable.Navigate(self, pwzUri, pwzMethod, pwzHeaders, pPostData);
    }
    pub fn CanNavigate(self: *const IOpenServiceActivityOutputContext, pwzUri: ?[*:0]const u16, pwzMethod: ?[*:0]const u16, pwzHeaders: ?[*:0]const u16, pPostData: ?*IStream, pfCanNavigate: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.CanNavigate(self, pwzUri, pwzMethod, pwzHeaders, pPostData, pfCanNavigate);
    }
};

const IID_IOpenService_Value = Guid.initString("c2952ed1-6a89-4606-925f-1ed8b4be0630");
pub const IID_IOpenService = &IID_IOpenService_Value;
pub const IOpenService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDefault: *const fn(
            self: *const IOpenService,
            pfIsDefault: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        SetDefault: *const fn(
            self: *const IOpenService,
            fDefault: BOOL,
            hwnd: ?HWND,
        ) callconv(.winapi) HRESULT,
        GetID: *const fn(
            self: *const IOpenService,
            pbstrID: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IsDefault(self: *const IOpenService, pfIsDefault: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsDefault(self, pfIsDefault);
    }
    pub fn SetDefault(self: *const IOpenService, fDefault: BOOL, hwnd: ?HWND) callconv(.@"inline") HRESULT {
        return self.vtable.SetDefault(self, fDefault, hwnd);
    }
    pub fn GetID(self: *const IOpenService, pbstrID: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetID(self, pbstrID);
    }
};

const IID_IOpenServiceManager_Value = Guid.initString("5664125f-4e10-4e90-98e4-e4513d955a14");
pub const IID_IOpenServiceManager = &IID_IOpenServiceManager_Value;
pub const IOpenServiceManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InstallService: *const fn(
            self: *const IOpenServiceManager,
            pwzServiceUrl: ?[*:0]const u16,
            ppService: ?*?*IOpenService,
        ) callconv(.winapi) HRESULT,
        UninstallService: *const fn(
            self: *const IOpenServiceManager,
            pService: ?*IOpenService,
        ) callconv(.winapi) HRESULT,
        GetServiceByID: *const fn(
            self: *const IOpenServiceManager,
            pwzID: ?[*:0]const u16,
            ppService: ?*?*IOpenService,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn InstallService(self: *const IOpenServiceManager, pwzServiceUrl: ?[*:0]const u16, ppService: ?*?*IOpenService) callconv(.@"inline") HRESULT {
        return self.vtable.InstallService(self, pwzServiceUrl, ppService);
    }
    pub fn UninstallService(self: *const IOpenServiceManager, pService: ?*IOpenService) callconv(.@"inline") HRESULT {
        return self.vtable.UninstallService(self, pService);
    }
    pub fn GetServiceByID(self: *const IOpenServiceManager, pwzID: ?[*:0]const u16, ppService: ?*?*IOpenService) callconv(.@"inline") HRESULT {
        return self.vtable.GetServiceByID(self, pwzID, ppService);
    }
};

const IID_IOpenServiceActivity_Value = Guid.initString("13645c88-221a-4905-8ed1-4f5112cfc108");
pub const IID_IOpenServiceActivity = &IID_IOpenServiceActivity_Value;
pub const IOpenServiceActivity = extern union {
    pub const VTable = extern struct {
        base: IOpenService.VTable,
        Execute: *const fn(
            self: *const IOpenServiceActivity,
            pInput: ?*IOpenServiceActivityInput,
            pOutput: ?*IOpenServiceActivityOutputContext,
        ) callconv(.winapi) HRESULT,
        CanExecute: *const fn(
            self: *const IOpenServiceActivity,
            pInput: ?*IOpenServiceActivityInput,
            pOutput: ?*IOpenServiceActivityOutputContext,
            pfCanExecute: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        CanExecuteType: *const fn(
            self: *const IOpenServiceActivity,
            type: OpenServiceActivityContentType,
            pfCanExecute: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        Preview: *const fn(
            self: *const IOpenServiceActivity,
            pInput: ?*IOpenServiceActivityInput,
            pOutput: ?*IOpenServiceActivityOutputContext,
        ) callconv(.winapi) HRESULT,
        CanPreview: *const fn(
            self: *const IOpenServiceActivity,
            pInput: ?*IOpenServiceActivityInput,
            pOutput: ?*IOpenServiceActivityOutputContext,
            pfCanPreview: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        CanPreviewType: *const fn(
            self: *const IOpenServiceActivity,
            type: OpenServiceActivityContentType,
            pfCanPreview: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        GetStatusText: *const fn(
            self: *const IOpenServiceActivity,
            pInput: ?*IOpenServiceActivityInput,
            pbstrStatusText: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetHomepageUrl: *const fn(
            self: *const IOpenServiceActivity,
            pbstrHomepageUrl: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetDisplayName: *const fn(
            self: *const IOpenServiceActivity,
            pbstrDisplayName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetDescription: *const fn(
            self: *const IOpenServiceActivity,
            pbstrDescription: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetCategoryName: *const fn(
            self: *const IOpenServiceActivity,
            pbstrCategoryName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetIconPath: *const fn(
            self: *const IOpenServiceActivity,
            pbstrIconPath: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetIcon: *const fn(
            self: *const IOpenServiceActivity,
            fSmallIcon: BOOL,
            phIcon: ?*?HICON,
        ) callconv(.winapi) HRESULT,
        GetDescriptionFilePath: *const fn(
            self: *const IOpenServiceActivity,
            pbstrXmlPath: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetDownloadUrl: *const fn(
            self: *const IOpenServiceActivity,
            pbstrXmlUri: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetInstallUrl: *const fn(
            self: *const IOpenServiceActivity,
            pbstrInstallUri: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        IsEnabled: *const fn(
            self: *const IOpenServiceActivity,
            pfIsEnabled: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        SetEnabled: *const fn(
            self: *const IOpenServiceActivity,
            fEnable: BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IOpenService: IOpenService,
    IUnknown: IUnknown,
    pub fn Execute(self: *const IOpenServiceActivity, pInput: ?*IOpenServiceActivityInput, pOutput: ?*IOpenServiceActivityOutputContext) callconv(.@"inline") HRESULT {
        return self.vtable.Execute(self, pInput, pOutput);
    }
    pub fn CanExecute(self: *const IOpenServiceActivity, pInput: ?*IOpenServiceActivityInput, pOutput: ?*IOpenServiceActivityOutputContext, pfCanExecute: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.CanExecute(self, pInput, pOutput, pfCanExecute);
    }
    pub fn CanExecuteType(self: *const IOpenServiceActivity, @"type": OpenServiceActivityContentType, pfCanExecute: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.CanExecuteType(self, @"type", pfCanExecute);
    }
    pub fn Preview(self: *const IOpenServiceActivity, pInput: ?*IOpenServiceActivityInput, pOutput: ?*IOpenServiceActivityOutputContext) callconv(.@"inline") HRESULT {
        return self.vtable.Preview(self, pInput, pOutput);
    }
    pub fn CanPreview(self: *const IOpenServiceActivity, pInput: ?*IOpenServiceActivityInput, pOutput: ?*IOpenServiceActivityOutputContext, pfCanPreview: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.CanPreview(self, pInput, pOutput, pfCanPreview);
    }
    pub fn CanPreviewType(self: *const IOpenServiceActivity, @"type": OpenServiceActivityContentType, pfCanPreview: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.CanPreviewType(self, @"type", pfCanPreview);
    }
    pub fn GetStatusText(self: *const IOpenServiceActivity, pInput: ?*IOpenServiceActivityInput, pbstrStatusText: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetStatusText(self, pInput, pbstrStatusText);
    }
    pub fn GetHomepageUrl(self: *const IOpenServiceActivity, pbstrHomepageUrl: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetHomepageUrl(self, pbstrHomepageUrl);
    }
    pub fn GetDisplayName(self: *const IOpenServiceActivity, pbstrDisplayName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetDisplayName(self, pbstrDisplayName);
    }
    pub fn GetDescription(self: *const IOpenServiceActivity, pbstrDescription: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetDescription(self, pbstrDescription);
    }
    pub fn GetCategoryName(self: *const IOpenServiceActivity, pbstrCategoryName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetCategoryName(self, pbstrCategoryName);
    }
    pub fn GetIconPath(self: *const IOpenServiceActivity, pbstrIconPath: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetIconPath(self, pbstrIconPath);
    }
    pub fn GetIcon(self: *const IOpenServiceActivity, fSmallIcon: BOOL, phIcon: ?*?HICON) callconv(.@"inline") HRESULT {
        return self.vtable.GetIcon(self, fSmallIcon, phIcon);
    }
    pub fn GetDescriptionFilePath(self: *const IOpenServiceActivity, pbstrXmlPath: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetDescriptionFilePath(self, pbstrXmlPath);
    }
    pub fn GetDownloadUrl(self: *const IOpenServiceActivity, pbstrXmlUri: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetDownloadUrl(self, pbstrXmlUri);
    }
    pub fn GetInstallUrl(self: *const IOpenServiceActivity, pbstrInstallUri: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetInstallUrl(self, pbstrInstallUri);
    }
    pub fn IsEnabled(self: *const IOpenServiceActivity, pfIsEnabled: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsEnabled(self, pfIsEnabled);
    }
    pub fn SetEnabled(self: *const IOpenServiceActivity, fEnable: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.SetEnabled(self, fEnable);
    }
};

const IID_IEnumOpenServiceActivity_Value = Guid.initString("a436d7d2-17c3-4ef4-a1e8-5c86faff26c0");
pub const IID_IEnumOpenServiceActivity = &IID_IEnumOpenServiceActivity_Value;
pub const IEnumOpenServiceActivity = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumOpenServiceActivity,
            celt: u32,
            rgelt: [*]?*IOpenServiceActivity,
            pceltFetched: ?*u32,
        ) callconv(.winapi) HRESULT,
        Skip: *const fn(
            self: *const IEnumOpenServiceActivity,
            celt: u32,
        ) callconv(.winapi) HRESULT,
        Reset: *const fn(
            self: *const IEnumOpenServiceActivity,
        ) callconv(.winapi) HRESULT,
        Clone: *const fn(
            self: *const IEnumOpenServiceActivity,
            ppenum: ?*?*IEnumOpenServiceActivity,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumOpenServiceActivity, celt: u32, rgelt: [*]?*IOpenServiceActivity, pceltFetched: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumOpenServiceActivity, celt: u32) callconv(.@"inline") HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumOpenServiceActivity) callconv(.@"inline") HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumOpenServiceActivity, ppenum: ?*?*IEnumOpenServiceActivity) callconv(.@"inline") HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

const IID_IOpenServiceActivityCategory_Value = Guid.initString("850af9d6-7309-40b5-bdb8-786c106b2153");
pub const IID_IOpenServiceActivityCategory = &IID_IOpenServiceActivityCategory_Value;
pub const IOpenServiceActivityCategory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HasDefaultActivity: *const fn(
            self: *const IOpenServiceActivityCategory,
            pfHasDefaultActivity: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        GetDefaultActivity: *const fn(
            self: *const IOpenServiceActivityCategory,
            ppDefaultActivity: ?*?*IOpenServiceActivity,
        ) callconv(.winapi) HRESULT,
        SetDefaultActivity: *const fn(
            self: *const IOpenServiceActivityCategory,
            pActivity: ?*IOpenServiceActivity,
            hwnd: ?HWND,
        ) callconv(.winapi) HRESULT,
        GetName: *const fn(
            self: *const IOpenServiceActivityCategory,
            pbstrName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetActivityEnumerator: *const fn(
            self: *const IOpenServiceActivityCategory,
            pInput: ?*IOpenServiceActivityInput,
            pOutput: ?*IOpenServiceActivityOutputContext,
            ppEnumActivity: ?*?*IEnumOpenServiceActivity,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn HasDefaultActivity(self: *const IOpenServiceActivityCategory, pfHasDefaultActivity: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.HasDefaultActivity(self, pfHasDefaultActivity);
    }
    pub fn GetDefaultActivity(self: *const IOpenServiceActivityCategory, ppDefaultActivity: ?*?*IOpenServiceActivity) callconv(.@"inline") HRESULT {
        return self.vtable.GetDefaultActivity(self, ppDefaultActivity);
    }
    pub fn SetDefaultActivity(self: *const IOpenServiceActivityCategory, pActivity: ?*IOpenServiceActivity, hwnd: ?HWND) callconv(.@"inline") HRESULT {
        return self.vtable.SetDefaultActivity(self, pActivity, hwnd);
    }
    pub fn GetName(self: *const IOpenServiceActivityCategory, pbstrName: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetName(self, pbstrName);
    }
    pub fn GetActivityEnumerator(self: *const IOpenServiceActivityCategory, pInput: ?*IOpenServiceActivityInput, pOutput: ?*IOpenServiceActivityOutputContext, ppEnumActivity: ?*?*IEnumOpenServiceActivity) callconv(.@"inline") HRESULT {
        return self.vtable.GetActivityEnumerator(self, pInput, pOutput, ppEnumActivity);
    }
};

const IID_IEnumOpenServiceActivityCategory_Value = Guid.initString("33627a56-8c9a-4430-8fd1-b5f5c771afb6");
pub const IID_IEnumOpenServiceActivityCategory = &IID_IEnumOpenServiceActivityCategory_Value;
pub const IEnumOpenServiceActivityCategory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumOpenServiceActivityCategory,
            celt: u32,
            rgelt: [*]?*IOpenServiceActivityCategory,
            pceltFetched: ?*u32,
        ) callconv(.winapi) HRESULT,
        Skip: *const fn(
            self: *const IEnumOpenServiceActivityCategory,
            celt: u32,
        ) callconv(.winapi) HRESULT,
        Reset: *const fn(
            self: *const IEnumOpenServiceActivityCategory,
        ) callconv(.winapi) HRESULT,
        Clone: *const fn(
            self: *const IEnumOpenServiceActivityCategory,
            ppenum: ?*?*IEnumOpenServiceActivityCategory,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumOpenServiceActivityCategory, celt: u32, rgelt: [*]?*IOpenServiceActivityCategory, pceltFetched: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumOpenServiceActivityCategory, celt: u32) callconv(.@"inline") HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumOpenServiceActivityCategory) callconv(.@"inline") HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumOpenServiceActivityCategory, ppenum: ?*?*IEnumOpenServiceActivityCategory) callconv(.@"inline") HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

const IID_IOpenServiceActivityManager_Value = Guid.initString("8a2d0a9d-e920-4bdc-a291-d30f650bc4f1");
pub const IID_IOpenServiceActivityManager = &IID_IOpenServiceActivityManager_Value;
pub const IOpenServiceActivityManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCategoryEnumerator: *const fn(
            self: *const IOpenServiceActivityManager,
            eType: OpenServiceActivityContentType,
            ppEnum: ?*?*IEnumOpenServiceActivityCategory,
        ) callconv(.winapi) HRESULT,
        GetActivityByID: *const fn(
            self: *const IOpenServiceActivityManager,
            pwzActivityID: ?[*:0]const u16,
            ppActivity: ?*?*IOpenServiceActivity,
        ) callconv(.winapi) HRESULT,
        GetActivityByHomepageAndCategory: *const fn(
            self: *const IOpenServiceActivityManager,
            pwzHomepage: ?[*:0]const u16,
            pwzCategory: ?[*:0]const u16,
            ppActivity: ?*?*IOpenServiceActivity,
        ) callconv(.winapi) HRESULT,
        GetVersionCookie: *const fn(
            self: *const IOpenServiceActivityManager,
            pdwVersionCookie: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCategoryEnumerator(self: *const IOpenServiceActivityManager, eType: OpenServiceActivityContentType, ppEnum: ?*?*IEnumOpenServiceActivityCategory) callconv(.@"inline") HRESULT {
        return self.vtable.GetCategoryEnumerator(self, eType, ppEnum);
    }
    pub fn GetActivityByID(self: *const IOpenServiceActivityManager, pwzActivityID: ?[*:0]const u16, ppActivity: ?*?*IOpenServiceActivity) callconv(.@"inline") HRESULT {
        return self.vtable.GetActivityByID(self, pwzActivityID, ppActivity);
    }
    pub fn GetActivityByHomepageAndCategory(self: *const IOpenServiceActivityManager, pwzHomepage: ?[*:0]const u16, pwzCategory: ?[*:0]const u16, ppActivity: ?*?*IOpenServiceActivity) callconv(.@"inline") HRESULT {
        return self.vtable.GetActivityByHomepageAndCategory(self, pwzHomepage, pwzCategory, ppActivity);
    }
    pub fn GetVersionCookie(self: *const IOpenServiceActivityManager, pdwVersionCookie: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetVersionCookie(self, pdwVersionCookie);
    }
};

const IID_IPersistHistory_Value = Guid.initString("91a565c1-e38f-11d0-94bf-00a0c9055cbf");
pub const IID_IPersistHistory = &IID_IPersistHistory_Value;
pub const IPersistHistory = extern union {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        LoadHistory: *const fn(
            self: *const IPersistHistory,
            pStream: ?*IStream,
            pbc: ?*IBindCtx,
        ) callconv(.winapi) HRESULT,
        SaveHistory: *const fn(
            self: *const IPersistHistory,
            pStream: ?*IStream,
        ) callconv(.winapi) HRESULT,
        SetPositionCookie: *const fn(
            self: *const IPersistHistory,
            dwPositioncookie: u32,
        ) callconv(.winapi) HRESULT,
        GetPositionCookie: *const fn(
            self: *const IPersistHistory,
            pdwPositioncookie: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IPersist: IPersist,
    IUnknown: IUnknown,
    pub fn LoadHistory(self: *const IPersistHistory, pStream: ?*IStream, pbc: ?*IBindCtx) callconv(.@"inline") HRESULT {
        return self.vtable.LoadHistory(self, pStream, pbc);
    }
    pub fn SaveHistory(self: *const IPersistHistory, pStream: ?*IStream) callconv(.@"inline") HRESULT {
        return self.vtable.SaveHistory(self, pStream);
    }
    pub fn SetPositionCookie(self: *const IPersistHistory, dwPositioncookie: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SetPositionCookie(self, dwPositioncookie);
    }
    pub fn GetPositionCookie(self: *const IPersistHistory, pdwPositioncookie: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.GetPositionCookie(self, pdwPositioncookie);
    }
};

pub const ADDURL_FLAG = enum(i32) {
    FIRST = 0,
    ADDTOCACHE = 1,
    Max = 2147483647,
    pub const ADDTOHISTORYANDCACHE = .FIRST;
};
pub const ADDURL_FIRST = ADDURL_FLAG.FIRST;
pub const ADDURL_ADDTOHISTORYANDCACHE = ADDURL_FLAG.FIRST;
pub const ADDURL_ADDTOCACHE = ADDURL_FLAG.ADDTOCACHE;
pub const ADDURL_Max = ADDURL_FLAG.Max;

pub const STATURL = extern struct {
    cbSize: u32,
    pwcsUrl: ?PWSTR,
    pwcsTitle: ?PWSTR,
    ftLastVisited: FILETIME,
    ftLastUpdated: FILETIME,
    ftExpires: FILETIME,
    dwFlags: u32,
};

const IID_IEnumSTATURL_Value = Guid.initString("3c374a42-bae4-11cf-bf7d-00aa006946ee");
pub const IID_IEnumSTATURL = &IID_IEnumSTATURL_Value;
pub const IEnumSTATURL = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumSTATURL,
            celt: u32,
            rgelt: ?*STATURL,
            pceltFetched: ?*u32,
        ) callconv(.winapi) HRESULT,
        Skip: *const fn(
            self: *const IEnumSTATURL,
            celt: u32,
        ) callconv(.winapi) HRESULT,
        Reset: *const fn(
            self: *const IEnumSTATURL,
        ) callconv(.winapi) HRESULT,
        Clone: *const fn(
            self: *const IEnumSTATURL,
            ppenum: ?*?*IEnumSTATURL,
        ) callconv(.winapi) HRESULT,
        SetFilter: *const fn(
            self: *const IEnumSTATURL,
            poszFilter: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumSTATURL, celt: u32, rgelt: ?*STATURL, pceltFetched: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumSTATURL, celt: u32) callconv(.@"inline") HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumSTATURL) callconv(.@"inline") HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumSTATURL, ppenum: ?*?*IEnumSTATURL) callconv(.@"inline") HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
    pub fn SetFilter(self: *const IEnumSTATURL, poszFilter: ?[*:0]const u16, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SetFilter(self, poszFilter, dwFlags);
    }
};

const IID_IUrlHistoryStg_Value = Guid.initString("3c374a41-bae4-11cf-bf7d-00aa006946ee");
pub const IID_IUrlHistoryStg = &IID_IUrlHistoryStg_Value;
pub const IUrlHistoryStg = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddUrl: *const fn(
            self: *const IUrlHistoryStg,
            pocsUrl: ?[*:0]const u16,
            pocsTitle: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
        DeleteUrl: *const fn(
            self: *const IUrlHistoryStg,
            pocsUrl: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(.winapi) HRESULT,
        QueryUrl: *const fn(
            self: *const IUrlHistoryStg,
            pocsUrl: ?[*:0]const u16,
            dwFlags: u32,
            lpSTATURL: ?*STATURL,
        ) callconv(.winapi) HRESULT,
        BindToObject: *const fn(
            self: *const IUrlHistoryStg,
            pocsUrl: ?[*:0]const u16,
            riid: ?*const Guid,
            ppvOut: **anyopaque,
        ) callconv(.winapi) HRESULT,
        EnumUrls: *const fn(
            self: *const IUrlHistoryStg,
            ppEnum: ?*?*IEnumSTATURL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddUrl(self: *const IUrlHistoryStg, pocsUrl: ?[*:0]const u16, pocsTitle: ?[*:0]const u16, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.AddUrl(self, pocsUrl, pocsTitle, dwFlags);
    }
    pub fn DeleteUrl(self: *const IUrlHistoryStg, pocsUrl: ?[*:0]const u16, dwFlags: u32) callconv(.@"inline") HRESULT {
        return self.vtable.DeleteUrl(self, pocsUrl, dwFlags);
    }
    pub fn QueryUrl(self: *const IUrlHistoryStg, pocsUrl: ?[*:0]const u16, dwFlags: u32, lpSTATURL: ?*STATURL) callconv(.@"inline") HRESULT {
        return self.vtable.QueryUrl(self, pocsUrl, dwFlags, lpSTATURL);
    }
    pub fn BindToObject(self: *const IUrlHistoryStg, pocsUrl: ?[*:0]const u16, riid: ?*const Guid, ppvOut: **anyopaque) callconv(.@"inline") HRESULT {
        return self.vtable.BindToObject(self, pocsUrl, riid, ppvOut);
    }
    pub fn EnumUrls(self: *const IUrlHistoryStg, ppEnum: ?*?*IEnumSTATURL) callconv(.@"inline") HRESULT {
        return self.vtable.EnumUrls(self, ppEnum);
    }
};

const IID_IUrlHistoryStg2_Value = Guid.initString("afa0dc11-c313-11d0-831a-00c04fd5ae38");
pub const IID_IUrlHistoryStg2 = &IID_IUrlHistoryStg2_Value;
pub const IUrlHistoryStg2 = extern union {
    pub const VTable = extern struct {
        base: IUrlHistoryStg.VTable,
        AddUrlAndNotify: *const fn(
            self: *const IUrlHistoryStg2,
            pocsUrl: ?[*:0]const u16,
            pocsTitle: ?[*:0]const u16,
            dwFlags: u32,
            fWriteHistory: BOOL,
            poctNotify: ?*IOleCommandTarget,
            punkISFolder: ?*IUnknown,
        ) callconv(.winapi) HRESULT,
        ClearHistory: *const fn(
            self: *const IUrlHistoryStg2,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUrlHistoryStg: IUrlHistoryStg,
    IUnknown: IUnknown,
    pub fn AddUrlAndNotify(self: *const IUrlHistoryStg2, pocsUrl: ?[*:0]const u16, pocsTitle: ?[*:0]const u16, dwFlags: u32, fWriteHistory: BOOL, poctNotify: ?*IOleCommandTarget, punkISFolder: ?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.AddUrlAndNotify(self, pocsUrl, pocsTitle, dwFlags, fWriteHistory, poctNotify, punkISFolder);
    }
    pub fn ClearHistory(self: *const IUrlHistoryStg2) callconv(.@"inline") HRESULT {
        return self.vtable.ClearHistory(self);
    }
};

const IID_IUrlHistoryNotify_Value = Guid.initString("bc40bec1-c493-11d0-831b-00c04fd5ae38");
pub const IID_IUrlHistoryNotify = &IID_IUrlHistoryNotify_Value;
pub const IUrlHistoryNotify = extern union {
    pub const VTable = extern struct {
        base: IOleCommandTarget.VTable,
    };
    vtable: *const VTable,
    IOleCommandTarget: IOleCommandTarget,
    IUnknown: IUnknown,
};

const IID_IWebBrowserEventsService_Value = Guid.initString("54a8f188-9ebd-4795-ad16-9b4945119636");
pub const IID_IWebBrowserEventsService = &IID_IWebBrowserEventsService_Value;
pub const IWebBrowserEventsService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FireBeforeNavigate2Event: *const fn(
            self: *const IWebBrowserEventsService,
            pfCancel: ?*i16,
        ) callconv(.winapi) HRESULT,
        FireNavigateComplete2Event: *const fn(
            self: *const IWebBrowserEventsService,
        ) callconv(.winapi) HRESULT,
        FireDownloadBeginEvent: *const fn(
            self: *const IWebBrowserEventsService,
        ) callconv(.winapi) HRESULT,
        FireDownloadCompleteEvent: *const fn(
            self: *const IWebBrowserEventsService,
        ) callconv(.winapi) HRESULT,
        FireDocumentCompleteEvent: *const fn(
            self: *const IWebBrowserEventsService,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FireBeforeNavigate2Event(self: *const IWebBrowserEventsService, pfCancel: ?*i16) callconv(.@"inline") HRESULT {
        return self.vtable.FireBeforeNavigate2Event(self, pfCancel);
    }
    pub fn FireNavigateComplete2Event(self: *const IWebBrowserEventsService) callconv(.@"inline") HRESULT {
        return self.vtable.FireNavigateComplete2Event(self);
    }
    pub fn FireDownloadBeginEvent(self: *const IWebBrowserEventsService) callconv(.@"inline") HRESULT {
        return self.vtable.FireDownloadBeginEvent(self);
    }
    pub fn FireDownloadCompleteEvent(self: *const IWebBrowserEventsService) callconv(.@"inline") HRESULT {
        return self.vtable.FireDownloadCompleteEvent(self);
    }
    pub fn FireDocumentCompleteEvent(self: *const IWebBrowserEventsService) callconv(.@"inline") HRESULT {
        return self.vtable.FireDocumentCompleteEvent(self);
    }
};

const IID_IWebBrowserEventsUrlService_Value = Guid.initString("87cc5d04-eafa-4833-9820-8f986530cc00");
pub const IID_IWebBrowserEventsUrlService = &IID_IWebBrowserEventsUrlService_Value;
pub const IWebBrowserEventsUrlService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUrlForEvents: *const fn(
            self: *const IWebBrowserEventsUrlService,
            pUrl: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetUrlForEvents(self: *const IWebBrowserEventsUrlService, pUrl: ?*?BSTR) callconv(.@"inline") HRESULT {
        return self.vtable.GetUrlForEvents(self, pUrl);
    }
};

const IID_ITimerService_Value = Guid.initString("3050f35f-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITimerService = &IID_ITimerService_Value;
pub const ITimerService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTimer: *const fn(
            self: *const ITimerService,
            pReferenceTimer: ?*ITimer,
            ppNewTimer: ?*?*ITimer,
        ) callconv(.winapi) HRESULT,
        GetNamedTimer: *const fn(
            self: *const ITimerService,
            rguidName: ?*const Guid,
            ppTimer: ?*?*ITimer,
        ) callconv(.winapi) HRESULT,
        SetNamedTimerReference: *const fn(
            self: *const ITimerService,
            rguidName: ?*const Guid,
            pReferenceTimer: ?*ITimer,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateTimer(self: *const ITimerService, pReferenceTimer: ?*ITimer, ppNewTimer: ?*?*ITimer) callconv(.@"inline") HRESULT {
        return self.vtable.CreateTimer(self, pReferenceTimer, ppNewTimer);
    }
    pub fn GetNamedTimer(self: *const ITimerService, rguidName: ?*const Guid, ppTimer: ?*?*ITimer) callconv(.@"inline") HRESULT {
        return self.vtable.GetNamedTimer(self, rguidName, ppTimer);
    }
    pub fn SetNamedTimerReference(self: *const ITimerService, rguidName: ?*const Guid, pReferenceTimer: ?*ITimer) callconv(.@"inline") HRESULT {
        return self.vtable.SetNamedTimerReference(self, rguidName, pReferenceTimer);
    }
};

const IID_ITimer_Value = Guid.initString("3050f360-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITimer = &IID_ITimer_Value;
pub const ITimer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn(
            self: *const ITimer,
            vtimeMin: VARIANT,
            vtimeMax: VARIANT,
            vtimeInterval: VARIANT,
            dwFlags: u32,
            pTimerSink: ?*ITimerSink,
            pdwCookie: ?*u32,
        ) callconv(.winapi) HRESULT,
        Unadvise: *const fn(
            self: *const ITimer,
            dwCookie: u32,
        ) callconv(.winapi) HRESULT,
        Freeze: *const fn(
            self: *const ITimer,
            fFreeze: BOOL,
        ) callconv(.winapi) HRESULT,
        GetTime: *const fn(
            self: *const ITimer,
            pvtime: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Advise(self: *const ITimer, vtimeMin: VARIANT, vtimeMax: VARIANT, vtimeInterval: VARIANT, dwFlags: u32, pTimerSink: ?*ITimerSink, pdwCookie: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.Advise(self, vtimeMin, vtimeMax, vtimeInterval, dwFlags, pTimerSink, pdwCookie);
    }
    pub fn Unadvise(self: *const ITimer, dwCookie: u32) callconv(.@"inline") HRESULT {
        return self.vtable.Unadvise(self, dwCookie);
    }
    pub fn Freeze(self: *const ITimer, fFreeze: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.Freeze(self, fFreeze);
    }
    pub fn GetTime(self: *const ITimer, pvtime: ?*VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.GetTime(self, pvtime);
    }
};

const IID_ITimerEx_Value = Guid.initString("30510414-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITimerEx = &IID_ITimerEx_Value;
pub const ITimerEx = extern union {
    pub const VTable = extern struct {
        base: ITimer.VTable,
        SetMode: *const fn(
            self: *const ITimerEx,
            dwMode: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    ITimer: ITimer,
    IUnknown: IUnknown,
    pub fn SetMode(self: *const ITimerEx, dwMode: u32) callconv(.@"inline") HRESULT {
        return self.vtable.SetMode(self, dwMode);
    }
};

const IID_ITimerSink_Value = Guid.initString("3050f361-98b5-11cf-bb82-00aa00bdce0b");
pub const IID_ITimerSink = &IID_ITimerSink_Value;
pub const ITimerSink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnTimer: *const fn(
            self: *const ITimerSink,
            vtimeAdvise: VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnTimer(self: *const ITimerSink, vtimeAdvise: VARIANT) callconv(.@"inline") HRESULT {
        return self.vtable.OnTimer(self, vtimeAdvise);
    }
};

const IID_IMapMIMEToCLSID_Value = Guid.initString("d9e89500-30fa-11d0-b724-00aa006c1a01");
pub const IID_IMapMIMEToCLSID = &IID_IMapMIMEToCLSID_Value;
pub const IMapMIMEToCLSID = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableDefaultMappings: *const fn(
            self: *const IMapMIMEToCLSID,
            bEnable: BOOL,
        ) callconv(.winapi) HRESULT,
        MapMIMEToCLSID: *const fn(
            self: *const IMapMIMEToCLSID,
            pszMIMEType: ?[*:0]const u16,
            pCLSID: ?*Guid,
        ) callconv(.winapi) HRESULT,
        SetMapping: *const fn(
            self: *const IMapMIMEToCLSID,
            pszMIMEType: ?[*:0]const u16,
            dwMapMode: u32,
            clsid: ?*const Guid,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnableDefaultMappings(self: *const IMapMIMEToCLSID, bEnable: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.EnableDefaultMappings(self, bEnable);
    }
    pub fn MapMIMEToCLSID(self: *const IMapMIMEToCLSID, pszMIMEType: ?[*:0]const u16, pCLSID: ?*Guid) callconv(.@"inline") HRESULT {
        return self.vtable.MapMIMEToCLSID(self, pszMIMEType, pCLSID);
    }
    pub fn SetMapping(self: *const IMapMIMEToCLSID, pszMIMEType: ?[*:0]const u16, dwMapMode: u32, clsid: ?*const Guid) callconv(.@"inline") HRESULT {
        return self.vtable.SetMapping(self, pszMIMEType, dwMapMode, clsid);
    }
};

const IID_IImageDecodeFilter_Value = Guid.initString("a3ccedf3-2de2-11d0-86f4-00a0c913f750");
pub const IID_IImageDecodeFilter = &IID_IImageDecodeFilter_Value;
pub const IImageDecodeFilter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IImageDecodeFilter,
            pEventSink: ?*IImageDecodeEventSink,
        ) callconv(.winapi) HRESULT,
        Process: *const fn(
            self: *const IImageDecodeFilter,
            pStream: ?*IStream,
        ) callconv(.winapi) HRESULT,
        Terminate: *const fn(
            self: *const IImageDecodeFilter,
            hrStatus: HRESULT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IImageDecodeFilter, pEventSink: ?*IImageDecodeEventSink) callconv(.@"inline") HRESULT {
        return self.vtable.Initialize(self, pEventSink);
    }
    pub fn Process(self: *const IImageDecodeFilter, pStream: ?*IStream) callconv(.@"inline") HRESULT {
        return self.vtable.Process(self, pStream);
    }
    pub fn Terminate(self: *const IImageDecodeFilter, hrStatus: HRESULT) callconv(.@"inline") HRESULT {
        return self.vtable.Terminate(self, hrStatus);
    }
};

const IID_IImageDecodeEventSink_Value = Guid.initString("baa342a0-2ded-11d0-86f4-00a0c913f750");
pub const IID_IImageDecodeEventSink = &IID_IImageDecodeEventSink_Value;
pub const IImageDecodeEventSink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSurface: *const fn(
            self: *const IImageDecodeEventSink,
            nWidth: i32,
            nHeight: i32,
            bfid: ?*const Guid,
            nPasses: u32,
            dwHints: u32,
            ppSurface: ?*?*IUnknown,
        ) callconv(.winapi) HRESULT,
        OnBeginDecode: *const fn(
            self: *const IImageDecodeEventSink,
            pdwEvents: ?*u32,
            pnFormats: ?*u32,
            ppFormats: [*]?*Guid,
        ) callconv(.winapi) HRESULT,
        OnBitsComplete: *const fn(
            self: *const IImageDecodeEventSink,
        ) callconv(.winapi) HRESULT,
        OnDecodeComplete: *const fn(
            self: *const IImageDecodeEventSink,
            hrStatus: HRESULT,
        ) callconv(.winapi) HRESULT,
        OnPalette: *const fn(
            self: *const IImageDecodeEventSink,
        ) callconv(.winapi) HRESULT,
        OnProgress: *const fn(
            self: *const IImageDecodeEventSink,
            pBounds: ?*RECT,
            bComplete: BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSurface(self: *const IImageDecodeEventSink, nWidth: i32, nHeight: i32, bfid: ?*const Guid, nPasses: u32, dwHints: u32, ppSurface: ?*?*IUnknown) callconv(.@"inline") HRESULT {
        return self.vtable.GetSurface(self, nWidth, nHeight, bfid, nPasses, dwHints, ppSurface);
    }
    pub fn OnBeginDecode(self: *const IImageDecodeEventSink, pdwEvents: ?*u32, pnFormats: ?*u32, ppFormats: [*]?*Guid) callconv(.@"inline") HRESULT {
        return self.vtable.OnBeginDecode(self, pdwEvents, pnFormats, ppFormats);
    }
    pub fn OnBitsComplete(self: *const IImageDecodeEventSink) callconv(.@"inline") HRESULT {
        return self.vtable.OnBitsComplete(self);
    }
    pub fn OnDecodeComplete(self: *const IImageDecodeEventSink, hrStatus: HRESULT) callconv(.@"inline") HRESULT {
        return self.vtable.OnDecodeComplete(self, hrStatus);
    }
    pub fn OnPalette(self: *const IImageDecodeEventSink) callconv(.@"inline") HRESULT {
        return self.vtable.OnPalette(self);
    }
    pub fn OnProgress(self: *const IImageDecodeEventSink, pBounds: ?*RECT, bComplete: BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.OnProgress(self, pBounds, bComplete);
    }
};

const IID_IImageDecodeEventSink2_Value = Guid.initString("8ebd8a57-8a96-48c9-84a6-962e2db9c931");
pub const IID_IImageDecodeEventSink2 = &IID_IImageDecodeEventSink2_Value;
pub const IImageDecodeEventSink2 = extern union {
    pub const VTable = extern struct {
        base: IImageDecodeEventSink.VTable,
        IsAlphaPremultRequired: *const fn(
            self: *const IImageDecodeEventSink2,
            pfPremultAlpha: ?*BOOL,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IImageDecodeEventSink: IImageDecodeEventSink,
    IUnknown: IUnknown,
    pub fn IsAlphaPremultRequired(self: *const IImageDecodeEventSink2, pfPremultAlpha: ?*BOOL) callconv(.@"inline") HRESULT {
        return self.vtable.IsAlphaPremultRequired(self, pfPremultAlpha);
    }
};

const CLSID_CoDitherToRGB8_Value = Guid.initString("a860ce50-3910-11d0-86fc-00a0c913f750");
pub const CLSID_CoDitherToRGB8 = &CLSID_CoDitherToRGB8_Value;

const CLSID_CoSniffStream_Value = Guid.initString("6a01fda0-30df-11d0-b724-00aa006c1a01");
pub const CLSID_CoSniffStream = &CLSID_CoSniffStream_Value;

const CLSID_CoMapMIMEToCLSID_Value = Guid.initString("30c3b080-30fb-11d0-b724-00aa006c1a01");
pub const CLSID_CoMapMIMEToCLSID = &CLSID_CoMapMIMEToCLSID_Value;

const IID_ISniffStream_Value = Guid.initString("4ef17940-30e0-11d0-b724-00aa006c1a01");
pub const IID_ISniffStream = &IID_ISniffStream_Value;
pub const ISniffStream = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn(
            self: *const ISniffStream,
            pStream: ?*IStream,
        ) callconv(.winapi) HRESULT,
        Peek: *const fn(
            self: *const ISniffStream,
            pBuffer: ?*anyopaque,
            nBytes: u32,
            pnBytesRead: ?*u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Init(self: *const ISniffStream, pStream: ?*IStream) callconv(.@"inline") HRESULT {
        return self.vtable.Init(self, pStream);
    }
    pub fn Peek(self: *const ISniffStream, pBuffer: ?*anyopaque, nBytes: u32, pnBytesRead: ?*u32) callconv(.@"inline") HRESULT {
        return self.vtable.Peek(self, pBuffer, nBytes, pnBytesRead);
    }
};

const IID_IDithererImpl_Value = Guid.initString("7c48e840-3910-11d0-86fc-00a0c913f750");
pub const IID_IDithererImpl = &IID_IDithererImpl_Value;
pub const IDithererImpl = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDestColorTable: *const fn(
            self: *const IDithererImpl,
            nColors: u32,
            prgbColors: ?*const RGBQUAD,
        ) callconv(.winapi) HRESULT,
        SetEventSink: *const fn(
            self: *const IDithererImpl,
            pEventSink: ?*IImageDecodeEventSink,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetDestColorTable(self: *const IDithererImpl, nColors: u32, prgbColors: ?*const RGBQUAD) callconv(.@"inline") HRESULT {
        return self.vtable.SetDestColorTable(self, nColors, prgbColors);
    }
    pub fn SetEventSink(self: *const IDithererImpl, pEventSink: ?*IImageDecodeEventSink) callconv(.@"inline") HRESULT {
        return self.vtable.SetEventSink(self, pEventSink);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (29)
//--------------------------------------------------------------------------------
pub extern "msrating" fn RatingEnable(
    hwndParent: ?HWND,
    pszUsername: ?[*:0]const u8,
    fEnable: BOOL,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingEnableW(
    hwndParent: ?HWND,
    pszUsername: ?[*:0]const u16,
    fEnable: BOOL,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingCheckUserAccess(
    pszUsername: ?[*:0]const u8,
    pszURL: ?[*:0]const u8,
    pszRatingInfo: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 4?
    pData: ?*u8,
    cbData: u32,
    ppRatingDetails: ?*?*anyopaque,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingCheckUserAccessW(
    pszUsername: ?[*:0]const u16,
    pszURL: ?[*:0]const u16,
    pszRatingInfo: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 4?
    pData: ?*u8,
    cbData: u32,
    ppRatingDetails: ?*?*anyopaque,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingAccessDeniedDialog(
    hDlg: ?HWND,
    pszUsername: ?[*:0]const u8,
    pszContentDescription: ?[*:0]const u8,
    pRatingDetails: ?*anyopaque,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingAccessDeniedDialogW(
    hDlg: ?HWND,
    pszUsername: ?[*:0]const u16,
    pszContentDescription: ?[*:0]const u16,
    pRatingDetails: ?*anyopaque,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingAccessDeniedDialog2(
    hDlg: ?HWND,
    pszUsername: ?[*:0]const u8,
    pRatingDetails: ?*anyopaque,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingAccessDeniedDialog2W(
    hDlg: ?HWND,
    pszUsername: ?[*:0]const u16,
    pRatingDetails: ?*anyopaque,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingFreeDetails(
    pRatingDetails: ?*anyopaque,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingObtainCancel(
    hRatingObtainQuery: ?HANDLE,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingObtainQuery(
    pszTargetUrl: ?[*:0]const u8,
    dwUserData: u32,
    fCallback: isize,
    phRatingObtainQuery: ?*?HANDLE,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingObtainQueryW(
    pszTargetUrl: ?[*:0]const u16,
    dwUserData: u32,
    fCallback: isize,
    phRatingObtainQuery: ?*?HANDLE,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingSetupUI(
    hDlg: ?HWND,
    pszUsername: ?[*:0]const u8,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingSetupUIW(
    hDlg: ?HWND,
    pszUsername: ?[*:0]const u16,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingAddToApprovedSites(
    hDlg: ?HWND,
    cbPasswordBlob: u32,
    // TODO: what to do with BytesParamIndex 1?
    pbPasswordBlob: ?*u8,
    lpszUrl: ?[*:0]const u16,
    fAlwaysNever: BOOL,
    fSitePage: BOOL,
    fApprovedSitesEnforced: BOOL,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingClickedOnPRFInternal(
    hWndOwner: ?HWND,
    param1: ?HINSTANCE,
    lpszFileName: ?PSTR,
    nShow: i32,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingClickedOnRATInternal(
    hWndOwner: ?HWND,
    param1: ?HINSTANCE,
    lpszFileName: ?PSTR,
    nShow: i32,
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingEnabledQuery(
) callconv(.winapi) HRESULT;

pub extern "msrating" fn RatingInit(
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn CreateMIMEMap(
    ppMap: ?*?*IMapMIMEToCLSID,
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn DecodeImage(
    pStream: ?*IStream,
    pMap: ?*IMapMIMEToCLSID,
    pEventSink: ?*IUnknown,
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn SniffStream(
    pInStream: ?*IStream,
    pnFormat: ?*u32,
    ppOutStream: ?*?*IStream,
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn GetMaxMIMEIDBytes(
    pnMaxBytes: ?*u32,
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn IdentifyMIMEType(
    pbBytes: ?*const u8,
    nBytes: u32,
    pnFormat: ?*u32,
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn ComputeInvCMAP(
    pRGBColors: ?*const RGBQUAD,
    nColors: u32,
    pInvTable: ?*u8,
    cbTable: u32,
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn DitherTo8(
    pDestBits: ?*u8,
    nDestPitch: i32,
    pSrcBits: ?*u8,
    nSrcPitch: i32,
    bfidSrc: ?*const Guid,
    prgbDestColors: ?*RGBQUAD,
    prgbSrcColors: ?*RGBQUAD,
    pbDestInvMap: ?*u8,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    lDestTrans: i32,
    lSrcTrans: i32,
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn CreateDDrawSurfaceOnDIB(
    hbmDib: ?HBITMAP,
    ppSurface: ?*?*IDirectDrawSurface,
) callconv(.winapi) HRESULT;

pub extern "imgutil" fn DecodeImageEx(
    pStream: ?*IStream,
    pMap: ?*IMapMIMEToCLSID,
    pEventSink: ?*IUnknown,
    pszMIMETypeParam: ?[*:0]const u16,
) callconv(.winapi) HRESULT;

pub extern "shdocvw" fn DoPrivacyDlg(
    hwndOwner: ?HWND,
    pszUrl: ?[*:0]const u16,
    pPrivacyEnum: ?*IEnumPrivacyRecords,
    fReportAllSites: BOOL,
) callconv(.winapi) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (51)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BINDINFO = @import("../system/com.zig").BINDINFO;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const DXGI_FORMAT = @import("../graphics/dxgi/common.zig").DXGI_FORMAT;
const DXGI_MODE_ROTATION = @import("../graphics/dxgi/common.zig").DXGI_MODE_ROTATION;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HDC = @import("../graphics/gdi.zig").HDC;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HRGN = @import("../graphics/gdi.zig").HRGN;
const HWND = @import("../foundation.zig").HWND;
const IActiveIMMApp = @import("../ui/input/ime.zig").IActiveIMMApp;
const IActiveScriptError = @import("../system/diagnostics/debug.zig").IActiveScriptError;
const IBindCtx = @import("../system/com.zig").IBindCtx;
const IBindStatusCallback = @import("../system/com.zig").IBindStatusCallback;
const IClassFactory = @import("../system/com.zig").IClassFactory;
const IDataObject = @import("../system/com.zig").IDataObject;
const IDirectDrawSurface = @import("../graphics/direct_draw.zig").IDirectDrawSurface;
const IDispatch = @import("../system/com.zig").IDispatch;
const IDispatchEx = @import("../system/ole.zig").IDispatchEx;
const IDropTarget = @import("../system/ole.zig").IDropTarget;
const IEnumUnknown = @import("../system/com.zig").IEnumUnknown;
const IInspectable = @import("../system/win_rt.zig").IInspectable;
const IMoniker = @import("../system/com.zig").IMoniker;
const IOleCommandTarget = @import("../system/ole.zig").IOleCommandTarget;
const IOleContainer = @import("../system/ole.zig").IOleContainer;
const IOleInPlaceActiveObject = @import("../system/ole.zig").IOleInPlaceActiveObject;
const IOleInPlaceFrame = @import("../system/ole.zig").IOleInPlaceFrame;
const IOleInPlaceUIWindow = @import("../system/ole.zig").IOleInPlaceUIWindow;
const IPersist = @import("../system/com.zig").IPersist;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const IUri = @import("../system/com.zig").IUri;
const LOGFONTW = @import("../graphics/gdi.zig").LOGFONTW;
const LPARAM = @import("../foundation.zig").LPARAM;
const LRESULT = @import("../foundation.zig").LRESULT;
const LUID = @import("../foundation.zig").LUID;
const MSG = @import("../ui/windows_and_messaging.zig").MSG;
const POINT = @import("../foundation.zig").POINT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const RGBQUAD = @import("../graphics/gdi.zig").RGBQUAD;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const SIZE = @import("../foundation.zig").SIZE;
const VARIANT = @import("../system/com.zig").VARIANT;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "SHOWHTMLDIALOGFN")) { _ = SHOWHTMLDIALOGFN; }
    if (@hasDecl(@This(), "SHOWHTMLDIALOGEXFN")) { _ = SHOWHTMLDIALOGEXFN; }
    if (@hasDecl(@This(), "SHOWMODELESSHTMLDIALOGFN")) { _ = SHOWMODELESSHTMLDIALOGFN; }
    if (@hasDecl(@This(), "IEREGISTERXMLNSFN")) { _ = IEREGISTERXMLNSFN; }
    if (@hasDecl(@This(), "IEISXMLNSREGISTEREDFN")) { _ = IEISXMLNSREGISTEREDFN; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
